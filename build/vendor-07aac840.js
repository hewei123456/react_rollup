define(['exports'], function (exports) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, basedir, module) {
		return module = {
		  path: basedir,
		  exports: {},
		  require: function (path, base) {
	      return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
	    }
		}, fn(module, module.exports), module.exports;
	}

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
	}

	var _global = createCommonjsModule(function (module) {
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	});

	var hasOwnProperty = {}.hasOwnProperty;
	var _has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var _fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var _descriptors = !_fails(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var _core = createCommonjsModule(function (module) {
	var core = module.exports = { version: '2.6.11' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	});

	var _isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	var _anObject = function (it) {
	  if (!_isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

	var document$1 = _global.document;
	// typeof document.createElement is 'object' in old IE
	var is = _isObject(document$1) && _isObject(document$1.createElement);
	var _domCreate = function (it) {
	  return is ? document$1.createElement(it) : {};
	};

	var _ie8DomDefine = !_descriptors && !_fails(function () {
	  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive = function (it, S) {
	  if (!_isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var dP = Object.defineProperty;

	var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  _anObject(O);
	  P = _toPrimitive(P, true);
	  _anObject(Attributes);
	  if (_ie8DomDefine) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var _objectDp = {
		f: f
	};

	var _propertyDesc = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _hide = _descriptors ? function (object, key, value) {
	  return _objectDp.f(object, key, _propertyDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var id = 0;
	var px = Math.random();
	var _uid = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

	var _library = false;

	var _shared = createCommonjsModule(function (module) {
	var SHARED = '__core-js_shared__';
	var store = _global[SHARED] || (_global[SHARED] = {});

	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: _core.version,
	  mode:  'global',
	  copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
	});
	});

	var _functionToString = _shared('native-function-to-string', Function.toString);

	var _redefine = createCommonjsModule(function (module) {
	var SRC = _uid('src');

	var TO_STRING = 'toString';
	var TPL = ('' + _functionToString).split(TO_STRING);

	_core.inspectSource = function (it) {
	  return _functionToString.call(it);
	};

	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
	  if (O[key] === val) return;
	  if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if (O === _global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    _hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    _hide(O, key, val);
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || _functionToString.call(this);
	});
	});

	var _aFunction = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

	// optional / simple context binding

	var _ctx = function (fn, that, length) {
	  _aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
	    // extend global
	    if (target) _redefine(target, key, out, type & $export.U);
	    // export
	    if (exports[key] != out) _hide(exports, key, exp);
	    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
	  }
	};
	_global.core = _core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	var _export = $export;

	var _meta = createCommonjsModule(function (module) {
	var META = _uid('meta');


	var setDesc = _objectDp.f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !_fails(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!_has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!_has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};
	});

	var _wks = createCommonjsModule(function (module) {
	var store = _shared('wks');

	var Symbol = _global.Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
	};

	$exports.store = store;
	});

	var def = _objectDp.f;

	var TAG = _wks('toStringTag');

	var _setToStringTag = function (it, tag, stat) {
	  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};

	var f$1 = _wks;

	var _wksExt = {
		f: f$1
	};

	var defineProperty = _objectDp.f;
	var _wksDefine = function (name) {
	  var $Symbol = _core.Symbol || (_core.Symbol =  _global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: _wksExt.f(name) });
	};

	var toString = {}.toString;

	var _cof = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	// fallback for non-array-like ES3 and non-enumerable old V8 strings

	// eslint-disable-next-line no-prototype-builtins
	var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return _cof(it) == 'String' ? it.split('') : Object(it);
	};

	// 7.2.1 RequireObjectCoercible(argument)
	var _defined = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

	// to indexed object, toObject with fallback for non-array-like ES3 strings


	var _toIobject = function (it) {
	  return _iobject(_defined(it));
	};

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	var _toInteger = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

	// 7.1.15 ToLength

	var min = Math.min;
	var _toLength = function (it) {
	  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;
	var _toAbsoluteIndex = function (index, length) {
	  index = _toInteger(index);
	  return index < 0 ? max(index + length, 0) : min$1(index, length);
	};

	// false -> Array#indexOf
	// true  -> Array#includes



	var _arrayIncludes = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = _toIobject($this);
	    var length = _toLength(O.length);
	    var index = _toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var shared = _shared('keys');

	var _sharedKey = function (key) {
	  return shared[key] || (shared[key] = _uid(key));
	};

	var arrayIndexOf = _arrayIncludes(false);
	var IE_PROTO = _sharedKey('IE_PROTO');

	var _objectKeysInternal = function (object, names) {
	  var O = _toIobject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (_has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE 8- don't enum bug keys
	var _enumBugKeys = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)



	var _objectKeys = Object.keys || function keys(O) {
	  return _objectKeysInternal(O, _enumBugKeys);
	};

	var f$2 = Object.getOwnPropertySymbols;

	var _objectGops = {
		f: f$2
	};

	var f$3 = {}.propertyIsEnumerable;

	var _objectPie = {
		f: f$3
	};

	// all enumerable object keys, includes symbols



	var _enumKeys = function (it) {
	  var result = _objectKeys(it);
	  var getSymbols = _objectGops.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = _objectPie.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};

	// 7.2.2 IsArray(argument)

	var _isArray = Array.isArray || function isArray(arg) {
	  return _cof(arg) == 'Array';
	};

	// 7.1.13 ToObject(argument)

	var _toObject = function (it) {
	  return Object(_defined(it));
	};

	var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  _anObject(O);
	  var keys = _objectKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

	var document$2 = _global.document;
	var _html = document$2 && document$2.documentElement;

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



	var IE_PROTO$1 = _sharedKey('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE$1 = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = _domCreate('iframe');
	  var i = _enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  _html.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
	  return createDict();
	};

	var _objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE$1] = _anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE$1] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : _objectDps(result, Properties);
	};

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

	var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

	var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return _objectKeysInternal(O, hiddenKeys);
	};

	var _objectGopn = {
		f: f$4
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

	var gOPN = _objectGopn.f;
	var toString$1 = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};

	var f$5 = function getOwnPropertyNames(it) {
	  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));
	};

	var _objectGopnExt = {
		f: f$5
	};

	var gOPD = Object.getOwnPropertyDescriptor;

	var f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = _toIobject(O);
	  P = _toPrimitive(P, true);
	  if (_ie8DomDefine) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
	};

	var _objectGopd = {
		f: f$6
	};

	// ECMAScript 6 symbols shim





	var META = _meta.KEY;





















	var gOPD$1 = _objectGopd.f;
	var dP$1 = _objectDp.f;
	var gOPN$1 = _objectGopnExt.f;
	var $Symbol = _global.Symbol;
	var $JSON = _global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE$2 = 'prototype';
	var HIDDEN = _wks('_hidden');
	var TO_PRIMITIVE = _wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = _shared('symbol-registry');
	var AllSymbols = _shared('symbols');
	var OPSymbols = _shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE$2];
	var USE_NATIVE = typeof $Symbol == 'function' && !!_objectGops.f;
	var QObject = _global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = _descriptors && _fails(function () {
	  return _objectCreate(dP$1({}, 'a', {
	    get: function () { return dP$1(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD$1(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP$1(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP$1(ObjectProto, key, protoDesc);
	} : dP$1;

	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  _anObject(it);
	  key = _toPrimitive(key, true);
	  _anObject(D);
	  if (_has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP$1(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  _anObject(it);
	  var keys = _enumKeys(P = _toIobject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = _toPrimitive(key, true));
	  if (this === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
	  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = _toIobject(it);
	  key = _toPrimitive(key, true);
	  if (it === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
	  var D = gOPD$1(it, key);
	  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN$1(_toIobject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};

	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, _propertyDesc(1, value));
	    };
	    if (_descriptors && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
	    return this._k;
	  });

	  _objectGopd.f = $getOwnPropertyDescriptor;
	  _objectDp.f = $defineProperty;
	  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
	  _objectPie.f = $propertyIsEnumerable;
	  _objectGops.f = $getOwnPropertySymbols;

	  if (_descriptors && !_library) {
	    _redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  _wksExt.f = function (name) {
	    return wrap(_wks(name));
	  };
	}

	_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });

	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)_wks(es6Symbols[j++]);

	for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) _wksDefine(wellKnownSymbols[k++]);

	_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return _has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});

	_export(_export.S + _export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	var FAILS_ON_PRIMITIVES = _fails(function () { _objectGops.f(1); });

	_export(_export.S + _export.F * FAILS_ON_PRIMITIVES, 'Object', {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return _objectGops.f(_toObject(it));
	  }
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!_isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	_setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	_setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	_setToStringTag(_global.JSON, 'JSON', true);

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	_export(_export.S, 'Object', { create: _objectCreate });

	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	_export(_export.S + _export.F * !_descriptors, 'Object', { defineProperty: _objectDp.f });

	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	_export(_export.S + _export.F * !_descriptors, 'Object', { defineProperties: _objectDps });

	// most Object methods by ES6 should accept primitives



	var _objectSap = function (KEY, exec) {
	  var fn = (_core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  _export(_export.S + _export.F * _fails(function () { fn(1); }), 'Object', exp);
	};

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

	var $getOwnPropertyDescriptor$1 = _objectGopd.f;

	_objectSap('getOwnPropertyDescriptor', function () {
	  return function getOwnPropertyDescriptor(it, key) {
	    return $getOwnPropertyDescriptor$1(_toIobject(it), key);
	  };
	});

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


	var IE_PROTO$2 = _sharedKey('IE_PROTO');
	var ObjectProto$1 = Object.prototype;

	var _objectGpo = Object.getPrototypeOf || function (O) {
	  O = _toObject(O);
	  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto$1 : null;
	};

	// 19.1.2.9 Object.getPrototypeOf(O)



	_objectSap('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return _objectGpo(_toObject(it));
	  };
	});

	// 19.1.2.14 Object.keys(O)



	_objectSap('keys', function () {
	  return function keys(it) {
	    return _objectKeys(_toObject(it));
	  };
	});

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	_objectSap('getOwnPropertyNames', function () {
	  return _objectGopnExt.f;
	});

	// 19.1.2.5 Object.freeze(O)

	var meta = _meta.onFreeze;

	_objectSap('freeze', function ($freeze) {
	  return function freeze(it) {
	    return $freeze && _isObject(it) ? $freeze(meta(it)) : it;
	  };
	});

	// 19.1.2.17 Object.seal(O)

	var meta$1 = _meta.onFreeze;

	_objectSap('seal', function ($seal) {
	  return function seal(it) {
	    return $seal && _isObject(it) ? $seal(meta$1(it)) : it;
	  };
	});

	// 19.1.2.15 Object.preventExtensions(O)

	var meta$2 = _meta.onFreeze;

	_objectSap('preventExtensions', function ($preventExtensions) {
	  return function preventExtensions(it) {
	    return $preventExtensions && _isObject(it) ? $preventExtensions(meta$2(it)) : it;
	  };
	});

	// 19.1.2.12 Object.isFrozen(O)


	_objectSap('isFrozen', function ($isFrozen) {
	  return function isFrozen(it) {
	    return _isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});

	// 19.1.2.13 Object.isSealed(O)


	_objectSap('isSealed', function ($isSealed) {
	  return function isSealed(it) {
	    return _isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});

	// 19.1.2.11 Object.isExtensible(O)


	_objectSap('isExtensible', function ($isExtensible) {
	  return function isExtensible(it) {
	    return _isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});

	// 19.1.2.1 Object.assign(target, source, ...)






	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	var _objectAssign = !$assign || _fails(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = _toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = _objectGops.f;
	  var isEnum = _objectPie.f;
	  while (aLen > index) {
	    var S = _iobject(arguments[index++]);
	    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!_descriptors || isEnum.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : $assign;

	// 19.1.3.1 Object.assign(target, source)


	_export(_export.S + _export.F, 'Object', { assign: _objectAssign });

	// 7.2.9 SameValue(x, y)
	var _sameValue = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	// 19.1.3.10 Object.is(value1, value2)

	_export(_export.S, 'Object', { is: _sameValue });

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */


	var check = function (O, proto) {
	  _anObject(O);
	  if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	var _setProto = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

	// 19.1.3.19 Object.setPrototypeOf(O, proto)

	_export(_export.S, 'Object', { setPrototypeOf: _setProto.set });

	// getting tag from 19.1.3.6 Object.prototype.toString()

	var TAG$1 = _wks('toStringTag');
	// ES3 wrong here
	var ARG = _cof(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};

	var _classof = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
	    // builtinTag case
	    : ARG ? _cof(O)
	    // ES3 arguments fallback
	    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

	// 19.1.3.6 Object.prototype.toString()

	var test = {};
	test[_wks('toStringTag')] = 'z';
	if (test + '' != '[object z]') {
	  _redefine(Object.prototype, 'toString', function toString() {
	    return '[object ' + _classof(this) + ']';
	  }, true);
	}

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	var _invoke = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};

	var arraySlice = [].slice;
	var factories = {};

	var construct = function (F, len, args) {
	  if (!(len in factories)) {
	    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};

	var _bind = Function.bind || function bind(that /* , ...args */) {
	  var fn = _aFunction(this);
	  var partArgs = arraySlice.call(arguments, 1);
	  var bound = function (/* args... */) {
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : _invoke(fn, args, that);
	  };
	  if (_isObject(fn.prototype)) bound.prototype = fn.prototype;
	  return bound;
	};

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)


	_export(_export.P, 'Function', { bind: _bind });

	var dP$2 = _objectDp.f;
	var FProto = Function.prototype;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';

	// 19.2.4.2 name
	NAME in FProto || _descriptors && dP$2(FProto, NAME, {
	  configurable: true,
	  get: function () {
	    try {
	      return ('' + this).match(nameRE)[1];
	    } catch (e) {
	      return '';
	    }
	  }
	});

	var HAS_INSTANCE = _wks('hasInstance');
	var FunctionProto = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if (!(HAS_INSTANCE in FunctionProto)) _objectDp.f(FunctionProto, HAS_INSTANCE, { value: function (O) {
	  if (typeof this != 'function' || !_isObject(O)) return false;
	  if (!_isObject(this.prototype)) return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while (O = _objectGpo(O)) if (this.prototype === O) return true;
	  return false;
	} });

	var _stringWs = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var space = '[' + _stringWs + ']';
	var non = '\u200b\u0085';
	var ltrim = RegExp('^' + space + space + '*');
	var rtrim = RegExp(space + space + '*$');

	var exporter = function (KEY, exec, ALIAS) {
	  var exp = {};
	  var FORCE = _fails(function () {
	    return !!_stringWs[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : _stringWs[KEY];
	  if (ALIAS) exp[ALIAS] = fn;
	  _export(_export.P + _export.F * FORCE, 'String', exp);
	};

	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function (string, TYPE) {
	  string = String(_defined(string));
	  if (TYPE & 1) string = string.replace(ltrim, '');
	  if (TYPE & 2) string = string.replace(rtrim, '');
	  return string;
	};

	var _stringTrim = exporter;

	var $parseInt = _global.parseInt;
	var $trim = _stringTrim.trim;

	var hex = /^[-+]?0[xX]/;

	var _parseInt = $parseInt(_stringWs + '08') !== 8 || $parseInt(_stringWs + '0x16') !== 22 ? function parseInt(str, radix) {
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;

	// 18.2.5 parseInt(string, radix)
	_export(_export.G + _export.F * (parseInt != _parseInt), { parseInt: _parseInt });

	var $parseFloat = _global.parseFloat;
	var $trim$1 = _stringTrim.trim;

	var _parseFloat = 1 / $parseFloat(_stringWs + '-0') !== -Infinity ? function parseFloat(str) {
	  var string = $trim$1(String(str), 3);
	  var result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

	// 18.2.4 parseFloat(string)
	_export(_export.G + _export.F * (parseFloat != _parseFloat), { parseFloat: _parseFloat });

	var setPrototypeOf = _setProto.set;
	var _inheritIfRequired = function (that, target, C) {
	  var S = target.constructor;
	  var P;
	  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && _isObject(P) && setPrototypeOf) {
	    setPrototypeOf(that, P);
	  } return that;
	};

	var gOPN$2 = _objectGopn.f;
	var gOPD$2 = _objectGopd.f;
	var dP$3 = _objectDp.f;
	var $trim$2 = _stringTrim.trim;
	var NUMBER = 'Number';
	var $Number = _global[NUMBER];
	var Base = $Number;
	var proto = $Number.prototype;
	// Opera ~12 has broken Object#toString
	var BROKEN_COF = _cof(_objectCreate(proto)) == NUMBER;
	var TRIM = 'trim' in String.prototype;

	// 7.1.3 ToNumber(argument)
	var toNumber = function (argument) {
	  var it = _toPrimitive(argument, false);
	  if (typeof it == 'string' && it.length > 2) {
	    it = TRIM ? it.trim() : $trim$2(it, 3);
	    var first = it.charCodeAt(0);
	    var third, radix, maxCode;
	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
	        default: return +it;
	      }
	      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
	        code = digits.charCodeAt(i);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
	  $Number = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var that = this;
	    return that instanceof $Number
	      // check on 1..constructor(foo) case
	      && (BROKEN_COF ? _fails(function () { proto.valueOf.call(that); }) : _cof(that) != NUMBER)
	        ? _inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
	  };
	  for (var keys = _descriptors ? gOPN$2(Base) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES6 (in case, if modules with ES6 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j$1 = 0, key; keys.length > j$1; j$1++) {
	    if (_has(Base, key = keys[j$1]) && !_has($Number, key)) {
	      dP$3($Number, key, gOPD$2(Base, key));
	    }
	  }
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  _redefine(_global, NUMBER, $Number);
	}

	var _aNumberValue = function (it, msg) {
	  if (typeof it != 'number' && _cof(it) != 'Number') throw TypeError(msg);
	  return +it;
	};

	var _stringRepeat = function repeat(count) {
	  var str = String(_defined(this));
	  var res = '';
	  var n = _toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
	  return res;
	};

	var $toFixed = 1.0.toFixed;
	var floor$1 = Math.floor;
	var data = [0, 0, 0, 0, 0, 0];
	var ERROR = 'Number.toFixed: incorrect invocation!';
	var ZERO = '0';

	var multiply = function (n, c) {
	  var i = -1;
	  var c2 = c;
	  while (++i < 6) {
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor$1(c2 / 1e7);
	  }
	};
	var divide = function (n) {
	  var i = 6;
	  var c = 0;
	  while (--i >= 0) {
	    c += data[i];
	    data[i] = floor$1(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function () {
	  var i = 6;
	  var s = '';
	  while (--i >= 0) {
	    if (s !== '' || i === 0 || data[i] !== 0) {
	      var t = String(data[i]);
	      s = s === '' ? t : s + _stringRepeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function (x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  } return n;
	};

	_export(_export.P + _export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
	) || !_fails(function () {
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits) {
	    var x = _aNumberValue(this, ERROR);
	    var f = _toInteger(fractionDigits);
	    var s = '';
	    var m = ZERO;
	    var e, z, j, k;
	    if (f < 0 || f > 20) throw RangeError(ERROR);
	    // eslint-disable-next-line no-self-compare
	    if (x != x) return 'NaN';
	    if (x <= -1e21 || x >= 1e21) return String(x);
	    if (x < 0) {
	      s = '-';
	      x = -x;
	    }
	    if (x > 1e-21) {
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = f;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + _stringRepeat.call(ZERO, f);
	      }
	    }
	    if (f > 0) {
	      k = m.length;
	      m = s + (k <= f ? '0.' + _stringRepeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});

	var $toPrecision = 1.0.toPrecision;

	_export(_export.P + _export.F * (_fails(function () {
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !_fails(function () {
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision) {
	    var that = _aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
	  }
	});

	// 20.1.2.1 Number.EPSILON


	_export(_export.S, 'Number', { EPSILON: Math.pow(2, -52) });

	// 20.1.2.2 Number.isFinite(number)

	var _isFinite = _global.isFinite;

	_export(_export.S, 'Number', {
	  isFinite: function isFinite(it) {
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

	// 20.1.2.3 Number.isInteger(number)

	var floor$2 = Math.floor;
	var _isInteger = function isInteger(it) {
	  return !_isObject(it) && isFinite(it) && floor$2(it) === it;
	};

	// 20.1.2.3 Number.isInteger(number)


	_export(_export.S, 'Number', { isInteger: _isInteger });

	// 20.1.2.4 Number.isNaN(number)


	_export(_export.S, 'Number', {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});

	// 20.1.2.5 Number.isSafeInteger(number)


	var abs = Math.abs;

	_export(_export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number) {
	    return _isInteger(number) && abs(number) <= 0x1fffffffffffff;
	  }
	});

	// 20.1.2.6 Number.MAX_SAFE_INTEGER


	_export(_export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

	// 20.1.2.10 Number.MIN_SAFE_INTEGER


	_export(_export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

	// 20.1.2.12 Number.parseFloat(string)
	_export(_export.S + _export.F * (Number.parseFloat != _parseFloat), 'Number', { parseFloat: _parseFloat });

	// 20.1.2.13 Number.parseInt(string, radix)
	_export(_export.S + _export.F * (Number.parseInt != _parseInt), 'Number', { parseInt: _parseInt });

	// 20.2.2.20 Math.log1p(x)
	var _mathLog1p = Math.log1p || function log1p(x) {
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};

	// 20.2.2.3 Math.acosh(x)


	var sqrt = Math.sqrt;
	var $acosh = Math.acosh;

	_export(_export.S + _export.F * !($acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  && Math.floor($acosh(Number.MAX_VALUE)) == 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN
	  && $acosh(Infinity) == Infinity
	), 'Math', {
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : _mathLog1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

	// 20.2.2.5 Math.asinh(x)

	var $asinh = Math.asinh;

	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}

	// Tor Browser bug: Math.asinh(0) -> -0
	_export(_export.S + _export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

	// 20.2.2.7 Math.atanh(x)

	var $atanh = Math.atanh;

	// Tor Browser bug: Math.atanh(-0) -> 0
	_export(_export.S + _export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});

	// 20.2.2.28 Math.sign(x)
	var _mathSign = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

	// 20.2.2.9 Math.cbrt(x)



	_export(_export.S, 'Math', {
	  cbrt: function cbrt(x) {
	    return _mathSign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});

	// 20.2.2.11 Math.clz32(x)


	_export(_export.S, 'Math', {
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});

	// 20.2.2.12 Math.cosh(x)

	var exp = Math.exp;

	_export(_export.S, 'Math', {
	  cosh: function cosh(x) {
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	var _mathExpm1 = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x) {
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;

	// 20.2.2.14 Math.expm1(x)



	_export(_export.S + _export.F * (_mathExpm1 != Math.expm1), 'Math', { expm1: _mathExpm1 });

	// 20.2.2.16 Math.fround(x)

	var pow$1 = Math.pow;
	var EPSILON = pow$1(2, -52);
	var EPSILON32 = pow$1(2, -23);
	var MAX32 = pow$1(2, 127) * (2 - EPSILON32);
	var MIN32 = pow$1(2, -126);

	var roundTiesToEven = function (n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	};

	var _mathFround = Math.fround || function fround(x) {
	  var $abs = Math.abs(x);
	  var $sign = _mathSign(x);
	  var a, result;
	  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	  a = (1 + EPSILON32 / EPSILON) * $abs;
	  result = a - (a - $abs);
	  // eslint-disable-next-line no-self-compare
	  if (result > MAX32 || result != result) return $sign * Infinity;
	  return $sign * result;
	};

	// 20.2.2.16 Math.fround(x)


	_export(_export.S, 'Math', { fround: _mathFround });

	// 20.2.2.17 Math.hypot([value1[, value2[, â¦ ]]])

	var abs$1 = Math.abs;

	_export(_export.S, 'Math', {
	  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;
	    while (i < aLen) {
	      arg = abs$1(arguments[i++]);
	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});

	// 20.2.2.18 Math.imul(x, y)

	var $imul = Math.imul;

	// some WebKit versions fails with big numbers, some has wrong arity
	_export(_export.S + _export.F * _fails(function () {
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y) {
	    var UINT16 = 0xffff;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

	// 20.2.2.21 Math.log10(x)


	_export(_export.S, 'Math', {
	  log10: function log10(x) {
	    return Math.log(x) * Math.LOG10E;
	  }
	});

	// 20.2.2.20 Math.log1p(x)


	_export(_export.S, 'Math', { log1p: _mathLog1p });

	// 20.2.2.22 Math.log2(x)


	_export(_export.S, 'Math', {
	  log2: function log2(x) {
	    return Math.log(x) / Math.LN2;
	  }
	});

	// 20.2.2.28 Math.sign(x)


	_export(_export.S, 'Math', { sign: _mathSign });

	// 20.2.2.30 Math.sinh(x)


	var exp$1 = Math.exp;

	// V8 near Chromium 38 has a problem with very small numbers
	_export(_export.S + _export.F * _fails(function () {
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x) {
	    return Math.abs(x = +x) < 1
	      ? (_mathExpm1(x) - _mathExpm1(-x)) / 2
	      : (exp$1(x - 1) - exp$1(-x - 1)) * (Math.E / 2);
	  }
	});

	// 20.2.2.33 Math.tanh(x)


	var exp$2 = Math.exp;

	_export(_export.S, 'Math', {
	  tanh: function tanh(x) {
	    var a = _mathExpm1(x = +x);
	    var b = _mathExpm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp$2(x) + exp$2(-x));
	  }
	});

	// 20.2.2.34 Math.trunc(x)


	_export(_export.S, 'Math', {
	  trunc: function trunc(it) {
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});

	var fromCharCode = String.fromCharCode;
	var $fromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	_export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
	    var res = [];
	    var aLen = arguments.length;
	    var i = 0;
	    var code;
	    while (aLen > i) {
	      code = +arguments[i++];
	      if (_toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

	_export(_export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite) {
	    var tpl = _toIobject(callSite.raw);
	    var len = _toLength(tpl.length);
	    var aLen = arguments.length;
	    var res = [];
	    var i = 0;
	    while (len > i) {
	      res.push(String(tpl[i++]));
	      if (i < aLen) res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});

	// 21.1.3.25 String.prototype.trim()
	_stringTrim('trim', function ($trim) {
	  return function trim() {
	    return $trim(this, 3);
	  };
	});

	// true  -> String#at
	// false -> String#codePointAt
	var _stringAt = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(_defined(that));
	    var i = _toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

	var _iterators = {};

	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	_hide(IteratorPrototype, _wks('iterator'), function () { return this; });

	var _iterCreate = function (Constructor, NAME, next) {
	  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
	  _setToStringTag(Constructor, NAME + ' Iterator');
	};

	var ITERATOR = _wks('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function () { return this; };

	var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  _iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = _objectGpo($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      _setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if ( typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ( (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    _hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  _iterators[NAME] = $default;
	  _iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) _redefine(proto, key, methods[key]);
	    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

	var $at = _stringAt(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	_iterDefine(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});

	var $at$1 = _stringAt(false);
	_export(_export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos) {
	    return $at$1(this, pos);
	  }
	});

	// 7.2.8 IsRegExp(argument)


	var MATCH = _wks('match');
	var _isRegexp = function (it) {
	  var isRegExp;
	  return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');
	};

	// helper for String#{startsWith, endsWith, includes}



	var _stringContext = function (that, searchString, NAME) {
	  if (_isRegexp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(_defined(that));
	};

	var MATCH$1 = _wks('match');
	var _failsIsRegexp = function (KEY) {
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch (e) {
	    try {
	      re[MATCH$1] = false;
	      return !'/./'[KEY](re);
	    } catch (f) { /* empty */ }
	  } return true;
	};

	var ENDS_WITH = 'endsWith';
	var $endsWith = ''[ENDS_WITH];

	_export(_export.P + _export.F * _failsIsRegexp(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /* , endPosition = @length */) {
	    var that = _stringContext(this, searchString, ENDS_WITH);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = _toLength(that.length);
	    var end = endPosition === undefined ? len : Math.min(_toLength(endPosition), len);
	    var search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});

	var INCLUDES = 'includes';

	_export(_export.P + _export.F * _failsIsRegexp(INCLUDES), 'String', {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~_stringContext(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	_export(_export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: _stringRepeat
	});

	var STARTS_WITH = 'startsWith';
	var $startsWith = ''[STARTS_WITH];

	_export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = _stringContext(this, searchString, STARTS_WITH);
	    var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

	var quot = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function (string, tag, attribute, value) {
	  var S = String(_defined(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	var _stringHtml = function (NAME, exec) {
	  var O = {};
	  O[NAME] = exec(createHTML);
	  _export(_export.P + _export.F * _fails(function () {
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};

	// B.2.3.2 String.prototype.anchor(name)
	_stringHtml('anchor', function (createHTML) {
	  return function anchor(name) {
	    return createHTML(this, 'a', 'name', name);
	  };
	});

	// B.2.3.3 String.prototype.big()
	_stringHtml('big', function (createHTML) {
	  return function big() {
	    return createHTML(this, 'big', '', '');
	  };
	});

	// B.2.3.4 String.prototype.blink()
	_stringHtml('blink', function (createHTML) {
	  return function blink() {
	    return createHTML(this, 'blink', '', '');
	  };
	});

	// B.2.3.5 String.prototype.bold()
	_stringHtml('bold', function (createHTML) {
	  return function bold() {
	    return createHTML(this, 'b', '', '');
	  };
	});

	// B.2.3.6 String.prototype.fixed()
	_stringHtml('fixed', function (createHTML) {
	  return function fixed() {
	    return createHTML(this, 'tt', '', '');
	  };
	});

	// B.2.3.7 String.prototype.fontcolor(color)
	_stringHtml('fontcolor', function (createHTML) {
	  return function fontcolor(color) {
	    return createHTML(this, 'font', 'color', color);
	  };
	});

	// B.2.3.8 String.prototype.fontsize(size)
	_stringHtml('fontsize', function (createHTML) {
	  return function fontsize(size) {
	    return createHTML(this, 'font', 'size', size);
	  };
	});

	// B.2.3.9 String.prototype.italics()
	_stringHtml('italics', function (createHTML) {
	  return function italics() {
	    return createHTML(this, 'i', '', '');
	  };
	});

	// B.2.3.10 String.prototype.link(url)
	_stringHtml('link', function (createHTML) {
	  return function link(url) {
	    return createHTML(this, 'a', 'href', url);
	  };
	});

	// B.2.3.11 String.prototype.small()
	_stringHtml('small', function (createHTML) {
	  return function small() {
	    return createHTML(this, 'small', '', '');
	  };
	});

	// B.2.3.12 String.prototype.strike()
	_stringHtml('strike', function (createHTML) {
	  return function strike() {
	    return createHTML(this, 'strike', '', '');
	  };
	});

	// B.2.3.13 String.prototype.sub()
	_stringHtml('sub', function (createHTML) {
	  return function sub() {
	    return createHTML(this, 'sub', '', '');
	  };
	});

	// B.2.3.14 String.prototype.sup()
	_stringHtml('sup', function (createHTML) {
	  return function sup() {
	    return createHTML(this, 'sup', '', '');
	  };
	});

	// 20.3.3.1 / 15.9.4.4 Date.now()


	_export(_export.S, 'Date', { now: function () { return new Date().getTime(); } });

	_export(_export.P + _export.F * _fails(function () {
	  return new Date(NaN).toJSON() !== null
	    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
	}), 'Date', {
	  // eslint-disable-next-line no-unused-vars
	  toJSON: function toJSON(key) {
	    var O = _toObject(this);
	    var pv = _toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

	var getTime = Date.prototype.getTime;
	var $toISOString = Date.prototype.toISOString;

	var lz = function (num) {
	  return num > 9 ? num : '0' + num;
	};

	// PhantomJS / old WebKit has a broken implementations
	var _dateToIsoString = (_fails(function () {
	  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
	}) || !_fails(function () {
	  $toISOString.call(new Date(NaN));
	})) ? function toISOString() {
	  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
	  var d = this;
	  var y = d.getUTCFullYear();
	  var m = d.getUTCMilliseconds();
	  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
	  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	} : $toISOString;

	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()



	// PhantomJS / old WebKit has a broken implementations
	_export(_export.P + _export.F * (Date.prototype.toISOString !== _dateToIsoString), 'Date', {
	  toISOString: _dateToIsoString
	});

	var DateProto = Date.prototype;
	var INVALID_DATE = 'Invalid Date';
	var TO_STRING = 'toString';
	var $toString = DateProto[TO_STRING];
	var getTime$1 = DateProto.getTime;
	if (new Date(NaN) + '' != INVALID_DATE) {
	  _redefine(DateProto, TO_STRING, function toString() {
	    var value = getTime$1.call(this);
	    // eslint-disable-next-line no-self-compare
	    return value === value ? $toString.call(this) : INVALID_DATE;
	  });
	}

	var NUMBER$1 = 'number';

	var _dateToPrimitive = function (hint) {
	  if (hint !== 'string' && hint !== NUMBER$1 && hint !== 'default') throw TypeError('Incorrect hint');
	  return _toPrimitive(_anObject(this), hint != NUMBER$1);
	};

	var TO_PRIMITIVE$1 = _wks('toPrimitive');
	var proto$1 = Date.prototype;

	if (!(TO_PRIMITIVE$1 in proto$1)) _hide(proto$1, TO_PRIMITIVE$1, _dateToPrimitive);

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)


	_export(_export.S, 'Array', { isArray: _isArray });

	// call something on iterator step with safe closing on error

	var _iterCall = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) _anObject(ret.call(iterator));
	    throw e;
	  }
	};

	// check on default Array iterator

	var ITERATOR$1 = _wks('iterator');
	var ArrayProto = Array.prototype;

	var _isArrayIter = function (it) {
	  return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);
	};

	var _createProperty = function (object, index, value) {
	  if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));
	  else object[index] = value;
	};

	var ITERATOR$2 = _wks('iterator');

	var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$2]
	    || it['@@iterator']
	    || _iterators[_classof(it)];
	};

	var ITERATOR$3 = _wks('iterator');
	var SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR$3]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }

	var _iterDetect = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR$3]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR$3] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};

	_export(_export.S + _export.F * !_iterDetect(function (iter) { Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = _toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = core_getIteratorMethod(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = _toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

	// WebKit Array.of isn't generic
	_export(_export.S + _export.F * _fails(function () {
	  function F() { /* empty */ }
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */) {
	    var index = 0;
	    var aLen = arguments.length;
	    var result = new (typeof this == 'function' ? this : Array)(aLen);
	    while (aLen > index) _createProperty(result, index, arguments[index++]);
	    result.length = aLen;
	    return result;
	  }
	});

	var _strictMethod = function (method, arg) {
	  return !!method && _fails(function () {
	    // eslint-disable-next-line no-useless-call
	    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
	  });
	};

	// 22.1.3.13 Array.prototype.join(separator)


	var arrayJoin = [].join;

	// fallback for not array-like strings
	_export(_export.P + _export.F * (_iobject != Object || !_strictMethod(arrayJoin)), 'Array', {
	  join: function join(separator) {
	    return arrayJoin.call(_toIobject(this), separator === undefined ? ',' : separator);
	  }
	});

	var arraySlice$1 = [].slice;

	// fallback for not array-like ES3 strings and DOM objects
	_export(_export.P + _export.F * _fails(function () {
	  if (_html) arraySlice$1.call(_html);
	}), 'Array', {
	  slice: function slice(begin, end) {
	    var len = _toLength(this.length);
	    var klass = _cof(this);
	    end = end === undefined ? len : end;
	    if (klass == 'Array') return arraySlice$1.call(this, begin, end);
	    var start = _toAbsoluteIndex(begin, len);
	    var upTo = _toAbsoluteIndex(end, len);
	    var size = _toLength(upTo - start);
	    var cloned = new Array(size);
	    var i = 0;
	    for (; i < size; i++) cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});

	var $sort = [].sort;
	var test$1 = [1, 2, 3];

	_export(_export.P + _export.F * (_fails(function () {
	  // IE8-
	  test$1.sort(undefined);
	}) || !_fails(function () {
	  // V8 bug
	  test$1.sort(null);
	  // Old WebKit
	}) || !_strictMethod($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn) {
	    return comparefn === undefined
	      ? $sort.call(_toObject(this))
	      : $sort.call(_toObject(this), _aFunction(comparefn));
	  }
	});

	var SPECIES = _wks('species');

	var _arraySpeciesConstructor = function (original) {
	  var C;
	  if (_isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;
	    if (_isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)


	var _arraySpeciesCreate = function (original, length) {
	  return new (_arraySpeciesConstructor(original))(length);
	};

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex





	var _arrayMethods = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || _arraySpeciesCreate;
	  return function ($this, callbackfn, that) {
	    var O = _toObject($this);
	    var self = _iobject(O);
	    var f = _ctx(callbackfn, that, 3);
	    var length = _toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      val = self[index];
	      res = f(val, index, O);
	      if (TYPE) {
	        if (IS_MAP) result[index] = res;   // map
	        else if (res) switch (TYPE) {
	          case 3: return true;             // some
	          case 5: return val;              // find
	          case 6: return index;            // findIndex
	          case 2: result.push(val);        // filter
	        } else if (IS_EVERY) return false; // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

	var $forEach = _arrayMethods(0);
	var STRICT = _strictMethod([].forEach, true);

	_export(_export.P + _export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */) {
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});

	var $map = _arrayMethods(1);

	_export(_export.P + _export.F * !_strictMethod([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments[1]);
	  }
	});

	var $filter = _arrayMethods(2);

	_export(_export.P + _export.F * !_strictMethod([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});

	var $some = _arrayMethods(3);

	_export(_export.P + _export.F * !_strictMethod([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */) {
	    return $some(this, callbackfn, arguments[1]);
	  }
	});

	var $every = _arrayMethods(4);

	_export(_export.P + _export.F * !_strictMethod([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */) {
	    return $every(this, callbackfn, arguments[1]);
	  }
	});

	var _arrayReduce = function (that, callbackfn, aLen, memo, isRight) {
	  _aFunction(callbackfn);
	  var O = _toObject(that);
	  var self = _iobject(O);
	  var length = _toLength(O.length);
	  var index = isRight ? length - 1 : 0;
	  var i = isRight ? -1 : 1;
	  if (aLen < 2) for (;;) {
	    if (index in self) {
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if (isRight ? index < 0 : length <= index) {
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};

	_export(_export.P + _export.F * !_strictMethod([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    return _arrayReduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});

	_export(_export.P + _export.F * !_strictMethod([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
	    return _arrayReduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});

	var $indexOf = _arrayIncludes(false);
	var $native = [].indexOf;
	var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

	_export(_export.P + _export.F * (NEGATIVE_ZERO || !_strictMethod($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? $native.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments[1]);
	  }
	});

	var $native$1 = [].lastIndexOf;
	var NEGATIVE_ZERO$1 = !!$native$1 && 1 / [1].lastIndexOf(1, -0) < 0;

	_export(_export.P + _export.F * (NEGATIVE_ZERO$1 || !_strictMethod($native$1)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	    // convert -0 to +0
	    if (NEGATIVE_ZERO$1) return $native$1.apply(this, arguments) || 0;
	    var O = _toIobject(this);
	    var length = _toLength(O.length);
	    var index = length - 1;
	    if (arguments.length > 1) index = Math.min(index, _toInteger(arguments[1]));
	    if (index < 0) index = length + index;
	    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
	    return -1;
	  }
	});

	var _arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = _toObject(this);
	  var len = _toLength(O.length);
	  var to = _toAbsoluteIndex(target, len);
	  var from = _toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = Math.min((end === undefined ? len : _toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];
	    else delete O[to];
	    to += inc;
	    from += inc;
	  } return O;
	};

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = _wks('unscopables');
	var ArrayProto$1 = Array.prototype;
	if (ArrayProto$1[UNSCOPABLES] == undefined) _hide(ArrayProto$1, UNSCOPABLES, {});
	var _addToUnscopables = function (key) {
	  ArrayProto$1[UNSCOPABLES][key] = true;
	};

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)


	_export(_export.P, 'Array', { copyWithin: _arrayCopyWithin });

	_addToUnscopables('copyWithin');

	var _arrayFill = function fill(value /* , start = 0, end = @length */) {
	  var O = _toObject(this);
	  var length = _toLength(O.length);
	  var aLen = arguments.length;
	  var index = _toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
	  var end = aLen > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : _toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)


	_export(_export.P, 'Array', { fill: _arrayFill });

	_addToUnscopables('fill');

	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

	var $find = _arrayMethods(5);
	var KEY = 'find';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () { forced = false; });
	_export(_export.P + _export.F * forced, 'Array', {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	_addToUnscopables(KEY);

	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

	var $find$1 = _arrayMethods(6);
	var KEY$1 = 'findIndex';
	var forced$1 = true;
	// Shouldn't skip holes
	if (KEY$1 in []) Array(1)[KEY$1](function () { forced$1 = false; });
	_export(_export.P + _export.F * forced$1, 'Array', {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	_addToUnscopables(KEY$1);

	var SPECIES$1 = _wks('species');

	var _setSpecies = function (KEY) {
	  var C = _global[KEY];
	  if (_descriptors && C && !C[SPECIES$1]) _objectDp.f(C, SPECIES$1, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};

	_setSpecies('Array');

	var _iterStep = function (done, value) {
	  return { value: value, done: !!done };
	};

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
	  this._t = _toIobject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return _iterStep(1);
	  }
	  if (kind == 'keys') return _iterStep(0, index);
	  if (kind == 'values') return _iterStep(0, O[index]);
	  return _iterStep(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	_iterators.Arguments = _iterators.Array;

	_addToUnscopables('keys');
	_addToUnscopables('values');
	_addToUnscopables('entries');

	// 21.2.5.3 get RegExp.prototype.flags

	var _flags = function () {
	  var that = _anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	var dP$4 = _objectDp.f;
	var gOPN$3 = _objectGopn.f;


	var $RegExp = _global.RegExp;
	var Base$1 = $RegExp;
	var proto$2 = $RegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;
	// "new" creates a new object, old webkit buggy here
	var CORRECT_NEW = new $RegExp(re1) !== re1;

	if (_descriptors && (!CORRECT_NEW || _fails(function () {
	  re2[_wks('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))) {
	  $RegExp = function RegExp(p, f) {
	    var tiRE = this instanceof $RegExp;
	    var piRE = _isRegexp(p);
	    var fiU = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
	      : _inheritIfRequired(CORRECT_NEW
	        ? new Base$1(piRE && !fiU ? p.source : p, f)
	        : Base$1((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? _flags.call(p) : f)
	      , tiRE ? this : proto$2, $RegExp);
	  };
	  var proxy = function (key) {
	    key in $RegExp || dP$4($RegExp, key, {
	      configurable: true,
	      get: function () { return Base$1[key]; },
	      set: function (it) { Base$1[key] = it; }
	    });
	  };
	  for (var keys$1 = gOPN$3(Base$1), i = 0; keys$1.length > i;) proxy(keys$1[i++]);
	  proto$2.constructor = $RegExp;
	  $RegExp.prototype = proto$2;
	  _redefine(_global, 'RegExp', $RegExp);
	}

	_setSpecies('RegExp');

	var nativeExec = RegExp.prototype.exec;
	// This always refers to the native implementation, because the
	// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
	// which loads this file before patching the method.
	var nativeReplace = String.prototype.replace;

	var patchedExec = nativeExec;

	var LAST_INDEX = 'lastIndex';

	var UPDATES_LAST_INDEX_WRONG = (function () {
	  var re1 = /a/,
	      re2 = /b*/g;
	  nativeExec.call(re1, 'a');
	  nativeExec.call(re2, 'a');
	  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
	})();

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

	if (PATCH) {
	  patchedExec = function exec(str) {
	    var re = this;
	    var lastIndex, reCopy, match, i;

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + re.source + '$(?!\\s)', _flags.call(re));
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

	    match = nativeExec.call(re, str);

	    if (UPDATES_LAST_INDEX_WRONG && match) {
	      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      // eslint-disable-next-line no-loop-func
	      nativeReplace.call(match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    return match;
	  };
	}

	var _regexpExec = patchedExec;

	_export({
	  target: 'RegExp',
	  proto: true,
	  forced: _regexpExec !== /./.exec
	}, {
	  exec: _regexpExec
	});

	// 21.2.5.3 get RegExp.prototype.flags()
	if (_descriptors && /./g.flags != 'g') _objectDp.f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: _flags
	});

	var TO_STRING$1 = 'toString';
	var $toString$1 = /./[TO_STRING$1];

	var define = function (fn) {
	  _redefine(RegExp.prototype, TO_STRING$1, fn, true);
	};

	// 21.2.5.14 RegExp.prototype.toString()
	if (_fails(function () { return $toString$1.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
	  define(function toString() {
	    var R = _anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !_descriptors && R instanceof RegExp ? _flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if ($toString$1.name != TO_STRING$1) {
	  define(function toString() {
	    return $toString$1.call(this);
	  });
	}

	var at = _stringAt(true);

	 // `AdvanceStringIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-advancestringindex
	var _advanceStringIndex = function (S, index, unicode) {
	  return index + (unicode ? at(S, index).length : 1);
	};

	var builtinExec = RegExp.prototype.exec;

	 // `RegExpExec` abstract operation
	// https://tc39.github.io/ecma262/#sec-regexpexec
	var _regexpExecAbstract = function (R, S) {
	  var exec = R.exec;
	  if (typeof exec === 'function') {
	    var result = exec.call(R, S);
	    if (typeof result !== 'object') {
	      throw new TypeError('RegExp exec method returned something other than an Object or null');
	    }
	    return result;
	  }
	  if (_classof(R) !== 'RegExp') {
	    throw new TypeError('RegExp#exec called on incompatible receiver');
	  }
	  return builtinExec.call(R, S);
	};

	var SPECIES$2 = _wks('species');

	var REPLACE_SUPPORTS_NAMED_GROUPS = !_fails(function () {
	  // #replace needs built-in support for named groups.
	  // #match works fine because it just return the exec results, even if it has
	  // a "grops" property.
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  return ''.replace(re, '$<a>') !== '7';
	});

	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
	  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	  var re = /(?:)/;
	  var originalExec = re.exec;
	  re.exec = function () { return originalExec.apply(this, arguments); };
	  var result = 'ab'.split(re);
	  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
	})();

	var _fixReWks = function (KEY, length, exec) {
	  var SYMBOL = _wks(KEY);

	  var DELEGATES_TO_SYMBOL = !_fails(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !_fails(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;
	    re.exec = function () { execCalled = true; return null; };
	    if (KEY === 'split') {
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES$2] = function () { return re; };
	    }
	    re[SYMBOL]('');
	    return !execCalled;
	  }) : undefined;

	  if (
	    !DELEGATES_TO_SYMBOL ||
	    !DELEGATES_TO_EXEC ||
	    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
	    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
	  ) {
	    var nativeRegExpMethod = /./[SYMBOL];
	    var fns = exec(
	      _defined,
	      SYMBOL,
	      ''[KEY],
	      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
	        if (regexp.exec === _regexpExec) {
	          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	            // The native String method already delegates to @@method (this
	            // polyfilled function), leasing to infinite recursion.
	            // We avoid it by directly calling the native @@method method.
	            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
	          }
	          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
	        }
	        return { done: false };
	      }
	    );
	    var strfn = fns[0];
	    var rxfn = fns[1];

	    _redefine(String.prototype, KEY, strfn);
	    _hide(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function (string, arg) { return rxfn.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function (string) { return rxfn.call(string, this); }
	    );
	  }
	};

	// @@match logic
	_fixReWks('match', 1, function (defined, MATCH, $match, maybeCallNative) {
	  return [
	    // `String.prototype.match` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.match
	    function match(regexp) {
	      var O = defined(this);
	      var fn = regexp == undefined ? undefined : regexp[MATCH];
	      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	    },
	    // `RegExp.prototype[@@match]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
	    function (regexp) {
	      var res = maybeCallNative($match, regexp, this);
	      if (res.done) return res.value;
	      var rx = _anObject(regexp);
	      var S = String(this);
	      if (!rx.global) return _regexpExecAbstract(rx, S);
	      var fullUnicode = rx.unicode;
	      rx.lastIndex = 0;
	      var A = [];
	      var n = 0;
	      var result;
	      while ((result = _regexpExecAbstract(rx, S)) !== null) {
	        var matchStr = String(result[0]);
	        A[n] = matchStr;
	        if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);
	        n++;
	      }
	      return n === 0 ? null : A;
	    }
	  ];
	});

	var max$1 = Math.max;
	var min$2 = Math.min;
	var floor$3 = Math.floor;
	var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	};

	// @@replace logic
	_fixReWks('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
	  return [
	    // `String.prototype.replace` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
	    function replace(searchValue, replaceValue) {
	      var O = defined(this);
	      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
	      return fn !== undefined
	        ? fn.call(searchValue, O, replaceValue)
	        : $replace.call(String(O), searchValue, replaceValue);
	    },
	    // `RegExp.prototype[@@replace]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
	    function (regexp, replaceValue) {
	      var res = maybeCallNative($replace, regexp, this, replaceValue);
	      if (res.done) return res.value;

	      var rx = _anObject(regexp);
	      var S = String(this);
	      var functionalReplace = typeof replaceValue === 'function';
	      if (!functionalReplace) replaceValue = String(replaceValue);
	      var global = rx.global;
	      if (global) {
	        var fullUnicode = rx.unicode;
	        rx.lastIndex = 0;
	      }
	      var results = [];
	      while (true) {
	        var result = _regexpExecAbstract(rx, S);
	        if (result === null) break;
	        results.push(result);
	        if (!global) break;
	        var matchStr = String(result[0]);
	        if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);
	      }
	      var accumulatedResult = '';
	      var nextSourcePosition = 0;
	      for (var i = 0; i < results.length; i++) {
	        result = results[i];
	        var matched = String(result[0]);
	        var position = max$1(min$2(_toInteger(result.index), S.length), 0);
	        var captures = [];
	        // NOTE: This is equivalent to
	        //   captures = result.slice(1).map(maybeToString)
	        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
	        var namedCaptures = result.groups;
	        if (functionalReplace) {
	          var replacerArgs = [matched].concat(captures, position, S);
	          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
	          var replacement = String(replaceValue.apply(undefined, replacerArgs));
	        } else {
	          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	        }
	        if (position >= nextSourcePosition) {
	          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
	          nextSourcePosition = position + matched.length;
	        }
	      }
	      return accumulatedResult + S.slice(nextSourcePosition);
	    }
	  ];

	    // https://tc39.github.io/ecma262/#sec-getsubstitution
	  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
	    var tailPos = position + matched.length;
	    var m = captures.length;
	    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	    if (namedCaptures !== undefined) {
	      namedCaptures = _toObject(namedCaptures);
	      symbols = SUBSTITUTION_SYMBOLS;
	    }
	    return $replace.call(replacement, symbols, function (match, ch) {
	      var capture;
	      switch (ch.charAt(0)) {
	        case '$': return '$';
	        case '&': return matched;
	        case '`': return str.slice(0, position);
	        case "'": return str.slice(tailPos);
	        case '<':
	          capture = namedCaptures[ch.slice(1, -1)];
	          break;
	        default: // \d\d?
	          var n = +ch;
	          if (n === 0) return match;
	          if (n > m) {
	            var f = floor$3(n / 10);
	            if (f === 0) return match;
	            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
	            return match;
	          }
	          capture = captures[n - 1];
	      }
	      return capture === undefined ? '' : capture;
	    });
	  }
	});

	// @@search logic
	_fixReWks('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
	  return [
	    // `String.prototype.search` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.search
	    function search(regexp) {
	      var O = defined(this);
	      var fn = regexp == undefined ? undefined : regexp[SEARCH];
	      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	    },
	    // `RegExp.prototype[@@search]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
	    function (regexp) {
	      var res = maybeCallNative($search, regexp, this);
	      if (res.done) return res.value;
	      var rx = _anObject(regexp);
	      var S = String(this);
	      var previousLastIndex = rx.lastIndex;
	      if (!_sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
	      var result = _regexpExecAbstract(rx, S);
	      if (!_sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
	      return result === null ? -1 : result.index;
	    }
	  ];
	});

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)


	var SPECIES$3 = _wks('species');
	var _speciesConstructor = function (O, D) {
	  var C = _anObject(O).constructor;
	  var S;
	  return C === undefined || (S = _anObject(C)[SPECIES$3]) == undefined ? D : _aFunction(S);
	};

	var $min = Math.min;
	var $push = [].push;
	var $SPLIT = 'split';
	var LENGTH = 'length';
	var LAST_INDEX$1 = 'lastIndex';
	var MAX_UINT32 = 0xffffffff;

	// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
	var SUPPORTS_Y = !_fails(function () { RegExp(MAX_UINT32, 'y'); });

	// @@split logic
	_fixReWks('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
	  var internalSplit;
	  if (
	    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
	    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
	    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
	    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
	    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
	    ''[$SPLIT](/.?/)[LENGTH]
	  ) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function (separator, limit) {
	      var string = String(this);
	      if (separator === undefined && limit === 0) return [];
	      // If `separator` is not a regex, use native split
	      if (!_isRegexp(separator)) return $split.call(string, separator, limit);
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;
	      while (match = _regexpExec.call(separatorCopy, string)) {
	        lastIndex = separatorCopy[LAST_INDEX$1];
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
	          lastLength = match[0][LENGTH];
	          lastLastIndex = lastIndex;
	          if (output[LENGTH] >= splitLimit) break;
	        }
	        if (separatorCopy[LAST_INDEX$1] === match.index) separatorCopy[LAST_INDEX$1]++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string[LENGTH]) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
	    };
	  // Chakra, V8
	  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
	    internalSplit = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
	    };
	  } else {
	    internalSplit = $split;
	  }

	  return [
	    // `String.prototype.split` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.split
	    function split(separator, limit) {
	      var O = defined(this);
	      var splitter = separator == undefined ? undefined : separator[SPLIT];
	      return splitter !== undefined
	        ? splitter.call(separator, O, limit)
	        : internalSplit.call(String(O), separator, limit);
	    },
	    // `RegExp.prototype[@@split]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
	    //
	    // NOTE: This cannot be properly polyfilled in engines that don't support
	    // the 'y' flag.
	    function (regexp, limit) {
	      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
	      if (res.done) return res.value;

	      var rx = _anObject(regexp);
	      var S = String(this);
	      var C = _speciesConstructor(rx, RegExp);

	      var unicodeMatching = rx.unicode;
	      var flags = (rx.ignoreCase ? 'i' : '') +
	                  (rx.multiline ? 'm' : '') +
	                  (rx.unicode ? 'u' : '') +
	                  (SUPPORTS_Y ? 'y' : 'g');

	      // ^(? + rx + ) is needed, in combination with some S slicing, to
	      // simulate the 'y' flag.
	      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (S.length === 0) return _regexpExecAbstract(splitter, S) === null ? [S] : [];
	      var p = 0;
	      var q = 0;
	      var A = [];
	      while (q < S.length) {
	        splitter.lastIndex = SUPPORTS_Y ? q : 0;
	        var z = _regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
	        var e;
	        if (
	          z === null ||
	          (e = $min(_toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
	        ) {
	          q = _advanceStringIndex(S, q, unicodeMatching);
	        } else {
	          A.push(S.slice(p, q));
	          if (A.length === lim) return A;
	          for (var i = 1; i <= z.length - 1; i++) {
	            A.push(z[i]);
	            if (A.length === lim) return A;
	          }
	          q = p = e;
	        }
	      }
	      A.push(S.slice(p));
	      return A;
	    }
	  ];
	});

	var _anInstance = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

	var _forOf = createCommonjsModule(function (module) {
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : core_getIteratorMethod(iterable);
	  var f = _ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
	    result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = _iterCall(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;
	});

	var process = _global.process;
	var setTask = _global.setImmediate;
	var clearTask = _global.clearImmediate;
	var MessageChannel$1 = _global.MessageChannel;
	var Dispatch = _global.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      _invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (_cof(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(_ctx(run, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(_ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel$1) {
	    channel = new MessageChannel$1();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = _ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {
	    defer = function (id) {
	      _global.postMessage(id + '', '*');
	    };
	    _global.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in _domCreate('script')) {
	    defer = function (id) {
	      _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {
	        _html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(_ctx(run, id, 1), 0);
	    };
	  }
	}
	var _task = {
	  set: setTask,
	  clear: clearTask
	};

	var macrotask = _task.set;
	var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
	var process$1 = _global.process;
	var Promise$1 = _global.Promise;
	var isNode = _cof(process$1) == 'process';

	var _microtask = function () {
	  var head, last, notify;

	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process$1.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process$1.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    var promise = Promise$1.resolve(undefined);
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(_global, flush);
	    };
	  }

	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};

	// 25.4.1.5 NewPromiseCapability(C)


	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = _aFunction(resolve);
	  this.reject = _aFunction(reject);
	}

	var f$7 = function (C) {
	  return new PromiseCapability(C);
	};

	var _newPromiseCapability = {
		f: f$7
	};

	var _perform = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};

	var navigator$1 = _global.navigator;

	var _userAgent = navigator$1 && navigator$1.userAgent || '';

	var _promiseResolve = function (C, x) {
	  _anObject(C);
	  if (_isObject(x) && x.constructor === C) return x;
	  var promiseCapability = _newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var _redefineAll = function (target, src, safe) {
	  for (var key in src) _redefine(target, key, src[key], safe);
	  return target;
	};

	var task = _task.set;
	var microtask = _microtask();




	var PROMISE = 'Promise';
	var TypeError$1 = _global.TypeError;
	var process$2 = _global.process;
	var versions = process$2 && process$2.versions;
	var v8 = versions && versions.v8 || '';
	var $Promise = _global[PROMISE];
	var isNode$1 = _classof(process$2) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = _newPromiseCapability.f;

	var USE_NATIVE$1 = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode$1 || typeof PromiseRejectionEvent == 'function')
	      && promise.then(empty) instanceof FakePromise
	      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	      // we can't detect it synchronously, so just check versions
	      && v8.indexOf('6.6') !== 0
	      && _userAgent.indexOf('Chrome/66') === -1;
	  } catch (e) { /* empty */ }
	}();

	// helpers
	var isThenable = function (it) {
	  var then;
	  return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // may throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        if (domain && !exited) domain.exit();
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(_global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = _perform(function () {
	        if (isNode$1) {
	          process$2.emit('unhandledRejection', value, promise);
	        } else if (handler = _global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = _global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(_global, function () {
	    var handler;
	    if (isNode$1) {
	      process$2.emit('rejectionHandled', promise);
	    } else if (handler = _global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};

	// constructor polyfill
	if (!USE_NATIVE$1) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    _anInstance(this, $Promise, PROMISE, '_h');
	    _aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = _redefineAll($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(_speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode$1 ? process$2.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = _ctx($resolve, promise, 1);
	    this.reject = _ctx($reject, promise, 1);
	  };
	  _newPromiseCapability.f = newPromiseCapability = function (C) {
	    return C === $Promise || C === Wrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}

	_export(_export.G + _export.W + _export.F * !USE_NATIVE$1, { Promise: $Promise });
	_setToStringTag($Promise, PROMISE);
	_setSpecies(PROMISE);
	Wrapper = _core[PROMISE];

	// statics
	_export(_export.S + _export.F * !USE_NATIVE$1, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	_export(_export.S + _export.F * ( !USE_NATIVE$1), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return _promiseResolve( this, x);
	  }
	});
	_export(_export.S + _export.F * !(USE_NATIVE$1 && _iterDetect(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = _perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      _forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = _perform(function () {
	      _forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});

	var _validateCollection = function (it, TYPE) {
	  if (!_isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
	  return it;
	};

	var dP$5 = _objectDp.f;









	var fastKey = _meta.fastKey;

	var SIZE = _descriptors ? '_s' : 'size';

	var getEntry = function (that, key) {
	  // fast case
	  var index = fastKey(key);
	  var entry;
	  if (index !== 'F') return that._i[index];
	  // frozen object case
	  for (entry = that._f; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	};

	var _collectionStrong = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      _anInstance(that, C, NAME, '_i');
	      that._t = NAME;         // collection type
	      that._i = _objectCreate(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    _redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = _validateCollection(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = _validateCollection(this, NAME);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n;
	          var prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that._f == entry) that._f = next;
	          if (that._l == entry) that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        _validateCollection(this, NAME);
	        var f = _ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.n : this._f) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(_validateCollection(this, NAME), key);
	      }
	    });
	    if (_descriptors) dP$5(C.prototype, 'size', {
	      get: function () {
	        return _validateCollection(this, NAME)[SIZE];
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var entry = getEntry(that, key);
	    var prev, index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if (!that._f) that._f = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function (C, NAME, IS_MAP) {
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    _iterDefine(C, NAME, function (iterated, kind) {
	      this._t = _validateCollection(iterated, NAME); // target
	      this._k = kind;                     // kind
	      this._l = undefined;                // previous
	    }, function () {
	      var that = this;
	      var kind = that._k;
	      var entry = that._l;
	      // revert to the last existing entry
	      while (entry && entry.r) entry = entry.p;
	      // get next entry
	      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
	        // or finish the iteration
	        that._t = undefined;
	        return _iterStep(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return _iterStep(0, entry.k);
	      if (kind == 'values') return _iterStep(0, entry.v);
	      return _iterStep(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    _setSpecies(NAME);
	  }
	};

	var _collection = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
	  var Base = _global[NAME];
	  var C = Base;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var proto = C && C.prototype;
	  var O = {};
	  var fixMethod = function (KEY) {
	    var fn = proto[KEY];
	    _redefine(proto, KEY,
	      KEY == 'delete' ? function (a) {
	        return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a) {
	        return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a) {
	        return IS_WEAK && !_isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !_fails(function () {
	    new C().entries().next();
	  }))) {
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    _redefineAll(C.prototype, methods);
	    _meta.NEED = true;
	  } else {
	    var instance = new C();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = _fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    var ACCEPT_ITERABLES = _iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && _fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new C();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });
	    if (!ACCEPT_ITERABLES) {
	      C = wrapper(function (target, iterable) {
	        _anInstance(target, C, NAME);
	        var that = _inheritIfRequired(new Base(), target, C);
	        if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if (IS_WEAK && proto.clear) delete proto.clear;
	  }

	  _setToStringTag(C, NAME);

	  O[NAME] = C;
	  _export(_export.G + _export.W + _export.F * (C != Base), O);

	  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

	  return C;
	};

	var MAP = 'Map';

	// 23.1 Map Objects
	var es6_map = _collection(MAP, function (get) {
	  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = _collectionStrong.getEntry(_validateCollection(this, MAP), key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return _collectionStrong.def(_validateCollection(this, MAP), key === 0 ? 0 : key, value);
	  }
	}, _collectionStrong, true);

	var SET = 'Set';

	// 23.2 Set Objects
	var es6_set = _collection(SET, function (get) {
	  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value) {
	    return _collectionStrong.def(_validateCollection(this, SET), value = value === 0 ? 0 : value, value);
	  }
	}, _collectionStrong);

	var getWeak = _meta.getWeak;







	var arrayFind = _arrayMethods(5);
	var arrayFindIndex = _arrayMethods(6);
	var id$1 = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (that) {
	  return that._l || (that._l = new UncaughtFrozenStore());
	};
	var UncaughtFrozenStore = function () {
	  this.a = [];
	};
	var findUncaughtFrozen = function (store, key) {
	  return arrayFind(store.a, function (it) {
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = arrayFindIndex(this.a, function (it) {
	      return it[0] === key;
	    });
	    if (~index) this.a.splice(index, 1);
	    return !!~index;
	  }
	};

	var _collectionWeak = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      _anInstance(that, C, NAME, '_i');
	      that._t = NAME;      // collection type
	      that._i = id$1++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    _redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function (key) {
	        if (!_isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME))['delete'](key);
	        return data && _has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key) {
	        if (!_isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME)).has(key);
	        return data && _has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var data = getWeak(_anObject(key), true);
	    if (data === true) uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};

	var es6_weakMap = createCommonjsModule(function (module) {

	var each = _arrayMethods(0);






	var NATIVE_WEAK_MAP = _validateCollection;
	var IS_IE11 = !_global.ActiveXObject && 'ActiveXObject' in _global;
	var WEAK_MAP = 'WeakMap';
	var getWeak = _meta.getWeak;
	var isExtensible = Object.isExtensible;
	var uncaughtFrozenStore = _collectionWeak.ufstore;
	var InternalMap;

	var wrapper = function (get) {
	  return function WeakMap() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};

	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key) {
	    if (_isObject(key)) {
	      var data = getWeak(key);
	      if (data === true) return uncaughtFrozenStore(_validateCollection(this, WEAK_MAP)).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value) {
	    return _collectionWeak.def(_validateCollection(this, WEAK_MAP), key, value);
	  }
	};

	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = _collection(WEAK_MAP, wrapper, methods, _collectionWeak, true, true);

	// IE11 WeakMap frozen keys fix
	if (NATIVE_WEAK_MAP && IS_IE11) {
	  InternalMap = _collectionWeak.getConstructor(wrapper, WEAK_MAP);
	  _objectAssign(InternalMap.prototype, methods);
	  _meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function (key) {
	    var proto = $WeakMap.prototype;
	    var method = proto[key];
	    _redefine(proto, key, function (a, b) {
	      // store frozen objects on internal weakmap shim
	      if (_isObject(a) && !isExtensible(a)) {
	        if (!this._f) this._f = new InternalMap();
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}
	});

	var WEAK_SET = 'WeakSet';

	// 23.4 WeakSet Objects
	_collection(WEAK_SET, function (get) {
	  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value) {
	    return _collectionWeak.def(_validateCollection(this, WEAK_SET), value, true);
	  }
	}, _collectionWeak, false, true);

	var TYPED = _uid('typed_array');
	var VIEW = _uid('view');
	var ABV = !!(_global.ArrayBuffer && _global.DataView);
	var CONSTR = ABV;
	var i$1 = 0;
	var l = 9;
	var Typed;

	var TypedArrayConstructors = (
	  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
	).split(',');

	while (i$1 < l) {
	  if (Typed = _global[TypedArrayConstructors[i$1++]]) {
	    _hide(Typed.prototype, TYPED, true);
	    _hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}

	var _typed = {
	  ABV: ABV,
	  CONSTR: CONSTR,
	  TYPED: TYPED,
	  VIEW: VIEW
	};

	// https://tc39.github.io/ecma262/#sec-toindex


	var _toIndex = function (it) {
	  if (it === undefined) return 0;
	  var number = _toInteger(it);
	  var length = _toLength(number);
	  if (number !== length) throw RangeError('Wrong length!');
	  return length;
	};

	var _typedBuffer = createCommonjsModule(function (module, exports) {











	var gOPN = _objectGopn.f;
	var dP = _objectDp.f;


	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE = 'prototype';
	var WRONG_LENGTH = 'Wrong length!';
	var WRONG_INDEX = 'Wrong index!';
	var $ArrayBuffer = _global[ARRAY_BUFFER];
	var $DataView = _global[DATA_VIEW];
	var Math = _global.Math;
	var RangeError = _global.RangeError;
	// eslint-disable-next-line no-shadow-restricted-names
	var Infinity = _global.Infinity;
	var BaseBuffer = $ArrayBuffer;
	var abs = Math.abs;
	var pow = Math.pow;
	var floor = Math.floor;
	var log = Math.log;
	var LN2 = Math.LN2;
	var BUFFER = 'buffer';
	var BYTE_LENGTH = 'byteLength';
	var BYTE_OFFSET = 'byteOffset';
	var $BUFFER = _descriptors ? '_b' : BUFFER;
	var $LENGTH = _descriptors ? '_l' : BYTE_LENGTH;
	var $OFFSET = _descriptors ? '_o' : BYTE_OFFSET;

	// IEEE754 conversions based on https://github.com/feross/ieee754
	function packIEEE754(value, mLen, nBytes) {
	  var buffer = new Array(nBytes);
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
	  var i = 0;
	  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
	  var e, m, c;
	  value = abs(value);
	  // eslint-disable-next-line no-self-compare
	  if (value != value || value === Infinity) {
	    // eslint-disable-next-line no-self-compare
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if (value * (c = pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
	  e = e << mLen | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
	  buffer[--i] |= s * 128;
	  return buffer;
	}
	function unpackIEEE754(buffer, mLen, nBytes) {
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = eLen - 7;
	  var i = nBytes - 1;
	  var s = buffer[i--];
	  var e = s & 127;
	  var m;
	  s >>= 7;
	  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  } return (s ? -1 : 1) * m * pow(2, e - mLen);
	}

	function unpackI32(bytes) {
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	}
	function packI8(it) {
	  return [it & 0xff];
	}
	function packI16(it) {
	  return [it & 0xff, it >> 8 & 0xff];
	}
	function packI32(it) {
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	}
	function packF64(it) {
	  return packIEEE754(it, 52, 8);
	}
	function packF32(it) {
	  return packIEEE754(it, 23, 4);
	}

	function addGetter(C, key, internal) {
	  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
	}

	function get(view, bytes, index, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = _toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	}
	function set(view, bytes, index, conversion, value, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = _toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = conversion(+value);
	  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	}

	if (!_typed.ABV) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    _anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = _toIndex(length);
	    this._b = _arrayFill.call(new Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };

	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    _anInstance(this, $DataView, DATA_VIEW);
	    _anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH];
	    var offset = _toInteger(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : _toLength(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };

	  if (_descriptors) {
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }

	  _redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset) {
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /* , littleEndian */) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /* , littleEndian */) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if (!_fails(function () {
	    $ArrayBuffer(1);
	  }) || !_fails(function () {
	    new $ArrayBuffer(-1); // eslint-disable-line no-new
	  }) || _fails(function () {
	    new $ArrayBuffer(); // eslint-disable-line no-new
	    new $ArrayBuffer(1.5); // eslint-disable-line no-new
	    new $ArrayBuffer(NaN); // eslint-disable-line no-new
	    return $ArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      _anInstance(this, $ArrayBuffer);
	      return new BaseBuffer(_toIndex(length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
	      if (!((key = keys[j++]) in $ArrayBuffer)) _hide($ArrayBuffer, key, BaseBuffer[key]);
	    }
	    ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2));
	  var $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if (view.getInt8(0) || !view.getInt8(1)) _redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	_setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	_setToStringTag($DataView, DATA_VIEW);
	_hide($DataView[PROTOTYPE], _typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;
	});

	var ArrayBuffer$1 = _global.ArrayBuffer;

	var $ArrayBuffer = _typedBuffer.ArrayBuffer;
	var $DataView = _typedBuffer.DataView;
	var $isView = _typed.ABV && ArrayBuffer$1.isView;
	var $slice = $ArrayBuffer.prototype.slice;
	var VIEW$1 = _typed.VIEW;
	var ARRAY_BUFFER = 'ArrayBuffer';

	_export(_export.G + _export.W + _export.F * (ArrayBuffer$1 !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

	_export(_export.S + _export.F * !_typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it) {
	    return $isView && $isView(it) || _isObject(it) && VIEW$1 in it;
	  }
	});

	_export(_export.P + _export.U + _export.F * _fails(function () {
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end) {
	    if ($slice !== undefined && end === undefined) return $slice.call(_anObject(this), start); // FF fix
	    var len = _anObject(this).byteLength;
	    var first = _toAbsoluteIndex(start, len);
	    var fin = _toAbsoluteIndex(end === undefined ? len : end, len);
	    var result = new (_speciesConstructor(this, $ArrayBuffer))(_toLength(fin - first));
	    var viewS = new $DataView(this);
	    var viewT = new $DataView(result);
	    var index = 0;
	    while (first < fin) {
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    } return result;
	  }
	});

	_setSpecies(ARRAY_BUFFER);

	_export(_export.G + _export.W + _export.F * !_typed.ABV, {
	  DataView: _typedBuffer.DataView
	});

	var _typedArray = createCommonjsModule(function (module) {
	if (_descriptors) {
	  var LIBRARY = _library;
	  var global = _global;
	  var fails = _fails;
	  var $export = _export;
	  var $typed = _typed;
	  var $buffer = _typedBuffer;
	  var ctx = _ctx;
	  var anInstance = _anInstance;
	  var propertyDesc = _propertyDesc;
	  var hide = _hide;
	  var redefineAll = _redefineAll;
	  var toInteger = _toInteger;
	  var toLength = _toLength;
	  var toIndex = _toIndex;
	  var toAbsoluteIndex = _toAbsoluteIndex;
	  var toPrimitive = _toPrimitive;
	  var has = _has;
	  var classof = _classof;
	  var isObject = _isObject;
	  var toObject = _toObject;
	  var isArrayIter = _isArrayIter;
	  var create = _objectCreate;
	  var getPrototypeOf = _objectGpo;
	  var gOPN = _objectGopn.f;
	  var getIterFn = core_getIteratorMethod;
	  var uid = _uid;
	  var wks = _wks;
	  var createArrayMethod = _arrayMethods;
	  var createArrayIncludes = _arrayIncludes;
	  var speciesConstructor = _speciesConstructor;
	  var ArrayIterators = es6_array_iterator;
	  var Iterators = _iterators;
	  var $iterDetect = _iterDetect;
	  var setSpecies = _setSpecies;
	  var arrayFill = _arrayFill;
	  var arrayCopyWithin = _arrayCopyWithin;
	  var $DP = _objectDp;
	  var $GOPD = _objectGopd;
	  var dP = $DP.f;
	  var gOPD = $GOPD.f;
	  var RangeError = global.RangeError;
	  var TypeError = global.TypeError;
	  var Uint8Array = global.Uint8Array;
	  var ARRAY_BUFFER = 'ArrayBuffer';
	  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
	  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	  var PROTOTYPE = 'prototype';
	  var ArrayProto = Array[PROTOTYPE];
	  var $ArrayBuffer = $buffer.ArrayBuffer;
	  var $DataView = $buffer.DataView;
	  var arrayForEach = createArrayMethod(0);
	  var arrayFilter = createArrayMethod(2);
	  var arraySome = createArrayMethod(3);
	  var arrayEvery = createArrayMethod(4);
	  var arrayFind = createArrayMethod(5);
	  var arrayFindIndex = createArrayMethod(6);
	  var arrayIncludes = createArrayIncludes(true);
	  var arrayIndexOf = createArrayIncludes(false);
	  var arrayValues = ArrayIterators.values;
	  var arrayKeys = ArrayIterators.keys;
	  var arrayEntries = ArrayIterators.entries;
	  var arrayLastIndexOf = ArrayProto.lastIndexOf;
	  var arrayReduce = ArrayProto.reduce;
	  var arrayReduceRight = ArrayProto.reduceRight;
	  var arrayJoin = ArrayProto.join;
	  var arraySort = ArrayProto.sort;
	  var arraySlice = ArrayProto.slice;
	  var arrayToString = ArrayProto.toString;
	  var arrayToLocaleString = ArrayProto.toLocaleString;
	  var ITERATOR = wks('iterator');
	  var TAG = wks('toStringTag');
	  var TYPED_CONSTRUCTOR = uid('typed_constructor');
	  var DEF_CONSTRUCTOR = uid('def_constructor');
	  var ALL_CONSTRUCTORS = $typed.CONSTR;
	  var TYPED_ARRAY = $typed.TYPED;
	  var VIEW = $typed.VIEW;
	  var WRONG_LENGTH = 'Wrong length!';

	  var $map = createArrayMethod(1, function (O, length) {
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });

	  var LITTLE_ENDIAN = fails(function () {
	    // eslint-disable-next-line no-undef
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });

	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
	    new Uint8Array(1).set({});
	  });

	  var toOffset = function (it, BYTES) {
	    var offset = toInteger(it);
	    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
	    return offset;
	  };

	  var validate = function (it) {
	    if (isObject(it) && TYPED_ARRAY in it) return it;
	    throw TypeError(it + ' is not a typed array!');
	  };

	  var allocate = function (C, length) {
	    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
	      throw TypeError('It is not a typed array constructor!');
	    } return new C(length);
	  };

	  var speciesFromList = function (O, list) {
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };

	  var fromList = function (C, list) {
	    var index = 0;
	    var length = list.length;
	    var result = allocate(C, length);
	    while (length > index) result[index] = list[index++];
	    return result;
	  };

	  var addGetter = function (it, key, internal) {
	    dP(it, key, { get: function () { return this._d[internal]; } });
	  };

	  var $from = function from(source /* , mapfn, thisArg */) {
	    var O = toObject(source);
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var iterFn = getIterFn(O);
	    var i, length, values, result, step, iterator;
	    if (iterFn != undefined && !isArrayIter(iterFn)) {
	      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
	        values.push(step.value);
	      } O = values;
	    }
	    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
	    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };

	  var $of = function of(/* ...items */) {
	    var index = 0;
	    var length = arguments.length;
	    var result = allocate(this, length);
	    while (length > index) result[index] = arguments[index++];
	    return result;
	  };

	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

	  var $toLocaleString = function toLocaleString() {
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };

	  var proto = {
	    copyWithin: function copyWithin(target, start /* , end */) {
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /* , thisArg */) {
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /* , thisArg */) {
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
	        arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /* , thisArg */) {
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /* , thisArg */) {
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /* , thisArg */) {
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /* , fromIndex */) {
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /* , fromIndex */) {
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator) { // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /* , thisArg */) {
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse() {
	      var that = this;
	      var length = validate(that).length;
	      var middle = Math.floor(length / 2);
	      var index = 0;
	      var value;
	      while (index < middle) {
	        value = that[index];
	        that[index++] = that[--length];
	        that[length] = value;
	      } return that;
	    },
	    some: function some(callbackfn /* , thisArg */) {
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn) {
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end) {
	      var O = validate(this);
	      var length = O.length;
	      var $begin = toAbsoluteIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
	        O.buffer,
	        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
	        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
	      );
	    }
	  };

	  var $slice = function slice(start, end) {
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };

	  var $set = function set(arrayLike /* , offset */) {
	    validate(this);
	    var offset = toOffset(arguments[1], 1);
	    var length = this.length;
	    var src = toObject(arrayLike);
	    var len = toLength(src.length);
	    var index = 0;
	    if (len + offset > length) throw RangeError(WRONG_LENGTH);
	    while (index < len) this[offset + index] = src[index++];
	  };

	  var $iterators = {
	    entries: function entries() {
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys() {
	      return arrayKeys.call(validate(this));
	    },
	    values: function values() {
	      return arrayValues.call(validate(this));
	    }
	  };

	  var isTAIndex = function (target, key) {
	    return isObject(target)
	      && target[TYPED_ARRAY]
	      && typeof key != 'symbol'
	      && key in target
	      && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key) {
	    return isTAIndex(target, key = toPrimitive(key, true))
	      ? propertyDesc(2, target[key])
	      : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc) {
	    if (isTAIndex(target, key = toPrimitive(key, true))
	      && isObject(desc)
	      && has(desc, 'value')
	      && !has(desc, 'get')
	      && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable
	      && (!has(desc, 'writable') || desc.writable)
	      && (!has(desc, 'enumerable') || desc.enumerable)
	    ) {
	      target[key] = desc.value;
	      return target;
	    } return dP(target, key, desc);
	  };

	  if (!ALL_CONSTRUCTORS) {
	    $GOPD.f = $getDesc;
	    $DP.f = $setDesc;
	  }

	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty: $setDesc
	  });

	  if (fails(function () { arrayToString.call({}); })) {
	    arrayToString = arrayToLocaleString = function toString() {
	      return arrayJoin.call(this);
	    };
	  }

	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice: $slice,
	    set: $set,
	    constructor: function () { /* noop */ },
	    toString: arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function () { return this[TYPED_ARRAY]; }
	  });

	  // eslint-disable-next-line max-statements
	  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
	    CLAMPED = !!CLAMPED;
	    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + KEY;
	    var SETTER = 'set' + KEY;
	    var TypedArray = global[NAME];
	    var Base = TypedArray || {};
	    var TAC = TypedArray && getPrototypeOf(TypedArray);
	    var FORCED = !TypedArray || !$typed.ABV;
	    var O = {};
	    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function (that, index) {
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function (that, index, value) {
	      var data = that._d;
	      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function (that, index) {
	      dP(that, index, {
	        get: function () {
	          return getter(this, index);
	        },
	        set: function (value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if (FORCED) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME, '_d');
	        var index = 0;
	        var offset = 0;
	        var buffer, byteLength, length, klass;
	        if (!isObject(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new $ArrayBuffer(byteLength);
	        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (TYPED_ARRAY in data) {
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while (index < length) addElement(that, index++);
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if (!fails(function () {
	      TypedArray(1);
	    }) || !fails(function () {
	      new TypedArray(-1); // eslint-disable-line no-new
	    }) || !$iterDetect(function (iter) {
	      new TypedArray(); // eslint-disable-line no-new
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(1.5); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if (!isObject(data)) return new Base(toIndex(data));
	        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          return $length !== undefined
	            ? new Base(data, toOffset($offset, BYTES), $length)
	            : $offset !== undefined
	              ? new Base(data, toOffset($offset, BYTES))
	              : new Base(data);
	        }
	        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
	        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator = TypedArrayPrototype[ITERATOR];
	    var CORRECT_ITER_NAME = !!$nativeIterator
	      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
	    var $iterator = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

	    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
	      dP(TypedArrayPrototype, TAG, {
	        get: function () { return NAME; }
	      });
	    }

	    O[NAME] = TypedArray;

	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES
	    });

	    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
	      from: $from,
	      of: $of
	    });

	    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

	    $export($export.P, NAME, proto);

	    setSpecies(NAME);

	    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

	    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

	    $export($export.P + $export.F * fails(function () {
	      new TypedArray(1).slice();
	    }), NAME, { slice: $slice });

	    $export($export.P + $export.F * (fails(function () {
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
	    }) || !fails(function () {
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, { toLocaleString: $toLocaleString });

	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function () { /* empty */ };
	});

	_typedArray('Int8', 1, function (init) {
	  return function Int8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Uint8', 1, function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Uint8', 1, function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);

	_typedArray('Int16', 2, function (init) {
	  return function Int16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Uint16', 2, function (init) {
	  return function Uint16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Int32', 4, function (init) {
	  return function Int32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Uint32', 4, function (init) {
	  return function Uint32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Float32', 4, function (init) {
	  return function Float32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Float64', 8, function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)



	var rApply = (_global.Reflect || {}).apply;
	var fApply = Function.apply;
	// MS Edge argumentsList argument is optional
	_export(_export.S + _export.F * !_fails(function () {
	  rApply(function () { /* empty */ });
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList) {
	    var T = _aFunction(target);
	    var L = _anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])







	var rConstruct = (_global.Reflect || {}).construct;

	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = _fails(function () {
	  function F() { /* empty */ }
	  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
	});
	var ARGS_BUG = !_fails(function () {
	  rConstruct(function () { /* empty */ });
	});

	_export(_export.S + _export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /* , newTarget */) {
	    _aFunction(Target);
	    _anObject(args);
	    var newTarget = arguments.length < 3 ? Target : _aFunction(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (_bind.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = _objectCreate(_isObject(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return _isObject(result) ? result : instance;
	  }
	});

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)





	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	_export(_export.S + _export.F * _fails(function () {
	  // eslint-disable-next-line no-undef
	  Reflect.defineProperty(_objectDp.f({}, 1, { value: 1 }), 1, { value: 2 });
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    _anObject(target);
	    propertyKey = _toPrimitive(propertyKey, true);
	    _anObject(attributes);
	    try {
	      _objectDp.f(target, propertyKey, attributes);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)

	var gOPD$3 = _objectGopd.f;


	_export(_export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var desc = gOPD$3(_anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});

	// 26.1.5 Reflect.enumerate(target)


	var Enumerate = function (iterated) {
	  this._t = _anObject(iterated); // target
	  this._i = 0;                  // next index
	  var keys = this._k = [];      // keys
	  var key;
	  for (key in iterated) keys.push(key);
	};
	_iterCreate(Enumerate, 'Object', function () {
	  var that = this;
	  var keys = that._k;
	  var key;
	  do {
	    if (that._i >= keys.length) return { value: undefined, done: true };
	  } while (!((key = keys[that._i++]) in that._t));
	  return { value: key, done: false };
	});

	_export(_export.S, 'Reflect', {
	  enumerate: function enumerate(target) {
	    return new Enumerate(target);
	  }
	});

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])







	function get(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var desc, proto;
	  if (_anObject(target) === receiver) return target[propertyKey];
	  if (desc = _objectGopd.f(target, propertyKey)) return _has(desc, 'value')
	    ? desc.value
	    : desc.get !== undefined
	      ? desc.get.call(receiver)
	      : undefined;
	  if (_isObject(proto = _objectGpo(target))) return get(proto, propertyKey, receiver);
	}

	_export(_export.S, 'Reflect', { get: get });

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)




	_export(_export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return _objectGopd.f(_anObject(target), propertyKey);
	  }
	});

	// 26.1.8 Reflect.getPrototypeOf(target)




	_export(_export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target) {
	    return _objectGpo(_anObject(target));
	  }
	});

	// 26.1.9 Reflect.has(target, propertyKey)


	_export(_export.S, 'Reflect', {
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  }
	});

	// 26.1.10 Reflect.isExtensible(target)


	var $isExtensible = Object.isExtensible;

	_export(_export.S, 'Reflect', {
	  isExtensible: function isExtensible(target) {
	    _anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});

	// all object keys, includes non-enumerable and symbols



	var Reflect$1 = _global.Reflect;
	var _ownKeys = Reflect$1 && Reflect$1.ownKeys || function ownKeys(it) {
	  var keys = _objectGopn.f(_anObject(it));
	  var getSymbols = _objectGops.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

	// 26.1.11 Reflect.ownKeys(target)


	_export(_export.S, 'Reflect', { ownKeys: _ownKeys });

	// 26.1.12 Reflect.preventExtensions(target)


	var $preventExtensions = Object.preventExtensions;

	_export(_export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target) {
	    _anObject(target);
	    try {
	      if ($preventExtensions) $preventExtensions(target);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])









	function set(target, propertyKey, V /* , receiver */) {
	  var receiver = arguments.length < 4 ? target : arguments[3];
	  var ownDesc = _objectGopd.f(_anObject(target), propertyKey);
	  var existingDescriptor, proto;
	  if (!ownDesc) {
	    if (_isObject(proto = _objectGpo(target))) {
	      return set(proto, propertyKey, V, receiver);
	    }
	    ownDesc = _propertyDesc(0);
	  }
	  if (_has(ownDesc, 'value')) {
	    if (ownDesc.writable === false || !_isObject(receiver)) return false;
	    if (existingDescriptor = _objectGopd.f(receiver, propertyKey)) {
	      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
	      existingDescriptor.value = V;
	      _objectDp.f(receiver, propertyKey, existingDescriptor);
	    } else _objectDp.f(receiver, propertyKey, _propertyDesc(0, V));
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}

	_export(_export.S, 'Reflect', { set: set });

	// 26.1.14 Reflect.setPrototypeOf(target, proto)



	if (_setProto) _export(_export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto) {
	    _setProto.check(target, proto);
	    try {
	      _setProto.set(target, proto);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});

	// https://github.com/tc39/Array.prototype.includes

	var $includes = _arrayIncludes(true);

	_export(_export.P, 'Array', {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	_addToUnscopables('includes');

	var includes = _core.Array.includes;

	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray




	var IS_CONCAT_SPREADABLE = _wks('isConcatSpreadable');

	function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? _ctx(mapper, thisArg, 3) : false;
	  var element, spreadable;

	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

	      spreadable = false;
	      if (_isObject(element)) {
	        spreadable = element[IS_CONCAT_SPREADABLE];
	        spreadable = spreadable !== undefined ? !!spreadable : _isArray(element);
	      }

	      if (spreadable && depth > 0) {
	        targetIndex = flattenIntoArray(target, original, element, _toLength(element.length), targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
	        target[targetIndex] = element;
	      }

	      targetIndex++;
	    }
	    sourceIndex++;
	  }
	  return targetIndex;
	}

	var _flattenIntoArray = flattenIntoArray;

	// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap







	_export(_export.P, 'Array', {
	  flatMap: function flatMap(callbackfn /* , thisArg */) {
	    var O = _toObject(this);
	    var sourceLen, A;
	    _aFunction(callbackfn);
	    sourceLen = _toLength(O.length);
	    A = _arraySpeciesCreate(O, 0);
	    _flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
	    return A;
	  }
	});

	_addToUnscopables('flatMap');

	var flatMap = _core.Array.flatMap;

	// https://github.com/tc39/proposal-string-pad-start-end




	var _stringPad = function (that, maxLength, fillString, left) {
	  var S = String(_defined(that));
	  var stringLength = S.length;
	  var fillStr = fillString === undefined ? ' ' : String(fillString);
	  var intMaxLength = _toLength(maxLength);
	  if (intMaxLength <= stringLength || fillStr == '') return S;
	  var fillLen = intMaxLength - stringLength;
	  var stringFiller = _stringRepeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};

	// https://github.com/tc39/proposal-string-pad-start-end




	// https://github.com/zloirock/core-js/issues/280
	var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(_userAgent);

	_export(_export.P + _export.F * WEBKIT_BUG, 'String', {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});

	var padStart = _core.String.padStart;

	// https://github.com/tc39/proposal-string-pad-start-end




	// https://github.com/zloirock/core-js/issues/280
	var WEBKIT_BUG$1 = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(_userAgent);

	_export(_export.P + _export.F * WEBKIT_BUG$1, 'String', {
	  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
	    return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});

	var padEnd = _core.String.padEnd;

	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	_stringTrim('trimLeft', function ($trim) {
	  return function trimLeft() {
	    return $trim(this, 1);
	  };
	}, 'trimStart');

	var trimStart = _core.String.trimLeft;

	// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
	_stringTrim('trimRight', function ($trim) {
	  return function trimRight() {
	    return $trim(this, 2);
	  };
	}, 'trimEnd');

	var trimEnd = _core.String.trimRight;

	_wksDefine('asyncIterator');

	var asyncIterator = _wksExt.f('asyncIterator');

	// https://github.com/tc39/proposal-object-getownpropertydescriptors






	_export(_export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = _toIobject(object);
	    var getDesc = _objectGopd.f;
	    var keys = _ownKeys(O);
	    var result = {};
	    var i = 0;
	    var key, desc;
	    while (keys.length > i) {
	      desc = getDesc(O, key = keys[i++]);
	      if (desc !== undefined) _createProperty(result, key, desc);
	    }
	    return result;
	  }
	});

	var getOwnPropertyDescriptors = _core.Object.getOwnPropertyDescriptors;

	var isEnum$1 = _objectPie.f;
	var _objectToArray = function (isEntries) {
	  return function (it) {
	    var O = _toIobject(it);
	    var keys = _objectKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) {
	      key = keys[i++];
	      if (!_descriptors || isEnum$1.call(O, key)) {
	        result.push(isEntries ? [key, O[key]] : O[key]);
	      }
	    }
	    return result;
	  };
	};

	// https://github.com/tc39/proposal-object-values-entries

	var $values = _objectToArray(false);

	_export(_export.S, 'Object', {
	  values: function values(it) {
	    return $values(it);
	  }
	});

	var values = _core.Object.values;

	// https://github.com/tc39/proposal-object-values-entries

	var $entries = _objectToArray(true);

	_export(_export.S, 'Object', {
	  entries: function entries(it) {
	    return $entries(it);
	  }
	});

	var entries = _core.Object.entries;

	_export(_export.P + _export.R, 'Promise', { 'finally': function (onFinally) {
	  var C = _speciesConstructor(this, _core.Promise || _global.Promise);
	  var isFunction = typeof onFinally == 'function';
	  return this.then(
	    isFunction ? function (x) {
	      return _promiseResolve(C, onFinally()).then(function () { return x; });
	    } : onFinally,
	    isFunction ? function (e) {
	      return _promiseResolve(C, onFinally()).then(function () { throw e; });
	    } : onFinally
	  );
	} });

	var _finally = _core.Promise['finally'];

	// ie9- setTimeout & setInterval additional parameters fix



	var slice = [].slice;
	var MSIE = /MSIE .\./.test(_userAgent); // <- dirty ie9- check
	var wrap$1 = function (set) {
	  return function (fn, time /* , ...args */) {
	    var boundArgs = arguments.length > 2;
	    var args = boundArgs ? slice.call(arguments, 2) : false;
	    return set(boundArgs ? function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
	    } : fn, time);
	  };
	};
	_export(_export.G + _export.B + _export.F * MSIE, {
	  setTimeout: wrap$1(_global.setTimeout),
	  setInterval: wrap$1(_global.setInterval)
	});

	_export(_export.G + _export.B, {
	  setImmediate: _task.set,
	  clearImmediate: _task.clear
	});

	var ITERATOR$4 = _wks('iterator');
	var TO_STRING_TAG = _wks('toStringTag');
	var ArrayValues = _iterators.Array;

	var DOMIterables = {
	  CSSRuleList: true, // TODO: Not spec compliant, should be false.
	  CSSStyleDeclaration: false,
	  CSSValueList: false,
	  ClientRectList: false,
	  DOMRectList: false,
	  DOMStringList: false,
	  DOMTokenList: true,
	  DataTransferItemList: false,
	  FileList: false,
	  HTMLAllCollection: false,
	  HTMLCollection: false,
	  HTMLFormElement: false,
	  HTMLSelectElement: false,
	  MediaList: true, // TODO: Not spec compliant, should be false.
	  MimeTypeArray: false,
	  NamedNodeMap: false,
	  NodeList: true,
	  PaintRequestList: false,
	  Plugin: false,
	  PluginArray: false,
	  SVGLengthList: false,
	  SVGNumberList: false,
	  SVGPathSegList: false,
	  SVGPointList: false,
	  SVGStringList: false,
	  SVGTransformList: false,
	  SourceBufferList: false,
	  StyleSheetList: true, // TODO: Not spec compliant, should be false.
	  TextTrackCueList: false,
	  TextTrackList: false,
	  TouchList: false
	};

	for (var collections = _objectKeys(DOMIterables), i$2 = 0; i$2 < collections.length; i$2++) {
	  var NAME$1 = collections[i$2];
	  var explicit = DOMIterables[NAME$1];
	  var Collection = _global[NAME$1];
	  var proto$3 = Collection && Collection.prototype;
	  var key$1;
	  if (proto$3) {
	    if (!proto$3[ITERATOR$4]) _hide(proto$3, ITERATOR$4, ArrayValues);
	    if (!proto$3[TO_STRING_TAG]) _hide(proto$3, TO_STRING_TAG, NAME$1);
	    _iterators[NAME$1] = ArrayValues;
	    if (explicit) for (key$1 in es6_array_iterator) if (!proto$3[key$1]) _redefine(proto$3, key$1, es6_array_iterator[key$1], true);
	  }
	}

	var runtime_1 = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	var _global$1 = createCommonjsModule(function (module) {
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	});

	var _core$1 = createCommonjsModule(function (module) {
	var core = module.exports = { version: '2.6.11' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	});

	var _aFunction$1 = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

	// optional / simple context binding

	var _ctx$1 = function (fn, that, length) {
	  _aFunction$1(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var _isObject$1 = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	var _anObject$1 = function (it) {
	  if (!_isObject$1(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

	var _fails$1 = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var _descriptors$1 = !_fails$1(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var document$3 = _global$1.document;
	// typeof document.createElement is 'object' in old IE
	var is$1 = _isObject$1(document$3) && _isObject$1(document$3.createElement);
	var _domCreate$1 = function (it) {
	  return is$1 ? document$3.createElement(it) : {};
	};

	var _ie8DomDefine$1 = !_descriptors$1 && !_fails$1(function () {
	  return Object.defineProperty(_domCreate$1('div'), 'a', { get: function () { return 7; } }).a != 7;
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive$1 = function (it, S) {
	  if (!_isObject$1(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !_isObject$1(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !_isObject$1(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !_isObject$1(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var dP$6 = Object.defineProperty;

	var f$8 = _descriptors$1 ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  _anObject$1(O);
	  P = _toPrimitive$1(P, true);
	  _anObject$1(Attributes);
	  if (_ie8DomDefine$1) try {
	    return dP$6(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var _objectDp$1 = {
		f: f$8
	};

	var _propertyDesc$1 = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _hide$1 = _descriptors$1 ? function (object, key, value) {
	  return _objectDp$1.f(object, key, _propertyDesc$1(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var hasOwnProperty$1 = {}.hasOwnProperty;
	var _has$1 = function (it, key) {
	  return hasOwnProperty$1.call(it, key);
	};

	var PROTOTYPE$3 = 'prototype';

	var $export$1 = function (type, name, source) {
	  var IS_FORCED = type & $export$1.F;
	  var IS_GLOBAL = type & $export$1.G;
	  var IS_STATIC = type & $export$1.S;
	  var IS_PROTO = type & $export$1.P;
	  var IS_BIND = type & $export$1.B;
	  var IS_WRAP = type & $export$1.W;
	  var exports = IS_GLOBAL ? _core$1 : _core$1[name] || (_core$1[name] = {});
	  var expProto = exports[PROTOTYPE$3];
	  var target = IS_GLOBAL ? _global$1 : IS_STATIC ? _global$1[name] : (_global$1[name] || {})[PROTOTYPE$3];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && _has$1(exports, key)) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? _ctx$1(out, _global$1)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE$3] = C[PROTOTYPE$3];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? _ctx$1(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export$1.R && expProto && !expProto[key]) _hide$1(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export$1.F = 1;   // forced
	$export$1.G = 2;   // global
	$export$1.S = 4;   // static
	$export$1.P = 8;   // proto
	$export$1.B = 16;  // bind
	$export$1.W = 32;  // wrap
	$export$1.U = 64;  // safe
	$export$1.R = 128; // real proto method for `library`
	var _export$1 = $export$1;

	// https://github.com/tc39/proposal-global


	_export$1(_export$1.G, { global: _global$1 });

	var global$1 = _core$1.global;

	var lib = createCommonjsModule(function (module) {



	var _global = _interopRequireDefault(global$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	if (_global["default"]._babelPolyfill && typeof console !== "undefined" && console.warn) {
	  console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");
	}

	_global["default"]._babelPolyfill = true;
	});

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty$2.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret;

	var printWarning = function() {};

	{
	  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
	  var loggedTypeFailures = {};
	  var has = Function.call.bind(Object.prototype.hasOwnProperty);

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  {
	    loggedTypeFailures = {};
	  }
	};

	var checkPropTypes_1 = checkPropTypes;

	var react_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	var _assign = objectAssign;
	var checkPropTypes = checkPropTypes_1;

	var ReactVersion = '16.13.1';

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	/**
	 * Keeps track of the current dispatcher.
	 */
	var ReactCurrentDispatcher = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	/**
	 * Keeps track of the current batch's configuration such as how long an update
	 * should suspend for if it needs to.
	 */
	var ReactCurrentBatchConfig = {
	  suspense: null
	};

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
	function describeComponentFrame (name, source, ownerName) {
	  var sourceInfo = '';

	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');

	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);

	        if (match) {
	          var pathBeforeSlash = match[1];

	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }

	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }

	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	}

	var Resolved = 1;
	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return "Profiler";

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';

	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);

	      case REACT_BLOCK_TYPE:
	        return getComponentName(type.render);

	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);

	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }

	          break;
	        }
	    }
	  }

	  return null;
	}

	var ReactDebugCurrentFrame = {};
	var currentlyValidatingElement = null;
	function setCurrentlyValidatingElement(element) {
	  {
	    currentlyValidatingElement = element;
	  }
	}

	{
	  // Stack implementation injected by the current renderer.
	  ReactDebugCurrentFrame.getCurrentStack = null;

	  ReactDebugCurrentFrame.getStackAddendum = function () {
	    var stack = ''; // Add an extra top frame while an element is being validated

	    if (currentlyValidatingElement) {
	      var name = getComponentName(currentlyValidatingElement.type);
	      var owner = currentlyValidatingElement._owner;
	      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
	    } // Delegate to the injected renderer-specific implementation


	    var impl = ReactDebugCurrentFrame.getCurrentStack;

	    if (impl) {
	      stack += impl() || '';
	    }

	    return stack;
	  };
	}

	/**
	 * Used by act() to track whether you're inside an act() scope.
	 */
	var IsSomeRendererActing = {
	  current: false
	};

	var ReactSharedInternals = {
	  ReactCurrentDispatcher: ReactCurrentDispatcher,
	  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
	  ReactCurrentOwner: ReactCurrentOwner,
	  IsSomeRendererActing: IsSomeRendererActing,
	  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
	  assign: _assign
	};

	{
	  _assign(ReactSharedInternals, {
	    // These should not be included in production.
	    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
	    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
	    // TODO: remove in React 17.0.
	    ReactComponentTreeHook: {}
	  });
	}

	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    printWarning('warn', format, args);
	  }
	}
	function error(format) {
	  {
	    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	      args[_key2 - 1] = arguments[_key2];
	    }

	    printWarning('error', format, args);
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

	    if (!hasExistingStack) {
	      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	      var stack = ReactDebugCurrentFrame.getStackAddendum();

	      if (stack !== '') {
	        format += '%s';
	        args = args.concat([stack]);
	      }
	    }

	    var argsWithFormat = args.map(function (item) {
	      return '' + item;
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  }
	}

	var didWarnStateUpdateForUnmountedComponent = {};

	function warnNoop(publicInstance, callerName) {
	  {
	    var _constructor = publicInstance.constructor;
	    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
	    var warningKey = componentName + "." + callerName;

	    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
	      return;
	    }

	    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

	    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
	  }
	}
	/**
	 * This is the abstract API for an update queue.
	 */


	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance, callback, callerName) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	var emptyObject = {};

	{
	  Object.freeze(emptyObject);
	}
	/**
	 * Base class helpers for the updating state of a component.
	 */


	function Component(props, context, updater) {
	  this.props = props;
	  this.context = context; // If a component has string refs, we will assign a different object later.

	  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
	  // renderer.

	  this.updater = updater || ReactNoopUpdateQueue;
	}

	Component.prototype.isReactComponent = {};
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */

	Component.prototype.setState = function (partialState, callback) {
	  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
	    {
	      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
	    }
	  }

	  this.updater.enqueueSetState(this, partialState, callback, 'setState');
	};
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */


	Component.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
	};
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */


	{
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };

	  var defineDeprecationWarning = function (methodName, info) {
	    Object.defineProperty(Component.prototype, methodName, {
	      get: function () {
	        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

	        return undefined;
	      }
	    });
	  };

	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	function ComponentDummy() {}

	ComponentDummy.prototype = Component.prototype;
	/**
	 * Convenience component with default shallow equality check for sCU.
	 */

	function PureComponent(props, context, updater) {
	  this.props = props;
	  this.context = context; // If a component has string refs, we will assign a different object later.

	  this.refs = emptyObject;
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
	pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

	_assign(pureComponentPrototype, Component.prototype);

	pureComponentPrototype.isPureReactComponent = true;

	// an immutable object with a single mutable value
	function createRef() {
	  var refObject = {
	    current: null
	  };

	  {
	    Object.seal(refObject);
	  }

	  return refObject;
	}

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

	{
	  didWarnAboutStringRefs = {};
	}

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    {
	      if (!specialPropKeyWarningShown) {
	        specialPropKeyWarningShown = true;

	        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	      }
	    }
	  };

	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    {
	      if (!specialPropRefWarningShown) {
	        specialPropRefWarningShown = true;

	        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	      }
	    }
	  };

	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	function warnIfStringRefCannotBeAutoConverted(config) {
	  {
	    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
	      var componentName = getComponentName(ReactCurrentOwner.current.type);

	      if (!didWarnAboutStringRefs[componentName]) {
	        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

	        didWarnAboutStringRefs[componentName] = true;
	      }
	    }
	  }
	}
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, instanceof check
	 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} props
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} owner
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @internal
	 */


	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.

	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    }); // self and source are DEV only properties.

	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    }); // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.

	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });

	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://reactjs.org/docs/react-api.html#createelement
	 */

	function createElement(type, config, children) {
	  var propName; // Reserved names are extracted

	  var props = {};
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;

	      {
	        warnIfStringRefCannotBeAutoConverted(config);
	      }
	    }

	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  } // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.


	  var childrenLength = arguments.length - 2;

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }

	    {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }

	    props.children = childArray;
	  } // Resolve default props


	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;

	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  {
	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }

	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	}
	function cloneAndReplaceKey(oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	  return newElement;
	}
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://reactjs.org/docs/react-api.html#cloneelement
	 */

	function cloneElement(element, config, children) {
	  if (!!(element === null || element === undefined)) {
	    {
	      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
	    }
	  }

	  var propName; // Original props are copied

	  var props = _assign({}, element.props); // Reserved names are extracted


	  var key = element.key;
	  var ref = element.ref; // Self is preserved since the owner is preserved.

	  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.

	  var source = element._source; // Owner will be preserved, unless ref is overridden

	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }

	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    } // Remaining properties override existing props


	    var defaultProps;

	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }

	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  } // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.


	  var childrenLength = arguments.length - 2;

	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);

	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }

	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	}
	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */

	function isValidElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	  return '$' + escapedString;
	}
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */


	var didWarnAboutMaps = false;
	var userProvidedKeyEscapeRegex = /\/+/g;

	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	var POOL_SIZE = 10;
	var traverseContextPool = [];

	function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
	  if (traverseContextPool.length) {
	    var traverseContext = traverseContextPool.pop();
	    traverseContext.result = mapResult;
	    traverseContext.keyPrefix = keyPrefix;
	    traverseContext.func = mapFunction;
	    traverseContext.context = mapContext;
	    traverseContext.count = 0;
	    return traverseContext;
	  } else {
	    return {
	      result: mapResult,
	      keyPrefix: keyPrefix,
	      func: mapFunction,
	      context: mapContext,
	      count: 0
	    };
	  }
	}

	function releaseTraverseContext(traverseContext) {
	  traverseContext.result = null;
	  traverseContext.keyPrefix = null;
	  traverseContext.func = null;
	  traverseContext.context = null;
	  traverseContext.count = 0;

	  if (traverseContextPool.length < POOL_SIZE) {
	    traverseContextPool.push(traverseContext);
	  }
	}
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */


	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  var invokeCallback = false;

	  if (children === null) {
	    invokeCallback = true;
	  } else {
	    switch (type) {
	      case 'string':
	      case 'number':
	        invokeCallback = true;
	        break;

	      case 'object':
	        switch (children.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_PORTAL_TYPE:
	            invokeCallback = true;
	        }

	    }
	  }

	  if (invokeCallback) {
	    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);

	    if (typeof iteratorFn === 'function') {

	      {
	        // Warn about using Maps as children
	        if (iteratorFn === children.entries) {
	          if (!didWarnAboutMaps) {
	            warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
	          }

	          didWarnAboutMaps = true;
	        }
	      }

	      var iterator = iteratorFn.call(children);
	      var step;
	      var ii = 0;

	      while (!(step = iterator.next()).done) {
	        child = step.value;
	        nextName = nextNamePrefix + getComponentKey(child, ii++);
	        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	      }
	    } else if (type === 'object') {
	      var addendum = '';

	      {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
	      }

	      var childrenString = '' + children;

	      {
	        {
	          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */


	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */


	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (typeof component === 'object' && component !== null && component.key != null) {
	    // Explicit key
	    return escape(component.key);
	  } // Implicit key determined by the index in the set


	  return index.toString(36);
	}

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	  func.call(context, child, bookKeeping.count++);
	}
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */


	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  releaseTraverseContext(traverseContext);
	}

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	  var mappedChild = func.call(context, child, bookKeeping.count++);

	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
	      return c;
	    });
	  } else if (mappedChild != null) {
	    if (isValidElement(mappedChild)) {
	      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }

	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';

	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }

	  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  releaseTraverseContext(traverseContext);
	}
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */


	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrencount
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */


	function countChildren(children) {
	  return traverseAllChildren(children, function () {
	    return null;
	  }, null);
	}
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
	 */


	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
	    return child;
	  });
	  return result;
	}
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */


	function onlyChild(children) {
	  if (!isValidElement(children)) {
	    {
	      throw Error( "React.Children.only expected to receive a single React element child." );
	    }
	  }

	  return children;
	}

	function createContext(defaultValue, calculateChangedBits) {
	  if (calculateChangedBits === undefined) {
	    calculateChangedBits = null;
	  } else {
	    {
	      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
	        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
	      }
	    }
	  }

	  var context = {
	    $$typeof: REACT_CONTEXT_TYPE,
	    _calculateChangedBits: calculateChangedBits,
	    // As a workaround to support multiple concurrent renderers, we categorize
	    // some renderers as primary and others as secondary. We only expect
	    // there to be two concurrent renderers at most: React Native (primary) and
	    // Fabric (secondary); React DOM (primary) and React ART (secondary).
	    // Secondary renderers store their context values on separate fields.
	    _currentValue: defaultValue,
	    _currentValue2: defaultValue,
	    // Used to track how many concurrent renderers this context currently
	    // supports within in a single renderer. Such as parallel server rendering.
	    _threadCount: 0,
	    // These are circular
	    Provider: null,
	    Consumer: null
	  };
	  context.Provider = {
	    $$typeof: REACT_PROVIDER_TYPE,
	    _context: context
	  };
	  var hasWarnedAboutUsingNestedContextConsumers = false;
	  var hasWarnedAboutUsingConsumerProvider = false;

	  {
	    // A separate object, but proxies back to the original context object for
	    // backwards compatibility. It has a different $$typeof, so we can properly
	    // warn for the incorrect usage of Context as a Consumer.
	    var Consumer = {
	      $$typeof: REACT_CONTEXT_TYPE,
	      _context: context,
	      _calculateChangedBits: context._calculateChangedBits
	    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

	    Object.defineProperties(Consumer, {
	      Provider: {
	        get: function () {
	          if (!hasWarnedAboutUsingConsumerProvider) {
	            hasWarnedAboutUsingConsumerProvider = true;

	            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
	          }

	          return context.Provider;
	        },
	        set: function (_Provider) {
	          context.Provider = _Provider;
	        }
	      },
	      _currentValue: {
	        get: function () {
	          return context._currentValue;
	        },
	        set: function (_currentValue) {
	          context._currentValue = _currentValue;
	        }
	      },
	      _currentValue2: {
	        get: function () {
	          return context._currentValue2;
	        },
	        set: function (_currentValue2) {
	          context._currentValue2 = _currentValue2;
	        }
	      },
	      _threadCount: {
	        get: function () {
	          return context._threadCount;
	        },
	        set: function (_threadCount) {
	          context._threadCount = _threadCount;
	        }
	      },
	      Consumer: {
	        get: function () {
	          if (!hasWarnedAboutUsingNestedContextConsumers) {
	            hasWarnedAboutUsingNestedContextConsumers = true;

	            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	          }

	          return context.Consumer;
	        }
	      }
	    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

	    context.Consumer = Consumer;
	  }

	  {
	    context._currentRenderer = null;
	    context._currentRenderer2 = null;
	  }

	  return context;
	}

	function lazy(ctor) {
	  var lazyType = {
	    $$typeof: REACT_LAZY_TYPE,
	    _ctor: ctor,
	    // React uses these fields to store the result.
	    _status: -1,
	    _result: null
	  };

	  {
	    // In production, this would just set it on the object.
	    var defaultProps;
	    var propTypes;
	    Object.defineProperties(lazyType, {
	      defaultProps: {
	        configurable: true,
	        get: function () {
	          return defaultProps;
	        },
	        set: function (newDefaultProps) {
	          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

	          defaultProps = newDefaultProps; // Match production behavior more closely:

	          Object.defineProperty(lazyType, 'defaultProps', {
	            enumerable: true
	          });
	        }
	      },
	      propTypes: {
	        configurable: true,
	        get: function () {
	          return propTypes;
	        },
	        set: function (newPropTypes) {
	          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

	          propTypes = newPropTypes; // Match production behavior more closely:

	          Object.defineProperty(lazyType, 'propTypes', {
	            enumerable: true
	          });
	        }
	      }
	    });
	  }

	  return lazyType;
	}

	function forwardRef(render) {
	  {
	    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
	      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
	    } else if (typeof render !== 'function') {
	      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
	    } else {
	      if (render.length !== 0 && render.length !== 2) {
	        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
	      }
	    }

	    if (render != null) {
	      if (render.defaultProps != null || render.propTypes != null) {
	        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
	      }
	    }
	  }

	  return {
	    $$typeof: REACT_FORWARD_REF_TYPE,
	    render: render
	  };
	}

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function memo(type, compare) {
	  {
	    if (!isValidElementType(type)) {
	      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
	    }
	  }

	  return {
	    $$typeof: REACT_MEMO_TYPE,
	    type: type,
	    compare: compare === undefined ? null : compare
	  };
	}

	function resolveDispatcher() {
	  var dispatcher = ReactCurrentDispatcher.current;

	  if (!(dispatcher !== null)) {
	    {
	      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
	    }
	  }

	  return dispatcher;
	}

	function useContext(Context, unstable_observedBits) {
	  var dispatcher = resolveDispatcher();

	  {
	    if (unstable_observedBits !== undefined) {
	      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
	    } // TODO: add a more generic warning for invalid values.


	    if (Context._context !== undefined) {
	      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
	      // and nobody should be using this in existing code.

	      if (realContext.Consumer === Context) {
	        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
	      } else if (realContext.Provider === Context) {
	        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
	      }
	    }
	  }

	  return dispatcher.useContext(Context, unstable_observedBits);
	}
	function useState(initialState) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useState(initialState);
	}
	function useReducer(reducer, initialArg, init) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useReducer(reducer, initialArg, init);
	}
	function useRef(initialValue) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useRef(initialValue);
	}
	function useEffect(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useEffect(create, deps);
	}
	function useLayoutEffect(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useLayoutEffect(create, deps);
	}
	function useCallback(callback, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useCallback(callback, deps);
	}
	function useMemo(create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useMemo(create, deps);
	}
	function useImperativeHandle(ref, create, deps) {
	  var dispatcher = resolveDispatcher();
	  return dispatcher.useImperativeHandle(ref, create, deps);
	}
	function useDebugValue(value, formatterFn) {
	  {
	    var dispatcher = resolveDispatcher();
	    return dispatcher.useDebugValue(value, formatterFn);
	  }
	}

	var propTypesMisspellWarningShown;

	{
	  propTypesMisspellWarningShown = false;
	}

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = getComponentName(ReactCurrentOwner.current.type);

	    if (name) {
	      return '\n\nCheck the render method of `' + name + '`.';
	    }
	  }

	  return '';
	}

	function getSourceInfoErrorAddendum(source) {
	  if (source !== undefined) {
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	  }

	  return '';
	}

	function getSourceInfoErrorAddendumForProps(elementProps) {
	  if (elementProps !== null && elementProps !== undefined) {
	    return getSourceInfoErrorAddendum(elementProps.__source);
	  }

	  return '';
	}
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */


	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

	    if (parentName) {
	      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	    }
	  }

	  return info;
	}
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */


	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }

	  element._store.validated = true;
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

	  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	    return;
	  }

	  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.

	  var childOwner = '';

	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
	  }

	  setCurrentlyValidatingElement(element);

	  {
	    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
	  }

	  setCurrentlyValidatingElement(null);
	}
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */


	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }

	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];

	      if (isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);

	    if (typeof iteratorFn === 'function') {
	      // Entry iterators used to provide implicit keys,
	      // but now we print a separate warning for them later.
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;

	        while (!(step = iterator.next()).done) {
	          if (isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */


	function validatePropTypes(element) {
	  {
	    var type = element.type;

	    if (type === null || type === undefined || typeof type === 'string') {
	      return;
	    }

	    var name = getComponentName(type);
	    var propTypes;

	    if (typeof type === 'function') {
	      propTypes = type.propTypes;
	    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	    // Inner props are checked in the reconciler.
	    type.$$typeof === REACT_MEMO_TYPE)) {
	      propTypes = type.propTypes;
	    } else {
	      return;
	    }

	    if (propTypes) {
	      setCurrentlyValidatingElement(element);
	      checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
	      setCurrentlyValidatingElement(null);
	    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	      propTypesMisspellWarningShown = true;

	      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
	    }

	    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	    }
	  }
	}
	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */


	function validateFragmentProps(fragment) {
	  {
	    setCurrentlyValidatingElement(fragment);
	    var keys = Object.keys(fragment.props);

	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];

	      if (key !== 'children' && key !== 'key') {
	        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

	        break;
	      }
	    }

	    if (fragment.ref !== null) {
	      error('Invalid attribute `ref` supplied to `React.Fragment`.');
	    }

	    setCurrentlyValidatingElement(null);
	  }
	}
	function createElementWithValidation(type, props, children) {
	  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	  // succeed and there will likely be errors in render.

	  if (!validType) {
	    var info = '';

	    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	    }

	    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

	    if (sourceInfo) {
	      info += sourceInfo;
	    } else {
	      info += getDeclarationErrorAddendum();
	    }

	    var typeString;

	    if (type === null) {
	      typeString = 'null';
	    } else if (Array.isArray(type)) {
	      typeString = 'array';
	    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
	      info = ' Did you accidentally export a JSX literal instead of a component?';
	    } else {
	      typeString = typeof type;
	    }

	    {
	      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	    }
	  }

	  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
	  // TODO: Drop this when these are no longer allowed as the type argument.

	  if (element == null) {
	    return element;
	  } // Skip key warning if the type isn't valid since our key validation logic
	  // doesn't expect a non-string/function type and can throw confusing errors.
	  // We don't want exception behavior to differ between dev and prod.
	  // (Rendering will throw with a helpful message and as soon as the type is
	  // fixed, the key warnings will appear.)


	  if (validType) {
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	  }

	  if (type === REACT_FRAGMENT_TYPE) {
	    validateFragmentProps(element);
	  } else {
	    validatePropTypes(element);
	  }

	  return element;
	}
	var didWarnAboutDeprecatedCreateFactory = false;
	function createFactoryWithValidation(type) {
	  var validatedFactory = createElementWithValidation.bind(null, type);
	  validatedFactory.type = type;

	  {
	    if (!didWarnAboutDeprecatedCreateFactory) {
	      didWarnAboutDeprecatedCreateFactory = true;

	      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
	    } // Legacy hook: remove it


	    Object.defineProperty(validatedFactory, 'type', {
	      enumerable: false,
	      get: function () {
	        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

	        Object.defineProperty(this, 'type', {
	          value: type
	        });
	        return type;
	      }
	    });
	  }

	  return validatedFactory;
	}
	function cloneElementWithValidation(element, props, children) {
	  var newElement = cloneElement.apply(this, arguments);

	  for (var i = 2; i < arguments.length; i++) {
	    validateChildKeys(arguments[i], newElement.type);
	  }

	  validatePropTypes(newElement);
	  return newElement;
	}

	{

	  try {
	    var frozenObject = Object.freeze({});
	    var testMap = new Map([[frozenObject, null]]);
	    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
	    // https://github.com/rollup/rollup/issues/1771
	    // TODO: we can remove these if Rollup fixes the bug.

	    testMap.set(0, 0);
	    testSet.add(0);
	  } catch (e) {
	  }
	}

	var createElement$1 =  createElementWithValidation ;
	var cloneElement$1 =  cloneElementWithValidation ;
	var createFactory =  createFactoryWithValidation ;
	var Children = {
	  map: mapChildren,
	  forEach: forEachChildren,
	  count: countChildren,
	  toArray: toArray,
	  only: onlyChild
	};

	exports.Children = Children;
	exports.Component = Component;
	exports.Fragment = REACT_FRAGMENT_TYPE;
	exports.Profiler = REACT_PROFILER_TYPE;
	exports.PureComponent = PureComponent;
	exports.StrictMode = REACT_STRICT_MODE_TYPE;
	exports.Suspense = REACT_SUSPENSE_TYPE;
	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
	exports.cloneElement = cloneElement$1;
	exports.createContext = createContext;
	exports.createElement = createElement$1;
	exports.createFactory = createFactory;
	exports.createRef = createRef;
	exports.forwardRef = forwardRef;
	exports.isValidElement = isValidElement;
	exports.lazy = lazy;
	exports.memo = memo;
	exports.useCallback = useCallback;
	exports.useContext = useContext;
	exports.useDebugValue = useDebugValue;
	exports.useEffect = useEffect;
	exports.useImperativeHandle = useImperativeHandle;
	exports.useLayoutEffect = useLayoutEffect;
	exports.useMemo = useMemo;
	exports.useReducer = useReducer;
	exports.useRef = useRef;
	exports.useState = useState;
	exports.version = ReactVersion;
	  })();
	}
	});

	var react = createCommonjsModule(function (module) {

	{
	  module.exports = react_development;
	}
	});

	var scheduler_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	var enableSchedulerDebugging = false;
	var enableProfiling = true;

	var requestHostCallback;
	var requestHostTimeout;
	var cancelHostTimeout;
	var shouldYieldToHost;
	var requestPaint;

	if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
	// implementation using setTimeout.
	typeof window === 'undefined' || // Check if MessageChannel is supported, too.
	typeof MessageChannel !== 'function') {
	  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
	  // fallback to a naive implementation.
	  var _callback = null;
	  var _timeoutID = null;

	  var _flushCallback = function () {
	    if (_callback !== null) {
	      try {
	        var currentTime = exports.unstable_now();
	        var hasRemainingTime = true;

	        _callback(hasRemainingTime, currentTime);

	        _callback = null;
	      } catch (e) {
	        setTimeout(_flushCallback, 0);
	        throw e;
	      }
	    }
	  };

	  var initialTime = Date.now();

	  exports.unstable_now = function () {
	    return Date.now() - initialTime;
	  };

	  requestHostCallback = function (cb) {
	    if (_callback !== null) {
	      // Protect against re-entrancy.
	      setTimeout(requestHostCallback, 0, cb);
	    } else {
	      _callback = cb;
	      setTimeout(_flushCallback, 0);
	    }
	  };

	  requestHostTimeout = function (cb, ms) {
	    _timeoutID = setTimeout(cb, ms);
	  };

	  cancelHostTimeout = function () {
	    clearTimeout(_timeoutID);
	  };

	  shouldYieldToHost = function () {
	    return false;
	  };

	  requestPaint = exports.unstable_forceFrameRate = function () {};
	} else {
	  // Capture local references to native APIs, in case a polyfill overrides them.
	  var performance = window.performance;
	  var _Date = window.Date;
	  var _setTimeout = window.setTimeout;
	  var _clearTimeout = window.clearTimeout;

	  if (typeof console !== 'undefined') {
	    // TODO: Scheduler no longer requires these methods to be polyfilled. But
	    // maybe we want to continue warning if they don't exist, to preserve the
	    // option to rely on it in the future?
	    var requestAnimationFrame = window.requestAnimationFrame;
	    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link

	    if (typeof requestAnimationFrame !== 'function') {
	      // Using console['error'] to evade Babel and ESLint
	      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	    }

	    if (typeof cancelAnimationFrame !== 'function') {
	      // Using console['error'] to evade Babel and ESLint
	      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	    }
	  }

	  if (typeof performance === 'object' && typeof performance.now === 'function') {
	    exports.unstable_now = function () {
	      return performance.now();
	    };
	  } else {
	    var _initialTime = _Date.now();

	    exports.unstable_now = function () {
	      return _Date.now() - _initialTime;
	    };
	  }

	  var isMessageLoopRunning = false;
	  var scheduledHostCallback = null;
	  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
	  // thread, like user events. By default, it yields multiple times per frame.
	  // It does not attempt to align with frame boundaries, since most tasks don't
	  // need to be frame aligned; for those that do, use requestAnimationFrame.

	  var yieldInterval = 5;
	  var deadline = 0; // TODO: Make this configurable

	  {
	    // `isInputPending` is not available. Since we have no way of knowing if
	    // there's pending input, always yield at the end of the frame.
	    shouldYieldToHost = function () {
	      return exports.unstable_now() >= deadline;
	    }; // Since we yield every frame regardless, `requestPaint` has no effect.


	    requestPaint = function () {};
	  }

	  exports.unstable_forceFrameRate = function (fps) {
	    if (fps < 0 || fps > 125) {
	      // Using console['error'] to evade Babel and ESLint
	      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
	      return;
	    }

	    if (fps > 0) {
	      yieldInterval = Math.floor(1000 / fps);
	    } else {
	      // reset the framerate
	      yieldInterval = 5;
	    }
	  };

	  var performWorkUntilDeadline = function () {
	    if (scheduledHostCallback !== null) {
	      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
	      // cycle. This means there's always time remaining at the beginning of
	      // the message event.

	      deadline = currentTime + yieldInterval;
	      var hasTimeRemaining = true;

	      try {
	        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

	        if (!hasMoreWork) {
	          isMessageLoopRunning = false;
	          scheduledHostCallback = null;
	        } else {
	          // If there's more work, schedule the next message event at the end
	          // of the preceding one.
	          port.postMessage(null);
	        }
	      } catch (error) {
	        // If a scheduler task throws, exit the current browser task so the
	        // error can be observed.
	        port.postMessage(null);
	        throw error;
	      }
	    } else {
	      isMessageLoopRunning = false;
	    } // Yielding to the browser will give it a chance to paint, so we can
	  };

	  var channel = new MessageChannel();
	  var port = channel.port2;
	  channel.port1.onmessage = performWorkUntilDeadline;

	  requestHostCallback = function (callback) {
	    scheduledHostCallback = callback;

	    if (!isMessageLoopRunning) {
	      isMessageLoopRunning = true;
	      port.postMessage(null);
	    }
	  };

	  requestHostTimeout = function (callback, ms) {
	    taskTimeoutID = _setTimeout(function () {
	      callback(exports.unstable_now());
	    }, ms);
	  };

	  cancelHostTimeout = function () {
	    _clearTimeout(taskTimeoutID);

	    taskTimeoutID = -1;
	  };
	}

	function push(heap, node) {
	  var index = heap.length;
	  heap.push(node);
	  siftUp(heap, node, index);
	}
	function peek(heap) {
	  var first = heap[0];
	  return first === undefined ? null : first;
	}
	function pop(heap) {
	  var first = heap[0];

	  if (first !== undefined) {
	    var last = heap.pop();

	    if (last !== first) {
	      heap[0] = last;
	      siftDown(heap, last, 0);
	    }

	    return first;
	  } else {
	    return null;
	  }
	}

	function siftUp(heap, node, i) {
	  var index = i;

	  while (true) {
	    var parentIndex = index - 1 >>> 1;
	    var parent = heap[parentIndex];

	    if (parent !== undefined && compare(parent, node) > 0) {
	      // The parent is larger. Swap positions.
	      heap[parentIndex] = node;
	      heap[index] = parent;
	      index = parentIndex;
	    } else {
	      // The parent is smaller. Exit.
	      return;
	    }
	  }
	}

	function siftDown(heap, node, i) {
	  var index = i;
	  var length = heap.length;

	  while (index < length) {
	    var leftIndex = (index + 1) * 2 - 1;
	    var left = heap[leftIndex];
	    var rightIndex = leftIndex + 1;
	    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

	    if (left !== undefined && compare(left, node) < 0) {
	      if (right !== undefined && compare(right, left) < 0) {
	        heap[index] = right;
	        heap[rightIndex] = node;
	        index = rightIndex;
	      } else {
	        heap[index] = left;
	        heap[leftIndex] = node;
	        index = leftIndex;
	      }
	    } else if (right !== undefined && compare(right, node) < 0) {
	      heap[index] = right;
	      heap[rightIndex] = node;
	      index = rightIndex;
	    } else {
	      // Neither child is smaller. Exit.
	      return;
	    }
	  }
	}

	function compare(a, b) {
	  // Compare sort index first, then task id.
	  var diff = a.sortIndex - b.sortIndex;
	  return diff !== 0 ? diff : a.id - b.id;
	}

	// TODO: Use symbols?
	var NoPriority = 0;
	var ImmediatePriority = 1;
	var UserBlockingPriority = 2;
	var NormalPriority = 3;
	var LowPriority = 4;
	var IdlePriority = 5;

	var runIdCounter = 0;
	var mainThreadIdCounter = 0;
	var profilingStateSize = 4;
	var sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer
	typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
	typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
	;
	var profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

	var PRIORITY = 0;
	var CURRENT_TASK_ID = 1;
	var CURRENT_RUN_ID = 2;
	var QUEUE_SIZE = 3;

	{
	  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
	  // array might include canceled tasks.

	  profilingState[QUEUE_SIZE] = 0;
	  profilingState[CURRENT_TASK_ID] = 0;
	} // Bytes per element is 4


	var INITIAL_EVENT_LOG_SIZE = 131072;
	var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

	var eventLogSize = 0;
	var eventLogBuffer = null;
	var eventLog = null;
	var eventLogIndex = 0;
	var TaskStartEvent = 1;
	var TaskCompleteEvent = 2;
	var TaskErrorEvent = 3;
	var TaskCancelEvent = 4;
	var TaskRunEvent = 5;
	var TaskYieldEvent = 6;
	var SchedulerSuspendEvent = 7;
	var SchedulerResumeEvent = 8;

	function logEvent(entries) {
	  if (eventLog !== null) {
	    var offset = eventLogIndex;
	    eventLogIndex += entries.length;

	    if (eventLogIndex + 1 > eventLogSize) {
	      eventLogSize *= 2;

	      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
	        // Using console['error'] to evade Babel and ESLint
	        console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
	        stopLoggingProfilingEvents();
	        return;
	      }

	      var newEventLog = new Int32Array(eventLogSize * 4);
	      newEventLog.set(eventLog);
	      eventLogBuffer = newEventLog.buffer;
	      eventLog = newEventLog;
	    }

	    eventLog.set(entries, offset);
	  }
	}

	function startLoggingProfilingEvents() {
	  eventLogSize = INITIAL_EVENT_LOG_SIZE;
	  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
	  eventLog = new Int32Array(eventLogBuffer);
	  eventLogIndex = 0;
	}
	function stopLoggingProfilingEvents() {
	  var buffer = eventLogBuffer;
	  eventLogSize = 0;
	  eventLogBuffer = null;
	  eventLog = null;
	  eventLogIndex = 0;
	  return buffer;
	}
	function markTaskStart(task, ms) {
	  {
	    profilingState[QUEUE_SIZE]++;

	    if (eventLog !== null) {
	      // performance.now returns a float, representing milliseconds. When the
	      // event is logged, it's coerced to an int. Convert to microseconds to
	      // maintain extra degrees of precision.
	      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
	    }
	  }
	}
	function markTaskCompleted(task, ms) {
	  {
	    profilingState[PRIORITY] = NoPriority;
	    profilingState[CURRENT_TASK_ID] = 0;
	    profilingState[QUEUE_SIZE]--;

	    if (eventLog !== null) {
	      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
	    }
	  }
	}
	function markTaskCanceled(task, ms) {
	  {
	    profilingState[QUEUE_SIZE]--;

	    if (eventLog !== null) {
	      logEvent([TaskCancelEvent, ms * 1000, task.id]);
	    }
	  }
	}
	function markTaskErrored(task, ms) {
	  {
	    profilingState[PRIORITY] = NoPriority;
	    profilingState[CURRENT_TASK_ID] = 0;
	    profilingState[QUEUE_SIZE]--;

	    if (eventLog !== null) {
	      logEvent([TaskErrorEvent, ms * 1000, task.id]);
	    }
	  }
	}
	function markTaskRun(task, ms) {
	  {
	    runIdCounter++;
	    profilingState[PRIORITY] = task.priorityLevel;
	    profilingState[CURRENT_TASK_ID] = task.id;
	    profilingState[CURRENT_RUN_ID] = runIdCounter;

	    if (eventLog !== null) {
	      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
	    }
	  }
	}
	function markTaskYield(task, ms) {
	  {
	    profilingState[PRIORITY] = NoPriority;
	    profilingState[CURRENT_TASK_ID] = 0;
	    profilingState[CURRENT_RUN_ID] = 0;

	    if (eventLog !== null) {
	      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
	    }
	  }
	}
	function markSchedulerSuspended(ms) {
	  {
	    mainThreadIdCounter++;

	    if (eventLog !== null) {
	      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
	    }
	  }
	}
	function markSchedulerUnsuspended(ms) {
	  {
	    if (eventLog !== null) {
	      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
	    }
	  }
	}

	/* eslint-disable no-var */
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111

	var maxSigned31BitInt = 1073741823; // Times out immediately

	var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

	var USER_BLOCKING_PRIORITY = 250;
	var NORMAL_PRIORITY_TIMEOUT = 5000;
	var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

	var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

	var taskQueue = [];
	var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

	var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
	var currentTask = null;
	var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

	var isPerformingWork = false;
	var isHostCallbackScheduled = false;
	var isHostTimeoutScheduled = false;

	function advanceTimers(currentTime) {
	  // Check for tasks that are no longer delayed and add them to the queue.
	  var timer = peek(timerQueue);

	  while (timer !== null) {
	    if (timer.callback === null) {
	      // Timer was cancelled.
	      pop(timerQueue);
	    } else if (timer.startTime <= currentTime) {
	      // Timer fired. Transfer to the task queue.
	      pop(timerQueue);
	      timer.sortIndex = timer.expirationTime;
	      push(taskQueue, timer);

	      {
	        markTaskStart(timer, currentTime);
	        timer.isQueued = true;
	      }
	    } else {
	      // Remaining timers are pending.
	      return;
	    }

	    timer = peek(timerQueue);
	  }
	}

	function handleTimeout(currentTime) {
	  isHostTimeoutScheduled = false;
	  advanceTimers(currentTime);

	  if (!isHostCallbackScheduled) {
	    if (peek(taskQueue) !== null) {
	      isHostCallbackScheduled = true;
	      requestHostCallback(flushWork);
	    } else {
	      var firstTimer = peek(timerQueue);

	      if (firstTimer !== null) {
	        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	      }
	    }
	  }
	}

	function flushWork(hasTimeRemaining, initialTime) {
	  {
	    markSchedulerUnsuspended(initialTime);
	  } // We'll need a host callback the next time work is scheduled.


	  isHostCallbackScheduled = false;

	  if (isHostTimeoutScheduled) {
	    // We scheduled a timeout but it's no longer needed. Cancel it.
	    isHostTimeoutScheduled = false;
	    cancelHostTimeout();
	  }

	  isPerformingWork = true;
	  var previousPriorityLevel = currentPriorityLevel;

	  try {
	    if (enableProfiling) {
	      try {
	        return workLoop(hasTimeRemaining, initialTime);
	      } catch (error) {
	        if (currentTask !== null) {
	          var currentTime = exports.unstable_now();
	          markTaskErrored(currentTask, currentTime);
	          currentTask.isQueued = false;
	        }

	        throw error;
	      }
	    } else {
	      // No catch in prod codepath.
	      return workLoop(hasTimeRemaining, initialTime);
	    }
	  } finally {
	    currentTask = null;
	    currentPriorityLevel = previousPriorityLevel;
	    isPerformingWork = false;

	    {
	      var _currentTime = exports.unstable_now();

	      markSchedulerSuspended(_currentTime);
	    }
	  }
	}

	function workLoop(hasTimeRemaining, initialTime) {
	  var currentTime = initialTime;
	  advanceTimers(currentTime);
	  currentTask = peek(taskQueue);

	  while (currentTask !== null && !(enableSchedulerDebugging )) {
	    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
	      // This currentTask hasn't expired, and we've reached the deadline.
	      break;
	    }

	    var callback = currentTask.callback;

	    if (callback !== null) {
	      currentTask.callback = null;
	      currentPriorityLevel = currentTask.priorityLevel;
	      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
	      markTaskRun(currentTask, currentTime);
	      var continuationCallback = callback(didUserCallbackTimeout);
	      currentTime = exports.unstable_now();

	      if (typeof continuationCallback === 'function') {
	        currentTask.callback = continuationCallback;
	        markTaskYield(currentTask, currentTime);
	      } else {
	        {
	          markTaskCompleted(currentTask, currentTime);
	          currentTask.isQueued = false;
	        }

	        if (currentTask === peek(taskQueue)) {
	          pop(taskQueue);
	        }
	      }

	      advanceTimers(currentTime);
	    } else {
	      pop(taskQueue);
	    }

	    currentTask = peek(taskQueue);
	  } // Return whether there's additional work


	  if (currentTask !== null) {
	    return true;
	  } else {
	    var firstTimer = peek(timerQueue);

	    if (firstTimer !== null) {
	      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	    }

	    return false;
	  }
	}

	function unstable_runWithPriority(priorityLevel, eventHandler) {
	  switch (priorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	    case LowPriority:
	    case IdlePriority:
	      break;

	    default:
	      priorityLevel = NormalPriority;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  currentPriorityLevel = priorityLevel;

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	  }
	}

	function unstable_next(eventHandler) {
	  var priorityLevel;

	  switch (currentPriorityLevel) {
	    case ImmediatePriority:
	    case UserBlockingPriority:
	    case NormalPriority:
	      // Shift down to normal priority
	      priorityLevel = NormalPriority;
	      break;

	    default:
	      // Anything lower than normal priority should remain at the current level.
	      priorityLevel = currentPriorityLevel;
	      break;
	  }

	  var previousPriorityLevel = currentPriorityLevel;
	  currentPriorityLevel = priorityLevel;

	  try {
	    return eventHandler();
	  } finally {
	    currentPriorityLevel = previousPriorityLevel;
	  }
	}

	function unstable_wrapCallback(callback) {
	  var parentPriorityLevel = currentPriorityLevel;
	  return function () {
	    // This is a fork of runWithPriority, inlined for performance.
	    var previousPriorityLevel = currentPriorityLevel;
	    currentPriorityLevel = parentPriorityLevel;

	    try {
	      return callback.apply(this, arguments);
	    } finally {
	      currentPriorityLevel = previousPriorityLevel;
	    }
	  };
	}

	function timeoutForPriorityLevel(priorityLevel) {
	  switch (priorityLevel) {
	    case ImmediatePriority:
	      return IMMEDIATE_PRIORITY_TIMEOUT;

	    case UserBlockingPriority:
	      return USER_BLOCKING_PRIORITY;

	    case IdlePriority:
	      return IDLE_PRIORITY;

	    case LowPriority:
	      return LOW_PRIORITY_TIMEOUT;

	    case NormalPriority:
	    default:
	      return NORMAL_PRIORITY_TIMEOUT;
	  }
	}

	function unstable_scheduleCallback(priorityLevel, callback, options) {
	  var currentTime = exports.unstable_now();
	  var startTime;
	  var timeout;

	  if (typeof options === 'object' && options !== null) {
	    var delay = options.delay;

	    if (typeof delay === 'number' && delay > 0) {
	      startTime = currentTime + delay;
	    } else {
	      startTime = currentTime;
	    }

	    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
	  } else {
	    timeout = timeoutForPriorityLevel(priorityLevel);
	    startTime = currentTime;
	  }

	  var expirationTime = startTime + timeout;
	  var newTask = {
	    id: taskIdCounter++,
	    callback: callback,
	    priorityLevel: priorityLevel,
	    startTime: startTime,
	    expirationTime: expirationTime,
	    sortIndex: -1
	  };

	  {
	    newTask.isQueued = false;
	  }

	  if (startTime > currentTime) {
	    // This is a delayed task.
	    newTask.sortIndex = startTime;
	    push(timerQueue, newTask);

	    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
	      // All tasks are delayed, and this is the task with the earliest delay.
	      if (isHostTimeoutScheduled) {
	        // Cancel an existing timeout.
	        cancelHostTimeout();
	      } else {
	        isHostTimeoutScheduled = true;
	      } // Schedule a timeout.


	      requestHostTimeout(handleTimeout, startTime - currentTime);
	    }
	  } else {
	    newTask.sortIndex = expirationTime;
	    push(taskQueue, newTask);

	    {
	      markTaskStart(newTask, currentTime);
	      newTask.isQueued = true;
	    } // Schedule a host callback, if needed. If we're already performing work,
	    // wait until the next time we yield.


	    if (!isHostCallbackScheduled && !isPerformingWork) {
	      isHostCallbackScheduled = true;
	      requestHostCallback(flushWork);
	    }
	  }

	  return newTask;
	}

	function unstable_pauseExecution() {
	}

	function unstable_continueExecution() {

	  if (!isHostCallbackScheduled && !isPerformingWork) {
	    isHostCallbackScheduled = true;
	    requestHostCallback(flushWork);
	  }
	}

	function unstable_getFirstCallbackNode() {
	  return peek(taskQueue);
	}

	function unstable_cancelCallback(task) {
	  {
	    if (task.isQueued) {
	      var currentTime = exports.unstable_now();
	      markTaskCanceled(task, currentTime);
	      task.isQueued = false;
	    }
	  } // Null out the callback to indicate the task has been canceled. (Can't
	  // remove from the queue because you can't remove arbitrary nodes from an
	  // array based heap, only the first one.)


	  task.callback = null;
	}

	function unstable_getCurrentPriorityLevel() {
	  return currentPriorityLevel;
	}

	function unstable_shouldYield() {
	  var currentTime = exports.unstable_now();
	  advanceTimers(currentTime);
	  var firstTask = peek(taskQueue);
	  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
	}

	var unstable_requestPaint = requestPaint;
	var unstable_Profiling =  {
	  startLoggingProfilingEvents: startLoggingProfilingEvents,
	  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
	  sharedProfilingBuffer: sharedProfilingBuffer
	} ;

	exports.unstable_IdlePriority = IdlePriority;
	exports.unstable_ImmediatePriority = ImmediatePriority;
	exports.unstable_LowPriority = LowPriority;
	exports.unstable_NormalPriority = NormalPriority;
	exports.unstable_Profiling = unstable_Profiling;
	exports.unstable_UserBlockingPriority = UserBlockingPriority;
	exports.unstable_cancelCallback = unstable_cancelCallback;
	exports.unstable_continueExecution = unstable_continueExecution;
	exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
	exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
	exports.unstable_next = unstable_next;
	exports.unstable_pauseExecution = unstable_pauseExecution;
	exports.unstable_requestPaint = unstable_requestPaint;
	exports.unstable_runWithPriority = unstable_runWithPriority;
	exports.unstable_scheduleCallback = unstable_scheduleCallback;
	exports.unstable_shouldYield = unstable_shouldYield;
	exports.unstable_wrapCallback = unstable_wrapCallback;
	  })();
	}
	});

	var scheduler = createCommonjsModule(function (module) {

	{
	  module.exports = scheduler_development;
	}
	});

	var schedulerTracing_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

	var interactionIDCounter = 0;
	var threadIDCounter = 0; // Set of currently traced interactions.
	// Interactions "stack"â
	// Meaning that newly traced interactions are appended to the previously active set.
	// When an interaction goes out of scope, the previous set (if any) is restored.

	exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

	exports.__subscriberRef = null;

	{
	  exports.__interactionsRef = {
	    current: new Set()
	  };
	  exports.__subscriberRef = {
	    current: null
	  };
	}
	function unstable_clear(callback) {

	  var prevInteractions = exports.__interactionsRef.current;
	  exports.__interactionsRef.current = new Set();

	  try {
	    return callback();
	  } finally {
	    exports.__interactionsRef.current = prevInteractions;
	  }
	}
	function unstable_getCurrent() {
	  {
	    return exports.__interactionsRef.current;
	  }
	}
	function unstable_getThreadID() {
	  return ++threadIDCounter;
	}
	function unstable_trace(name, timestamp, callback) {
	  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

	  var interaction = {
	    __count: 1,
	    id: interactionIDCounter++,
	    name: name,
	    timestamp: timestamp
	  };
	  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
	  // To do that, clone the current interactions.
	  // The previous set will be restored upon completion.

	  var interactions = new Set(prevInteractions);
	  interactions.add(interaction);
	  exports.__interactionsRef.current = interactions;
	  var subscriber = exports.__subscriberRef.current;
	  var returnValue;

	  try {
	    if (subscriber !== null) {
	      subscriber.onInteractionTraced(interaction);
	    }
	  } finally {
	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkStarted(interactions, threadID);
	      }
	    } finally {
	      try {
	        returnValue = callback();
	      } finally {
	        exports.__interactionsRef.current = prevInteractions;

	        try {
	          if (subscriber !== null) {
	            subscriber.onWorkStopped(interactions, threadID);
	          }
	        } finally {
	          interaction.__count--; // If no async work was scheduled for this interaction,
	          // Notify subscribers that it's completed.

	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        }
	      }
	    }
	  }

	  return returnValue;
	}
	function unstable_wrap(callback) {
	  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

	  var wrappedInteractions = exports.__interactionsRef.current;
	  var subscriber = exports.__subscriberRef.current;

	  if (subscriber !== null) {
	    subscriber.onWorkScheduled(wrappedInteractions, threadID);
	  } // Update the pending async work count for the current interactions.
	  // Update after calling subscribers in case of error.


	  wrappedInteractions.forEach(function (interaction) {
	    interaction.__count++;
	  });
	  var hasRun = false;

	  function wrapped() {
	    var prevInteractions = exports.__interactionsRef.current;
	    exports.__interactionsRef.current = wrappedInteractions;
	    subscriber = exports.__subscriberRef.current;

	    try {
	      var returnValue;

	      try {
	        if (subscriber !== null) {
	          subscriber.onWorkStarted(wrappedInteractions, threadID);
	        }
	      } finally {
	        try {
	          returnValue = callback.apply(undefined, arguments);
	        } finally {
	          exports.__interactionsRef.current = prevInteractions;

	          if (subscriber !== null) {
	            subscriber.onWorkStopped(wrappedInteractions, threadID);
	          }
	        }
	      }

	      return returnValue;
	    } finally {
	      if (!hasRun) {
	        // We only expect a wrapped function to be executed once,
	        // But in the event that it's executed more than onceâ
	        // Only decrement the outstanding interaction counts once.
	        hasRun = true; // Update pending async counts for all wrapped interactions.
	        // If this was the last scheduled async work for any of them,
	        // Mark them as completed.

	        wrappedInteractions.forEach(function (interaction) {
	          interaction.__count--;

	          if (subscriber !== null && interaction.__count === 0) {
	            subscriber.onInteractionScheduledWorkCompleted(interaction);
	          }
	        });
	      }
	    }
	  }

	  wrapped.cancel = function cancel() {
	    subscriber = exports.__subscriberRef.current;

	    try {
	      if (subscriber !== null) {
	        subscriber.onWorkCanceled(wrappedInteractions, threadID);
	      }
	    } finally {
	      // Update pending async counts for all wrapped interactions.
	      // If this was the last scheduled async work for any of them,
	      // Mark them as completed.
	      wrappedInteractions.forEach(function (interaction) {
	        interaction.__count--;

	        if (subscriber && interaction.__count === 0) {
	          subscriber.onInteractionScheduledWorkCompleted(interaction);
	        }
	      });
	    }
	  };

	  return wrapped;
	}

	var subscribers = null;

	{
	  subscribers = new Set();
	}

	function unstable_subscribe(subscriber) {
	  {
	    subscribers.add(subscriber);

	    if (subscribers.size === 1) {
	      exports.__subscriberRef.current = {
	        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
	        onInteractionTraced: onInteractionTraced,
	        onWorkCanceled: onWorkCanceled,
	        onWorkScheduled: onWorkScheduled,
	        onWorkStarted: onWorkStarted,
	        onWorkStopped: onWorkStopped
	      };
	    }
	  }
	}
	function unstable_unsubscribe(subscriber) {
	  {
	    subscribers.delete(subscriber);

	    if (subscribers.size === 0) {
	      exports.__subscriberRef.current = null;
	    }
	  }
	}

	function onInteractionTraced(interaction) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionTraced(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onInteractionScheduledWorkCompleted(interaction) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onInteractionScheduledWorkCompleted(interaction);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkScheduled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkScheduled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStarted(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStarted(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkStopped(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkStopped(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	function onWorkCanceled(interactions, threadID) {
	  var didCatchError = false;
	  var caughtError = null;
	  subscribers.forEach(function (subscriber) {
	    try {
	      subscriber.onWorkCanceled(interactions, threadID);
	    } catch (error) {
	      if (!didCatchError) {
	        didCatchError = true;
	        caughtError = error;
	      }
	    }
	  });

	  if (didCatchError) {
	    throw caughtError;
	  }
	}

	exports.unstable_clear = unstable_clear;
	exports.unstable_getCurrent = unstable_getCurrent;
	exports.unstable_getThreadID = unstable_getThreadID;
	exports.unstable_subscribe = unstable_subscribe;
	exports.unstable_trace = unstable_trace;
	exports.unstable_unsubscribe = unstable_unsubscribe;
	exports.unstable_wrap = unstable_wrap;
	  })();
	}
	});

	var tracing = createCommonjsModule(function (module) {

	{
	  module.exports = schedulerTracing_development;
	}
	});

	var reactDom_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	var React = react;
	var _assign = objectAssign;
	var Scheduler = scheduler;
	var checkPropTypes = checkPropTypes_1;
	var tracing$1 = tracing;

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
	// Current owner and dispatcher used to share the same ref,
	// but PR #14548 split them out to better support the react-debug-tools package.

	if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
	  ReactSharedInternals.ReactCurrentDispatcher = {
	    current: null
	  };
	}

	if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
	  ReactSharedInternals.ReactCurrentBatchConfig = {
	    suspense: null
	  };
	}

	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    printWarning('warn', format, args);
	  }
	}
	function error(format) {
	  {
	    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	      args[_key2 - 1] = arguments[_key2];
	    }

	    printWarning('error', format, args);
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

	    if (!hasExistingStack) {
	      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	      var stack = ReactDebugCurrentFrame.getStackAddendum();

	      if (stack !== '') {
	        format += '%s';
	        args = args.concat([stack]);
	      }
	    }

	    var argsWithFormat = args.map(function (item) {
	      return '' + item;
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      throw new Error(message);
	    } catch (x) {}
	  }
	}

	if (!React) {
	  {
	    throw Error( "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM." );
	  }
	}

	var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
	  var funcArgs = Array.prototype.slice.call(arguments, 3);

	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    this.onError(error);
	  }
	};

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // unintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!
	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
	      // If document doesn't exist we know for sure we will crash in this method
	      // when we call document.createEvent(). However this can cause confusing
	      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
	      // So we preemptively throw with a better message instead.
	      if (!(typeof document !== 'undefined')) {
	        {
	          throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
	        }
	      }

	      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.

	      var didError = true; // Keeps track of the value of window.event so that we can reset it
	      // during the callback to let user code access window.event in the
	      // browsers that support it.

	      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
	      // dispatching: https://github.com/facebook/react/issues/13688

	      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.

	      var funcArgs = Array.prototype.slice.call(arguments, 3);

	      function callCallback() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
	        // window.event assignment in both IE <= 10 as they throw an error
	        // "Member not found" in strict mode, and in Firefox which does not
	        // support window.event.

	        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
	          window.event = windowEvent;
	        }

	        func.apply(context, funcArgs);
	        didError = false;
	      } // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.


	      var error; // Use this to track whether the error event is ever called.

	      var didSetError = false;
	      var isCrossOriginError = false;

	      function handleWindowError(event) {
	        error = event.error;
	        didSetError = true;

	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }

	        if (event.defaultPrevented) {
	          // Some other error handler has prevented default.
	          // Browsers silence the error report if this happens.
	          // We'll remember this to later decide whether to log it or not.
	          if (error != null && typeof error === 'object') {
	            try {
	              error._suppressLogging = true;
	            } catch (inner) {// Ignore.
	            }
	          }
	        }
	      } // Create a fake event type.


	      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

	      window.addEventListener('error', handleWindowError);
	      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.

	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (windowEventDescriptor) {
	        Object.defineProperty(window, 'event', windowEventDescriptor);
	      }

	      if (didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
	        }

	        this.onError(error);
	      } // Remove our event listeners


	      window.removeEventListener('error', handleWindowError);
	    };

	    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
	  }
	}

	var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

	var hasError = false;
	var caughtError = null; // Used by event system to capture/rethrow the first error.

	var hasRethrowError = false;
	var rethrowError = null;
	var reporter = {
	  onError: function (error) {
	    hasError = true;
	    caughtError = error;
	  }
	};
	/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
	  hasError = false;
	  caughtError = null;
	  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
	}
	/**
	 * Same as invokeGuardedCallback, but instead of returning an error, it stores
	 * it in a global so it can be rethrown by `rethrowCaughtError` later.
	 * TODO: See if caughtError and rethrowError can be unified.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
	  invokeGuardedCallback.apply(this, arguments);

	  if (hasError) {
	    var error = clearCaughtError();

	    if (!hasRethrowError) {
	      hasRethrowError = true;
	      rethrowError = error;
	    }
	  }
	}
	/**
	 * During execution of guarded functions we will capture the first error which
	 * we will rethrow to be handled by the top level error handler.
	 */

	function rethrowCaughtError() {
	  if (hasRethrowError) {
	    var error = rethrowError;
	    hasRethrowError = false;
	    rethrowError = null;
	    throw error;
	  }
	}
	function hasCaughtError() {
	  return hasError;
	}
	function clearCaughtError() {
	  if (hasError) {
	    var error = caughtError;
	    hasError = false;
	    caughtError = null;
	    return error;
	  } else {
	    {
	      {
	        throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  }
	}

	var getFiberCurrentPropsFromNode = null;
	var getInstanceFromNode = null;
	var getNodeFromInstance = null;
	function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
	  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
	  getInstanceFromNode = getInstanceFromNodeImpl;
	  getNodeFromInstance = getNodeFromInstanceImpl;

	  {
	    if (!getNodeFromInstance || !getInstanceFromNode) {
	      error('EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
	    }
	  }
	}
	var validateEventDispatches;

	{
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
	      error('EventPluginUtils: Invalid `event`.');
	    }
	  };
	}
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */


	function executeDispatch(event, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = getNodeFromInstance(inst);
	  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
	  event.currentTarget = null;
	}
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */

	function executeDispatchesInOrder(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;

	  {
	    validateEventDispatches(event);
	  }

	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      } // Listeners and Instances are two parallel arrays that are always in sync.


	      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, dispatchListeners, dispatchInstances);
	  }

	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	var FunctionComponent = 0;
	var ClassComponent = 1;
	var IndeterminateComponent = 2; // Before we know whether it is function or class

	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

	var HostComponent = 5;
	var HostText = 6;
	var Fragment = 7;
	var Mode = 8;
	var ContextConsumer = 9;
	var ContextProvider = 10;
	var ForwardRef = 11;
	var Profiler = 12;
	var SuspenseComponent = 13;
	var MemoComponent = 14;
	var SimpleMemoComponent = 15;
	var LazyComponent = 16;
	var IncompleteClassComponent = 17;
	var DehydratedFragment = 18;
	var SuspenseListComponent = 19;
	var FundamentalComponent = 20;
	var ScopeComponent = 21;
	var Block = 22;

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	/**
	 * Injectable mapping from names to event plugin modules.
	 */

	var namesToPlugins = {};
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */

	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }

	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);

	    if (!(pluginIndex > -1)) {
	      {
	        throw Error( "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`." );
	      }
	    }

	    if (plugins[pluginIndex]) {
	      continue;
	    }

	    if (!pluginModule.extractEvents) {
	      {
	        throw Error( "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not." );
	      }
	    }

	    plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;

	    for (var eventName in publishedEvents) {
	      if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
	        {
	          throw Error( "EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`." );
	        }
	      }
	    }
	  }
	}
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */


	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	    {
	      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`." );
	    }
	  }

	  eventNameDispatchConfigs[eventName] = dispatchConfig;
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }

	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }

	  return false;
	}
	/**
	 * Publishes a registration name that is used to identify dispatched events.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */


	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  if (!!registrationNameModules[registrationName]) {
	    {
	      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`." );
	    }
	  }

	  registrationNameModules[registrationName] = pluginModule;
	  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  {
	    var lowerCasedName = registrationName.toLowerCase();
	    possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 */

	/**
	 * Ordered list of injected plugins.
	 */


	var plugins = [];
	/**
	 * Mapping from event name to dispatch config
	 */

	var eventNameDispatchConfigs = {};
	/**
	 * Mapping from registration name to plugin module
	 */

	var registrationNameModules = {};
	/**
	 * Mapping from registration name to event name
	 */

	var registrationNameDependencies = {};
	/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */

	var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

	/**
	 * Injects an ordering of plugins (by plugin name). This allows the ordering
	 * to be decoupled from injection of the actual plugins so that ordering is
	 * always deterministic regardless of packaging, on-the-fly injection, etc.
	 *
	 * @param {array} InjectedEventPluginOrder
	 * @internal
	 */

	function injectEventPluginOrder(injectedEventPluginOrder) {
	  if (!!eventPluginOrder) {
	    {
	      throw Error( "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React." );
	    }
	  } // Clone the ordering so it cannot be dynamically mutated.


	  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	  recomputePluginOrdering();
	}
	/**
	 * Injects plugins to be used by plugin event system. The plugin names must be
	 * in the ordering injected by `injectEventPluginOrder`.
	 *
	 * Plugins can be injected as part of page initialization or on-the-fly.
	 *
	 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	 * @internal
	 */

	function injectEventPluginsByName(injectedNamesToPlugins) {
	  var isOrderingDirty = false;

	  for (var pluginName in injectedNamesToPlugins) {
	    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	      continue;
	    }

	    var pluginModule = injectedNamesToPlugins[pluginName];

	    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	      if (!!namesToPlugins[pluginName]) {
	        {
	          throw Error( "EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`." );
	        }
	      }

	      namesToPlugins[pluginName] = pluginModule;
	      isOrderingDirty = true;
	    }
	  }

	  if (isOrderingDirty) {
	    recomputePluginOrdering();
	  }
	}

	var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

	var PLUGIN_EVENT_SYSTEM = 1;
	var IS_REPLAYED = 1 << 5;
	var IS_FIRST_ANCESTOR = 1 << 6;

	var restoreImpl = null;
	var restoreTarget = null;
	var restoreQueue = null;

	function restoreStateOfTarget(target) {
	  // We perform this translation at the end of the event loop so that we
	  // always receive the correct fiber here
	  var internalInstance = getInstanceFromNode(target);

	  if (!internalInstance) {
	    // Unmounted
	    return;
	  }

	  if (!(typeof restoreImpl === 'function')) {
	    {
	      throw Error( "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

	  if (stateNode) {
	    var _props = getFiberCurrentPropsFromNode(stateNode);

	    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
	  }
	}

	function setRestoreImplementation(impl) {
	  restoreImpl = impl;
	}
	function enqueueStateRestore(target) {
	  if (restoreTarget) {
	    if (restoreQueue) {
	      restoreQueue.push(target);
	    } else {
	      restoreQueue = [target];
	    }
	  } else {
	    restoreTarget = target;
	  }
	}
	function needsStateRestore() {
	  return restoreTarget !== null || restoreQueue !== null;
	}
	function restoreStateIfNeeded() {
	  if (!restoreTarget) {
	    return;
	  }

	  var target = restoreTarget;
	  var queuedTargets = restoreQueue;
	  restoreTarget = null;
	  restoreQueue = null;
	  restoreStateOfTarget(target);

	  if (queuedTargets) {
	    for (var i = 0; i < queuedTargets.length; i++) {
	      restoreStateOfTarget(queuedTargets[i]);
	    }
	  }
	}

	var enableProfilerTimer = true; // Trace which interactions trigger each commit.

	var enableDeprecatedFlareAPI = false; // Experimental Host Component support.

	var enableFundamentalAPI = false; // Experimental Scope support.
	var warnAboutStringRefs = false;

	// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.
	// Defaults

	var batchedUpdatesImpl = function (fn, bookkeeping) {
	  return fn(bookkeeping);
	};

	var discreteUpdatesImpl = function (fn, a, b, c, d) {
	  return fn(a, b, c, d);
	};

	var flushDiscreteUpdatesImpl = function () {};

	var batchedEventUpdatesImpl = batchedUpdatesImpl;
	var isInsideEventHandler = false;
	var isBatchingEventUpdates = false;

	function finishEventHandler() {
	  // Here we wait until all updates have propagated, which is important
	  // when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  // Then we restore state of any controlled component.
	  var controlledComponentsHavePendingUpdates = needsStateRestore();

	  if (controlledComponentsHavePendingUpdates) {
	    // If a controlled event was fired, we may need to restore the state of
	    // the DOM node back to the controlled value. This is necessary when React
	    // bails out of the update without touching the DOM.
	    flushDiscreteUpdatesImpl();
	    restoreStateIfNeeded();
	  }
	}

	function batchedUpdates(fn, bookkeeping) {
	  if (isInsideEventHandler) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(bookkeeping);
	  }

	  isInsideEventHandler = true;

	  try {
	    return batchedUpdatesImpl(fn, bookkeeping);
	  } finally {
	    isInsideEventHandler = false;
	    finishEventHandler();
	  }
	}
	function batchedEventUpdates(fn, a, b) {
	  if (isBatchingEventUpdates) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(a, b);
	  }

	  isBatchingEventUpdates = true;

	  try {
	    return batchedEventUpdatesImpl(fn, a, b);
	  } finally {
	    isBatchingEventUpdates = false;
	    finishEventHandler();
	  }
	} // This is for the React Flare event system
	function discreteUpdates(fn, a, b, c, d) {
	  var prevIsInsideEventHandler = isInsideEventHandler;
	  isInsideEventHandler = true;

	  try {
	    return discreteUpdatesImpl(fn, a, b, c, d);
	  } finally {
	    isInsideEventHandler = prevIsInsideEventHandler;

	    if (!isInsideEventHandler) {
	      finishEventHandler();
	    }
	  }
	}
	function flushDiscreteUpdatesIfNeeded(timeStamp) {
	  // event.timeStamp isn't overly reliable due to inconsistencies in
	  // how different browsers have historically provided the time stamp.
	  // Some browsers provide high-resolution time stamps for all events,
	  // some provide low-resolution time stamps for all events. FF < 52
	  // even mixes both time stamps together. Some browsers even report
	  // negative time stamps or time stamps that are 0 (iOS9) in some cases.
	  // Given we are only comparing two time stamps with equality (!==),
	  // we are safe from the resolution differences. If the time stamp is 0
	  // we bail-out of preventing the flush, which can affect semantics,
	  // such as if an earlier flush removes or adds event listeners that
	  // are fired in the subsequent flush. However, this is the same
	  // behaviour as we had before this change, so the risks are low.
	  if (!isInsideEventHandler && (!enableDeprecatedFlareAPI  )) {
	    flushDiscreteUpdatesImpl();
	  }
	}
	function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
	  batchedUpdatesImpl = _batchedUpdatesImpl;
	  discreteUpdatesImpl = _discreteUpdatesImpl;
	  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
	  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
	}

	var DiscreteEvent = 0;
	var UserBlockingEvent = 1;
	var ContinuousEvent = 2;

	// A reserved attribute.
	// It is handled by React separately and shouldn't be written to the DOM.
	var RESERVED = 0; // A simple string attribute.
	// Attributes that aren't in the whitelist are presumed to have this type.

	var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
	// "enumerated" attributes with "true" and "false" as possible values.
	// When true, it should be set to a "true" string.
	// When false, it should be set to a "false" string.

	var BOOLEANISH_STRING = 2; // A real boolean attribute.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.

	var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	// For any other value, should be present with that value.

	var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
	// When falsy, it should be removed.

	var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
	// When falsy, it should be removed.

	var POSITIVE_NUMERIC = 6;

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
	/* eslint-enable max-len */

	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
	var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	function isAttributeNameSafe(attributeName) {
	  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
	    return true;
	  }

	  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
	    return false;
	  }

	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }

	  illegalAttributeNameCache[attributeName] = true;

	  {
	    error('Invalid attribute name: `%s`', attributeName);
	  }

	  return false;
	}
	function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null) {
	    return propertyInfo.type === RESERVED;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
	    return true;
	  }

	  return false;
	}
	function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
	    return false;
	  }

	  switch (typeof value) {
	    case 'function': // $FlowIssue symbol is perfectly valid here

	    case 'symbol':
	      // eslint-disable-line
	      return true;

	    case 'boolean':
	      {
	        if (isCustomComponentTag) {
	          return false;
	        }

	        if (propertyInfo !== null) {
	          return !propertyInfo.acceptsBooleans;
	        } else {
	          var prefix = name.toLowerCase().slice(0, 5);
	          return prefix !== 'data-' && prefix !== 'aria-';
	        }
	      }

	    default:
	      return false;
	  }
	}
	function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
	  if (value === null || typeof value === 'undefined') {
	    return true;
	  }

	  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
	    return true;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (propertyInfo !== null) {
	    switch (propertyInfo.type) {
	      case BOOLEAN:
	        return !value;

	      case OVERLOADED_BOOLEAN:
	        return value === false;

	      case NUMERIC:
	        return isNaN(value);

	      case POSITIVE_NUMERIC:
	        return isNaN(value) || value < 1;
	    }
	  }

	  return false;
	}
	function getPropertyInfo(name) {
	  return properties.hasOwnProperty(name) ? properties[name] : null;
	}

	function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
	  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
	  this.attributeName = attributeName;
	  this.attributeNamespace = attributeNamespace;
	  this.mustUseProperty = mustUseProperty;
	  this.propertyName = name;
	  this.type = type;
	  this.sanitizeURL = sanitizeURL;
	} // When adding attributes to this list, be sure to also add them to
	// the `possibleStandardNames` module to ensure casing and incorrect
	// name warnings.


	var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

	var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
	// elements (not just inputs). Now that ReactDOMInput assigns to the
	// defaultValue property -- do we need this?
	'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

	reservedProps.forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // A few React string attributes have a different name.
	// This is a mapping from React prop names to the attribute names.

	[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
	  var name = _ref[0],
	      attributeName = _ref[1];
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are "enumerated" HTML attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).

	['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are "enumerated" SVG attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	// Since these are SVG attributes, their attribute names are case-sensitive.

	['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML boolean attributes.

	['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
	// on the client side because the browsers are inconsistent. Instead we call focus().
	'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
	'itemScope'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are the few React props that we set as DOM properties
	// rather than attributes. These are all booleans.

	['checked', // Note: `option.selected` is not updated if `select.multiple` is
	// disabled with `removeAttribute`. We have special logic for handling this.
	'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML attributes that are "overloaded booleans": they behave like
	// booleans, but can also accept a string value.

	['capture', 'download' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML attributes that must be positive numbers.

	['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false);
	}); // These are HTML attributes that must be numbers.

	['rowSpan', 'start'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	});
	var CAMELIZE = /[\-\:]([a-z])/g;

	var capitalize = function (token) {
	  return token[1].toUpperCase();
	}; // This is a list of all SVG attributes that need special casing, namespacing,
	// or boolean value assignment. Regular attributes that just accept strings
	// and have the same names are omitted, just like in the HTML whitelist.
	// Some of these attributes can be hard to find. This list was created by
	// scraping the MDN documentation.


	['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, null, // attributeNamespace
	  false);
	}); // String SVG attributes with the xlink namespace.

	['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/1999/xlink', false);
	}); // String SVG attributes with the xml namespace.

	['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/XML/1998/namespace', false);
	}); // These attribute exists both in HTML and SVG.
	// The attribute name is case-sensitive in SVG so we can't just use
	// the React name like we do for attributes that exist only in HTML.

	['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false);
	}); // These attributes accept URLs. These must not allow javascript: URLS.
	// These will also need to accept Trusted Types object in the future.

	var xlinkHref = 'xlinkHref';
	properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
	'xlink:href', 'http://www.w3.org/1999/xlink', true);
	['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  true);
	});

	var ReactDebugCurrentFrame = null;

	{
	  ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	} // A javascript: URL can contain leading C0 control or \u0020 SPACE,
	// and any newline or tab are filtered out as if they're not part of the URL.
	// https://url.spec.whatwg.org/#url-parsing
	// Tab or newline are defined as \r\n\t:
	// https://infra.spec.whatwg.org/#ascii-tab-or-newline
	// A C0 control is a code point in the range \u0000 NULL to \u001F
	// INFORMATION SEPARATOR ONE, inclusive:
	// https://infra.spec.whatwg.org/#c0-control-or-space

	/* eslint-disable max-len */


	var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
	var didWarn = false;

	function sanitizeURL(url) {
	  {
	    if (!didWarn && isJavaScriptProtocol.test(url)) {
	      didWarn = true;

	      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
	    }
	  }
	}

	/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */
	function getValueForProperty(node, name, expected, propertyInfo) {
	  {
	    if (propertyInfo.mustUseProperty) {
	      var propertyName = propertyInfo.propertyName;
	      return node[propertyName];
	    } else {
	      if ( propertyInfo.sanitizeURL) {
	        // If we haven't fully disabled javascript: URLs, and if
	        // the hydration is successful of a javascript: URL, we
	        // still want to warn on the client.
	        sanitizeURL('' + expected);
	      }

	      var attributeName = propertyInfo.attributeName;
	      var stringValue = null;

	      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
	        if (node.hasAttribute(attributeName)) {
	          var value = node.getAttribute(attributeName);

	          if (value === '') {
	            return true;
	          }

	          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	            return value;
	          }

	          if (value === '' + expected) {
	            return expected;
	          }

	          return value;
	        }
	      } else if (node.hasAttribute(attributeName)) {
	        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	          // We had an attribute but shouldn't have had one, so read it
	          // for the error message.
	          return node.getAttribute(attributeName);
	        }

	        if (propertyInfo.type === BOOLEAN) {
	          // If this was a boolean, it doesn't matter what the value is
	          // the fact that we have it is the same as the expected.
	          return expected;
	        } // Even if this property uses a namespace we use getAttribute
	        // because we assume its namespaced name is the same as our config.
	        // To use getAttributeNS we need the local name which we don't have
	        // in our config atm.


	        stringValue = node.getAttribute(attributeName);
	      }

	      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	        return stringValue === null ? expected : stringValue;
	      } else if (stringValue === '' + expected) {
	        return expected;
	      } else {
	        return stringValue;
	      }
	    }
	  }
	}
	/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */

	function getValueForAttribute(node, name, expected) {
	  {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }

	    if (!node.hasAttribute(name)) {
	      return expected === undefined ? undefined : null;
	    }

	    var value = node.getAttribute(name);

	    if (value === '' + expected) {
	      return expected;
	    }

	    return value;
	  }
	}
	/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */

	function setValueForProperty(node, name, value, isCustomComponentTag) {
	  var propertyInfo = getPropertyInfo(name);

	  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
	    return;
	  }

	  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
	    value = null;
	  } // If the prop isn't in the special list, treat it as a simple attribute.


	  if (isCustomComponentTag || propertyInfo === null) {
	    if (isAttributeNameSafe(name)) {
	      var _attributeName = name;

	      if (value === null) {
	        node.removeAttribute(_attributeName);
	      } else {
	        node.setAttribute(_attributeName,  '' + value);
	      }
	    }

	    return;
	  }

	  var mustUseProperty = propertyInfo.mustUseProperty;

	  if (mustUseProperty) {
	    var propertyName = propertyInfo.propertyName;

	    if (value === null) {
	      var type = propertyInfo.type;
	      node[propertyName] = type === BOOLEAN ? false : '';
	    } else {
	      // Contrary to `setAttribute`, object properties are properly
	      // `toString`ed by IE8/9.
	      node[propertyName] = value;
	    }

	    return;
	  } // The rest are treated as attributes with special cases.


	  var attributeName = propertyInfo.attributeName,
	      attributeNamespace = propertyInfo.attributeNamespace;

	  if (value === null) {
	    node.removeAttribute(attributeName);
	  } else {
	    var _type = propertyInfo.type;
	    var attributeValue;

	    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
	      // If attribute type is boolean, we know for sure it won't be an execution sink
	      // and we won't require Trusted Type here.
	      attributeValue = '';
	    } else {
	      // `setAttribute` with objects becomes only `[object]` in IE8/9,
	      // ('' + value) makes it output the correct toString()-value.
	      {
	        attributeValue = '' + value;
	      }

	      if (propertyInfo.sanitizeURL) {
	        sanitizeURL(attributeValue.toString());
	      }
	    }

	    if (attributeNamespace) {
	      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
	    } else {
	      node.setAttribute(attributeName, attributeValue);
	    }
	  }
	}

	var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
	function describeComponentFrame (name, source, ownerName) {
	  var sourceInfo = '';

	  if (source) {
	    var path = source.fileName;
	    var fileName = path.replace(BEFORE_SLASH_RE, '');

	    {
	      // In DEV, include code for a common special case:
	      // prefer "folder/index.js" instead of just "index.js".
	      if (/^index\./.test(fileName)) {
	        var match = path.match(BEFORE_SLASH_RE);

	        if (match) {
	          var pathBeforeSlash = match[1];

	          if (pathBeforeSlash) {
	            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
	            fileName = folderName + '/' + fileName;
	          }
	        }
	      }
	    }

	    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
	  } else if (ownerName) {
	    sourceInfo = ' (created by ' + ownerName + ')';
	  }

	  return '\n    in ' + (name || 'Unknown') + sourceInfo;
	}

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	var Uninitialized = -1;
	var Pending = 0;
	var Resolved = 1;
	var Rejected = 2;
	function refineResolvedLazyComponent(lazyComponent) {
	  return lazyComponent._status === Resolved ? lazyComponent._result : null;
	}
	function initializeLazyComponentType(lazyComponent) {
	  if (lazyComponent._status === Uninitialized) {
	    lazyComponent._status = Pending;
	    var ctor = lazyComponent._ctor;
	    var thenable = ctor();
	    lazyComponent._result = thenable;
	    thenable.then(function (moduleObject) {
	      if (lazyComponent._status === Pending) {
	        var defaultExport = moduleObject.default;

	        {
	          if (defaultExport === undefined) {
	            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
	          }
	        }

	        lazyComponent._status = Resolved;
	        lazyComponent._result = defaultExport;
	      }
	    }, function (error) {
	      if (lazyComponent._status === Pending) {
	        lazyComponent._status = Rejected;
	        lazyComponent._result = error;
	      }
	    });
	  }
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	}

	function getComponentName(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return "Profiler";

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        return 'Context.Consumer';

	      case REACT_PROVIDER_TYPE:
	        return 'Context.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        return getComponentName(type.type);

	      case REACT_BLOCK_TYPE:
	        return getComponentName(type.render);

	      case REACT_LAZY_TYPE:
	        {
	          var thenable = type;
	          var resolvedThenable = refineResolvedLazyComponent(thenable);

	          if (resolvedThenable) {
	            return getComponentName(resolvedThenable);
	          }

	          break;
	        }
	    }
	  }

	  return null;
	}

	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function describeFiber(fiber) {
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostPortal:
	    case HostText:
	    case Fragment:
	    case ContextProvider:
	    case ContextConsumer:
	      return '';

	    default:
	      var owner = fiber._debugOwner;
	      var source = fiber._debugSource;
	      var name = getComponentName(fiber.type);
	      var ownerName = null;

	      if (owner) {
	        ownerName = getComponentName(owner.type);
	      }

	      return describeComponentFrame(name, source, ownerName);
	  }
	}

	function getStackByFiberInDevAndProd(workInProgress) {
	  var info = '';
	  var node = workInProgress;

	  do {
	    info += describeFiber(node);
	    node = node.return;
	  } while (node);

	  return info;
	}
	var current = null;
	var isRendering = false;
	function getCurrentFiberOwnerNameInDevOrNull() {
	  {
	    if (current === null) {
	      return null;
	    }

	    var owner = current._debugOwner;

	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentName(owner.type);
	    }
	  }

	  return null;
	}
	function getCurrentFiberStackInDev() {
	  {
	    if (current === null) {
	      return '';
	    } // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.


	    return getStackByFiberInDevAndProd(current);
	  }
	}
	function resetCurrentFiber() {
	  {
	    ReactDebugCurrentFrame$1.getCurrentStack = null;
	    current = null;
	    isRendering = false;
	  }
	}
	function setCurrentFiber(fiber) {
	  {
	    ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
	    current = fiber;
	    isRendering = false;
	  }
	}
	function setIsRendering(rendering) {
	  {
	    isRendering = rendering;
	  }
	}

	// Flow does not allow string concatenation of most non-string types. To work
	// around this limitation, we use an opaque type that can only be obtained by
	// passing the value through getToStringValue first.
	function toString(value) {
	  return '' + value;
	}
	function getToStringValue(value) {
	  switch (typeof value) {
	    case 'boolean':
	    case 'number':
	    case 'object':
	    case 'string':
	    case 'undefined':
	      return value;

	    default:
	      // function, symbol are assigned as empty strings
	      return '';
	  }
	}

	var ReactDebugCurrentFrame$2 = null;
	var ReactControlledValuePropTypes = {
	  checkPropTypes: null
	};

	{
	  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
	  var hasReadOnlyValue = {
	    button: true,
	    checkbox: true,
	    image: true,
	    hidden: true,
	    radio: true,
	    reset: true,
	    submit: true
	  };
	  var propTypes = {
	    value: function (props, propName, componentName) {
	      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
	        return null;
	      }

	      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    },
	    checked: function (props, propName, componentName) {
	      if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
	        return null;
	      }

	      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }
	  };
	  /**
	   * Provide a linked `value` attribute for controlled forms. You should not use
	   * this outside of the ReactDOM controlled form components.
	   */

	  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
	    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
	  };
	}

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(node) {
	  return node._valueTracker;
	}

	function detachTracker(node) {
	  node._valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value = '';

	  if (!node) {
	    return value;
	  }

	  if (isCheckable(node)) {
	    value = node.checked ? 'true' : 'false';
	  } else {
	    value = node.value;
	  }

	  return value;
	}

	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? 'checked' : 'value';
	  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
	  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
	  // and don't track value will cause over reporting of changes,
	  // but it's better then a hard failure
	  // (needed for certain tests that spyOn input values and Safari)

	  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	    return;
	  }

	  var get = descriptor.get,
	      set = descriptor.set;
	  Object.defineProperty(node, valueField, {
	    configurable: true,
	    get: function () {
	      return get.call(this);
	    },
	    set: function (value) {
	      currentValue = '' + value;
	      set.call(this, value);
	    }
	  }); // We could've passed this the first time
	  // but it triggers a bug in IE11 and Edge 14/15.
	  // Calling defineProperty() again should be equivalent.
	  // https://github.com/facebook/react/issues/11768

	  Object.defineProperty(node, valueField, {
	    enumerable: descriptor.enumerable
	  });
	  var tracker = {
	    getValue: function () {
	      return currentValue;
	    },
	    setValue: function (value) {
	      currentValue = '' + value;
	    },
	    stopTracking: function () {
	      detachTracker(node);
	      delete node[valueField];
	    }
	  };
	  return tracker;
	}

	function track(node) {
	  if (getTracker(node)) {
	    return;
	  } // TODO: Once it's just Fiber we can move this to node._wrapperState


	  node._valueTracker = trackValueOnNode(node);
	}
	function updateValueIfChanged(node) {
	  if (!node) {
	    return false;
	  }

	  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
	  // that trying again will succeed

	  if (!tracker) {
	    return true;
	  }

	  var lastValue = tracker.getValue();
	  var nextValue = getValueFromNode(node);

	  if (nextValue !== lastValue) {
	    tracker.setValue(nextValue);
	    return true;
	  }

	  return false;
	}

	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */


	function getHostProps(element, props) {
	  var node = element;
	  var checked = props.checked;

	  var hostProps = _assign({}, props, {
	    defaultChecked: undefined,
	    defaultValue: undefined,
	    value: undefined,
	    checked: checked != null ? checked : node._wrapperState.initialChecked
	  });

	  return hostProps;
	}
	function initWrapperState(element, props) {
	  {
	    ReactControlledValuePropTypes.checkPropTypes('input', props);

	    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnCheckedDefaultChecked = true;
	    }

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnValueDefaultValue = true;
	    }
	  }

	  var node = element;
	  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
	  node._wrapperState = {
	    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
	    controlled: isControlled(props)
	  };
	}
	function updateChecked(element, props) {
	  var node = element;
	  var checked = props.checked;

	  if (checked != null) {
	    setValueForProperty(node, 'checked', checked, false);
	  }
	}
	function updateWrapper(element, props) {
	  var node = element;

	  {
	    var controlled = isControlled(props);

	    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	      error('A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

	      didWarnUncontrolledToControlled = true;
	    }

	    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	      error('A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

	      didWarnControlledToUncontrolled = true;
	    }
	  }

	  updateChecked(element, props);
	  var value = getToStringValue(props.value);
	  var type = props.type;

	  if (value != null) {
	    if (type === 'number') {
	      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
	      // eslint-disable-next-line
	      node.value != value) {
	        node.value = toString(value);
	      }
	    } else if (node.value !== toString(value)) {
	      node.value = toString(value);
	    }
	  } else if (type === 'submit' || type === 'reset') {
	    // Submit/reset inputs need the attribute removed completely to avoid
	    // blank-text buttons.
	    node.removeAttribute('value');
	    return;
	  }

	  {
	    // When syncing the value attribute, the value comes from a cascade of
	    // properties:
	    //  1. The value React property
	    //  2. The defaultValue React property
	    //  3. Otherwise there should be no change
	    if (props.hasOwnProperty('value')) {
	      setDefaultValue(node, props.type, value);
	    } else if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  }

	  {
	    // When syncing the checked attribute, it only changes when it needs
	    // to be removed, such as transitioning from a checkbox into a text input
	    if (props.checked == null && props.defaultChecked != null) {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  }
	}
	function postMountWrapper(element, props, isHydrating) {
	  var node = element; // Do not assign value if it is already set. This prevents user text input
	  // from being lost during SSR hydration.

	  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
	    var type = props.type;
	    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
	    // default value provided by the browser. See: #12872

	    if (isButton && (props.value === undefined || props.value === null)) {
	      return;
	    }

	    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
	    // from being lost during SSR hydration.

	    if (!isHydrating) {
	      {
	        // When syncing the value attribute, the value property should use
	        // the wrapperState._initialValue property. This uses:
	        //
	        //   1. The value React property when present
	        //   2. The defaultValue React property when present
	        //   3. An empty string
	        if (initialValue !== node.value) {
	          node.value = initialValue;
	        }
	      }
	    }

	    {
	      // Otherwise, the value attribute is synchronized to the property,
	      // so we assign defaultValue to the same thing as the value property
	      // assignment step above.
	      node.defaultValue = initialValue;
	    }
	  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	  // this is needed to work around a chrome bug where setting defaultChecked
	  // will sometimes influence the value of checked (even after detachment).
	  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	  // We need to temporarily unset name to avoid disrupting radio button groups.


	  var name = node.name;

	  if (name !== '') {
	    node.name = '';
	  }

	  {
	    // When syncing the checked attribute, both the checked property and
	    // attribute are assigned at the same time using defaultChecked. This uses:
	    //
	    //   1. The checked React property when present
	    //   2. The defaultChecked React property when present
	    //   3. Otherwise, false
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !!node._wrapperState.initialChecked;
	  }

	  if (name !== '') {
	    node.name = name;
	  }
	}
	function restoreControlledState(element, props) {
	  var node = element;
	  updateWrapper(node, props);
	  updateNamedCousins(node, props);
	}

	function updateNamedCousins(rootNode, props) {
	  var name = props.name;

	  if (props.type === 'radio' && name != null) {
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    } // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form. It might not even be in the
	    // document. Let's just use the local `querySelectorAll` to ensure we don't
	    // miss anything.


	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];

	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      } // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.


	      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);

	      if (!otherProps) {
	        {
	          throw Error( "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported." );
	        }
	      } // We need update the tracked value on the named cousin since the value
	      // was changed but the input saw no event or value set


	      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.

	      updateWrapper(otherNode, otherProps);
	    }
	  }
	} // In Chrome, assigning defaultValue to certain input types triggers input validation.
	// For number inputs, the display value loses trailing decimal points. For email inputs,
	// Chrome raises "The specified value <x> is not a valid email address".
	//
	// Here we check to see if the defaultValue has actually changed, avoiding these problems
	// when the user is inputting text
	//
	// https://github.com/facebook/react/issues/7253


	function setDefaultValue(node, type, value) {
	  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
	  type !== 'number' || node.ownerDocument.activeElement !== node) {
	    if (value == null) {
	      node.defaultValue = toString(node._wrapperState.initialValue);
	    } else if (node.defaultValue !== toString(value)) {
	      node.defaultValue = toString(value);
	    }
	  }
	}

	var didWarnSelectedSetOnOption = false;
	var didWarnInvalidChild = false;

	function flattenChildren(children) {
	  var content = ''; // Flatten children. We'll warn if they are invalid
	  // during validateProps() which runs for hydration too.
	  // Note that this would throw on non-element objects.
	  // Elements are stringified (which is normally irrelevant
	  // but matters for <fbt>).

	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }

	    content += child; // Note: we don't warn about invalid children here.
	    // Instead, this is done separately below so that
	    // it happens during the hydration codepath too.
	  });
	  return content;
	}
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */


	function validateProps(element, props) {
	  {
	    // This mirrors the codepath above, but runs for hydration too.
	    // Warn about invalid children here so that client and hydration are consistent.
	    // TODO: this seems like it could cause a DEV-only throw for hydration
	    // if children contains a non-element object. We should try to avoid that.
	    if (typeof props.children === 'object' && props.children !== null) {
	      React.Children.forEach(props.children, function (child) {
	        if (child == null) {
	          return;
	        }

	        if (typeof child === 'string' || typeof child === 'number') {
	          return;
	        }

	        if (typeof child.type !== 'string') {
	          return;
	        }

	        if (!didWarnInvalidChild) {
	          didWarnInvalidChild = true;

	          error('Only strings and numbers are supported as <option> children.');
	        }
	      });
	    } // TODO: Remove support for `selected` in <option>.


	    if (props.selected != null && !didWarnSelectedSetOnOption) {
	      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

	      didWarnSelectedSetOnOption = true;
	    }
	  }
	}
	function postMountWrapper$1(element, props) {
	  // value="" should make a value attribute (#6219)
	  if (props.value != null) {
	    element.setAttribute('value', toString(getToStringValue(props.value)));
	  }
	}
	function getHostProps$1(element, props) {
	  var hostProps = _assign({
	    children: undefined
	  }, props);

	  var content = flattenChildren(props.children);

	  if (content) {
	    hostProps.children = content;
	  }

	  return hostProps;
	}

	var didWarnValueDefaultValue$1;

	{
	  didWarnValueDefaultValue$1 = false;
	}

	function getDeclarationErrorAddendum() {
	  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	  if (ownerName) {
	    return '\n\nCheck the render method of `' + ownerName + '`.';
	  }

	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];
	/**
	 * Validation function for `value` and `defaultValue`.
	 */

	function checkSelectPropTypes(props) {
	  {
	    ReactControlledValuePropTypes.checkPropTypes('select', props);

	    for (var i = 0; i < valuePropNames.length; i++) {
	      var propName = valuePropNames[i];

	      if (props[propName] == null) {
	        continue;
	      }

	      var isArray = Array.isArray(props[propName]);

	      if (props.multiple && !isArray) {
	        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
	      } else if (!props.multiple && isArray) {
	        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
	      }
	    }
	  }
	}

	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  var options = node.options;

	  if (multiple) {
	    var selectedValues = propValue;
	    var selectedValue = {};

	    for (var i = 0; i < selectedValues.length; i++) {
	      // Prefix to avoid chaos with special keys.
	      selectedValue['$' + selectedValues[i]] = true;
	    }

	    for (var _i = 0; _i < options.length; _i++) {
	      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

	      if (options[_i].selected !== selected) {
	        options[_i].selected = selected;
	      }

	      if (selected && setDefaultSelected) {
	        options[_i].defaultSelected = true;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    var _selectedValue = toString(getToStringValue(propValue));

	    var defaultSelected = null;

	    for (var _i2 = 0; _i2 < options.length; _i2++) {
	      if (options[_i2].value === _selectedValue) {
	        options[_i2].selected = true;

	        if (setDefaultSelected) {
	          options[_i2].defaultSelected = true;
	        }

	        return;
	      }

	      if (defaultSelected === null && !options[_i2].disabled) {
	        defaultSelected = options[_i2];
	      }
	    }

	    if (defaultSelected !== null) {
	      defaultSelected.selected = true;
	    }
	  }
	}
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */


	function getHostProps$2(element, props) {
	  return _assign({}, props, {
	    value: undefined
	  });
	}
	function initWrapperState$1(element, props) {
	  var node = element;

	  {
	    checkSelectPropTypes(props);
	  }

	  node._wrapperState = {
	    wasMultiple: !!props.multiple
	  };

	  {
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
	      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');

	      didWarnValueDefaultValue$1 = true;
	    }
	  }
	}
	function postMountWrapper$2(element, props) {
	  var node = element;
	  node.multiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (props.defaultValue != null) {
	    updateOptions(node, !!props.multiple, props.defaultValue, true);
	  }
	}
	function postUpdateWrapper(element, props) {
	  var node = element;
	  var wasMultiple = node._wrapperState.wasMultiple;
	  node._wrapperState.wasMultiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (wasMultiple !== !!props.multiple) {
	    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	    if (props.defaultValue != null) {
	      updateOptions(node, !!props.multiple, props.defaultValue, true);
	    } else {
	      // Revert the select back to its default unselected state.
	      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
	    }
	  }
	}
	function restoreControlledState$1(element, props) {
	  var node = element;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  }
	}

	var didWarnValDefaultVal = false;

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	function getHostProps$3(element, props) {
	  var node = element;

	  if (!(props.dangerouslySetInnerHTML == null)) {
	    {
	      throw Error( "`dangerouslySetInnerHTML` does not make sense on <textarea>." );
	    }
	  } // Always set children to the same thing. In IE9, the selection range will
	  // get reset if `textContent` is mutated.  We could add a check in setTextContent
	  // to only set the value if/when the value differs from the node value (which would
	  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	  // solution. The value can be a boolean or object so that's why it's forced
	  // to be a string.


	  var hostProps = _assign({}, props, {
	    value: undefined,
	    defaultValue: undefined,
	    children: toString(node._wrapperState.initialValue)
	  });

	  return hostProps;
	}
	function initWrapperState$2(element, props) {
	  var node = element;

	  {
	    ReactControlledValuePropTypes.checkPropTypes('textarea', props);

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

	      didWarnValDefaultVal = true;
	    }
	  }

	  var initialValue = props.value; // Only bother fetching default value if we're going to use it

	  if (initialValue == null) {
	    var children = props.children,
	        defaultValue = props.defaultValue;

	    if (children != null) {
	      {
	        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
	      }

	      {
	        if (!(defaultValue == null)) {
	          {
	            throw Error( "If you supply `defaultValue` on a <textarea>, do not pass children." );
	          }
	        }

	        if (Array.isArray(children)) {
	          if (!(children.length <= 1)) {
	            {
	              throw Error( "<textarea> can only have at most one child." );
	            }
	          }

	          children = children[0];
	        }

	        defaultValue = children;
	      }
	    }

	    if (defaultValue == null) {
	      defaultValue = '';
	    }

	    initialValue = defaultValue;
	  }

	  node._wrapperState = {
	    initialValue: getToStringValue(initialValue)
	  };
	}
	function updateWrapper$1(element, props) {
	  var node = element;
	  var value = getToStringValue(props.value);
	  var defaultValue = getToStringValue(props.defaultValue);

	  if (value != null) {
	    // Cast `value` to a string to ensure the value is set correctly. While
	    // browsers typically do this as necessary, jsdom doesn't.
	    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

	    if (newValue !== node.value) {
	      node.value = newValue;
	    }

	    if (props.defaultValue == null && node.defaultValue !== newValue) {
	      node.defaultValue = newValue;
	    }
	  }

	  if (defaultValue != null) {
	    node.defaultValue = toString(defaultValue);
	  }
	}
	function postMountWrapper$3(element, props) {
	  var node = element; // This is in postMount because we need access to the DOM node, which is not
	  // available until after the component has mounted.

	  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
	  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	  // will populate textContent as well.
	  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

	  if (textContent === node._wrapperState.initialValue) {
	    if (textContent !== '' && textContent !== null) {
	      node.value = textContent;
	    }
	  }
	}
	function restoreControlledState$2(element, props) {
	  // DOM component is still mounted; update
	  updateWrapper$1(element, props);
	}

	var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
	var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
	var Namespaces = {
	  html: HTML_NAMESPACE,
	  mathml: MATH_NAMESPACE,
	  svg: SVG_NAMESPACE
	}; // Assumes there is no parent namespace.

	function getIntrinsicNamespace(type) {
	  switch (type) {
	    case 'svg':
	      return SVG_NAMESPACE;

	    case 'math':
	      return MATH_NAMESPACE;

	    default:
	      return HTML_NAMESPACE;
	  }
	}
	function getChildNamespace(parentNamespace, type) {
	  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
	    // No (or default) parent namespace: potential entry point.
	    return getIntrinsicNamespace(type);
	  }

	  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
	    // We're leaving SVG.
	    return HTML_NAMESPACE;
	  } // By default, pass namespace below.


	  return parentNamespace;
	}

	/* globals MSApp */

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	var reusableSVGContainer;
	/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */

	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  if (node.namespaceURI === Namespaces.svg) {

	    if (!('innerHTML' in node)) {
	      // IE does not have innerHTML for SVG nodes, so instead we inject the
	      // new markup in a temp node and then move the child nodes across into
	      // the target node
	      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
	      var svgNode = reusableSVGContainer.firstChild;

	      while (node.firstChild) {
	        node.removeChild(node.firstChild);
	      }

	      while (svgNode.firstChild) {
	        node.appendChild(svgNode.firstChild);
	      }

	      return;
	    }
	  }

	  node.innerHTML = html;
	});

	/**
	 * HTML nodeType values that represent the type of the node
	 */
	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var COMMENT_NODE = 8;
	var DOCUMENT_NODE = 9;
	var DOCUMENT_FRAGMENT_NODE = 11;

	/**
	 * Set the textContent property of a node. For text updates, it's faster
	 * to set the `nodeValue` of the Text node directly instead of using
	 * `.textContent` which will remove the existing node and create a new one.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */

	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }

	  node.textContent = text;
	};

	// Do not use the below two methods directly!
	// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
	// (It is the only module that is allowed to access these methods.)
	function unsafeCastStringToDOMTopLevelType(topLevelType) {
	  return topLevelType;
	}
	function unsafeCastDOMTopLevelTypeToString(topLevelType) {
	  return topLevelType;
	}

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */

	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  return prefixes;
	}
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */


	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */

	var prefixedEventNames = {};
	/**
	 * Element to check for prefixes on.
	 */

	var style = {};
	/**
	 * Bootstrap if a DOM exists.
	 */

	if (canUseDOM) {
	  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.

	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  } // Same as above


	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */


	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return eventName;
	}

	/**
	 * To identify top level events in ReactDOM, we use constants defined by this
	 * module. This is the only module that uses the unsafe* methods to express
	 * that the constants actually correspond to the browser event names. This lets
	 * us save some bundle size by avoiding a top level type -> event name map.
	 * The rest of ReactDOM code should import top level types from this file.
	 */

	var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
	var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
	var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
	var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
	var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
	var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
	var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
	var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
	var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
	var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
	var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
	var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
	var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
	var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
	var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
	var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
	var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
	var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
	var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
	var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
	var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
	var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
	var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
	var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
	var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
	var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
	var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
	var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
	var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
	var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
	var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
	var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
	var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
	var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
	var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
	var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
	var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
	var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
	var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
	var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
	var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
	var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
	var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
	var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
	var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
	var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
	var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
	var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
	var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
	var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
	var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
	var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
	var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
	var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
	var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
	var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
	var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
	var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
	var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
	var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
	var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
	var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
	var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
	var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
	var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
	var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
	var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
	var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
	var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
	var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
	var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
	var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
	var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
	var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
	var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
	var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
	var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
	var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
	var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
	var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
	// Note that events in this list will *not* be listened to at the top level
	// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

	var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
	function getRawEventName(topLevelType) {
	  return unsafeCastDOMTopLevelTypeToString(topLevelType);
	}

	var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // prettier-ignore

	var elementListenerMap = new PossiblyWeakMap();
	function getListenerMapForElement(element) {
	  var listenerMap = elementListenerMap.get(element);

	  if (listenerMap === undefined) {
	    listenerMap = new Map();
	    elementListenerMap.set(element, listenerMap);
	  }

	  return listenerMap;
	}

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */
	function get(key) {
	  return key._reactInternalFiber;
	}
	function has(key) {
	  return key._reactInternalFiber !== undefined;
	}
	function set(key, value) {
	  key._reactInternalFiber = value;
	}

	// Don't change these two values. They're used by React Dev Tools.
	var NoEffect =
	/*              */
	0;
	var PerformedWork =
	/*         */
	1; // You can change the rest (and add more).

	var Placement =
	/*             */
	2;
	var Update =
	/*                */
	4;
	var PlacementAndUpdate =
	/*    */
	6;
	var Deletion =
	/*              */
	8;
	var ContentReset =
	/*          */
	16;
	var Callback =
	/*              */
	32;
	var DidCapture =
	/*            */
	64;
	var Ref =
	/*                   */
	128;
	var Snapshot =
	/*              */
	256;
	var Passive =
	/*               */
	512;
	var Hydrating =
	/*             */
	1024;
	var HydratingAndUpdate =
	/*    */
	1028; // Passive & Update & Callback & Ref & Snapshot

	var LifecycleEffectMask =
	/*   */
	932; // Union of all host effects

	var HostEffectMask =
	/*        */
	2047;
	var Incomplete =
	/*            */
	2048;
	var ShouldCapture =
	/*         */
	4096;

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	function getNearestMountedFiber(fiber) {
	  var node = fiber;
	  var nearestMounted = fiber;

	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    var nextNode = node;

	    do {
	      node = nextNode;

	      if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
	        // This is an insertion or in-progress hydration. The nearest possible
	        // mounted fiber is the parent but we need to continue to figure out
	        // if that one is still mounted.
	        nearestMounted = node.return;
	      }

	      nextNode = node.return;
	    } while (nextNode);
	  } else {
	    while (node.return) {
	      node = node.return;
	    }
	  }

	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return nearestMounted;
	  } // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.


	  return null;
	}
	function getSuspenseInstanceFromFiber(fiber) {
	  if (fiber.tag === SuspenseComponent) {
	    var suspenseState = fiber.memoizedState;

	    if (suspenseState === null) {
	      var current = fiber.alternate;

	      if (current !== null) {
	        suspenseState = current.memoizedState;
	      }
	    }

	    if (suspenseState !== null) {
	      return suspenseState.dehydrated;
	    }
	  }

	  return null;
	}
	function getContainerFromFiber(fiber) {
	  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
	}
	function isFiberMounted(fiber) {
	  return getNearestMountedFiber(fiber) === fiber;
	}
	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner.current;

	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;

	      if (!instance._warnedAboutRefsInRender) {
	        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
	      }

	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);

	  if (!fiber) {
	    return false;
	  }

	  return getNearestMountedFiber(fiber) === fiber;
	}

	function assertIsMounted(fiber) {
	  if (!(getNearestMountedFiber(fiber) === fiber)) {
	    {
	      throw Error( "Unable to find node on an unmounted component." );
	    }
	  }
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;

	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var nearestMounted = getNearestMountedFiber(fiber);

	    if (!(nearestMounted !== null)) {
	      {
	        throw Error( "Unable to find node on an unmounted component." );
	      }
	    }

	    if (nearestMounted !== fiber) {
	      return null;
	    }

	    return fiber;
	  } // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.


	  var a = fiber;
	  var b = alternate;

	  while (true) {
	    var parentA = a.return;

	    if (parentA === null) {
	      // We're at the root.
	      break;
	    }

	    var parentB = parentA.alternate;

	    if (parentB === null) {
	      // There is no alternate. This is an unusual case. Currently, it only
	      // happens when a Suspense component is hidden. An extra fragment fiber
	      // is inserted in between the Suspense fiber and its children. Skip
	      // over this extra fragment fiber and proceed to the next parent.
	      var nextParent = parentA.return;

	      if (nextParent !== null) {
	        a = b = nextParent;
	        continue;
	      } // If there's no parent, we're at the root.


	      break;
	    } // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.


	    if (parentA.child === parentB.child) {
	      var child = parentA.child;

	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }

	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }

	        child = child.sibling;
	      } // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.


	      {
	        {
	          throw Error( "Unable to find node on an unmounted component." );
	        }
	      }
	    }

	    if (a.return !== b.return) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;

	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }

	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }

	        _child = _child.sibling;
	      }

	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;

	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }

	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }

	          _child = _child.sibling;
	        }

	        if (!didFindChild) {
	          {
	            throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
	          }
	        }
	      }
	    }

	    if (!(a.alternate === b)) {
	      {
	        throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  } // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.


	  if (!(a.tag === HostRoot)) {
	    {
	      throw Error( "Unable to find node on an unmounted component." );
	    }
	  }

	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  } // Otherwise B has to be current branch.


	  return alternate;
	}
	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);

	  if (!currentParent) {
	    return null;
	  } // Next we'll drill down this component to find the first HostComponent/Text.


	  var node = currentParent;

	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === currentParent) {
	      return null;
	    }

	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable


	  return null;
	}
	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);

	  if (!currentParent) {
	    return null;
	  } // Next we'll drill down this component to find the first HostComponent/Text.


	  var node = currentParent;

	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
	      return node;
	    } else if (node.child && node.tag !== HostPortal) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === currentParent) {
	      return null;
	    }

	    while (!node.sibling) {
	      if (!node.return || node.return === currentParent) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable


	  return null;
	}

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  if (!(next != null)) {
	    {
	      throw Error( "accumulateInto(...): Accumulated items must not be null or undefined." );
	    }
	  }

	  if (current == null) {
	    return next;
	  } // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).


	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }

	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 * @param {function} cb Callback invoked with each element or a collection.
	 * @param {?} [scope] Scope used as `this` in a callback.
	 */
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */

	var eventQueue = null;
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */

	var executeDispatchesAndRelease = function (event) {
	  if (event) {
	    executeDispatchesInOrder(event);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e);
	};

	function runEventsInBatch(events) {
	  if (events !== null) {
	    eventQueue = accumulateInto(eventQueue, events);
	  } // Set `eventQueue` to null before processing it so that we can tell if more
	  // events get enqueued while processing.


	  var processingEventQueue = eventQueue;
	  eventQueue = null;

	  if (!processingEventQueue) {
	    return;
	  }

	  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

	  if (!!eventQueue) {
	    {
	      throw Error( "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented." );
	    }
	  } // This would be a good time to rethrow if any of the event handlers threw.


	  rethrowCaughtError();
	}

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  // Fallback to nativeEvent.srcElement for IE9
	  // https://github.com/facebook/react/issues/12506
	  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html


	  return target.nodeType === TEXT_NODE ? target.parentNode : target;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */

	function isEventSupported(eventNameSuffix) {
	  if (!canUseDOM) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  return isSupported;
	}

	/**
	 * Summary of `DOMEventPluginSystem` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactDOMEventListener, which is injected and can therefore support
	 *    pluggable event sources. This is the only work that occurs in the main
	 *    thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginRegistry`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginRegistry` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginRegistry` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|PluginRegistry|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
	var callbackBookkeepingPool = [];

	function releaseTopLevelCallbackBookKeeping(instance) {
	  instance.topLevelType = null;
	  instance.nativeEvent = null;
	  instance.targetInst = null;
	  instance.ancestors.length = 0;

	  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
	    callbackBookkeepingPool.push(instance);
	  }
	} // Used to store ancestor hierarchy in top level callback


	function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
	  if (callbackBookkeepingPool.length) {
	    var instance = callbackBookkeepingPool.pop();
	    instance.topLevelType = topLevelType;
	    instance.eventSystemFlags = eventSystemFlags;
	    instance.nativeEvent = nativeEvent;
	    instance.targetInst = targetInst;
	    return instance;
	  }

	  return {
	    topLevelType: topLevelType,
	    eventSystemFlags: eventSystemFlags,
	    nativeEvent: nativeEvent,
	    targetInst: targetInst,
	    ancestors: []
	  };
	}
	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */


	function findRootContainerNode(inst) {
	  if (inst.tag === HostRoot) {
	    return inst.stateNode.containerInfo;
	  } // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.


	  while (inst.return) {
	    inst = inst.return;
	  }

	  if (inst.tag !== HostRoot) {
	    // This can happen if we're in a detached tree.
	    return null;
	  }

	  return inst.stateNode.containerInfo;
	}
	/**
	 * Allows registered plugins an opportunity to extract events from top-level
	 * native browser events.
	 *
	 * @return {*} An accumulation of synthetic events.
	 * @internal
	 */


	function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	  var events = null;

	  for (var i = 0; i < plugins.length; i++) {
	    // Not every plugin in the ordering may be loaded at runtime.
	    var possiblePlugin = plugins[i];

	    if (possiblePlugin) {
	      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);

	      if (extractedEvents) {
	        events = accumulateInto(events, extractedEvents);
	      }
	    }
	  }

	  return events;
	}

	function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	  var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	  runEventsInBatch(events);
	}

	function handleTopLevel(bookKeeping) {
	  var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.

	  var ancestor = targetInst;

	  do {
	    if (!ancestor) {
	      var ancestors = bookKeeping.ancestors;
	      ancestors.push(ancestor);
	      break;
	    }

	    var root = findRootContainerNode(ancestor);

	    if (!root) {
	      break;
	    }

	    var tag = ancestor.tag;

	    if (tag === HostComponent || tag === HostText) {
	      bookKeeping.ancestors.push(ancestor);
	    }

	    ancestor = getClosestInstanceFromNode(root);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    var eventTarget = getEventTarget(bookKeeping.nativeEvent);
	    var topLevelType = bookKeeping.topLevelType;
	    var nativeEvent = bookKeeping.nativeEvent;
	    var eventSystemFlags = bookKeeping.eventSystemFlags; // If this is the first ancestor, we mark it on the system flags

	    if (i === 0) {
	      eventSystemFlags |= IS_FIRST_ANCESTOR;
	    }

	    runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
	  }
	}

	function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
	  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);

	  try {
	    // Event queue being processed in the same cycle allows
	    // `preventDefault`.
	    batchedEventUpdates(handleTopLevel, bookKeeping);
	  } finally {
	    releaseTopLevelCallbackBookKeeping(bookKeeping);
	  }
	}
	/**
	 * We listen for bubbled touch events on the document object.
	 *
	 * Firefox v8.01 (and possibly others) exhibited strange behavior when
	 * mounting `onmousemove` events at some node that was not the document
	 * element. The symptoms were that if your mouse is not moving over something
	 * contained within that mount point (for example on the background) the
	 * top-level listeners for `onmousemove` won't be called. However, if you
	 * register the `mousemove` on the document object, then it will of course
	 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	 * top-level listeners to the document object only, at least for these
	 * movement types of events and possibly all events.
	 *
	 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	 *
	 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	 * they bubble to document.
	 *
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @param {object} mountAt Container where to mount the listener
	 */

	function legacyListenToEvent(registrationName, mountAt) {
	  var listenerMap = getListenerMapForElement(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];

	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];
	    legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
	  }
	}
	function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
	  if (!listenerMap.has(topLevelType)) {
	    switch (topLevelType) {
	      case TOP_SCROLL:
	        trapCapturedEvent(TOP_SCROLL, mountAt);
	        break;

	      case TOP_FOCUS:
	      case TOP_BLUR:
	        trapCapturedEvent(TOP_FOCUS, mountAt);
	        trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
	        // but this ensures we mark both as attached rather than just one.

	        listenerMap.set(TOP_BLUR, null);
	        listenerMap.set(TOP_FOCUS, null);
	        break;

	      case TOP_CANCEL:
	      case TOP_CLOSE:
	        if (isEventSupported(getRawEventName(topLevelType))) {
	          trapCapturedEvent(topLevelType, mountAt);
	        }

	        break;

	      case TOP_INVALID:
	      case TOP_SUBMIT:
	      case TOP_RESET:
	        // We listen to them on the target DOM elements.
	        // Some of them bubble so we don't want them to fire twice.
	        break;

	      default:
	        // By default, listen on the top level to all non-media events.
	        // Media events don't bubble so adding the listener wouldn't do anything.
	        var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;

	        if (!isMediaEvent) {
	          trapBubbledEvent(topLevelType, mountAt);
	        }

	        break;
	    }

	    listenerMap.set(topLevelType, null);
	  }
	}
	function isListeningToAllDependencies(registrationName, mountAt) {
	  var listenerMap = getListenerMapForElement(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];

	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];

	    if (!listenerMap.has(dependency)) {
	      return false;
	    }
	  }

	  return true;
	}

	var attemptUserBlockingHydration;
	function setAttemptUserBlockingHydration(fn) {
	  attemptUserBlockingHydration = fn;
	}
	var attemptContinuousHydration;
	function setAttemptContinuousHydration(fn) {
	  attemptContinuousHydration = fn;
	}
	var attemptHydrationAtCurrentPriority;
	function setAttemptHydrationAtCurrentPriority(fn) {
	  attemptHydrationAtCurrentPriority = fn;
	} // TODO: Upgrade this definition once we're on a newer version of Flow that
	var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

	var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
	// if the last target was dehydrated.

	var queuedFocus = null;
	var queuedDrag = null;
	var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

	var queuedPointers = new Map();
	var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

	var queuedExplicitHydrationTargets = [];
	function hasQueuedDiscreteEvents() {
	  return queuedDiscreteEvents.length > 0;
	}
	var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
	var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
	function isReplayableDiscreteEvent(eventType) {
	  return discreteReplayableEvents.indexOf(eventType) > -1;
	}

	function trapReplayableEventForDocument(topLevelType, document, listenerMap) {
	  legacyListenToTopLevelEvent(topLevelType, document, listenerMap);
	}

	function eagerlyTrapReplayableEvents(container, document) {
	  var listenerMapForDoc = getListenerMapForElement(document); // Discrete

	  discreteReplayableEvents.forEach(function (topLevelType) {
	    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
	  }); // Continuous

	  continuousReplayableEvents.forEach(function (topLevelType) {
	    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
	  });
	}

	function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
	  return {
	    blockedOn: blockedOn,
	    topLevelType: topLevelType,
	    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
	    nativeEvent: nativeEvent,
	    container: container
	  };
	}

	function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
	  var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
	  queuedDiscreteEvents.push(queuedEvent);
	} // Resets the replaying for this type of continuous event to no event.

	function clearIfContinuousEvent(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_FOCUS:
	    case TOP_BLUR:
	      queuedFocus = null;
	      break;

	    case TOP_DRAG_ENTER:
	    case TOP_DRAG_LEAVE:
	      queuedDrag = null;
	      break;

	    case TOP_MOUSE_OVER:
	    case TOP_MOUSE_OUT:
	      queuedMouse = null;
	      break;

	    case TOP_POINTER_OVER:
	    case TOP_POINTER_OUT:
	      {
	        var pointerId = nativeEvent.pointerId;
	        queuedPointers.delete(pointerId);
	        break;
	      }

	    case TOP_GOT_POINTER_CAPTURE:
	    case TOP_LOST_POINTER_CAPTURE:
	      {
	        var _pointerId = nativeEvent.pointerId;
	        queuedPointerCaptures.delete(_pointerId);
	        break;
	      }
	  }
	}

	function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
	  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
	    var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);

	    if (blockedOn !== null) {
	      var _fiber2 = getInstanceFromNode$1(blockedOn);

	      if (_fiber2 !== null) {
	        // Attempt to increase the priority of this target.
	        attemptContinuousHydration(_fiber2);
	      }
	    }

	    return queuedEvent;
	  } // If we have already queued this exact event, then it's because
	  // the different event systems have different DOM event listeners.
	  // We can accumulate the flags and store a single event to be
	  // replayed.


	  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
	  return existingQueuedEvent;
	}

	function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
	  // These set relatedTarget to null because the replayed event will be treated as if we
	  // moved from outside the window (no target) onto the target once it hydrates.
	  // Instead of mutating we could clone the event.
	  switch (topLevelType) {
	    case TOP_FOCUS:
	      {
	        var focusEvent = nativeEvent;
	        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
	        return true;
	      }

	    case TOP_DRAG_ENTER:
	      {
	        var dragEvent = nativeEvent;
	        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
	        return true;
	      }

	    case TOP_MOUSE_OVER:
	      {
	        var mouseEvent = nativeEvent;
	        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
	        return true;
	      }

	    case TOP_POINTER_OVER:
	      {
	        var pointerEvent = nativeEvent;
	        var pointerId = pointerEvent.pointerId;
	        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
	        return true;
	      }

	    case TOP_GOT_POINTER_CAPTURE:
	      {
	        var _pointerEvent = nativeEvent;
	        var _pointerId2 = _pointerEvent.pointerId;
	        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
	        return true;
	      }
	  }

	  return false;
	} // Check if this target is unblocked. Returns true if it's unblocked.

	function attemptExplicitHydrationTarget(queuedTarget) {
	  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
	  // Try to unify them. It's a bit tricky since it would require two return
	  // values.
	  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted !== null) {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // We're blocked on hydrating this boundary.
	          // Increase its priority.
	          queuedTarget.blockedOn = instance;
	          Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
	            attemptHydrationAtCurrentPriority(nearestMounted);
	          });
	          return;
	        }
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (root.hydrate) {
	          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
	          // a root other than sync.

	          return;
	        }
	      }
	    }
	  }

	  queuedTarget.blockedOn = null;
	}

	function attemptReplayContinuousQueuedEvent(queuedEvent) {
	  if (queuedEvent.blockedOn !== null) {
	    return false;
	  }

	  var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);

	  if (nextBlockedOn !== null) {
	    // We're still blocked. Try again later.
	    var _fiber3 = getInstanceFromNode$1(nextBlockedOn);

	    if (_fiber3 !== null) {
	      attemptContinuousHydration(_fiber3);
	    }

	    queuedEvent.blockedOn = nextBlockedOn;
	    return false;
	  }

	  return true;
	}

	function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
	  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
	    map.delete(key);
	  }
	}

	function replayUnblockedEvents() {
	  hasScheduledReplayAttempt = false; // First replay discrete events.

	  while (queuedDiscreteEvents.length > 0) {
	    var nextDiscreteEvent = queuedDiscreteEvents[0];

	    if (nextDiscreteEvent.blockedOn !== null) {
	      // We're still blocked.
	      // Increase the priority of this boundary to unblock
	      // the next discrete event.
	      var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);

	      if (_fiber4 !== null) {
	        attemptUserBlockingHydration(_fiber4);
	      }

	      break;
	    }

	    var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);

	    if (nextBlockedOn !== null) {
	      // We're still blocked. Try again later.
	      nextDiscreteEvent.blockedOn = nextBlockedOn;
	    } else {
	      // We've successfully replayed the first event. Let's try the next one.
	      queuedDiscreteEvents.shift();
	    }
	  } // Next replay any continuous events.


	  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
	    queuedFocus = null;
	  }

	  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
	    queuedDrag = null;
	  }

	  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
	    queuedMouse = null;
	  }

	  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
	  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
	}

	function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
	  if (queuedEvent.blockedOn === unblocked) {
	    queuedEvent.blockedOn = null;

	    if (!hasScheduledReplayAttempt) {
	      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
	      // now unblocked. This first might not actually be unblocked yet.
	      // We could check it early to avoid scheduling an unnecessary callback.

	      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
	    }
	  }
	}

	function retryIfBlockedOn(unblocked) {
	  // Mark anything that was blocked on this as no longer blocked
	  // and eligible for a replay.
	  if (queuedDiscreteEvents.length > 0) {
	    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
	    // worth it because we expect very few discrete events to queue up and once
	    // we are actually fully unblocked it will be fast to replay them.

	    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
	      var queuedEvent = queuedDiscreteEvents[i];

	      if (queuedEvent.blockedOn === unblocked) {
	        queuedEvent.blockedOn = null;
	      }
	    }
	  }

	  if (queuedFocus !== null) {
	    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
	  }

	  if (queuedDrag !== null) {
	    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
	  }

	  if (queuedMouse !== null) {
	    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
	  }

	  var unblock = function (queuedEvent) {
	    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
	  };

	  queuedPointers.forEach(unblock);
	  queuedPointerCaptures.forEach(unblock);

	  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
	    var queuedTarget = queuedExplicitHydrationTargets[_i];

	    if (queuedTarget.blockedOn === unblocked) {
	      queuedTarget.blockedOn = null;
	    }
	  }

	  while (queuedExplicitHydrationTargets.length > 0) {
	    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

	    if (nextExplicitTarget.blockedOn !== null) {
	      // We're still blocked.
	      break;
	    } else {
	      attemptExplicitHydrationTarget(nextExplicitTarget);

	      if (nextExplicitTarget.blockedOn === null) {
	        // We're unblocked.
	        queuedExplicitHydrationTargets.shift();
	      }
	    }
	  }
	}

	function addEventBubbleListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, false);
	}
	function addEventCaptureListener(element, eventType, listener) {
	  element.addEventListener(eventType, listener, true);
	}

	// do it in two places, which duplicates logic
	// and increases the bundle size, we do it all
	// here once. If we remove or refactor the
	// SimpleEventPlugin, we should also remove or
	// update the below line.

	var simpleEventPluginEventTypes = {};
	var topLevelEventsToDispatchConfig = new Map();
	var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
	// the code required to apply the same logic for event prioritization and that of the
	// SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
	// duplication (for which there would be quite a bit). For the events that are not needed
	// for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
	// array of top level events.
	// Lastly, we ignore prettier so we can keep the formatting sane.
	// prettier-ignore

	var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, 'blur', TOP_CANCEL, 'cancel', TOP_CLICK, 'click', TOP_CLOSE, 'close', TOP_CONTEXT_MENU, 'contextMenu', TOP_COPY, 'copy', TOP_CUT, 'cut', TOP_AUX_CLICK, 'auxClick', TOP_DOUBLE_CLICK, 'doubleClick', TOP_DRAG_END, 'dragEnd', TOP_DRAG_START, 'dragStart', TOP_DROP, 'drop', TOP_FOCUS, 'focus', TOP_INPUT, 'input', TOP_INVALID, 'invalid', TOP_KEY_DOWN, 'keyDown', TOP_KEY_PRESS, 'keyPress', TOP_KEY_UP, 'keyUp', TOP_MOUSE_DOWN, 'mouseDown', TOP_MOUSE_UP, 'mouseUp', TOP_PASTE, 'paste', TOP_PAUSE, 'pause', TOP_PLAY, 'play', TOP_POINTER_CANCEL, 'pointerCancel', TOP_POINTER_DOWN, 'pointerDown', TOP_POINTER_UP, 'pointerUp', TOP_RATE_CHANGE, 'rateChange', TOP_RESET, 'reset', TOP_SEEKED, 'seeked', TOP_SUBMIT, 'submit', TOP_TOUCH_CANCEL, 'touchCancel', TOP_TOUCH_END, 'touchEnd', TOP_TOUCH_START, 'touchStart', TOP_VOLUME_CHANGE, 'volumeChange'];
	var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE]; // prettier-ignore

	var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, 'drag', TOP_DRAG_ENTER, 'dragEnter', TOP_DRAG_EXIT, 'dragExit', TOP_DRAG_LEAVE, 'dragLeave', TOP_DRAG_OVER, 'dragOver', TOP_MOUSE_MOVE, 'mouseMove', TOP_MOUSE_OUT, 'mouseOut', TOP_MOUSE_OVER, 'mouseOver', TOP_POINTER_MOVE, 'pointerMove', TOP_POINTER_OUT, 'pointerOut', TOP_POINTER_OVER, 'pointerOver', TOP_SCROLL, 'scroll', TOP_TOGGLE, 'toggle', TOP_TOUCH_MOVE, 'touchMove', TOP_WHEEL, 'wheel']; // prettier-ignore

	var continuousPairsForSimpleEventPlugin = [TOP_ABORT, 'abort', TOP_ANIMATION_END, 'animationEnd', TOP_ANIMATION_ITERATION, 'animationIteration', TOP_ANIMATION_START, 'animationStart', TOP_CAN_PLAY, 'canPlay', TOP_CAN_PLAY_THROUGH, 'canPlayThrough', TOP_DURATION_CHANGE, 'durationChange', TOP_EMPTIED, 'emptied', TOP_ENCRYPTED, 'encrypted', TOP_ENDED, 'ended', TOP_ERROR, 'error', TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', TOP_LOAD, 'load', TOP_LOADED_DATA, 'loadedData', TOP_LOADED_METADATA, 'loadedMetadata', TOP_LOAD_START, 'loadStart', TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', TOP_PLAYING, 'playing', TOP_PROGRESS, 'progress', TOP_SEEKING, 'seeking', TOP_STALLED, 'stalled', TOP_SUSPEND, 'suspend', TOP_TIME_UPDATE, 'timeUpdate', TOP_TRANSITION_END, 'transitionEnd', TOP_WAITING, 'waiting'];
	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: [TOP_ABORT],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = new Map([
	 *   [TOP_ABORT, { sameConfig }],
	 * ]);
	 */

	function processSimpleEventPluginPairsByPriority(eventTypes, priority) {
	  // As the event types are in pairs of two, we need to iterate
	  // through in twos. The events are in pairs of two to save code
	  // and improve init perf of processing this array, as it will
	  // result in far fewer object allocations and property accesses
	  // if we only use three arrays to process all the categories of
	  // instead of tuples.
	  for (var i = 0; i < eventTypes.length; i += 2) {
	    var topEvent = eventTypes[i];
	    var event = eventTypes[i + 1];
	    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	    var onEvent = 'on' + capitalizedEvent;
	    var config = {
	      phasedRegistrationNames: {
	        bubbled: onEvent,
	        captured: onEvent + 'Capture'
	      },
	      dependencies: [topEvent],
	      eventPriority: priority
	    };
	    eventPriorities.set(topEvent, priority);
	    topLevelEventsToDispatchConfig.set(topEvent, config);
	    simpleEventPluginEventTypes[event] = config;
	  }
	}

	function processTopEventPairsByPriority(eventTypes, priority) {
	  for (var i = 0; i < eventTypes.length; i++) {
	    eventPriorities.set(eventTypes[i], priority);
	  }
	} // SimpleEventPlugin


	processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
	processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
	processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent); // Not used by SimpleEventPlugin

	processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
	function getEventPriorityForPluginSystem(topLevelType) {
	  var priority = eventPriorities.get(topLevelType); // Default to a ContinuousEvent. Note: we might
	  // want to warn if we can't detect the priority
	  // for the event.

	  return priority === undefined ? ContinuousEvent : priority;
	}

	// Intentionally not named imports because Rollup would use dynamic dispatch for
	var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
	    runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

	var _enabled = true;
	function setEnabled(enabled) {
	  _enabled = !!enabled;
	}
	function isEnabled() {
	  return _enabled;
	}
	function trapBubbledEvent(topLevelType, element) {
	  trapEventForPluginEventSystem(element, topLevelType, false);
	}
	function trapCapturedEvent(topLevelType, element) {
	  trapEventForPluginEventSystem(element, topLevelType, true);
	}

	function trapEventForPluginEventSystem(container, topLevelType, capture) {
	  var listener;

	  switch (getEventPriorityForPluginSystem(topLevelType)) {
	    case DiscreteEvent:
	      listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
	      break;

	    case UserBlockingEvent:
	      listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
	      break;

	    case ContinuousEvent:
	    default:
	      listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
	      break;
	  }

	  var rawEventName = getRawEventName(topLevelType);

	  if (capture) {
	    addEventCaptureListener(container, rawEventName, listener);
	  } else {
	    addEventBubbleListener(container, rawEventName, listener);
	  }
	}

	function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
	  flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
	  discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
	}

	function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
	  runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
	}

	function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
	  if (!_enabled) {
	    return;
	  }

	  if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
	    // If we already have a queue of discrete events, and this is another discrete
	    // event, then we can't dispatch it regardless of its target, since they
	    // need to dispatch in order.
	    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
	    topLevelType, eventSystemFlags, container, nativeEvent);
	    return;
	  }

	  var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);

	  if (blockedOn === null) {
	    // We successfully dispatched this event.
	    clearIfContinuousEvent(topLevelType, nativeEvent);
	    return;
	  }

	  if (isReplayableDiscreteEvent(topLevelType)) {
	    // This this to be replayed later once the target is available.
	    queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
	    return;
	  }

	  if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
	    return;
	  } // We need to clear only if we didn't queue because
	  // queueing is accummulative.


	  clearIfContinuousEvent(topLevelType, nativeEvent); // This is not replayable so we'll invoke it but without a target,
	  // in case the event system needs to trace it.

	  {
	    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
	  }
	} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

	function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
	  // TODO: Warn if _enabled is false.
	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted === null) {
	      // This tree has been unmounted already. Dispatch without a target.
	      targetInst = null;
	    } else {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // Queue the event to be replayed later. Abort dispatching since we
	          // don't want this event dispatched twice through the event system.
	          // TODO: If this is the first discrete event in the queue. Schedule an increased
	          // priority for this boundary.
	          return instance;
	        } // This shouldn't happen, something went wrong but to avoid blocking
	        // the whole system, dispatch the event without a target.
	        // TODO: Warn.


	        targetInst = null;
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (root.hydrate) {
	          // If this happens during a replay something went wrong and it might block
	          // the whole system.
	          return getContainerFromFiber(nearestMounted);
	        }

	        targetInst = null;
	      } else if (nearestMounted !== targetInst) {
	        // If we get an event (ex: img onload) before committing that
	        // component's mount, ignore it for now (that is, treat it as if it was an
	        // event on a non-React tree). We might also consider queueing events and
	        // dispatching them after the mount.
	        targetInst = null;
	      }
	    }
	  }

	  {
	    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
	  } // We're not blocked on anything.


	  return null;
	}

	// List derived from Gecko source code:
	// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
	var shorthandToLonghand = {
	  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
	  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
	  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
	  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
	  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
	  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
	  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
	  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
	  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
	  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
	  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
	  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
	  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
	  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
	  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
	  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
	  columns: ['columnCount', 'columnWidth'],
	  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
	  flexFlow: ['flexDirection', 'flexWrap'],
	  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
	  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
	  gap: ['columnGap', 'rowGap'],
	  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
	  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
	  gridColumnGap: ['columnGap'],
	  gridGap: ['columnGap', 'rowGap'],
	  gridRow: ['gridRowEnd', 'gridRowStart'],
	  gridRowGap: ['rowGap'],
	  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
	  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
	  marker: ['markerEnd', 'markerMid', 'markerStart'],
	  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
	  maskPosition: ['maskPositionX', 'maskPositionY'],
	  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
	  overflow: ['overflowX', 'overflowY'],
	  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
	  placeContent: ['alignContent', 'justifyContent'],
	  placeItems: ['alignItems', 'justifyItems'],
	  placeSelf: ['alignSelf', 'justifySelf'],
	  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
	  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
	  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
	  wordWrap: ['overflowWrap']
	};

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridArea: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */

	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */


	var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.

	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */

	function dangerousStyleValue(name, value, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';

	  if (isEmpty) {
	    return '';
	  }

	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  return ('' + value).trim();
	}

	var uppercasePattern = /([A-Z])/g;
	var msPattern = /^ms-/;
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 */

	function hyphenateStyleName(name) {
	  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
	}

	var warnValidStyle = function () {};

	{
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	  var msPattern$1 = /^-ms-/;
	  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	  var warnedForInfinityValue = false;

	  var camelize = function (string) {
	    return string.replace(hyphenPattern, function (_, character) {
	      return character.toUpperCase();
	    });
	  };

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
	    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	    // is converted to lowercase `ms`.
	    camelize(name.replace(msPattern$1, 'ms-')));
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;

	    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
	  };

	  var warnStyleValueIsNaN = function (name, value) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;

	    error('`NaN` is an invalid value for the `%s` css style property.', name);
	  };

	  var warnStyleValueIsInfinity = function (name, value) {
	    if (warnedForInfinityValue) {
	      return;
	    }

	    warnedForInfinityValue = true;

	    error('`Infinity` is an invalid value for the `%s` css style property.', name);
	  };

	  warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }

	    if (typeof value === 'number') {
	      if (isNaN(value)) {
	        warnStyleValueIsNaN(name, value);
	      } else if (!isFinite(value)) {
	        warnStyleValueIsInfinity(name, value);
	      }
	    }
	  };
	}

	var warnValidStyle$1 = warnValidStyle;

	/**
	 * Operations for dealing with CSS properties.
	 */

	/**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */

	function createDangerousStringForStyles(styles) {
	  {
	    var serialized = '';
	    var delimiter = '';

	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }

	      var styleValue = styles[styleName];

	      if (styleValue != null) {
	        var isCustomProperty = styleName.indexOf('--') === 0;
	        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
	        delimiter = ';';
	      }
	    }

	    return serialized || null;
	  }
	}
	/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */

	function setValueForStyles(node, styles) {
	  var style = node.style;

	  for (var styleName in styles) {
	    if (!styles.hasOwnProperty(styleName)) {
	      continue;
	    }

	    var isCustomProperty = styleName.indexOf('--') === 0;

	    {
	      if (!isCustomProperty) {
	        warnValidStyle$1(styleName, styles[styleName]);
	      }
	    }

	    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

	    if (styleName === 'float') {
	      styleName = 'cssFloat';
	    }

	    if (isCustomProperty) {
	      style.setProperty(styleName, styleValue);
	    } else {
	      style[styleName] = styleValue;
	    }
	  }
	}

	function isValueEmpty(value) {
	  return value == null || typeof value === 'boolean' || value === '';
	}
	/**
	 * Given {color: 'red', overflow: 'hidden'} returns {
	 *   color: 'color',
	 *   overflowX: 'overflow',
	 *   overflowY: 'overflow',
	 * }. This can be read as "the overflowY property was set by the overflow
	 * shorthand". That is, the values are the property that each was derived from.
	 */


	function expandShorthandMap(styles) {
	  var expanded = {};

	  for (var key in styles) {
	    var longhands = shorthandToLonghand[key] || [key];

	    for (var i = 0; i < longhands.length; i++) {
	      expanded[longhands[i]] = key;
	    }
	  }

	  return expanded;
	}
	/**
	 * When mixing shorthand and longhand property names, we warn during updates if
	 * we expect an incorrect result to occur. In particular, we warn for:
	 *
	 * Updating a shorthand property (longhand gets overwritten):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
	 *   becomes .style.font = 'baz'
	 * Removing a shorthand property (longhand gets lost too):
	 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
	 *   becomes .style.font = ''
	 * Removing a longhand property (should revert to shorthand; doesn't):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
	 *   becomes .style.fontVariant = ''
	 */


	function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
	  {

	    if (!nextStyles) {
	      return;
	    }

	    var expandedUpdates = expandShorthandMap(styleUpdates);
	    var expandedStyles = expandShorthandMap(nextStyles);
	    var warnedAbout = {};

	    for (var key in expandedUpdates) {
	      var originalKey = expandedUpdates[key];
	      var correctOriginalKey = expandedStyles[key];

	      if (correctOriginalKey && originalKey !== correctOriginalKey) {
	        var warningKey = originalKey + ',' + correctOriginalKey;

	        if (warnedAbout[warningKey]) {
	          continue;
	        }

	        warnedAbout[warningKey] = true;

	        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
	      }
	    }
	  }
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

	};

	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);

	var HTML = '__html';
	var ReactDebugCurrentFrame$3 = null;

	{
	  ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
	}

	function assertValidProps(tag, props) {
	  if (!props) {
	    return;
	  } // Note the use of `==` which checks for null or undefined.


	  if (voidElementTags[tag]) {
	    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
	      {
	        throw Error( tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
	      }
	    }
	  }

	  if (props.dangerouslySetInnerHTML != null) {
	    if (!(props.children == null)) {
	      {
	        throw Error( "Can only set one of `children` or `props.dangerouslySetInnerHTML`." );
	      }
	    }

	    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
	      {
	        throw Error( "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information." );
	      }
	    }
	  }

	  {
	    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
	      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
	    }
	  }

	  if (!(props.style == null || typeof props.style === 'object')) {
	    {
	      throw Error( "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
	    }
	  }
	}

	function isCustomComponent(tagName, props) {
	  if (tagName.indexOf('-') === -1) {
	    return typeof props.is === 'string';
	  }

	  switch (tagName) {
	    // These are reserved SVG and MathML elements.
	    // We don't mind this whitelist too much because we expect it to never grow.
	    // The alternative is to track the namespace in a few places which is convoluted.
	    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	    case 'annotation-xml':
	    case 'color-profile':
	    case 'font-face':
	    case 'font-face-src':
	    case 'font-face-uri':
	    case 'font-face-format':
	    case 'font-face-name':
	    case 'missing-glyph':
	      return false;

	    default:
	      return true;
	  }
	}

	// When adding attributes to the HTML or SVG whitelist, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames = {
	  // HTML
	  accept: 'accept',
	  acceptcharset: 'acceptCharset',
	  'accept-charset': 'acceptCharset',
	  accesskey: 'accessKey',
	  action: 'action',
	  allowfullscreen: 'allowFullScreen',
	  alt: 'alt',
	  as: 'as',
	  async: 'async',
	  autocapitalize: 'autoCapitalize',
	  autocomplete: 'autoComplete',
	  autocorrect: 'autoCorrect',
	  autofocus: 'autoFocus',
	  autoplay: 'autoPlay',
	  autosave: 'autoSave',
	  capture: 'capture',
	  cellpadding: 'cellPadding',
	  cellspacing: 'cellSpacing',
	  challenge: 'challenge',
	  charset: 'charSet',
	  checked: 'checked',
	  children: 'children',
	  cite: 'cite',
	  class: 'className',
	  classid: 'classID',
	  classname: 'className',
	  cols: 'cols',
	  colspan: 'colSpan',
	  content: 'content',
	  contenteditable: 'contentEditable',
	  contextmenu: 'contextMenu',
	  controls: 'controls',
	  controlslist: 'controlsList',
	  coords: 'coords',
	  crossorigin: 'crossOrigin',
	  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
	  data: 'data',
	  datetime: 'dateTime',
	  default: 'default',
	  defaultchecked: 'defaultChecked',
	  defaultvalue: 'defaultValue',
	  defer: 'defer',
	  dir: 'dir',
	  disabled: 'disabled',
	  disablepictureinpicture: 'disablePictureInPicture',
	  download: 'download',
	  draggable: 'draggable',
	  enctype: 'encType',
	  for: 'htmlFor',
	  form: 'form',
	  formmethod: 'formMethod',
	  formaction: 'formAction',
	  formenctype: 'formEncType',
	  formnovalidate: 'formNoValidate',
	  formtarget: 'formTarget',
	  frameborder: 'frameBorder',
	  headers: 'headers',
	  height: 'height',
	  hidden: 'hidden',
	  high: 'high',
	  href: 'href',
	  hreflang: 'hrefLang',
	  htmlfor: 'htmlFor',
	  httpequiv: 'httpEquiv',
	  'http-equiv': 'httpEquiv',
	  icon: 'icon',
	  id: 'id',
	  innerhtml: 'innerHTML',
	  inputmode: 'inputMode',
	  integrity: 'integrity',
	  is: 'is',
	  itemid: 'itemID',
	  itemprop: 'itemProp',
	  itemref: 'itemRef',
	  itemscope: 'itemScope',
	  itemtype: 'itemType',
	  keyparams: 'keyParams',
	  keytype: 'keyType',
	  kind: 'kind',
	  label: 'label',
	  lang: 'lang',
	  list: 'list',
	  loop: 'loop',
	  low: 'low',
	  manifest: 'manifest',
	  marginwidth: 'marginWidth',
	  marginheight: 'marginHeight',
	  max: 'max',
	  maxlength: 'maxLength',
	  media: 'media',
	  mediagroup: 'mediaGroup',
	  method: 'method',
	  min: 'min',
	  minlength: 'minLength',
	  multiple: 'multiple',
	  muted: 'muted',
	  name: 'name',
	  nomodule: 'noModule',
	  nonce: 'nonce',
	  novalidate: 'noValidate',
	  open: 'open',
	  optimum: 'optimum',
	  pattern: 'pattern',
	  placeholder: 'placeholder',
	  playsinline: 'playsInline',
	  poster: 'poster',
	  preload: 'preload',
	  profile: 'profile',
	  radiogroup: 'radioGroup',
	  readonly: 'readOnly',
	  referrerpolicy: 'referrerPolicy',
	  rel: 'rel',
	  required: 'required',
	  reversed: 'reversed',
	  role: 'role',
	  rows: 'rows',
	  rowspan: 'rowSpan',
	  sandbox: 'sandbox',
	  scope: 'scope',
	  scoped: 'scoped',
	  scrolling: 'scrolling',
	  seamless: 'seamless',
	  selected: 'selected',
	  shape: 'shape',
	  size: 'size',
	  sizes: 'sizes',
	  span: 'span',
	  spellcheck: 'spellCheck',
	  src: 'src',
	  srcdoc: 'srcDoc',
	  srclang: 'srcLang',
	  srcset: 'srcSet',
	  start: 'start',
	  step: 'step',
	  style: 'style',
	  summary: 'summary',
	  tabindex: 'tabIndex',
	  target: 'target',
	  title: 'title',
	  type: 'type',
	  usemap: 'useMap',
	  value: 'value',
	  width: 'width',
	  wmode: 'wmode',
	  wrap: 'wrap',
	  // SVG
	  about: 'about',
	  accentheight: 'accentHeight',
	  'accent-height': 'accentHeight',
	  accumulate: 'accumulate',
	  additive: 'additive',
	  alignmentbaseline: 'alignmentBaseline',
	  'alignment-baseline': 'alignmentBaseline',
	  allowreorder: 'allowReorder',
	  alphabetic: 'alphabetic',
	  amplitude: 'amplitude',
	  arabicform: 'arabicForm',
	  'arabic-form': 'arabicForm',
	  ascent: 'ascent',
	  attributename: 'attributeName',
	  attributetype: 'attributeType',
	  autoreverse: 'autoReverse',
	  azimuth: 'azimuth',
	  basefrequency: 'baseFrequency',
	  baselineshift: 'baselineShift',
	  'baseline-shift': 'baselineShift',
	  baseprofile: 'baseProfile',
	  bbox: 'bbox',
	  begin: 'begin',
	  bias: 'bias',
	  by: 'by',
	  calcmode: 'calcMode',
	  capheight: 'capHeight',
	  'cap-height': 'capHeight',
	  clip: 'clip',
	  clippath: 'clipPath',
	  'clip-path': 'clipPath',
	  clippathunits: 'clipPathUnits',
	  cliprule: 'clipRule',
	  'clip-rule': 'clipRule',
	  color: 'color',
	  colorinterpolation: 'colorInterpolation',
	  'color-interpolation': 'colorInterpolation',
	  colorinterpolationfilters: 'colorInterpolationFilters',
	  'color-interpolation-filters': 'colorInterpolationFilters',
	  colorprofile: 'colorProfile',
	  'color-profile': 'colorProfile',
	  colorrendering: 'colorRendering',
	  'color-rendering': 'colorRendering',
	  contentscripttype: 'contentScriptType',
	  contentstyletype: 'contentStyleType',
	  cursor: 'cursor',
	  cx: 'cx',
	  cy: 'cy',
	  d: 'd',
	  datatype: 'datatype',
	  decelerate: 'decelerate',
	  descent: 'descent',
	  diffuseconstant: 'diffuseConstant',
	  direction: 'direction',
	  display: 'display',
	  divisor: 'divisor',
	  dominantbaseline: 'dominantBaseline',
	  'dominant-baseline': 'dominantBaseline',
	  dur: 'dur',
	  dx: 'dx',
	  dy: 'dy',
	  edgemode: 'edgeMode',
	  elevation: 'elevation',
	  enablebackground: 'enableBackground',
	  'enable-background': 'enableBackground',
	  end: 'end',
	  exponent: 'exponent',
	  externalresourcesrequired: 'externalResourcesRequired',
	  fill: 'fill',
	  fillopacity: 'fillOpacity',
	  'fill-opacity': 'fillOpacity',
	  fillrule: 'fillRule',
	  'fill-rule': 'fillRule',
	  filter: 'filter',
	  filterres: 'filterRes',
	  filterunits: 'filterUnits',
	  floodopacity: 'floodOpacity',
	  'flood-opacity': 'floodOpacity',
	  floodcolor: 'floodColor',
	  'flood-color': 'floodColor',
	  focusable: 'focusable',
	  fontfamily: 'fontFamily',
	  'font-family': 'fontFamily',
	  fontsize: 'fontSize',
	  'font-size': 'fontSize',
	  fontsizeadjust: 'fontSizeAdjust',
	  'font-size-adjust': 'fontSizeAdjust',
	  fontstretch: 'fontStretch',
	  'font-stretch': 'fontStretch',
	  fontstyle: 'fontStyle',
	  'font-style': 'fontStyle',
	  fontvariant: 'fontVariant',
	  'font-variant': 'fontVariant',
	  fontweight: 'fontWeight',
	  'font-weight': 'fontWeight',
	  format: 'format',
	  from: 'from',
	  fx: 'fx',
	  fy: 'fy',
	  g1: 'g1',
	  g2: 'g2',
	  glyphname: 'glyphName',
	  'glyph-name': 'glyphName',
	  glyphorientationhorizontal: 'glyphOrientationHorizontal',
	  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	  glyphorientationvertical: 'glyphOrientationVertical',
	  'glyph-orientation-vertical': 'glyphOrientationVertical',
	  glyphref: 'glyphRef',
	  gradienttransform: 'gradientTransform',
	  gradientunits: 'gradientUnits',
	  hanging: 'hanging',
	  horizadvx: 'horizAdvX',
	  'horiz-adv-x': 'horizAdvX',
	  horizoriginx: 'horizOriginX',
	  'horiz-origin-x': 'horizOriginX',
	  ideographic: 'ideographic',
	  imagerendering: 'imageRendering',
	  'image-rendering': 'imageRendering',
	  in2: 'in2',
	  in: 'in',
	  inlist: 'inlist',
	  intercept: 'intercept',
	  k1: 'k1',
	  k2: 'k2',
	  k3: 'k3',
	  k4: 'k4',
	  k: 'k',
	  kernelmatrix: 'kernelMatrix',
	  kernelunitlength: 'kernelUnitLength',
	  kerning: 'kerning',
	  keypoints: 'keyPoints',
	  keysplines: 'keySplines',
	  keytimes: 'keyTimes',
	  lengthadjust: 'lengthAdjust',
	  letterspacing: 'letterSpacing',
	  'letter-spacing': 'letterSpacing',
	  lightingcolor: 'lightingColor',
	  'lighting-color': 'lightingColor',
	  limitingconeangle: 'limitingConeAngle',
	  local: 'local',
	  markerend: 'markerEnd',
	  'marker-end': 'markerEnd',
	  markerheight: 'markerHeight',
	  markermid: 'markerMid',
	  'marker-mid': 'markerMid',
	  markerstart: 'markerStart',
	  'marker-start': 'markerStart',
	  markerunits: 'markerUnits',
	  markerwidth: 'markerWidth',
	  mask: 'mask',
	  maskcontentunits: 'maskContentUnits',
	  maskunits: 'maskUnits',
	  mathematical: 'mathematical',
	  mode: 'mode',
	  numoctaves: 'numOctaves',
	  offset: 'offset',
	  opacity: 'opacity',
	  operator: 'operator',
	  order: 'order',
	  orient: 'orient',
	  orientation: 'orientation',
	  origin: 'origin',
	  overflow: 'overflow',
	  overlineposition: 'overlinePosition',
	  'overline-position': 'overlinePosition',
	  overlinethickness: 'overlineThickness',
	  'overline-thickness': 'overlineThickness',
	  paintorder: 'paintOrder',
	  'paint-order': 'paintOrder',
	  panose1: 'panose1',
	  'panose-1': 'panose1',
	  pathlength: 'pathLength',
	  patterncontentunits: 'patternContentUnits',
	  patterntransform: 'patternTransform',
	  patternunits: 'patternUnits',
	  pointerevents: 'pointerEvents',
	  'pointer-events': 'pointerEvents',
	  points: 'points',
	  pointsatx: 'pointsAtX',
	  pointsaty: 'pointsAtY',
	  pointsatz: 'pointsAtZ',
	  prefix: 'prefix',
	  preservealpha: 'preserveAlpha',
	  preserveaspectratio: 'preserveAspectRatio',
	  primitiveunits: 'primitiveUnits',
	  property: 'property',
	  r: 'r',
	  radius: 'radius',
	  refx: 'refX',
	  refy: 'refY',
	  renderingintent: 'renderingIntent',
	  'rendering-intent': 'renderingIntent',
	  repeatcount: 'repeatCount',
	  repeatdur: 'repeatDur',
	  requiredextensions: 'requiredExtensions',
	  requiredfeatures: 'requiredFeatures',
	  resource: 'resource',
	  restart: 'restart',
	  result: 'result',
	  results: 'results',
	  rotate: 'rotate',
	  rx: 'rx',
	  ry: 'ry',
	  scale: 'scale',
	  security: 'security',
	  seed: 'seed',
	  shaperendering: 'shapeRendering',
	  'shape-rendering': 'shapeRendering',
	  slope: 'slope',
	  spacing: 'spacing',
	  specularconstant: 'specularConstant',
	  specularexponent: 'specularExponent',
	  speed: 'speed',
	  spreadmethod: 'spreadMethod',
	  startoffset: 'startOffset',
	  stddeviation: 'stdDeviation',
	  stemh: 'stemh',
	  stemv: 'stemv',
	  stitchtiles: 'stitchTiles',
	  stopcolor: 'stopColor',
	  'stop-color': 'stopColor',
	  stopopacity: 'stopOpacity',
	  'stop-opacity': 'stopOpacity',
	  strikethroughposition: 'strikethroughPosition',
	  'strikethrough-position': 'strikethroughPosition',
	  strikethroughthickness: 'strikethroughThickness',
	  'strikethrough-thickness': 'strikethroughThickness',
	  string: 'string',
	  stroke: 'stroke',
	  strokedasharray: 'strokeDasharray',
	  'stroke-dasharray': 'strokeDasharray',
	  strokedashoffset: 'strokeDashoffset',
	  'stroke-dashoffset': 'strokeDashoffset',
	  strokelinecap: 'strokeLinecap',
	  'stroke-linecap': 'strokeLinecap',
	  strokelinejoin: 'strokeLinejoin',
	  'stroke-linejoin': 'strokeLinejoin',
	  strokemiterlimit: 'strokeMiterlimit',
	  'stroke-miterlimit': 'strokeMiterlimit',
	  strokewidth: 'strokeWidth',
	  'stroke-width': 'strokeWidth',
	  strokeopacity: 'strokeOpacity',
	  'stroke-opacity': 'strokeOpacity',
	  suppresscontenteditablewarning: 'suppressContentEditableWarning',
	  suppresshydrationwarning: 'suppressHydrationWarning',
	  surfacescale: 'surfaceScale',
	  systemlanguage: 'systemLanguage',
	  tablevalues: 'tableValues',
	  targetx: 'targetX',
	  targety: 'targetY',
	  textanchor: 'textAnchor',
	  'text-anchor': 'textAnchor',
	  textdecoration: 'textDecoration',
	  'text-decoration': 'textDecoration',
	  textlength: 'textLength',
	  textrendering: 'textRendering',
	  'text-rendering': 'textRendering',
	  to: 'to',
	  transform: 'transform',
	  typeof: 'typeof',
	  u1: 'u1',
	  u2: 'u2',
	  underlineposition: 'underlinePosition',
	  'underline-position': 'underlinePosition',
	  underlinethickness: 'underlineThickness',
	  'underline-thickness': 'underlineThickness',
	  unicode: 'unicode',
	  unicodebidi: 'unicodeBidi',
	  'unicode-bidi': 'unicodeBidi',
	  unicoderange: 'unicodeRange',
	  'unicode-range': 'unicodeRange',
	  unitsperem: 'unitsPerEm',
	  'units-per-em': 'unitsPerEm',
	  unselectable: 'unselectable',
	  valphabetic: 'vAlphabetic',
	  'v-alphabetic': 'vAlphabetic',
	  values: 'values',
	  vectoreffect: 'vectorEffect',
	  'vector-effect': 'vectorEffect',
	  version: 'version',
	  vertadvy: 'vertAdvY',
	  'vert-adv-y': 'vertAdvY',
	  vertoriginx: 'vertOriginX',
	  'vert-origin-x': 'vertOriginX',
	  vertoriginy: 'vertOriginY',
	  'vert-origin-y': 'vertOriginY',
	  vhanging: 'vHanging',
	  'v-hanging': 'vHanging',
	  videographic: 'vIdeographic',
	  'v-ideographic': 'vIdeographic',
	  viewbox: 'viewBox',
	  viewtarget: 'viewTarget',
	  visibility: 'visibility',
	  vmathematical: 'vMathematical',
	  'v-mathematical': 'vMathematical',
	  vocab: 'vocab',
	  widths: 'widths',
	  wordspacing: 'wordSpacing',
	  'word-spacing': 'wordSpacing',
	  writingmode: 'writingMode',
	  'writing-mode': 'writingMode',
	  x1: 'x1',
	  x2: 'x2',
	  x: 'x',
	  xchannelselector: 'xChannelSelector',
	  xheight: 'xHeight',
	  'x-height': 'xHeight',
	  xlinkactuate: 'xlinkActuate',
	  'xlink:actuate': 'xlinkActuate',
	  xlinkarcrole: 'xlinkArcrole',
	  'xlink:arcrole': 'xlinkArcrole',
	  xlinkhref: 'xlinkHref',
	  'xlink:href': 'xlinkHref',
	  xlinkrole: 'xlinkRole',
	  'xlink:role': 'xlinkRole',
	  xlinkshow: 'xlinkShow',
	  'xlink:show': 'xlinkShow',
	  xlinktitle: 'xlinkTitle',
	  'xlink:title': 'xlinkTitle',
	  xlinktype: 'xlinkType',
	  'xlink:type': 'xlinkType',
	  xmlbase: 'xmlBase',
	  'xml:base': 'xmlBase',
	  xmllang: 'xmlLang',
	  'xml:lang': 'xmlLang',
	  xmlns: 'xmlns',
	  'xml:space': 'xmlSpace',
	  xmlnsxlink: 'xmlnsXlink',
	  'xmlns:xlink': 'xmlnsXlink',
	  xmlspace: 'xmlSpace',
	  y1: 'y1',
	  y2: 'y2',
	  y: 'y',
	  ychannelselector: 'yChannelSelector',
	  z: 'z',
	  zoomandpan: 'zoomAndPan'
	};

	var ariaProperties = {
	  'aria-current': 0,
	  // state
	  'aria-details': 0,
	  'aria-disabled': 0,
	  // state
	  'aria-hidden': 0,
	  // state
	  'aria-invalid': 0,
	  // state
	  'aria-keyshortcuts': 0,
	  'aria-label': 0,
	  'aria-roledescription': 0,
	  // Widget Attributes
	  'aria-autocomplete': 0,
	  'aria-checked': 0,
	  'aria-expanded': 0,
	  'aria-haspopup': 0,
	  'aria-level': 0,
	  'aria-modal': 0,
	  'aria-multiline': 0,
	  'aria-multiselectable': 0,
	  'aria-orientation': 0,
	  'aria-placeholder': 0,
	  'aria-pressed': 0,
	  'aria-readonly': 0,
	  'aria-required': 0,
	  'aria-selected': 0,
	  'aria-sort': 0,
	  'aria-valuemax': 0,
	  'aria-valuemin': 0,
	  'aria-valuenow': 0,
	  'aria-valuetext': 0,
	  // Live Region Attributes
	  'aria-atomic': 0,
	  'aria-busy': 0,
	  'aria-live': 0,
	  'aria-relevant': 0,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': 0,
	  'aria-grabbed': 0,
	  // Relationship Attributes
	  'aria-activedescendant': 0,
	  'aria-colcount': 0,
	  'aria-colindex': 0,
	  'aria-colspan': 0,
	  'aria-controls': 0,
	  'aria-describedby': 0,
	  'aria-errormessage': 0,
	  'aria-flowto': 0,
	  'aria-labelledby': 0,
	  'aria-owns': 0,
	  'aria-posinset': 0,
	  'aria-rowcount': 0,
	  'aria-rowindex': 0,
	  'aria-rowspan': 0,
	  'aria-setsize': 0
	};

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

	function validateProperty(tagName, name) {
	  {
	    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
	      return true;
	    }

	    if (rARIACamel.test(name)) {
	      var ariaName = 'aria-' + name.slice(4).toLowerCase();
	      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (correctName == null) {
	        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

	        warnedProperties[name] = true;
	        return true;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== correctName) {
	        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }

	    if (rARIA.test(name)) {
	      var lowerCasedName = name.toLowerCase();
	      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (standardName == null) {
	        warnedProperties[name] = true;
	        return false;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== standardName) {
	        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(type, props) {
	  {
	    var invalidProps = [];

	    for (var key in props) {
	      var isValid = validateProperty(type, key);

	      if (!isValid) {
	        invalidProps.push(key);
	      }
	    }

	    var unknownPropString = invalidProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (invalidProps.length === 1) {
	      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	    } else if (invalidProps.length > 1) {
	      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
	    }
	  }
	}

	function validateProperties(type, props) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnInvalidARIAProps(type, props);
	}

	var didWarnValueNull = false;
	function validateProperties$1(type, props) {
	  {
	    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
	      return;
	    }

	    if (props != null && props.value === null && !didWarnValueNull) {
	      didWarnValueNull = true;

	      if (type === 'select' && props.multiple) {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
	      } else {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
	      }
	    }
	  }
	}

	var validateProperty$1 = function () {};

	{
	  var warnedProperties$1 = {};
	  var _hasOwnProperty = Object.prototype.hasOwnProperty;
	  var EVENT_NAME_REGEX = /^on./;
	  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
	  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
	    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
	      return true;
	    }

	    var lowerCasedName = name.toLowerCase();

	    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
	      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

	      warnedProperties$1[name] = true;
	      return true;
	    } // We can't rely on the event system being injected on the server.


	    if (canUseEventSystem) {
	      if (registrationNameModules.hasOwnProperty(name)) {
	        return true;
	      }

	      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

	      if (registrationName != null) {
	        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

	        warnedProperties$1[name] = true;
	        return true;
	      }

	      if (EVENT_NAME_REGEX.test(name)) {
	        error('Unknown event handler property `%s`. It will be ignored.', name);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (EVENT_NAME_REGEX.test(name)) {
	      // If no event plugins have been injected, we are in a server environment.
	      // So we can't tell if the event name is correct for sure, but we can filter
	      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
	      if (INVALID_EVENT_NAME_REGEX.test(name)) {
	        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Let the ARIA attribute hook validate ARIA attributes


	    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
	      return true;
	    }

	    if (lowerCasedName === 'innerhtml') {
	      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'aria') {
	      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
	      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    var propertyInfo = getPropertyInfo(name);
	    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

	    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      var standardName = possibleStandardNames[lowerCasedName];

	      if (standardName !== name) {
	        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (!isReserved && name !== lowerCasedName) {
	      // Unknown attributes should have lowercase casing since that's how they
	      // will be cased anyway with server rendering.
	      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      if (value) {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
	      } else {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Now that we've validated casing, do not validate
	    // data types for reserved props


	    if (isReserved) {
	      return true;
	    } // Warn when a known attribute is a bad type


	    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      warnedProperties$1[name] = true;
	      return false;
	    } // Warn when passing the strings 'false' or 'true' into a boolean prop


	    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
	      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    return true;
	  };
	}

	var warnUnknownProperties = function (type, props, canUseEventSystem) {
	  {
	    var unknownProps = [];

	    for (var key in props) {
	      var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

	      if (!isValid) {
	        unknownProps.push(key);
	      }
	    }

	    var unknownPropString = unknownProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (unknownProps.length === 1) {
	      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	    } else if (unknownProps.length > 1) {
	      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
	    }
	  }
	};

	function validateProperties$2(type, props, canUseEventSystem) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnUnknownProperties(type, props, canUseEventSystem);
	}

	var didWarnInvalidHydration = false;
	var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
	var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
	var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
	var AUTOFOCUS = 'autoFocus';
	var CHILDREN = 'children';
	var STYLE = 'style';
	var HTML$1 = '__html';
	var HTML_NAMESPACE$1 = Namespaces.html;
	var warnedUnknownTags;
	var suppressHydrationWarning;
	var validatePropertiesInDevelopment;
	var warnForTextDifference;
	var warnForPropDifference;
	var warnForExtraAttributes;
	var warnForInvalidEventListener;
	var canDiffStyleForHydrationWarning;
	var normalizeMarkupForTextOrAttribute;
	var normalizeHTML;

	{
	  warnedUnknownTags = {
	    // Chrome is the only major browser not shipping <time>. But as of July
	    // 2017 it intends to ship it due to widespread usage. We intentionally
	    // *don't* warn for <time> even if it's unrecognized by Chrome because
	    // it soon will be, and many apps have been using it anyway.
	    time: true,
	    // There are working polyfills for <dialog>. Let people use it.
	    dialog: true,
	    // Electron ships a custom <webview> tag to display external web content in
	    // an isolated frame and process.
	    // This tag is not present in non Electron environments such as JSDom which
	    // is often used for testing purposes.
	    // @see https://electronjs.org/docs/api/webview-tag
	    webview: true
	  };

	  validatePropertiesInDevelopment = function (type, props) {
	    validateProperties(type, props);
	    validateProperties$1(type, props);
	    validateProperties$2(type, props,
	    /* canUseEventSystem */
	    true);
	  }; // IE 11 parses & normalizes the style attribute as opposed to other
	  // browsers. It adds spaces and sorts the properties in some
	  // non-alphabetical order. Handling that would require sorting CSS
	  // properties in the client & server versions or applying
	  // `expectedStyle` to a temporary DOM node to read its `style` attribute
	  // normalized. Since it only affects IE, we're skipping style warnings
	  // in that browser completely in favor of doing all that work.
	  // See https://github.com/facebook/react/issues/11807


	  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
	  // It also can turn \u0000 into \uFFFD inside attributes.
	  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	  // If we have a mismatch, it might be caused by that.
	  // We will still patch up in this case but not fire the warning.

	  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
	  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

	  normalizeMarkupForTextOrAttribute = function (markup) {
	    var markupString = typeof markup === 'string' ? markup : '' + markup;
	    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
	  };

	  warnForTextDifference = function (serverText, clientText) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
	    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

	    if (normalizedServerText === normalizedClientText) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
	  };

	  warnForPropDifference = function (propName, serverValue, clientValue) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
	    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

	    if (normalizedServerValue === normalizedClientValue) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
	  };

	  warnForExtraAttributes = function (attributeNames) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    var names = [];
	    attributeNames.forEach(function (name) {
	      names.push(name);
	    });

	    error('Extra attributes from the server: %s', names);
	  };

	  warnForInvalidEventListener = function (registrationName, listener) {
	    if (listener === false) {
	      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
	    } else {
	      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
	    }
	  }; // Parse the HTML and read it back to normalize the HTML string so that it
	  // can be used for comparison.


	  normalizeHTML = function (parent, html) {
	    // We could have created a separate document here to avoid
	    // re-initializing custom elements if they exist. But this breaks
	    // how <noscript> is being handled. So we use the same document.
	    // See the discussion in https://github.com/facebook/react/pull/11157.
	    var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
	    testElement.innerHTML = html;
	    return testElement.innerHTML;
	  };
	}

	function ensureListeningTo(rootContainerElement, registrationName) {
	  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
	  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
	  legacyListenToEvent(registrationName, doc);
	}

	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
	}

	function noop() {}

	function trapClickOnNonInteractiveElement(node) {
	  // Mobile Safari does not fire properly bubble click events on
	  // non-interactive elements, which means delegated click listeners do not
	  // fire. The workaround for this bug involves attaching an empty click
	  // listener on the target node.
	  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	  // Just set it using the onclick property so that we don't have to manage any
	  // bookkeeping for it. Not sure if we need to clear it when the listener is
	  // removed.
	  // TODO: Only do this for the relevant Safaris maybe?
	  node.onclick = noop;
	}

	function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
	  for (var propKey in nextProps) {
	    if (!nextProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = nextProps[propKey];

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


	      setValueForStyles(domElement, nextProp);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        setInnerHTML(domElement, nextHtml);
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string') {
	        // Avoid setting initial textContent when the text is empty. In IE11 setting
	        // textContent on a <textarea> will cause the placeholder to not
	        // show within the <textarea> until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

	        if (canSetTextContent) {
	          setTextContent(domElement, nextProp);
	        }
	      } else if (typeof nextProp === 'number') {
	        setTextContent(domElement, '' + nextProp);
	      }
	    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if (nextProp != null) {
	      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
	    }
	  }
	}

	function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
	  // TODO: Handle wasCustomComponentTag
	  for (var i = 0; i < updatePayload.length; i += 2) {
	    var propKey = updatePayload[i];
	    var propValue = updatePayload[i + 1];

	    if (propKey === STYLE) {
	      setValueForStyles(domElement, propValue);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      setInnerHTML(domElement, propValue);
	    } else if (propKey === CHILDREN) {
	      setTextContent(domElement, propValue);
	    } else {
	      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
	    }
	  }
	}

	function createElement(type, props, rootContainerElement, parentNamespace) {
	  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
	  // tags get no namespace.

	  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
	  var domElement;
	  var namespaceURI = parentNamespace;

	  if (namespaceURI === HTML_NAMESPACE$1) {
	    namespaceURI = getIntrinsicNamespace(type);
	  }

	  if (namespaceURI === HTML_NAMESPACE$1) {
	    {
	      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
	      // allow <SVG> or <mATH>.

	      if (!isCustomComponentTag && type !== type.toLowerCase()) {
	        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
	      }
	    }

	    if (type === 'script') {
	      // Create the script via .innerHTML so its "parser-inserted" flag is
	      // set to true and it does not execute
	      var div = ownerDocument.createElement('div');

	      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
	      // This is guaranteed to yield a script element.

	      var firstChild = div.firstChild;
	      domElement = div.removeChild(firstChild);
	    } else if (typeof props.is === 'string') {
	      // $FlowIssue `createElement` should be updated for Web Components
	      domElement = ownerDocument.createElement(type, {
	        is: props.is
	      });
	    } else {
	      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	      // See discussion in https://github.com/facebook/react/pull/6896
	      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
	      // attributes on `select`s needs to be added before `option`s are inserted.
	      // This prevents:
	      // - a bug where the `select` does not scroll to the correct option because singular
	      //  `select` elements automatically pick the first item #13222
	      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
	      // See https://github.com/facebook/react/issues/13222
	      // and https://github.com/facebook/react/issues/14239

	      if (type === 'select') {
	        var node = domElement;

	        if (props.multiple) {
	          node.multiple = true;
	        } else if (props.size) {
	          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
	          // it is possible that no option is selected.
	          //
	          // This is only necessary when a select in "single selection mode".
	          node.size = props.size;
	        }
	      }
	    }
	  } else {
	    domElement = ownerDocument.createElementNS(namespaceURI, type);
	  }

	  {
	    if (namespaceURI === HTML_NAMESPACE$1) {
	      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
	        warnedUnknownTags[type] = true;

	        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
	      }
	    }
	  }

	  return domElement;
	}
	function createTextNode(text, rootContainerElement) {
	  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
	}
	function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
	  var isCustomComponentTag = isCustomComponent(tag, rawProps);

	  {
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  var props;

	  switch (tag) {
	    case 'iframe':
	    case 'object':
	    case 'embed':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;

	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }

	      props = rawProps;
	      break;

	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      props = rawProps;
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      props = rawProps;
	      break;

	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      props = rawProps;
	      break;

	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      props = rawProps;
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps);
	      props = getHostProps(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      props = getHostProps$1(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      props = getHostProps$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      props = getHostProps$3(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    default:
	      props = rawProps;
	  }

	  assertValidProps(tag, props);
	  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, false);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'option':
	      postMountWrapper$1(domElement, rawProps);
	      break;

	    case 'select':
	      postMountWrapper$2(domElement, rawProps);
	      break;

	    default:
	      if (typeof props.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }
	} // Calculate the diff between the two objects.

	function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
	  {
	    validatePropertiesInDevelopment(tag, nextRawProps);
	  }

	  var updatePayload = null;
	  var lastProps;
	  var nextProps;

	  switch (tag) {
	    case 'input':
	      lastProps = getHostProps(domElement, lastRawProps);
	      nextProps = getHostProps(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'option':
	      lastProps = getHostProps$1(domElement, lastRawProps);
	      nextProps = getHostProps$1(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'select':
	      lastProps = getHostProps$2(domElement, lastRawProps);
	      nextProps = getHostProps$2(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'textarea':
	      lastProps = getHostProps$3(domElement, lastRawProps);
	      nextProps = getHostProps$3(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    default:
	      lastProps = lastRawProps;
	      nextProps = nextRawProps;

	      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  assertValidProps(tag, nextProps);
	  var propKey;
	  var styleName;
	  var styleUpdates = null;

	  for (propKey in lastProps) {
	    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      var lastStyle = lastProps[propKey];

	      for (styleName in lastStyle) {
	        if (lastStyle.hasOwnProperty(styleName)) {
	          if (!styleUpdates) {
	            styleUpdates = {};
	          }

	          styleUpdates[styleName] = '';
	        }
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      // This is a special case. If any listener updates we need to ensure
	      // that the "current" fiber pointer gets updated so we need a commit
	      // to update this element.
	      if (!updatePayload) {
	        updatePayload = [];
	      }
	    } else {
	      // For all other deleted properties we add it to the queue. We use
	      // the whitelist in the commit phase instead.
	      (updatePayload = updatePayload || []).push(propKey, null);
	    }
	  }

	  for (propKey in nextProps) {
	    var nextProp = nextProps[propKey];
	    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

	    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }

	      if (lastProp) {
	        // Unset styles on `lastProp` but not on `nextProp`.
	        for (styleName in lastProp) {
	          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = '';
	          }
	        } // Update styles that changed since `lastProp`.


	        for (styleName in nextProp) {
	          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = nextProp[styleName];
	          }
	        }
	      } else {
	        // Relies on `updateStylesByID` not mutating `styleUpdates`.
	        if (!styleUpdates) {
	          if (!updatePayload) {
	            updatePayload = [];
	          }

	          updatePayload.push(propKey, styleUpdates);
	        }

	        styleUpdates = nextProp;
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
	      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        if (lastHtml !== nextHtml) {
	          (updatePayload = updatePayload || []).push(propKey, nextHtml);
	        }
	      }
	    } else if (propKey === CHILDREN) {
	      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
	        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
	      }
	    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        // We eagerly listen to this even though we haven't committed yet.
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        ensureListeningTo(rootContainerElement, propKey);
	      }

	      if (!updatePayload && lastProp !== nextProp) {
	        // This is a special case. If any listener updates we need to ensure
	        // that the "current" props pointer gets updated so we need a commit
	        // to update this element.
	        updatePayload = [];
	      }
	    } else {
	      // For any other property we always add it to the queue and then we
	      // filter it out using the whitelist during the commit.
	      (updatePayload = updatePayload || []).push(propKey, nextProp);
	    }
	  }

	  if (styleUpdates) {
	    {
	      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
	    }

	    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
	  }

	  return updatePayload;
	} // Apply the diff.

	function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
	  // Update checked *before* name.
	  // In the middle of an update, it is possible to have multiple checked.
	  // When a checked radio tries to change name, browser makes another radio's checked false.
	  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
	    updateChecked(domElement, nextRawProps);
	  }

	  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
	  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

	  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
	  // changed.

	  switch (tag) {
	    case 'input':
	      // Update the wrapper around inputs *after* updating props. This has to
	      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
	      // raise warnings and prevent the new value from being assigned.
	      updateWrapper(domElement, nextRawProps);
	      break;

	    case 'textarea':
	      updateWrapper$1(domElement, nextRawProps);
	      break;

	    case 'select':
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      postUpdateWrapper(domElement, nextRawProps);
	      break;
	  }
	}

	function getPossibleStandardName(propName) {
	  {
	    var lowerCasedName = propName.toLowerCase();

	    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      return null;
	    }

	    return possibleStandardNames[lowerCasedName] || null;
	  }
	}

	function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
	  var isCustomComponentTag;
	  var extraAttributeNames;

	  {
	    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
	    isCustomComponentTag = isCustomComponent(tag, rawProps);
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  switch (tag) {
	    case 'iframe':
	    case 'object':
	    case 'embed':
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;

	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        trapBubbledEvent(mediaEventTypes[i], domElement);
	      }

	      break;

	    case 'source':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      trapBubbledEvent(TOP_ERROR, domElement);
	      trapBubbledEvent(TOP_LOAD, domElement);
	      break;

	    case 'form':
	      trapBubbledEvent(TOP_RESET, domElement);
	      trapBubbledEvent(TOP_SUBMIT, domElement);
	      break;

	    case 'details':
	      trapBubbledEvent(TOP_TOGGLE, domElement);
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.

	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	  }

	  assertValidProps(tag, rawProps);

	  {
	    extraAttributeNames = new Set();
	    var attributes = domElement.attributes;

	    for (var _i = 0; _i < attributes.length; _i++) {
	      var name = attributes[_i].name.toLowerCase();

	      switch (name) {
	        // Built-in SSR attribute is whitelisted
	        case 'data-reactroot':
	          break;
	        // Controlled attributes are not validated
	        // TODO: Only ignore them on controlled tags.

	        case 'value':
	          break;

	        case 'checked':
	          break;

	        case 'selected':
	          break;

	        default:
	          // Intentionally use the original name.
	          // See discussion in https://github.com/facebook/react/pull/10676.
	          extraAttributeNames.add(attributes[_i].name);
	      }
	    }
	  }

	  var updatePayload = null;

	  for (var propKey in rawProps) {
	    if (!rawProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = rawProps[propKey];

	    if (propKey === CHILDREN) {
	      // For text content children we compare against textContent. This
	      // might match additional HTML that is hidden when we read it using
	      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	      // satisfies our requirement. Our requirement is not to produce perfect
	      // HTML and attributes. Ideally we should preserve structure but it's
	      // ok not to if the visible content is still enough to indicate what
	      // even listeners these nodes might be wired up to.
	      // TODO: Warn if there is more than a single textNode as a child.
	      // TODO: Should we use domElement.firstChild.nodeValue to compare?
	      if (typeof nextProp === 'string') {
	        if (domElement.textContent !== nextProp) {
	          if ( !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }

	          updatePayload = [CHILDREN, nextProp];
	        }
	      } else if (typeof nextProp === 'number') {
	        if (domElement.textContent !== '' + nextProp) {
	          if ( !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }

	          updatePayload = [CHILDREN, '' + nextProp];
	        }
	      }
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
	    typeof isCustomComponentTag === 'boolean') {
	      // Validate that the properties correspond to their expected values.
	      var serverValue = void 0;
	      var propertyInfo = getPropertyInfo(propKey);

	      if (suppressHydrationWarning) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
	      // TODO: Only ignore them on controlled tags.
	      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	        var serverHTML = domElement.innerHTML;
	        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
	        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

	        if (expectedHTML !== serverHTML) {
	          warnForPropDifference(propKey, serverHTML, expectedHTML);
	        }
	      } else if (propKey === STYLE) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey);

	        if (canDiffStyleForHydrationWarning) {
	          var expectedStyle = createDangerousStringForStyles(nextProp);
	          serverValue = domElement.getAttribute('style');

	          if (expectedStyle !== serverValue) {
	            warnForPropDifference(propKey, serverValue, expectedStyle);
	          }
	        }
	      } else if (isCustomComponentTag) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey.toLowerCase());
	        serverValue = getValueForAttribute(domElement, propKey, nextProp);

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
	        var isMismatchDueToBadCasing = false;

	        if (propertyInfo !== null) {
	          // $FlowFixMe - Should be inferred as not undefined.
	          extraAttributeNames.delete(propertyInfo.attributeName);
	          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
	        } else {
	          var ownNamespace = parentNamespace;

	          if (ownNamespace === HTML_NAMESPACE$1) {
	            ownNamespace = getIntrinsicNamespace(tag);
	          }

	          if (ownNamespace === HTML_NAMESPACE$1) {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey.toLowerCase());
	          } else {
	            var standardName = getPossibleStandardName(propKey);

	            if (standardName !== null && standardName !== propKey) {
	              // If an SVG prop is supplied with bad casing, it will
	              // be successfully parsed from HTML, but will produce a mismatch
	              // (and would be incorrectly rendered on the client).
	              // However, we already warn about bad casing elsewhere.
	              // So we'll skip the misleading extra mismatch warning in this case.
	              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

	              extraAttributeNames.delete(standardName);
	            } // $FlowFixMe - Should be inferred as not undefined.


	            extraAttributeNames.delete(propKey);
	          }

	          serverValue = getValueForAttribute(domElement, propKey, nextProp);
	        }

	        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      }
	    }
	  }

	  {
	    // $FlowFixMe - Should be inferred as not undefined.
	    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
	      // $FlowFixMe - Should be inferred as not undefined.
	      warnForExtraAttributes(extraAttributeNames);
	    }
	  }

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, true);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'select':
	    case 'option':
	      // For input and textarea we current always set the value property at
	      // post mount to force it to diverge from attributes. However, for
	      // option and select we don't quite do the same thing and select
	      // is not resilient to the DOM state changing so we don't do that here.
	      // TODO: Consider not doing this for input and textarea.
	      break;

	    default:
	      if (typeof rawProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  return updatePayload;
	}
	function diffHydratedText(textNode, text) {
	  var isDifferent = textNode.nodeValue !== text;
	  return isDifferent;
	}
	function warnForUnmatchedText(textNode, text) {
	  {
	    warnForTextDifference(textNode.nodeValue, text);
	  }
	}
	function warnForDeletedHydratableElement(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForDeletedHydratableText(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedElement(parentNode, tag, props) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedText(parentNode, text) {
	  {
	    if (text === '') {
	      // We expect to insert empty text nodes since they're not represented in
	      // the HTML.
	      // TODO: Remove this special case if we can just avoid inserting empty
	      // text nodes.
	      return;
	    }

	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
	  }
	}
	function restoreControlledState$3(domElement, tag, props) {
	  switch (tag) {
	    case 'input':
	      restoreControlledState(domElement, props);
	      return;

	    case 'textarea':
	      restoreControlledState$2(domElement, props);
	      return;

	    case 'select':
	      restoreControlledState$1(domElement, props);
	      return;
	  }
	}

	function getActiveElement(doc) {
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);

	  if (typeof doc === 'undefined') {
	    return null;
	  }

	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }

	  return node;
	}
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */


	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }

	    node = node.parentNode;
	  }
	}
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */


	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === TEXT_NODE) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */

	function getOffsets(outerNode) {
	  var ownerDocument = outerNode.ownerDocument;
	  var win = ownerDocument && ownerDocument.defaultView || window;
	  var selection = win.getSelection && win.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode,
	      anchorOffset = selection.anchorOffset,
	      focusNode = selection.focusNode,
	      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
	  // expose properties, triggering a "Permission denied error" if any of its
	  // properties are accessed. The only seemingly possible way to avoid erroring
	  // is to access a property that typically works for non-anonymous divs and
	  // catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

	  try {
	    /* eslint-disable no-unused-expressions */
	    anchorNode.nodeType;
	    focusNode.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
	}
	/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */

	function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var length = 0;
	  var start = -1;
	  var end = -1;
	  var indexWithinAnchor = 0;
	  var indexWithinFocus = 0;
	  var node = outerNode;
	  var parentNode = null;

	  outer: while (true) {
	    var next = null;

	    while (true) {
	      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
	        start = length + anchorOffset;
	      }

	      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
	        end = length + focusOffset;
	      }

	      if (node.nodeType === TEXT_NODE) {
	        length += node.nodeValue.length;
	      }

	      if ((next = node.firstChild) === null) {
	        break;
	      } // Moving from `node` to its first child `next`.


	      parentNode = node;
	      node = next;
	    }

	    while (true) {
	      if (node === outerNode) {
	        // If `outerNode` has children, this is always the second time visiting
	        // it. If it has no children, this is still the first loop, and the only
	        // valid selection is anchorNode and focusNode both equal to this node
	        // and both offsets 0, in which case we will have handled above.
	        break outer;
	      }

	      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
	        start = length;
	      }

	      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
	        end = length;
	      }

	      if ((next = node.nextSibling) !== null) {
	        break;
	      }

	      node = parentNode;
	      parentNode = node.parentNode;
	    } // Moving from `node` to its next sibling `next`.


	    node = next;
	  }

	  if (start === -1 || end === -1) {
	    // This should never happen. (Would happen if the anchor/focus nodes aren't
	    // actually inside the passed-in node.)
	    return null;
	  }

	  return {
	    start: start,
	    end: end
	  };
	}
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */

	function setOffsets(node, offsets) {
	  var doc = node.ownerDocument || document;
	  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
	  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
	  // fails when pasting 100+ items)

	  if (!win.getSelection) {
	    return;
	  }

	  var selection = win.getSelection();
	  var length = node.textContent.length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.

	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
	      return;
	    }

	    var range = doc.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	function isTextNode(node) {
	  return node && node.nodeType === TEXT_NODE;
	}

	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	function isInDocument(node) {
	  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
	}

	function isSameOriginFrame(iframe) {
	  try {
	    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
	    // to throw, e.g. if it has a cross-origin src attribute.
	    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
	    // iframe.contentDocument.defaultView;
	    // A safety way is to access one of the cross origin properties: Window or Location
	    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
	    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
	    return typeof iframe.contentWindow.location.href === 'string';
	  } catch (err) {
	    return false;
	  }
	}

	function getActiveElementDeep() {
	  var win = window;
	  var element = getActiveElement();

	  while (element instanceof win.HTMLIFrameElement) {
	    if (isSameOriginFrame(element)) {
	      win = element.contentWindow;
	    } else {
	      return element;
	    }

	    element = getActiveElement(win.document);
	  }

	  return element;
	}
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */

	/**
	 * @hasSelectionCapabilities: we get the element types that support selection
	 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
	 * and `selectionEnd` rows.
	 */


	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
	}
	function getSelectionInformation() {
	  var focusedElem = getActiveElementDeep();
	  return {
	    // Used by Flare
	    activeElementDetached: null,
	    focusedElem: focusedElem,
	    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
	  };
	}
	/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */

	function restoreSelection(priorSelectionInformation) {
	  var curFocusedElem = getActiveElementDeep();
	  var priorFocusedElem = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;

	  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
	      setSelection(priorFocusedElem, priorSelectionRange);
	    } // Focusing a node can change the scroll position, which is undesirable


	    var ancestors = [];
	    var ancestor = priorFocusedElem;

	    while (ancestor = ancestor.parentNode) {
	      if (ancestor.nodeType === ELEMENT_NODE) {
	        ancestors.push({
	          element: ancestor,
	          left: ancestor.scrollLeft,
	          top: ancestor.scrollTop
	        });
	      }
	    }

	    if (typeof priorFocusedElem.focus === 'function') {
	      priorFocusedElem.focus();
	    }

	    for (var i = 0; i < ancestors.length; i++) {
	      var info = ancestors[i];
	      info.element.scrollLeft = info.left;
	      info.element.scrollTop = info.top;
	    }
	  }
	}
	/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */

	function getSelection(input) {
	  var selection;

	  if ('selectionStart' in input) {
	    // Modern browser with input or textarea.
	    selection = {
	      start: input.selectionStart,
	      end: input.selectionEnd
	    };
	  } else {
	    // Content editable or old IE textarea.
	    selection = getOffsets(input);
	  }

	  return selection || {
	    start: 0,
	    end: 0
	  };
	}
	/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */

	function setSelection(input, offsets) {
	  var start = offsets.start,
	      end = offsets.end;

	  if (end === undefined) {
	    end = start;
	  }

	  if ('selectionStart' in input) {
	    input.selectionStart = start;
	    input.selectionEnd = Math.min(end, input.value.length);
	  } else {
	    setOffsets(input, offsets);
	  }
	}

	var validateDOMNesting = function () {};

	var updatedAncestorInfo = function () {};

	{
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

	  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	  var emptyAncestorInfo = {
	    current: null,
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  updatedAncestorInfo = function (oldInfo, tag) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

	    var info = {
	      tag: tag
	    };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }

	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    } // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }

	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }

	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }

	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }

	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }

	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }

	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };
	  /**
	   * Returns whether
	   */


	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';

	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but

	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

	      case 'html':
	        return tag === 'head' || tag === 'body' || tag === 'frameset';

	      case 'frameset':
	        return tag === 'frame';

	      case '#document':
	        return tag === 'html';
	    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frameset':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };
	  /**
	   * Returns whether
	   */


	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  var didWarn$1 = {};

	  validateDOMNesting = function (childTag, childText, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      if (childTag != null) {
	        error('validateDOMNesting: when childText is passed, childTag should be null');
	      }

	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var invalidParentOrAncestor = invalidParent || invalidAncestor;

	    if (!invalidParentOrAncestor) {
	      return;
	    }

	    var ancestorTag = invalidParentOrAncestor.tag;
	    var addendum = getCurrentFiberStackInDev();
	    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

	    if (didWarn$1[warnKey]) {
	      return;
	    }

	    didWarn$1[warnKey] = true;
	    var tagDisplayName = childTag;
	    var whitespaceInfo = '';

	    if (childTag === '#text') {
	      if (/\S/.test(childText)) {
	        tagDisplayName = 'Text nodes';
	      } else {
	        tagDisplayName = 'Whitespace text nodes';
	        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	      }
	    } else {
	      tagDisplayName = '<' + childTag + '>';
	    }

	    if (invalidParent) {
	      var info = '';

	      if (ancestorTag === 'table' && childTag === 'tr') {
	        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
	      }

	      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
	    } else {
	      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
	    }
	  };
	}

	var SUPPRESS_HYDRATION_WARNING$1;

	{
	  SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
	}

	var SUSPENSE_START_DATA = '$';
	var SUSPENSE_END_DATA = '/$';
	var SUSPENSE_PENDING_START_DATA = '$?';
	var SUSPENSE_FALLBACK_START_DATA = '$!';
	var STYLE$1 = 'style';
	var eventsEnabled = null;
	var selectionInformation = null;

	function shouldAutoFocusHostComponent(type, props) {
	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      return !!props.autoFocus;
	  }

	  return false;
	}
	function getRootHostContext(rootContainerInstance) {
	  var type;
	  var namespace;
	  var nodeType = rootContainerInstance.nodeType;

	  switch (nodeType) {
	    case DOCUMENT_NODE:
	    case DOCUMENT_FRAGMENT_NODE:
	      {
	        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
	        var root = rootContainerInstance.documentElement;
	        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
	        break;
	      }

	    default:
	      {
	        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
	        var ownNamespace = container.namespaceURI || null;
	        type = container.tagName;
	        namespace = getChildNamespace(ownNamespace, type);
	        break;
	      }
	  }

	  {
	    var validatedTag = type.toLowerCase();
	    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getChildHostContext(parentHostContext, type, rootContainerInstance) {
	  {
	    var parentHostContextDev = parentHostContext;
	    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
	    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getPublicInstance(instance) {
	  return instance;
	}
	function prepareForCommit(containerInfo) {
	  eventsEnabled = isEnabled();
	  selectionInformation = getSelectionInformation();
	  setEnabled(false);
	}
	function resetAfterCommit(containerInfo) {
	  restoreSelection(selectionInformation);
	  setEnabled(eventsEnabled);
	  eventsEnabled = null;

	  selectionInformation = null;
	}
	function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  var parentNamespace;

	  {
	    // TODO: take namespace into account when validating.
	    var hostContextDev = hostContext;
	    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

	    if (typeof props.children === 'string' || typeof props.children === 'number') {
	      var string = '' + props.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }

	    parentNamespace = hostContextDev.namespace;
	  }

	  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
	  precacheFiberNode(internalInstanceHandle, domElement);
	  updateFiberProps(domElement, props);
	  return domElement;
	}
	function appendInitialChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
	  setInitialProperties(domElement, type, props, rootContainerInstance);
	  return shouldAutoFocusHostComponent(type, props);
	}
	function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
	  {
	    var hostContextDev = hostContext;

	    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
	      var string = '' + newProps.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	  }

	  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
	}
	function shouldSetTextContent(type, props) {
	  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
	}
	function shouldDeprioritizeSubtree(type, props) {
	  return !!props.hidden;
	}
	function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
	  {
	    var hostContextDev = hostContext;
	    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
	  }

	  var textNode = createTextNode(text, rootContainerInstance);
	  precacheFiberNode(internalInstanceHandle, textNode);
	  return textNode;
	}
	// if a component just imports ReactDOM (e.g. for findDOMNode).
	// Some environments might not have setTimeout or clearTimeout.

	var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
	var noTimeout = -1; // -------------------
	function commitMount(domElement, type, newProps, internalInstanceHandle) {
	  // Despite the naming that might imply otherwise, this method only
	  // fires if there is an `Update` effect scheduled during mounting.
	  // This happens if `finalizeInitialChildren` returns `true` (which it
	  // does to implement the `autoFocus` attribute on the client). But
	  // there are also other cases when this might happen (such as patching
	  // up text content during hydration mismatch). So we'll check this again.
	  if (shouldAutoFocusHostComponent(type, newProps)) {
	    domElement.focus();
	  }
	}
	function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
	  // Update the props handle so that we know which props are the ones with
	  // with current event handlers.
	  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

	  updateProperties(domElement, updatePayload, type, oldProps, newProps);
	}
	function resetTextContent(domElement) {
	  setTextContent(domElement, '');
	}
	function commitTextUpdate(textInstance, oldText, newText) {
	  textInstance.nodeValue = newText;
	}
	function appendChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function appendChildToContainer(container, child) {
	  var parentNode;

	  if (container.nodeType === COMMENT_NODE) {
	    parentNode = container.parentNode;
	    parentNode.insertBefore(child, container);
	  } else {
	    parentNode = container;
	    parentNode.appendChild(child);
	  } // This container might be used for a portal.
	  // If something inside a portal is clicked, that click should bubble
	  // through the React tree. However, on Mobile Safari the click would
	  // never bubble through the *DOM* tree unless an ancestor with onclick
	  // event exists. So we wouldn't see it and dispatch it.
	  // This is why we ensure that non React root containers have inline onclick
	  // defined.
	  // https://github.com/facebook/react/issues/11918


	  var reactRootContainer = container._reactRootContainer;

	  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
	    // TODO: This cast may not be sound for SVG, MathML or custom elements.
	    trapClickOnNonInteractiveElement(parentNode);
	  }
	}
	function insertBefore(parentInstance, child, beforeChild) {
	  parentInstance.insertBefore(child, beforeChild);
	}
	function insertInContainerBefore(container, child, beforeChild) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.insertBefore(child, beforeChild);
	  } else {
	    container.insertBefore(child, beforeChild);
	  }
	}
	function removeChild(parentInstance, child) {
	  parentInstance.removeChild(child);
	}
	function removeChildFromContainer(container, child) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.removeChild(child);
	  } else {
	    container.removeChild(child);
	  }
	}

	function hideInstance(instance) {
	  // pass host context to this method?


	  instance = instance;
	  var style = instance.style;

	  if (typeof style.setProperty === 'function') {
	    style.setProperty('display', 'none', 'important');
	  } else {
	    style.display = 'none';
	  }
	}
	function hideTextInstance(textInstance) {
	  textInstance.nodeValue = '';
	}
	function unhideInstance(instance, props) {
	  instance = instance;
	  var styleProp = props[STYLE$1];
	  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
	  instance.style.display = dangerousStyleValue('display', display);
	}
	function unhideTextInstance(textInstance, text) {
	  textInstance.nodeValue = text;
	} // -------------------
	function canHydrateInstance(instance, type, props) {
	  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
	    return null;
	  } // This has now been refined to an element node.


	  return instance;
	}
	function canHydrateTextInstance(instance, text) {
	  if (text === '' || instance.nodeType !== TEXT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  } // This has now been refined to a text node.


	  return instance;
	}
	function isSuspenseInstancePending(instance) {
	  return instance.data === SUSPENSE_PENDING_START_DATA;
	}
	function isSuspenseInstanceFallback(instance) {
	  return instance.data === SUSPENSE_FALLBACK_START_DATA;
	}

	function getNextHydratable(node) {
	  // Skip non-hydratable nodes.
	  for (; node != null; node = node.nextSibling) {
	    var nodeType = node.nodeType;

	    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
	      break;
	    }
	  }

	  return node;
	}

	function getNextHydratableSibling(instance) {
	  return getNextHydratable(instance.nextSibling);
	}
	function getFirstHydratableChild(parentInstance) {
	  return getNextHydratable(parentInstance.firstChild);
	}
	function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
	  // get attached.

	  updateFiberProps(instance, props);
	  var parentNamespace;

	  {
	    var hostContextDev = hostContext;
	    parentNamespace = hostContextDev.namespace;
	  }

	  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
	}
	function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, textInstance);
	  return diffHydratedText(textInstance, text);
	}
	function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
	  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          return getNextHydratableSibling(node);
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        depth++;
	      }
	    }

	    node = node.nextSibling;
	  } // TODO: Warn, we didn't find the end comment boundary.


	  return null;
	} // Returns the SuspenseInstance if this node is a direct child of a
	// SuspenseInstance. I.e. if its previous sibling is a Comment with
	// SUSPENSE_x_START_DATA. Otherwise, null.

	function getParentSuspenseInstance(targetInstance) {
	  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        if (depth === 0) {
	          return node;
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_END_DATA) {
	        depth++;
	      }
	    }

	    node = node.previousSibling;
	  }

	  return null;
	}
	function commitHydratedContainer(container) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(container);
	}
	function commitHydratedSuspenseInstance(suspenseInstance) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(suspenseInstance);
	}
	function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
	  {
	    warnForUnmatchedText(textInstance, text);
	  }
	}
	function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    warnForUnmatchedText(textInstance, text);
	  }
	}
	function didNotHydrateContainerInstance(parentContainer, instance) {
	  {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentContainer, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentContainer, instance);
	    }
	  }
	}
	function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentInstance, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentInstance, instance);
	    }
	  }
	}
	function didNotFindHydratableContainerInstance(parentContainer, type, props) {
	  {
	    warnForInsertedHydratedElement(parentContainer, type);
	  }
	}
	function didNotFindHydratableContainerTextInstance(parentContainer, text) {
	  {
	    warnForInsertedHydratedText(parentContainer, text);
	  }
	}
	function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    warnForInsertedHydratedElement(parentInstance, type);
	  }
	}
	function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    warnForInsertedHydratedText(parentInstance, text);
	  }
	}
	function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
	  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
	}

	var randomKey = Math.random().toString(36).slice(2);
	var internalInstanceKey = '__reactInternalInstance$' + randomKey;
	var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
	var internalContainerInstanceKey = '__reactContainere$' + randomKey;
	function precacheFiberNode(hostInst, node) {
	  node[internalInstanceKey] = hostInst;
	}
	function markContainerAsRoot(hostRoot, node) {
	  node[internalContainerInstanceKey] = hostRoot;
	}
	function unmarkContainerAsRoot(node) {
	  node[internalContainerInstanceKey] = null;
	}
	function isContainerMarkedAsRoot(node) {
	  return !!node[internalContainerInstanceKey];
	} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
	// If the target node is part of a hydrated or not yet rendered subtree, then
	// this may also return a SuspenseComponent or HostRoot to indicate that.
	// Conceptually the HostRoot fiber is a child of the Container node. So if you
	// pass the Container node as the targetNode, you will not actually get the
	// HostRoot back. To get to the HostRoot, you need to pass a child of it.
	// The same thing applies to Suspense boundaries.

	function getClosestInstanceFromNode(targetNode) {
	  var targetInst = targetNode[internalInstanceKey];

	  if (targetInst) {
	    // Don't return HostRoot or SuspenseComponent here.
	    return targetInst;
	  } // If the direct event target isn't a React owned DOM node, we need to look
	  // to see if one of its parents is a React owned DOM node.


	  var parentNode = targetNode.parentNode;

	  while (parentNode) {
	    // We'll check if this is a container root that could include
	    // React nodes in the future. We need to check this first because
	    // if we're a child of a dehydrated container, we need to first
	    // find that inner container before moving on to finding the parent
	    // instance. Note that we don't check this field on  the targetNode
	    // itself because the fibers are conceptually between the container
	    // node and the first child. It isn't surrounding the container node.
	    // If it's not a container, we check if it's an instance.
	    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

	    if (targetInst) {
	      // Since this wasn't the direct target of the event, we might have
	      // stepped past dehydrated DOM nodes to get here. However they could
	      // also have been non-React nodes. We need to answer which one.
	      // If we the instance doesn't have any children, then there can't be
	      // a nested suspense boundary within it. So we can use this as a fast
	      // bailout. Most of the time, when people add non-React children to
	      // the tree, it is using a ref to a child-less DOM node.
	      // Normally we'd only need to check one of the fibers because if it
	      // has ever gone from having children to deleting them or vice versa
	      // it would have deleted the dehydrated boundary nested inside already.
	      // However, since the HostRoot starts out with an alternate it might
	      // have one on the alternate so we need to check in case this was a
	      // root.
	      var alternate = targetInst.alternate;

	      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
	        // Next we need to figure out if the node that skipped past is
	        // nested within a dehydrated boundary and if so, which one.
	        var suspenseInstance = getParentSuspenseInstance(targetNode);

	        while (suspenseInstance !== null) {
	          // We found a suspense instance. That means that we haven't
	          // hydrated it yet. Even though we leave the comments in the
	          // DOM after hydrating, and there are boundaries in the DOM
	          // that could already be hydrated, we wouldn't have found them
	          // through this pass since if the target is hydrated it would
	          // have had an internalInstanceKey on it.
	          // Let's get the fiber associated with the SuspenseComponent
	          // as the deepest instance.
	          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

	          if (targetSuspenseInst) {
	            return targetSuspenseInst;
	          } // If we don't find a Fiber on the comment, it might be because
	          // we haven't gotten to hydrate it yet. There might still be a
	          // parent boundary that hasn't above this one so we need to find
	          // the outer most that is known.


	          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
	          // host component also hasn't hydrated yet. We can return it
	          // below since it will bail out on the isMounted check later.
	        }
	      }

	      return targetInst;
	    }

	    targetNode = parentNode;
	    parentNode = targetNode.parentNode;
	  }

	  return null;
	}
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */

	function getInstanceFromNode$1(node) {
	  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

	  if (inst) {
	    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
	      return inst;
	    } else {
	      return null;
	    }
	  }

	  return null;
	}
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */

	function getNodeFromInstance$1(inst) {
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber this, is just the state node right now. We assume it will be
	    // a host component or host text.
	    return inst.stateNode;
	  } // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.


	  {
	    {
	      throw Error( "getNodeFromInstance: Invalid argument." );
	    }
	  }
	}
	function getFiberCurrentPropsFromNode$1(node) {
	  return node[internalEventHandlersKey] || null;
	}
	function updateFiberProps(node, props) {
	  node[internalEventHandlersKey] = props;
	}

	function getParent(inst) {
	  do {
	    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
	    // That is depending on if we want nested subtrees (layers) to bubble
	    // events to their parent. We could also go through parentNode on the
	    // host node but that wouldn't work for React Native and doesn't let us
	    // do the portal feature.
	  } while (inst && inst.tag !== HostComponent);

	  if (inst) {
	    return inst;
	  }

	  return null;
	}
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */


	function getLowestCommonAncestor(instA, instB) {
	  var depthA = 0;

	  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
	    depthA++;
	  }

	  var depthB = 0;

	  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
	    depthB++;
	  } // If A is deeper, crawl up.


	  while (depthA - depthB > 0) {
	    instA = getParent(instA);
	    depthA--;
	  } // If B is deeper, crawl up.


	  while (depthB - depthA > 0) {
	    instB = getParent(instB);
	    depthB--;
	  } // Walk in lockstep until we find a match.


	  var depth = depthA;

	  while (depth--) {
	    if (instA === instB || instA === instB.alternate) {
	      return instA;
	    }

	    instA = getParent(instA);
	    instB = getParent(instB);
	  }

	  return null;
	}
	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */

	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];

	  while (inst) {
	    path.push(inst);
	    inst = getParent(inst);
	  }

	  var i;

	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }

	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */

	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];

	  while (true) {
	    if (!from) {
	      break;
	    }

	    if (from === common) {
	      break;
	    }

	    var alternate = from.alternate;

	    if (alternate !== null && alternate === common) {
	      break;
	    }

	    pathFrom.push(from);
	    from = getParent(from);
	  }

	  var pathTo = [];

	  while (true) {
	    if (!to) {
	      break;
	    }

	    if (to === common) {
	      break;
	    }

	    var _alternate = to.alternate;

	    if (_alternate !== null && _alternate === common) {
	      break;
	    }

	    pathTo.push(to);
	    to = getParent(to);
	  }

	  for (var i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }

	  for (var _i = pathTo.length; _i-- > 0;) {
	    fn(pathTo[_i], 'captured', argTo);
	  }
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	    case 'onMouseEnter':
	      return !!(props.disabled && isInteractive(type));

	    default:
	      return false;
	  }
	}
	/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */


	function getListener(inst, registrationName) {
	  var listener; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	  // live here; needs to be moved to a better place soon

	  var stateNode = inst.stateNode;

	  if (!stateNode) {
	    // Work in progress (ex: onload events in incremental mode).
	    return null;
	  }

	  var props = getFiberCurrentPropsFromNode(stateNode);

	  if (!props) {
	    // Work in progress.
	    return null;
	  }

	  listener = props[registrationName];

	  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
	    return null;
	  }

	  if (!(!listener || typeof listener === 'function')) {
	    {
	      throw Error( "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type." );
	    }
	  }

	  return listener;
	}

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing even a
	 * single one.
	 */

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */


	function accumulateDirectionalDispatches(inst, phase, event) {
	  {
	    if (!inst) {
	      error('Dispatching inst must not be null');
	    }
	  }

	  var listener = listenerAtPhase(inst, event, phase);

	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */


	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */


	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (inst && event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);

	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */


	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * These variables store information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */
	var root = null;
	var startText = null;
	var fallbackText = null;
	function initialize(nativeEventTarget) {
	  root = nativeEventTarget;
	  startText = getText();
	  return true;
	}
	function reset() {
	  root = null;
	  startText = null;
	  fallbackText = null;
	}
	function getData() {
	  if (fallbackText) {
	    return fallbackText;
	  }

	  var start;
	  var startValue = startText;
	  var startLength = startValue.length;
	  var end;
	  var endValue = getText();
	  var endLength = endValue.length;

	  for (start = 0; start < startLength; start++) {
	    if (startValue[start] !== endValue[start]) {
	      break;
	    }
	  }

	  var minEnd = startLength - start;

	  for (end = 1; end <= minEnd; end++) {
	    if (startValue[startLength - end] !== endValue[endLength - end]) {
	      break;
	    }
	  }

	  var sliceTail = end > 1 ? 1 - end : undefined;
	  fallbackText = endValue.slice(start, sliceTail);
	  return fallbackText;
	}
	function getText() {
	  if ('value' in root) {
	    return root.value;
	  }

	  return root.textContent;
	}

	var EVENT_POOL_SIZE = 10;
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: function () {
	    return null;
	  },
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	function functionThatReturnsTrue() {
	  return true;
	}

	function functionThatReturnsFalse() {
	  return false;
	}
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */


	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	    delete this.isDefaultPrevented;
	    delete this.isPropagationStopped;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	  var Interface = this.constructor.Interface;

	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }

	    {
	      delete this[propName]; // this has a getter/setter for warnings
	    }

	    var normalize = Interface[propName];

	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

	  if (defaultPrevented) {
	    this.isDefaultPrevented = functionThatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = functionThatReturnsFalse;
	  }

	  this.isPropagationStopped = functionThatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;

	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }

	    this.isDefaultPrevented = functionThatReturnsTrue;
	  },
	  stopPropagation: function () {
	    var event = this.nativeEvent;

	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = functionThatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = functionThatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: functionThatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;

	    for (var propName in Interface) {
	      {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      }
	    }

	    this.dispatchConfig = null;
	    this._targetInst = null;
	    this.nativeEvent = null;
	    this.isDefaultPrevented = functionThatReturnsFalse;
	    this.isPropagationStopped = functionThatReturnsFalse;
	    this._dispatchListeners = null;
	    this._dispatchInstances = null;

	    {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
	      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
	    }
	  }
	});

	SyntheticEvent.Interface = EventInterface;
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 */

	SyntheticEvent.extend = function (Interface) {
	  var Super = this;

	  var E = function () {};

	  E.prototype = Super.prototype;
	  var prototype = new E();

	  function Class() {
	    return Super.apply(this, arguments);
	  }

	  _assign(prototype, Class.prototype);

	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.extend = Super.extend;
	  addEventPoolingTo(Class);
	  return Class;
	};

	addEventPoolingTo(SyntheticEvent);
	/**
	 * Helper to nullify syntheticEvent instance properties when destructing
	 *
	 * @param {String} propName
	 * @param {?object} getVal
	 * @return {object} defineProperty object
	 */

	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    {
	      error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
	    }
	  }
	}

	function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
	  var EventConstructor = this;

	  if (EventConstructor.eventPool.length) {
	    var instance = EventConstructor.eventPool.pop();
	    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
	    return instance;
	  }

	  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
	}

	function releasePooledEvent(event) {
	  var EventConstructor = this;

	  if (!(event instanceof EventConstructor)) {
	    {
	      throw Error( "Trying to release an event instance into a pool of a different type." );
	    }
	  }

	  event.destructor();

	  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
	    EventConstructor.eventPool.push(event);
	  }
	}

	function addEventPoolingTo(EventConstructor) {
	  EventConstructor.eventPool = [];
	  EventConstructor.getPooled = getPooledEvent;
	  EventConstructor.release = releasePooledEvent;
	}

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */

	var SyntheticCompositionEvent = SyntheticEvent.extend({
	  data: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */

	var SyntheticInputEvent = SyntheticEvent.extend({
	  data: null
	});

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

	var START_KEYCODE = 229;
	var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
	var documentMode = null;

	if (canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	} // Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.


	var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.

	var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
	  }
	}; // Track whether we've ever handled a keypress on the space key.

	var hasSpaceKeypress = false;
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */

	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */


	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_START:
	      return eventTypes.compositionStart;

	    case TOP_COMPOSITION_END:
	      return eventTypes.compositionEnd;

	    case TOP_COMPOSITION_UPDATE:
	      return eventTypes.compositionUpdate;
	  }
	}
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
	}
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_KEY_UP:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

	    case TOP_KEY_DOWN:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;

	    case TOP_KEY_PRESS:
	    case TOP_MOUSE_DOWN:
	    case TOP_BLUR:
	      // Events are not possible without cancelling IME.
	      return true;

	    default:
	      return false;
	  }
	}
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */


	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;

	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }

	  return null;
	}
	/**
	 * Check if a composition event was triggered by Korean IME.
	 * Our fallback mode does not work well with IE's Korean IME,
	 * so just use native composition events when Korean IME is used.
	 * Although CompositionEvent.locale property is deprecated,
	 * it is available in IE, where our fallback mode is enabled.
	 *
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isUsingKoreanIME(nativeEvent) {
	  return nativeEvent.locale === 'ko';
	} // Track the current IME composition status, if any.


	var isComposing = false;
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */

	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!isComposing) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!isComposing && eventType === eventTypes.compositionStart) {
	      isComposing = initialize(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (isComposing) {
	        fallbackData = getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);

	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */


	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case TOP_COMPOSITION_END:
	      return getDataFromCustomEvent(nativeEvent);

	    case TOP_KEY_PRESS:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;

	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case TOP_TEXT_INPUT:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to ignore it.

	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {number} topLevelType Number from `TopLevelEventTypes`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */


	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (isComposing) {
	    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = getData();
	      reset();
	      isComposing = false;
	      return chars;
	    }

	    return null;
	  }

	  switch (topLevelType) {
	    case TOP_PASTE:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;

	    case TOP_KEY_PRESS:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (!isKeypressCommand(nativeEvent)) {
	        // IE fires the `keypress` event when a user types an emoji via
	        // Touch keyboard of Windows.  In such a case, the `char` property
	        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
	        // is 2, the property `which` does not represent an emoji correctly.
	        // In such a case, we directly return the `char` property instead of
	        // using `which`.
	        if (nativeEvent.char && nativeEvent.char.length > 1) {
	          return nativeEvent.char;
	        } else if (nativeEvent.which) {
	          return String.fromCharCode(nativeEvent.which);
	        }
	      }

	      return null;

	    case TOP_COMPOSITION_END:
	      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

	    default:
	      return null;
	  }
	}
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */


	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  } // If no characters are being inserted, no BeforeInput event should
	  // be fired.


	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	  event.data = chars;
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */


	var BeforeInputEventPlugin = {
	  eventTypes: eventTypes,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

	    if (composition === null) {
	      return beforeInput;
	    }

	    if (beforeInput === null) {
	      return composition;
	    }

	    return [composition, beforeInput];
	  }
	};

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	var eventTypes$1 = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
	  }
	};

	function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
	  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
	  event.type = 'change'; // Flag this event loop as needing state restore.

	  enqueueStateRestore(target);
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * For IE shims
	 */


	var activeElement = null;
	var activeElementInst = null;
	/**
	 * SECTION: handle `change` event
	 */

	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.

	  batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  runEventsInBatch(event);
	}

	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance$1(targetInst);

	  if (updateValueIfChanged(targetNode)) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CHANGE) {
	    return targetInst;
	  }
	}
	/**
	 * SECTION: handle `input` event
	 */


	var isInputEventSupported = false;

	if (canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}
	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */


	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */


	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  activeElement = null;
	  activeElementInst = null;
	}
	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */


	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }

	  if (getInstIfValueChanged(activeElementInst)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
	  if (topLevelType === TOP_FOCUS) {
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === TOP_BLUR) {
	    stopWatchingForValueChange();
	  }
	} // For IE8 and IE9.


	function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
	  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst);
	  }
	}
	/**
	 * SECTION: handle `click` event
	 */


	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_CLICK) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function handleControlledInputBlur(node) {
	  var state = node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  {
	    // If controlled, assign the value attribute to the current value on blur
	    setDefaultValue(node, 'number', node.value);
	  }
	}
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */


	var ChangeEventPlugin = {
	  eventTypes: eventTypes$1,
	  _isInputEventSupported: isInputEventSupported,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
	    var getTargetInstFunc, handleEventFunc;

	    if (shouldUseChangeEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForChangeEvent;
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventPolyfill;
	        handleEventFunc = handleEventsForInputEventPolyfill;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);

	      if (inst) {
	        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    } // When blurring, set the value attribute for number inputs


	    if (topLevelType === TOP_BLUR) {
	      handleControlledInputBlur(targetNode);
	    }
	  }
	};

	var SyntheticUIEvent = SyntheticEvent.extend({
	  view: null,
	  detail: null
	});

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
	// getModifierState. If getModifierState is not supported, we map it to a set of
	// modifier keys exposed by the event. In this case, Lock-keys are not supported.

	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;

	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }

	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	var previousScreenX = 0;
	var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

	var isMovementXSet = false;
	var isMovementYSet = false;
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticMouseEvent = SyntheticUIEvent.extend({
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  pageX: null,
	  pageY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: null,
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  movementX: function (event) {
	    if ('movementX' in event) {
	      return event.movementX;
	    }

	    var screenX = previousScreenX;
	    previousScreenX = event.screenX;

	    if (!isMovementXSet) {
	      isMovementXSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenX - screenX : 0;
	  },
	  movementY: function (event) {
	    if ('movementY' in event) {
	      return event.movementY;
	    }

	    var screenY = previousScreenY;
	    previousScreenY = event.screenY;

	    if (!isMovementYSet) {
	      isMovementYSet = true;
	      return 0;
	    }

	    return event.type === 'mousemove' ? event.screenY - screenY : 0;
	  }
	});

	/**
	 * @interface PointerEvent
	 * @see http://www.w3.org/TR/pointerevents/
	 */

	var SyntheticPointerEvent = SyntheticMouseEvent.extend({
	  pointerId: null,
	  width: null,
	  height: null,
	  pressure: null,
	  tangentialPressure: null,
	  tiltX: null,
	  tiltY: null,
	  twist: null,
	  pointerType: null,
	  isPrimary: null
	});

	var eventTypes$2 = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
	  },
	  pointerEnter: {
	    registrationName: 'onPointerEnter',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  },
	  pointerLeave: {
	    registrationName: 'onPointerLeave',
	    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
	  }
	};
	var EnterLeaveEventPlugin = {
	  eventTypes: eventTypes$2,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
	    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

	    if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      // If this is an over event with a target, then we've already dispatched
	      // the event in the out event of the other target. If this is replayed,
	      // then it's because we couldn't dispatch against this target previously
	      // so we have to do it now instead.
	      return null;
	    }

	    if (!isOutEvent && !isOverEvent) {
	      // Must not be a mouse or pointer in or out - ignoring.
	      return null;
	    }

	    var win;

	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;

	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;

	    if (isOutEvent) {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? getClosestInstanceFromNode(related) : null;

	      if (to !== null) {
	        var nearestMounted = getNearestMountedFiber(to);

	        if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
	          to = null;
	        }
	      }
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var eventInterface, leaveEventType, enterEventType, eventTypePrefix;

	    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
	      eventInterface = SyntheticMouseEvent;
	      leaveEventType = eventTypes$2.mouseLeave;
	      enterEventType = eventTypes$2.mouseEnter;
	      eventTypePrefix = 'mouse';
	    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
	      eventInterface = SyntheticPointerEvent;
	      leaveEventType = eventTypes$2.pointerLeave;
	      enterEventType = eventTypes$2.pointerEnter;
	      eventTypePrefix = 'pointer';
	    }

	    var fromNode = from == null ? win : getNodeFromInstance$1(from);
	    var toNode = to == null ? win : getNodeFromInstance$1(to);
	    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
	    leave.type = eventTypePrefix + 'leave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
	    enter.type = eventTypePrefix + 'enter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	    accumulateEnterLeaveDispatches(leave, enter, from, to); // If we are not processing the first ancestor, then we
	    // should not process the same nativeEvent again, as we
	    // will have already processed it in the first ancestor.

	    if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
	      return [leave];
	    }

	    return [leave, enter];
	  }
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
	  ;
	}

	var objectIs = typeof Object.is === 'function' ? Object.is : is;

	var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */

	function shallowEqual(objA, objB) {
	  if (objectIs(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  } // Test for A's keys different from B.


	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	var eventTypes$3 = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
	  }
	};
	var activeElement$1 = null;
	var activeElementInst$1 = null;
	var lastSelection = null;
	var mouseDown = false;
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */

	function getSelection$1(node) {
	  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else {
	    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
	    var selection = win.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}
	/**
	 * Get document associated with the event target.
	 *
	 * @param {object} nativeEventTarget
	 * @return {Document}
	 */


	function getEventTargetDocument(eventTarget) {
	  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
	}
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @param {object} nativeEventTarget
	 * @return {?SyntheticEvent}
	 */


	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  var doc = getEventTargetDocument(nativeEventTarget);

	  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
	    return null;
	  } // Only fire when selection has actually changed.


	  var currentSelection = getSelection$1(activeElement$1);

	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement$1;
	    accumulateTwoPhaseDispatches(syntheticEvent);
	    return syntheticEvent;
	  }

	  return null;
	}
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */


	var SelectEventPlugin = {
	  eventTypes: eventTypes$3,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
	    var containerOrDoc = container || getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
	    // not extract events. See #3639.

	    if (!containerOrDoc || !isListeningToAllDependencies('onSelect', containerOrDoc)) {
	      return null;
	    }

	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case TOP_FOCUS:
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement$1 = targetNode;
	          activeElementInst$1 = targetInst;
	          lastSelection = null;
	        }

	        break;

	      case TOP_BLUR:
	        activeElement$1 = null;
	        activeElementInst$1 = null;
	        lastSelection = null;
	        break;
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.

	      case TOP_MOUSE_DOWN:
	        mouseDown = true;
	        break;

	      case TOP_CONTEXT_MENU:
	      case TOP_MOUSE_UP:
	      case TOP_DRAG_END:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.

	      case TOP_SELECTION_CHANGE:
	        if (skipSelectionChangeEvent) {
	          break;
	        }

	      // falls through

	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  }
	};

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */

	var SyntheticAnimationEvent = SyntheticEvent.extend({
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */

	var SyntheticClipboardEvent = SyntheticEvent.extend({
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	});

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticFocusEvent = SyntheticUIEvent.extend({
	  relatedTarget: null
	});

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
	  // report Enter as charCode 10 when ctrl is pressed.


	  if (charCode === 10) {
	    charCode = 13;
	  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.


	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var translateToKey = {
	  '8': 'Backspace',
	  '9': 'Tab',
	  '12': 'Clear',
	  '13': 'Enter',
	  '16': 'Shift',
	  '17': 'Control',
	  '18': 'Alt',
	  '19': 'Pause',
	  '20': 'CapsLock',
	  '27': 'Escape',
	  '32': ' ',
	  '33': 'PageUp',
	  '34': 'PageDown',
	  '35': 'End',
	  '36': 'Home',
	  '37': 'ArrowLeft',
	  '38': 'ArrowUp',
	  '39': 'ArrowRight',
	  '40': 'ArrowDown',
	  '45': 'Insert',
	  '46': 'Delete',
	  '112': 'F1',
	  '113': 'F2',
	  '114': 'F3',
	  '115': 'F4',
	  '116': 'F5',
	  '117': 'F6',
	  '118': 'F7',
	  '119': 'F8',
	  '120': 'F9',
	  '121': 'F10',
	  '122': 'F11',
	  '123': 'F12',
	  '144': 'NumLock',
	  '145': 'ScrollLock',
	  '224': 'Meta'
	};
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */

	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

	    if (key !== 'Unidentified') {
	      return key;
	    }
	  } // Browser does not implement `key`, polyfill as much of it as we can.


	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.

	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }

	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }

	  return '';
	}

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  }
	});

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticDragEvent = SyntheticMouseEvent.extend({
	  dataTransfer: null
	});

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */

	var SyntheticTouchEvent = SyntheticUIEvent.extend({
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	});

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */

	var SyntheticTransitionEvent = SyntheticEvent.extend({
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	});

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var SyntheticWheelEvent = SyntheticMouseEvent.extend({
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	});

	var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
	var SimpleEventPlugin = {
	  // simpleEventPluginEventTypes gets populated from
	  // the DOMEventProperties module.
	  eventTypes: simpleEventPluginEventTypes,
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
	    var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);

	    if (!dispatchConfig) {
	      return null;
	    }

	    var EventConstructor;

	    switch (topLevelType) {
	      case TOP_KEY_PRESS:
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }

	      /* falls through */

	      case TOP_KEY_DOWN:
	      case TOP_KEY_UP:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;

	      case TOP_BLUR:
	      case TOP_FOCUS:
	        EventConstructor = SyntheticFocusEvent;
	        break;

	      case TOP_CLICK:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }

	      /* falls through */

	      case TOP_AUX_CLICK:
	      case TOP_DOUBLE_CLICK:
	      case TOP_MOUSE_DOWN:
	      case TOP_MOUSE_MOVE:
	      case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

	      /* falls through */

	      case TOP_MOUSE_OUT:
	      case TOP_MOUSE_OVER:
	      case TOP_CONTEXT_MENU:
	        EventConstructor = SyntheticMouseEvent;
	        break;

	      case TOP_DRAG:
	      case TOP_DRAG_END:
	      case TOP_DRAG_ENTER:
	      case TOP_DRAG_EXIT:
	      case TOP_DRAG_LEAVE:
	      case TOP_DRAG_OVER:
	      case TOP_DRAG_START:
	      case TOP_DROP:
	        EventConstructor = SyntheticDragEvent;
	        break;

	      case TOP_TOUCH_CANCEL:
	      case TOP_TOUCH_END:
	      case TOP_TOUCH_MOVE:
	      case TOP_TOUCH_START:
	        EventConstructor = SyntheticTouchEvent;
	        break;

	      case TOP_ANIMATION_END:
	      case TOP_ANIMATION_ITERATION:
	      case TOP_ANIMATION_START:
	        EventConstructor = SyntheticAnimationEvent;
	        break;

	      case TOP_TRANSITION_END:
	        EventConstructor = SyntheticTransitionEvent;
	        break;

	      case TOP_SCROLL:
	        EventConstructor = SyntheticUIEvent;
	        break;

	      case TOP_WHEEL:
	        EventConstructor = SyntheticWheelEvent;
	        break;

	      case TOP_COPY:
	      case TOP_CUT:
	      case TOP_PASTE:
	        EventConstructor = SyntheticClipboardEvent;
	        break;

	      case TOP_GOT_POINTER_CAPTURE:
	      case TOP_LOST_POINTER_CAPTURE:
	      case TOP_POINTER_CANCEL:
	      case TOP_POINTER_DOWN:
	      case TOP_POINTER_MOVE:
	      case TOP_POINTER_OUT:
	      case TOP_POINTER_OVER:
	      case TOP_POINTER_UP:
	        EventConstructor = SyntheticPointerEvent;
	        break;

	      default:
	        {
	          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
	            error('SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
	          }
	        } // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0


	        EventConstructor = SyntheticEvent;
	        break;
	    }

	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	};

	/**
	 * Specifies a deterministic ordering of `EventPlugin`s. A convenient way to
	 * reason about plugins, without having to package every one of them. This
	 * is better than having plugins be ordered in the same order that they
	 * are injected because that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */

	var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
	/**
	 * Inject modules for resolving DOM hierarchy and plugin ordering.
	 */

	injectEventPluginOrder(DOMEventPluginOrder);
	setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
	/**
	 * Some important event plugins included by default (without having to require
	 * them).
	 */

	injectEventPluginsByName({
	  SimpleEventPlugin: SimpleEventPlugin,
	  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	  ChangeEventPlugin: ChangeEventPlugin,
	  SelectEventPlugin: SelectEventPlugin,
	  BeforeInputEventPlugin: BeforeInputEventPlugin
	});

	// Prefix measurements so that it's possible to filter them.
	// Longer prefixes are hard to read in DevTools.
	var reactEmoji = "\u269B";
	var warningEmoji = "\u26D4";
	var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
	// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

	var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
	// Reusing `currentFiber` would be confusing for this because user code fiber
	// can change during commit phase too, but we don't need to unwind it (since
	// lifecycles in the commit phase don't resemble a tree).

	var currentPhase = null;
	var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
	// so we will keep track of it, and include it in the report.
	// Track commits caused by cascading updates.

	var isCommitting = false;
	var hasScheduledUpdateInCurrentCommit = false;
	var hasScheduledUpdateInCurrentPhase = false;
	var commitCountInCurrentWorkLoop = 0;
	var effectCountInCurrentCommit = 0;
	// to avoid stretch the commit phase with measurement overhead.

	var labelsInCurrentCommit = new Set();

	var formatMarkName = function (markName) {
	  return reactEmoji + " " + markName;
	};

	var formatLabel = function (label, warning) {
	  var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
	  var suffix = warning ? " Warning: " + warning : '';
	  return "" + prefix + label + suffix;
	};

	var beginMark = function (markName) {
	  performance.mark(formatMarkName(markName));
	};

	var clearMark = function (markName) {
	  performance.clearMarks(formatMarkName(markName));
	};

	var endMark = function (label, markName, warning) {
	  var formattedMarkName = formatMarkName(markName);
	  var formattedLabel = formatLabel(label, warning);

	  try {
	    performance.measure(formattedLabel, formattedMarkName);
	  } catch (err) {} // If previous mark was missing for some reason, this will throw.
	  // This could only happen if React crashed in an unexpected place earlier.
	  // Don't pile on with more errors.
	  // Clear marks immediately to avoid growing buffer.


	  performance.clearMarks(formattedMarkName);
	  performance.clearMeasures(formattedLabel);
	};

	var getFiberMarkName = function (label, debugID) {
	  return label + " (#" + debugID + ")";
	};

	var getFiberLabel = function (componentName, isMounted, phase) {
	  if (phase === null) {
	    // These are composite component total time measurements.
	    return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
	  } else {
	    // Composite component methods.
	    return componentName + "." + phase;
	  }
	};

	var beginFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);

	  if (isCommitting && labelsInCurrentCommit.has(label)) {
	    // During the commit phase, we don't show duplicate labels because
	    // there is a fixed overhead for every measurement, and we don't
	    // want to stretch the commit phase beyond necessary.
	    return false;
	  }

	  labelsInCurrentCommit.add(label);
	  var markName = getFiberMarkName(label, debugID);
	  beginMark(markName);
	  return true;
	};

	var clearFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  clearMark(markName);
	};

	var endFiberMark = function (fiber, phase, warning) {
	  var componentName = getComponentName(fiber.type) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  endMark(label, markName, warning);
	};

	var shouldIgnoreFiber = function (fiber) {
	  // Host components should be skipped in the timeline.
	  // We could check typeof fiber.type, but does this work with RN?
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case Fragment:
	    case ContextProvider:
	    case ContextConsumer:
	    case Mode:
	      return true;

	    default:
	      return false;
	  }
	};

	var clearPendingPhaseMeasurement = function () {
	  if (currentPhase !== null && currentPhaseFiber !== null) {
	    clearFiberMark(currentPhaseFiber, currentPhase);
	  }

	  currentPhaseFiber = null;
	  currentPhase = null;
	  hasScheduledUpdateInCurrentPhase = false;
	};

	var pauseTimers = function () {
	  // Stops all currently active measurements so that they can be resumed
	  // if we continue in a later deferred loop from the same unit of work.
	  var fiber = currentFiber;

	  while (fiber) {
	    if (fiber._debugIsCurrentlyTiming) {
	      endFiberMark(fiber, null, null);
	    }

	    fiber = fiber.return;
	  }
	};

	var resumeTimersRecursively = function (fiber) {
	  if (fiber.return !== null) {
	    resumeTimersRecursively(fiber.return);
	  }

	  if (fiber._debugIsCurrentlyTiming) {
	    beginFiberMark(fiber, null);
	  }
	};

	var resumeTimers = function () {
	  // Resumes all measurements that were active during the last deferred loop.
	  if (currentFiber !== null) {
	    resumeTimersRecursively(currentFiber);
	  }
	};

	function recordEffect() {
	  {
	    effectCountInCurrentCommit++;
	  }
	}
	function recordScheduleUpdate() {
	  {
	    if (isCommitting) {
	      hasScheduledUpdateInCurrentCommit = true;
	    }

	    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
	      hasScheduledUpdateInCurrentPhase = true;
	    }
	  }
	}
	function startWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // If we pause, this is the fiber to unwind from.


	    currentFiber = fiber;

	    if (!beginFiberMark(fiber, null)) {
	      return;
	    }

	    fiber._debugIsCurrentlyTiming = true;
	  }
	}
	function cancelWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // Remember we shouldn't complete measurement for this fiber.
	    // Otherwise flamechart will be deep even for small updates.


	    fiber._debugIsCurrentlyTiming = false;
	    clearFiberMark(fiber, null);
	  }
	}
	function stopWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // If we pause, its parent is the fiber to unwind from.


	    currentFiber = fiber.return;

	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }

	    fiber._debugIsCurrentlyTiming = false;
	    endFiberMark(fiber, null, null);
	  }
	}
	function stopFailedWorkTimer(fiber) {
	  {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    } // If we pause, its parent is the fiber to unwind from.


	    currentFiber = fiber.return;

	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }

	    fiber._debugIsCurrentlyTiming = false;
	    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
	    endFiberMark(fiber, null, warning);
	  }
	}
	function startPhaseTimer(fiber, phase) {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    clearPendingPhaseMeasurement();

	    if (!beginFiberMark(fiber, phase)) {
	      return;
	    }

	    currentPhaseFiber = fiber;
	    currentPhase = phase;
	  }
	}
	function stopPhaseTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    if (currentPhase !== null && currentPhaseFiber !== null) {
	      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
	      endFiberMark(currentPhaseFiber, currentPhase, warning);
	    }

	    currentPhase = null;
	    currentPhaseFiber = null;
	  }
	}
	function startWorkLoopTimer(nextUnitOfWork) {
	  {
	    currentFiber = nextUnitOfWork;

	    if (!supportsUserTiming) {
	      return;
	    }

	    commitCountInCurrentWorkLoop = 0; // This is top level call.
	    // Any other measurements are performed within.

	    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

	    resumeTimers();
	  }
	}
	function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var warning = null;

	    if (interruptedBy !== null) {
	      if (interruptedBy.tag === HostRoot) {
	        warning = 'A top-level update interrupted the previous render';
	      } else {
	        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
	        warning = "An update to " + componentName + " interrupted the previous render";
	      }
	    } else if (commitCountInCurrentWorkLoop > 1) {
	      warning = 'There were cascading updates';
	    }

	    commitCountInCurrentWorkLoop = 0;
	    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

	    pauseTimers();
	    endMark(label, '(React Tree Reconciliation)', warning);
	  }
	}
	function startCommitTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    isCommitting = true;
	    hasScheduledUpdateInCurrentCommit = false;
	    labelsInCurrentCommit.clear();
	    beginMark('(Committing Changes)');
	  }
	}
	function stopCommitTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var warning = null;

	    if (hasScheduledUpdateInCurrentCommit) {
	      warning = 'Lifecycle hook scheduled a cascading update';
	    } else if (commitCountInCurrentWorkLoop > 0) {
	      warning = 'Caused by a cascading update in earlier commit';
	    }

	    hasScheduledUpdateInCurrentCommit = false;
	    commitCountInCurrentWorkLoop++;
	    isCommitting = false;
	    labelsInCurrentCommit.clear();
	    endMark('(Committing Changes)', '(Committing Changes)', warning);
	  }
	}
	function startCommitSnapshotEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Snapshot Effects)');
	  }
	}
	function stopCommitSnapshotEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
	  }
	}
	function startCommitHostEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Host Effects)');
	  }
	}
	function stopCommitHostEffectsTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
	  }
	}
	function startCommitLifeCyclesTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    effectCountInCurrentCommit = 0;
	    beginMark('(Calling Lifecycle Methods)');
	  }
	}
	function stopCommitLifeCyclesTimer() {
	  {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
	  }
	}

	var valueStack = [];
	var fiberStack;

	{
	  fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}

	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      error('Unexpected pop.');
	    }

	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      error('Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];
	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;
	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	var warnedAboutMissingGetChildContext;

	{
	  warnedAboutMissingGetChildContext = {};
	}

	var emptyContextObject = {};

	{
	  Object.freeze(emptyContextObject);
	} // A cursor to the current merged context object on the stack.


	var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

	var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.

	var previousContext = emptyContextObject;

	function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
	  {
	    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
	      // If the fiber is a context provider itself, when we read its context
	      // we may have already pushed its own child context on the stack. A context
	      // provider should not "see" its own child context. Therefore we read the
	      // previous (parent) context instead for a context provider.
	      return previousContext;
	    }

	    return contextStackCursor.current;
	  }
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  {
	    var instance = workInProgress.stateNode;
	    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	  }
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  {
	    var type = workInProgress.type;
	    var contextTypes = type.contextTypes;

	    if (!contextTypes) {
	      return emptyContextObject;
	    } // Avoid recreating masked context unless unmasked context has changed.
	    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	    // This may trigger infinite loops if componentWillReceiveProps calls setState.


	    var instance = workInProgress.stateNode;

	    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	      return instance.__reactInternalMemoizedMaskedChildContext;
	    }

	    var context = {};

	    for (var key in contextTypes) {
	      context[key] = unmaskedContext[key];
	    }

	    {
	      var name = getComponentName(type) || 'Unknown';
	      checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
	    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	    // Context is created before the class component is instantiated so check for instance.


	    if (instance) {
	      cacheContext(workInProgress, unmaskedContext, context);
	    }

	    return context;
	  }
	}

	function hasContextChanged() {
	  {
	    return didPerformWorkStackCursor.current;
	  }
	}

	function isContextProvider(type) {
	  {
	    var childContextTypes = type.childContextTypes;
	    return childContextTypes !== null && childContextTypes !== undefined;
	  }
	}

	function popContext(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function popTopLevelContextObject(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  {
	    if (!(contextStackCursor.current === emptyContextObject)) {
	      {
	        throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    push(contextStackCursor, context, fiber);
	    push(didPerformWorkStackCursor, didChange, fiber);
	  }
	}

	function processChildContext(fiber, type, parentContext) {
	  {
	    var instance = fiber.stateNode;
	    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

	    if (typeof instance.getChildContext !== 'function') {
	      {
	        var componentName = getComponentName(type) || 'Unknown';

	        if (!warnedAboutMissingGetChildContext[componentName]) {
	          warnedAboutMissingGetChildContext[componentName] = true;

	          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	        }
	      }

	      return parentContext;
	    }

	    var childContext;
	    startPhaseTimer(fiber, 'getChildContext');
	    childContext = instance.getChildContext();
	    stopPhaseTimer();

	    for (var contextKey in childContext) {
	      if (!(contextKey in childContextTypes)) {
	        {
	          throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
	        }
	      }
	    }

	    {
	      var name = getComponentName(type) || 'Unknown';
	      checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
	      // somebody calls unstable_renderSubtreeIntoContainer() and we process
	      // context from the parent component instance. The stack will be missing
	      // because it's outside of the reconciliation, and so the pointer has not
	      // been set. This is rare and doesn't matter. We'll also remove that API.
	      getCurrentFiberStackInDev);
	    }

	    return _assign({}, parentContext, {}, childContext);
	  }
	}

	function pushContextProvider(workInProgress) {
	  {
	    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
	    // If the instance does not exist yet, we will push null at first,
	    // and replace it on the stack later when invalidating the context.

	    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
	    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

	    previousContext = contextStackCursor.current;
	    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
	    return true;
	  }
	}

	function invalidateContextProvider(workInProgress, type, didChange) {
	  {
	    var instance = workInProgress.stateNode;

	    if (!instance) {
	      {
	        throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    if (didChange) {
	      // Merge parent and own context.
	      // Skip this if we're not updating due to sCU.
	      // This avoids unnecessarily recomputing memoized values.
	      var mergedContext = processChildContext(workInProgress, type, previousContext);
	      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
	      // It is important to unwind the context in the reverse order.

	      pop(didPerformWorkStackCursor, workInProgress);
	      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

	      push(contextStackCursor, mergedContext, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    } else {
	      pop(didPerformWorkStackCursor, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    }
	  }
	}

	function findCurrentUnmaskedContext(fiber) {
	  {
	    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	    // makes sense elsewhere
	    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
	      {
	        throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    var node = fiber;

	    do {
	      switch (node.tag) {
	        case HostRoot:
	          return node.stateNode.context;

	        case ClassComponent:
	          {
	            var Component = node.type;

	            if (isContextProvider(Component)) {
	              return node.stateNode.__reactInternalMemoizedMergedChildContext;
	            }

	            break;
	          }
	      }

	      node = node.return;
	    } while (node !== null);

	    {
	      {
	        throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }
	  }
	}

	var LegacyRoot = 0;
	var BlockingRoot = 1;
	var ConcurrentRoot = 2;

	var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
	    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
	    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
	    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
	    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
	    Scheduler_now = Scheduler.unstable_now,
	    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
	    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
	    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
	    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
	    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
	    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

	{
	  // Provide explicit error message when production+profiling bundle of e.g.
	  // react-dom is used with production (non-profiling) bundle of
	  // scheduler/tracing
	  if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
	    {
	      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling" );
	    }
	  }
	}

	var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
	// ascending numbers so we can compare them like numbers. They start at 90 to
	// avoid clashing with Scheduler's priorities.

	var ImmediatePriority = 99;
	var UserBlockingPriority$1 = 98;
	var NormalPriority = 97;
	var LowPriority = 96;
	var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

	var NoPriority = 90;
	var shouldYield = Scheduler_shouldYield;
	var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
	Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
	var syncQueue = null;
	var immediateQueueCallbackNode = null;
	var isFlushingSyncQueue = false;
	var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
	// This will be the case for modern browsers that support `performance.now`. In
	// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
	// timestamp. In that case, subtract the module initialization time to simulate
	// the behavior of performance.now and keep our times small enough to fit
	// within 32 bits.
	// TODO: Consider lifting this into Scheduler.

	var now = initialTimeMs < 10000 ? Scheduler_now : function () {
	  return Scheduler_now() - initialTimeMs;
	};
	function getCurrentPriorityLevel() {
	  switch (Scheduler_getCurrentPriorityLevel()) {
	    case Scheduler_ImmediatePriority:
	      return ImmediatePriority;

	    case Scheduler_UserBlockingPriority:
	      return UserBlockingPriority$1;

	    case Scheduler_NormalPriority:
	      return NormalPriority;

	    case Scheduler_LowPriority:
	      return LowPriority;

	    case Scheduler_IdlePriority:
	      return IdlePriority;

	    default:
	      {
	        {
	          throw Error( "Unknown priority level." );
	        }
	      }

	  }
	}

	function reactPriorityToSchedulerPriority(reactPriorityLevel) {
	  switch (reactPriorityLevel) {
	    case ImmediatePriority:
	      return Scheduler_ImmediatePriority;

	    case UserBlockingPriority$1:
	      return Scheduler_UserBlockingPriority;

	    case NormalPriority:
	      return Scheduler_NormalPriority;

	    case LowPriority:
	      return Scheduler_LowPriority;

	    case IdlePriority:
	      return Scheduler_IdlePriority;

	    default:
	      {
	        {
	          throw Error( "Unknown priority level." );
	        }
	      }

	  }
	}

	function runWithPriority$1(reactPriorityLevel, fn) {
	  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
	  return Scheduler_runWithPriority(priorityLevel, fn);
	}
	function scheduleCallback(reactPriorityLevel, callback, options) {
	  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
	  return Scheduler_scheduleCallback(priorityLevel, callback, options);
	}
	function scheduleSyncCallback(callback) {
	  // Push this callback into an internal queue. We'll flush these either in
	  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
	  if (syncQueue === null) {
	    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

	    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
	  } else {
	    // Push onto existing queue. Don't need to schedule a callback because
	    // we already scheduled one when we created the queue.
	    syncQueue.push(callback);
	  }

	  return fakeCallbackNode;
	}
	function cancelCallback(callbackNode) {
	  if (callbackNode !== fakeCallbackNode) {
	    Scheduler_cancelCallback(callbackNode);
	  }
	}
	function flushSyncCallbackQueue() {
	  if (immediateQueueCallbackNode !== null) {
	    var node = immediateQueueCallbackNode;
	    immediateQueueCallbackNode = null;
	    Scheduler_cancelCallback(node);
	  }

	  flushSyncCallbackQueueImpl();
	}

	function flushSyncCallbackQueueImpl() {
	  if (!isFlushingSyncQueue && syncQueue !== null) {
	    // Prevent re-entrancy.
	    isFlushingSyncQueue = true;
	    var i = 0;

	    try {
	      var _isSync = true;
	      var queue = syncQueue;
	      runWithPriority$1(ImmediatePriority, function () {
	        for (; i < queue.length; i++) {
	          var callback = queue[i];

	          do {
	            callback = callback(_isSync);
	          } while (callback !== null);
	        }
	      });
	      syncQueue = null;
	    } catch (error) {
	      // If something throws, leave the remaining callbacks on the queue.
	      if (syncQueue !== null) {
	        syncQueue = syncQueue.slice(i + 1);
	      } // Resume flushing in the next tick


	      Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
	      throw error;
	    } finally {
	      isFlushingSyncQueue = false;
	    }
	  }
	}

	var NoMode = 0;
	var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
	// tag instead

	var BlockingMode = 2;
	var ConcurrentMode = 4;
	var ProfileMode = 8;

	// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
	// Math.pow(2, 30) - 1
	// 0b111111111111111111111111111111
	var MAX_SIGNED_31_BIT_INT = 1073741823;

	var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
	// Never work can be committed in an inconsistent state without tearing the UI.
	// The main example is offscreen content, like a hidden subtree. So one possible
	// name is Offscreen. However, it also includes dehydrated Suspense boundaries,
	// which are inconsistent in the sense that they haven't finished yet, but
	// aren't visibly inconsistent because the server rendered HTML matches what the
	// hydrated tree would look like.

	var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
	// order to be consistent.

	var Idle = 2; // Continuous Hydration is slightly higher than Idle and is used to increase
	// priority of hover targets.

	var ContinuousHydration = 3;
	var Sync = MAX_SIGNED_31_BIT_INT;
	var Batched = Sync - 1;
	var UNIT_SIZE = 10;
	var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

	function msToExpirationTime(ms) {
	  // Always subtract from the offset so that we don't clash with the magic number for NoWork.
	  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
	}
	function expirationTimeToMs(expirationTime) {
	  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
	}

	function ceiling(num, precision) {
	  return ((num / precision | 0) + 1) * precision;
	}

	function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
	  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
	} // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
	// the names to reflect.


	var LOW_PRIORITY_EXPIRATION = 5000;
	var LOW_PRIORITY_BATCH_SIZE = 250;
	function computeAsyncExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
	}
	function computeSuspenseExpiration(currentTime, timeoutMs) {
	  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
	  return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
	} // We intentionally set a higher expiration time for interactive updates in
	// dev than in production.
	//
	// If the main thread is being blocked so long that you hit the expiration,
	// it's a problem that could be solved with better scheduling.
	//
	// People will be more likely to notice this and fix it with the long
	// expiration time in development.
	//
	// In production we opt for better UX at the risk of masking scheduling
	// problems, by expiring fast.

	var HIGH_PRIORITY_EXPIRATION =  500 ;
	var HIGH_PRIORITY_BATCH_SIZE = 100;
	function computeInteractiveExpiration(currentTime) {
	  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
	}
	function inferPriorityFromExpirationTime(currentTime, expirationTime) {
	  if (expirationTime === Sync) {
	    return ImmediatePriority;
	  }

	  if (expirationTime === Never || expirationTime === Idle) {
	    return IdlePriority;
	  }

	  var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

	  if (msUntil <= 0) {
	    return ImmediatePriority;
	  }

	  if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
	    return UserBlockingPriority$1;
	  }

	  if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
	    return NormalPriority;
	  } // TODO: Handle LowPriority
	  // Assume anything lower has idle priority


	  return IdlePriority;
	}

	var ReactStrictModeWarnings = {
	  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
	  flushPendingUnsafeLifecycleWarnings: function () {},
	  recordLegacyContextWarning: function (fiber, instance) {},
	  flushLegacyContextWarning: function () {},
	  discardPendingWarnings: function () {}
	};

	{
	  var findStrictRoot = function (fiber) {
	    var maybeStrictRoot = null;
	    var node = fiber;

	    while (node !== null) {
	      if (node.mode & StrictMode) {
	        maybeStrictRoot = node;
	      }

	      node = node.return;
	    }

	    return maybeStrictRoot;
	  };

	  var setToSortedString = function (set) {
	    var array = [];
	    set.forEach(function (value) {
	      array.push(value);
	    });
	    return array.sort().join(', ');
	  };

	  var pendingComponentWillMountWarnings = [];
	  var pendingUNSAFE_ComponentWillMountWarnings = [];
	  var pendingComponentWillReceivePropsWarnings = [];
	  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	  var pendingComponentWillUpdateWarnings = [];
	  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

	  var didWarnAboutUnsafeLifecycles = new Set();

	  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
	    // Dedup strategy: Warn once per component.
	    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
	      return;
	    }

	    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
	    instance.componentWillMount.__suppressDeprecationWarning !== true) {
	      pendingComponentWillMountWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
	      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	      pendingComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	      pendingComponentWillUpdateWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
	      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	    // We do an initial pass to gather component names
	    var componentWillMountUniqueNames = new Set();

	    if (pendingComponentWillMountWarnings.length > 0) {
	      pendingComponentWillMountWarnings.forEach(function (fiber) {
	        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillMountWarnings = [];
	    }

	    var UNSAFE_componentWillMountUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillMountWarnings = [];
	    }

	    var componentWillReceivePropsUniqueNames = new Set();

	    if (pendingComponentWillReceivePropsWarnings.length > 0) {
	      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillReceivePropsWarnings = [];
	    }

	    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    }

	    var componentWillUpdateUniqueNames = new Set();

	    if (pendingComponentWillUpdateWarnings.length > 0) {
	      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillUpdateWarnings = [];
	    }

	    var UNSAFE_componentWillUpdateUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    } // Finally, we flush all the warnings
	    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


	    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
	      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

	      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
	    }

	    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

	      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
	    }

	    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

	      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
	    }

	    if (componentWillMountUniqueNames.size > 0) {
	      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

	      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
	    }

	    if (componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

	      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
	    }

	    if (componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

	      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
	    }
	  };

	  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

	  var didWarnAboutLegacyContext = new Set();

	  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);

	    if (strictRoot === null) {
	      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

	      return;
	    } // Dedup strategy: Warn once per component.


	    if (didWarnAboutLegacyContext.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

	    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
	      if (warningsForRoot === undefined) {
	        warningsForRoot = [];
	        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
	      }

	      warningsForRoot.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
	      if (fiberArray.length === 0) {
	        return;
	      }

	      var firstFiber = fiberArray[0];
	      var uniqueNames = new Set();
	      fiberArray.forEach(function (fiber) {
	        uniqueNames.add(getComponentName(fiber.type) || 'Component');
	        didWarnAboutLegacyContext.add(fiber.type);
	      });
	      var sortedNames = setToSortedString(uniqueNames);
	      var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);

	      error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, firstComponentStack);
	    });
	  };

	  ReactStrictModeWarnings.discardPendingWarnings = function () {
	    pendingComponentWillMountWarnings = [];
	    pendingUNSAFE_ComponentWillMountWarnings = [];
	    pendingComponentWillReceivePropsWarnings = [];
	    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    pendingComponentWillUpdateWarnings = [];
	    pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    pendingLegacyContextWarning = new Map();
	  };
	}

	var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

	var failedBoundaries = null;
	var setRefreshHandler = function (handler) {
	  {
	    resolveFamily = handler;
	  }
	};
	function resolveFunctionForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function resolveClassForHotReloading(type) {
	  // No implementation differences.
	  return resolveFunctionForHotReloading(type);
	}
	function resolveForwardRefForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      // Check if we're dealing with a real forwardRef. Don't want to crash early.
	      if (type !== null && type !== undefined && typeof type.render === 'function') {
	        // ForwardRef is special because its resolved .type is an object,
	        // but it's possible that we only have its inner render function in the map.
	        // If that inner render function is different, we'll build a new forwardRef type.
	        var currentRender = resolveFunctionForHotReloading(type.render);

	        if (type.render !== currentRender) {
	          var syntheticType = {
	            $$typeof: REACT_FORWARD_REF_TYPE,
	            render: currentRender
	          };

	          if (type.displayName !== undefined) {
	            syntheticType.displayName = type.displayName;
	          }

	          return syntheticType;
	        }
	      }

	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function isCompatibleFamilyForHotReloading(fiber, element) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return false;
	    }

	    var prevType = fiber.elementType;
	    var nextType = element.type; // If we got here, we know types aren't === equal.

	    var needsCompareFamilies = false;
	    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

	    switch (fiber.tag) {
	      case ClassComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case FunctionComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            // We don't know the inner type yet.
	            // We're going to assume that the lazy inner type is stable,
	            // and so it is sufficient to avoid reconciling it away.
	            // We're not going to unwrap or actually use the new lazy type.
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case ForwardRef:
	        {
	          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ($$typeofNextType === REACT_MEMO_TYPE) {
	            // TODO: if it was but can no longer be simple,
	            // we shouldn't set this.
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      default:
	        return false;
	    } // Check if both types have a family and it's the same one.


	    if (needsCompareFamilies) {
	      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
	      // This means both of them need to be registered to preserve state.
	      // If we unwrapped and compared the inner types for wrappers instead,
	      // then we would risk falsely saying two separate memo(Foo)
	      // calls are equivalent because they wrap the same Foo function.
	      var prevFamily = resolveFamily(prevType);

	      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
	        return true;
	      }
	    }

	    return false;
	  }
	}
	function markFailedErrorBoundaryForHotReloading(fiber) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    if (typeof WeakSet !== 'function') {
	      return;
	    }

	    if (failedBoundaries === null) {
	      failedBoundaries = new WeakSet();
	    }

	    failedBoundaries.add(fiber);
	  }
	}
	var scheduleRefresh = function (root, update) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    var staleFamilies = update.staleFamilies,
	        updatedFamilies = update.updatedFamilies;
	    flushPassiveEffects();
	    flushSync(function () {
	      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
	    });
	  }
	};
	var scheduleRoot = function (root, element) {
	  {
	    if (root.context !== emptyContextObject) {
	      // Super edge case: root has a legacy _renderSubtree context
	      // but we don't know the parentComponent so we can't pass it.
	      // Just ignore. We'll delete this with _renderSubtree code path later.
	      return;
	    }

	    flushPassiveEffects();
	    syncUpdates(function () {
	      updateContainer(element, root, null, null);
	    });
	  }
	};

	function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
	  {
	    var alternate = fiber.alternate,
	        child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    if (resolveFamily === null) {
	      throw new Error('Expected resolveFamily to be set during hot reload.');
	    }

	    var needsRender = false;
	    var needsRemount = false;

	    if (candidateType !== null) {
	      var family = resolveFamily(candidateType);

	      if (family !== undefined) {
	        if (staleFamilies.has(family)) {
	          needsRemount = true;
	        } else if (updatedFamilies.has(family)) {
	          if (tag === ClassComponent) {
	            needsRemount = true;
	          } else {
	            needsRender = true;
	          }
	        }
	      }
	    }

	    if (failedBoundaries !== null) {
	      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
	        needsRemount = true;
	      }
	    }

	    if (needsRemount) {
	      fiber._debugNeedsRemount = true;
	    }

	    if (needsRemount || needsRender) {
	      scheduleWork(fiber, Sync);
	    }

	    if (child !== null && !needsRemount) {
	      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
	    }

	    if (sibling !== null) {
	      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
	    }
	  }
	}

	var findHostInstancesForRefresh = function (root, families) {
	  {
	    var hostInstances = new Set();
	    var types = new Set(families.map(function (family) {
	      return family.current;
	    }));
	    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
	    return hostInstances;
	  }
	};

	function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
	  {
	    var child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    var didMatch = false;

	    if (candidateType !== null) {
	      if (types.has(candidateType)) {
	        didMatch = true;
	      }
	    }

	    if (didMatch) {
	      // We have a match. This only drills down to the closest host components.
	      // There's no need to search deeper because for the purpose of giving
	      // visual feedback, "flashing" outermost parent rectangles is sufficient.
	      findHostInstancesForFiberShallowly(fiber, hostInstances);
	    } else {
	      // If there's no match, maybe there will be one further down in the child tree.
	      if (child !== null) {
	        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
	      }
	    }

	    if (sibling !== null) {
	      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
	    }
	  }
	}

	function findHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

	    if (foundHostInstances) {
	      return;
	    } // If we didn't find any host children, fallback to closest host parent.


	    var node = fiber;

	    while (true) {
	      switch (node.tag) {
	        case HostComponent:
	          hostInstances.add(node.stateNode);
	          return;

	        case HostPortal:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;

	        case HostRoot:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;
	      }

	      if (node.return === null) {
	        throw new Error('Expected to reach root first.');
	      }

	      node = node.return;
	    }
	  }
	}

	function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var node = fiber;
	    var foundHostInstances = false;

	    while (true) {
	      if (node.tag === HostComponent) {
	        // We got a match.
	        foundHostInstances = true;
	        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === fiber) {
	        return foundHostInstances;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === fiber) {
	          return foundHostInstances;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }

	  return false;
	}

	function resolveDefaultProps(Component, baseProps) {
	  if (Component && Component.defaultProps) {
	    // Resolve default props. Taken from ReactElement
	    var props = _assign({}, baseProps);

	    var defaultProps = Component.defaultProps;

	    for (var propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }

	    return props;
	  }

	  return baseProps;
	}
	function readLazyComponentType(lazyComponent) {
	  initializeLazyComponentType(lazyComponent);

	  if (lazyComponent._status !== Resolved) {
	    throw lazyComponent._result;
	  }

	  return lazyComponent._result;
	}

	var valueCursor = createCursor(null);
	var rendererSigil;

	{
	  // Use this to detect multiple renderers using the same context
	  rendererSigil = {};
	}

	var currentlyRenderingFiber = null;
	var lastContextDependency = null;
	var lastContextWithAllBitsObserved = null;
	var isDisallowedContextReadInDEV = false;
	function resetContextDependencies() {
	  // This is called right before React yields execution, to ensure `readContext`
	  // cannot be called outside the render phase.
	  currentlyRenderingFiber = null;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;

	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function enterDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = true;
	  }
	}
	function exitDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function pushProvider(providerFiber, nextValue) {
	  var context = providerFiber.type._context;

	  {
	    push(valueCursor, context._currentValue, providerFiber);
	    context._currentValue = nextValue;

	    {
	      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
	        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
	      }

	      context._currentRenderer = rendererSigil;
	    }
	  }
	}
	function popProvider(providerFiber) {
	  var currentValue = valueCursor.current;
	  pop(valueCursor, providerFiber);
	  var context = providerFiber.type._context;

	  {
	    context._currentValue = currentValue;
	  }
	}
	function calculateChangedBits(context, newValue, oldValue) {
	  if (objectIs(oldValue, newValue)) {
	    // No change
	    return 0;
	  } else {
	    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

	    {
	      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
	        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
	      }
	    }

	    return changedBits | 0;
	  }
	}
	function scheduleWorkOnParentPath(parent, renderExpirationTime) {
	  // Update the child expiration time of all the ancestors, including
	  // the alternates.
	  var node = parent;

	  while (node !== null) {
	    var alternate = node.alternate;

	    if (node.childExpirationTime < renderExpirationTime) {
	      node.childExpirationTime = renderExpirationTime;

	      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	        alternate.childExpirationTime = renderExpirationTime;
	      }
	    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
	      alternate.childExpirationTime = renderExpirationTime;
	    } else {
	      // Neither alternate was updated, which means the rest of the
	      // ancestor path already has sufficient priority.
	      break;
	    }

	    node = node.return;
	  }
	}
	function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
	  var fiber = workInProgress.child;

	  if (fiber !== null) {
	    // Set the return pointer of the child to the work-in-progress fiber.
	    fiber.return = workInProgress;
	  }

	  while (fiber !== null) {
	    var nextFiber = void 0; // Visit this fiber.

	    var list = fiber.dependencies;

	    if (list !== null) {
	      nextFiber = fiber.child;
	      var dependency = list.firstContext;

	      while (dependency !== null) {
	        // Check if the context matches.
	        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
	          // Match! Schedule an update on this fiber.
	          if (fiber.tag === ClassComponent) {
	            // Schedule a force update on the work-in-progress.
	            var update = createUpdate(renderExpirationTime, null);
	            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
	            // update to the current fiber, too, which means it will persist even if
	            // this render is thrown away. Since it's a race condition, not sure it's
	            // worth fixing.

	            enqueueUpdate(fiber, update);
	          }

	          if (fiber.expirationTime < renderExpirationTime) {
	            fiber.expirationTime = renderExpirationTime;
	          }

	          var alternate = fiber.alternate;

	          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
	            alternate.expirationTime = renderExpirationTime;
	          }

	          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

	          if (list.expirationTime < renderExpirationTime) {
	            list.expirationTime = renderExpirationTime;
	          } // Since we already found a match, we can stop traversing the
	          // dependency list.


	          break;
	        }

	        dependency = dependency.next;
	      }
	    } else if (fiber.tag === ContextProvider) {
	      // Don't scan deeper if this is a matching provider
	      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
	    } else {
	      // Traverse down.
	      nextFiber = fiber.child;
	    }

	    if (nextFiber !== null) {
	      // Set the return pointer of the child to the work-in-progress fiber.
	      nextFiber.return = fiber;
	    } else {
	      // No child. Traverse to next sibling.
	      nextFiber = fiber;

	      while (nextFiber !== null) {
	        if (nextFiber === workInProgress) {
	          // We're back to the root of this subtree. Exit.
	          nextFiber = null;
	          break;
	        }

	        var sibling = nextFiber.sibling;

	        if (sibling !== null) {
	          // Set the return pointer of the sibling to the work-in-progress fiber.
	          sibling.return = nextFiber.return;
	          nextFiber = sibling;
	          break;
	        } // No more siblings. Traverse up.


	        nextFiber = nextFiber.return;
	      }
	    }

	    fiber = nextFiber;
	  }
	}
	function prepareToReadContext(workInProgress, renderExpirationTime) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  lastContextWithAllBitsObserved = null;
	  var dependencies = workInProgress.dependencies;

	  if (dependencies !== null) {
	    var firstContext = dependencies.firstContext;

	    if (firstContext !== null) {
	      if (dependencies.expirationTime >= renderExpirationTime) {
	        // Context list has a pending update. Mark that this fiber performed work.
	        markWorkInProgressReceivedUpdate();
	      } // Reset the work-in-progress list


	      dependencies.firstContext = null;
	    }
	  }
	}
	function readContext(context, observedBits) {
	  {
	    // This warning would fire if you read context inside a Hook like useMemo.
	    // Unlike the class check below, it's not enforced in production for perf.
	    if (isDisallowedContextReadInDEV) {
	      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	    }
	  }

	  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
	    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

	    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
	      // Observe all updates.
	      lastContextWithAllBitsObserved = context;
	      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
	    } else {
	      resolvedObservedBits = observedBits;
	    }

	    var contextItem = {
	      context: context,
	      observedBits: resolvedObservedBits,
	      next: null
	    };

	    if (lastContextDependency === null) {
	      if (!(currentlyRenderingFiber !== null)) {
	        {
	          throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
	        }
	      } // This is the first dependency for this component. Create a new list.


	      lastContextDependency = contextItem;
	      currentlyRenderingFiber.dependencies = {
	        expirationTime: NoWork,
	        firstContext: contextItem,
	        responders: null
	      };
	    } else {
	      // Append a new context item.
	      lastContextDependency = lastContextDependency.next = contextItem;
	    }
	  }

	  return  context._currentValue ;
	}

	var UpdateState = 0;
	var ReplaceState = 1;
	var ForceUpdate = 2;
	var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.

	var hasForceUpdate = false;
	var didWarnUpdateInsideUpdate;
	var currentlyProcessingQueue;

	{
	  didWarnUpdateInsideUpdate = false;
	  currentlyProcessingQueue = null;
	}

	function initializeUpdateQueue(fiber) {
	  var queue = {
	    baseState: fiber.memoizedState,
	    baseQueue: null,
	    shared: {
	      pending: null
	    },
	    effects: null
	  };
	  fiber.updateQueue = queue;
	}
	function cloneUpdateQueue(current, workInProgress) {
	  // Clone the update queue from current. Unless it's already a clone.
	  var queue = workInProgress.updateQueue;
	  var currentQueue = current.updateQueue;

	  if (queue === currentQueue) {
	    var clone = {
	      baseState: currentQueue.baseState,
	      baseQueue: currentQueue.baseQueue,
	      shared: currentQueue.shared,
	      effects: currentQueue.effects
	    };
	    workInProgress.updateQueue = clone;
	  }
	}
	function createUpdate(expirationTime, suspenseConfig) {
	  var update = {
	    expirationTime: expirationTime,
	    suspenseConfig: suspenseConfig,
	    tag: UpdateState,
	    payload: null,
	    callback: null,
	    next: null
	  };
	  update.next = update;

	  {
	    update.priority = getCurrentPriorityLevel();
	  }

	  return update;
	}
	function enqueueUpdate(fiber, update) {
	  var updateQueue = fiber.updateQueue;

	  if (updateQueue === null) {
	    // Only occurs if the fiber has been unmounted.
	    return;
	  }

	  var sharedQueue = updateQueue.shared;
	  var pending = sharedQueue.pending;

	  if (pending === null) {
	    // This is the first update. Create a circular list.
	    update.next = update;
	  } else {
	    update.next = pending.next;
	    pending.next = update;
	  }

	  sharedQueue.pending = update;

	  {
	    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
	      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

	      didWarnUpdateInsideUpdate = true;
	    }
	  }
	}
	function enqueueCapturedUpdate(workInProgress, update) {
	  var current = workInProgress.alternate;

	  if (current !== null) {
	    // Ensure the work-in-progress queue is a clone
	    cloneUpdateQueue(current, workInProgress);
	  } // Captured updates go only on the work-in-progress queue.


	  var queue = workInProgress.updateQueue; // Append the update to the end of the list.

	  var last = queue.baseQueue;

	  if (last === null) {
	    queue.baseQueue = update.next = update;
	    update.next = update;
	  } else {
	    update.next = last.next;
	    last.next = update;
	  }
	}

	function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
	  switch (update.tag) {
	    case ReplaceState:
	      {
	        var payload = update.payload;

	        if (typeof payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();

	            if ( workInProgress.mode & StrictMode) {
	              payload.call(instance, prevState, nextProps);
	            }
	          }

	          var nextState = payload.call(instance, prevState, nextProps);

	          {
	            exitDisallowedContextReadInDEV();
	          }

	          return nextState;
	        } // State object


	        return payload;
	      }

	    case CaptureUpdate:
	      {
	        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
	      }
	    // Intentional fallthrough

	    case UpdateState:
	      {
	        var _payload = update.payload;
	        var partialState;

	        if (typeof _payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();

	            if ( workInProgress.mode & StrictMode) {
	              _payload.call(instance, prevState, nextProps);
	            }
	          }

	          partialState = _payload.call(instance, prevState, nextProps);

	          {
	            exitDisallowedContextReadInDEV();
	          }
	        } else {
	          // Partial state object
	          partialState = _payload;
	        }

	        if (partialState === null || partialState === undefined) {
	          // Null and undefined are treated as no-ops.
	          return prevState;
	        } // Merge the partial state and the previous state.


	        return _assign({}, prevState, partialState);
	      }

	    case ForceUpdate:
	      {
	        hasForceUpdate = true;
	        return prevState;
	      }
	  }

	  return prevState;
	}

	function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
	  // This is always non-null on a ClassComponent or HostRoot
	  var queue = workInProgress.updateQueue;
	  hasForceUpdate = false;

	  {
	    currentlyProcessingQueue = queue.shared;
	  } // The last rebase update that is NOT part of the base state.


	  var baseQueue = queue.baseQueue; // The last pending update that hasn't been processed yet.

	  var pendingQueue = queue.shared.pending;

	  if (pendingQueue !== null) {
	    // We have new updates that haven't been processed yet.
	    // We'll add them to the base queue.
	    if (baseQueue !== null) {
	      // Merge the pending queue and the base queue.
	      var baseFirst = baseQueue.next;
	      var pendingFirst = pendingQueue.next;
	      baseQueue.next = pendingFirst;
	      pendingQueue.next = baseFirst;
	    }

	    baseQueue = pendingQueue;
	    queue.shared.pending = null; // TODO: Pass `current` as argument

	    var current = workInProgress.alternate;

	    if (current !== null) {
	      var currentQueue = current.updateQueue;

	      if (currentQueue !== null) {
	        currentQueue.baseQueue = pendingQueue;
	      }
	    }
	  } // These values may change as we process the queue.


	  if (baseQueue !== null) {
	    var first = baseQueue.next; // Iterate through the list of updates to compute the result.

	    var newState = queue.baseState;
	    var newExpirationTime = NoWork;
	    var newBaseState = null;
	    var newBaseQueueFirst = null;
	    var newBaseQueueLast = null;

	    if (first !== null) {
	      var update = first;

	      do {
	        var updateExpirationTime = update.expirationTime;

	        if (updateExpirationTime < renderExpirationTime) {
	          // Priority is insufficient. Skip this update. If this is the first
	          // skipped update, the previous update/state is the new base
	          // update/state.
	          var clone = {
	            expirationTime: update.expirationTime,
	            suspenseConfig: update.suspenseConfig,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };

	          if (newBaseQueueLast === null) {
	            newBaseQueueFirst = newBaseQueueLast = clone;
	            newBaseState = newState;
	          } else {
	            newBaseQueueLast = newBaseQueueLast.next = clone;
	          } // Update the remaining priority in the queue.


	          if (updateExpirationTime > newExpirationTime) {
	            newExpirationTime = updateExpirationTime;
	          }
	        } else {
	          // This update does have sufficient priority.
	          if (newBaseQueueLast !== null) {
	            var _clone = {
	              expirationTime: Sync,
	              // This update is going to be committed so we never want uncommit it.
	              suspenseConfig: update.suspenseConfig,
	              tag: update.tag,
	              payload: update.payload,
	              callback: update.callback,
	              next: null
	            };
	            newBaseQueueLast = newBaseQueueLast.next = _clone;
	          } // Mark the event time of this update as relevant to this render pass.
	          // TODO: This should ideally use the true event time of this update rather than
	          // its priority which is a derived and not reverseable value.
	          // TODO: We should skip this update if it was already committed but currently
	          // we have no way of detecting the difference between a committed and suspended
	          // update here.


	          markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

	          newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
	          var callback = update.callback;

	          if (callback !== null) {
	            workInProgress.effectTag |= Callback;
	            var effects = queue.effects;

	            if (effects === null) {
	              queue.effects = [update];
	            } else {
	              effects.push(update);
	            }
	          }
	        }

	        update = update.next;

	        if (update === null || update === first) {
	          pendingQueue = queue.shared.pending;

	          if (pendingQueue === null) {
	            break;
	          } else {
	            // An update was scheduled from inside a reducer. Add the new
	            // pending updates to the end of the list and keep processing.
	            update = baseQueue.next = pendingQueue.next;
	            pendingQueue.next = first;
	            queue.baseQueue = baseQueue = pendingQueue;
	            queue.shared.pending = null;
	          }
	        }
	      } while (true);
	    }

	    if (newBaseQueueLast === null) {
	      newBaseState = newState;
	    } else {
	      newBaseQueueLast.next = newBaseQueueFirst;
	    }

	    queue.baseState = newBaseState;
	    queue.baseQueue = newBaseQueueLast; // Set the remaining expiration time to be whatever is remaining in the queue.
	    // This should be fine because the only two other things that contribute to
	    // expiration time are props and context. We're already in the middle of the
	    // begin phase by the time we start processing the queue, so we've already
	    // dealt with the props. Context in components that specify
	    // shouldComponentUpdate is tricky; but we'll have to account for
	    // that regardless.

	    markUnprocessedUpdateTime(newExpirationTime);
	    workInProgress.expirationTime = newExpirationTime;
	    workInProgress.memoizedState = newState;
	  }

	  {
	    currentlyProcessingQueue = null;
	  }
	}

	function callCallback(callback, context) {
	  if (!(typeof callback === 'function')) {
	    {
	      throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
	    }
	  }

	  callback.call(context);
	}

	function resetHasForceUpdateBeforeProcessing() {
	  hasForceUpdate = false;
	}
	function checkHasForceUpdateAfterProcessing() {
	  return hasForceUpdate;
	}
	function commitUpdateQueue(finishedWork, finishedQueue, instance) {
	  // Commit the effects
	  var effects = finishedQueue.effects;
	  finishedQueue.effects = null;

	  if (effects !== null) {
	    for (var i = 0; i < effects.length; i++) {
	      var effect = effects[i];
	      var callback = effect.callback;

	      if (callback !== null) {
	        effect.callback = null;
	        callCallback(callback, instance);
	      }
	    }
	  }
	}

	var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
	function requestCurrentSuspenseConfig() {
	  return ReactCurrentBatchConfig.suspense;
	}

	var fakeInternalInstance = {};
	var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
	// We'll use it to determine whether we need to initialize legacy refs.

	var emptyRefsObject = new React.Component().refs;
	var didWarnAboutStateAssignmentForComponent;
	var didWarnAboutUninitializedState;
	var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
	var didWarnAboutLegacyLifecyclesAndDerivedState;
	var didWarnAboutUndefinedDerivedState;
	var warnOnUndefinedDerivedState;
	var warnOnInvalidCallback;
	var didWarnAboutDirectlyAssigningPropsToState;
	var didWarnAboutContextTypeAndContextTypes;
	var didWarnAboutInvalidateContextType;

	{
	  didWarnAboutStateAssignmentForComponent = new Set();
	  didWarnAboutUninitializedState = new Set();
	  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	  didWarnAboutDirectlyAssigningPropsToState = new Set();
	  didWarnAboutUndefinedDerivedState = new Set();
	  didWarnAboutContextTypeAndContextTypes = new Set();
	  didWarnAboutInvalidateContextType = new Set();
	  var didWarnOnInvalidCallback = new Set();

	  warnOnInvalidCallback = function (callback, callerName) {
	    if (callback === null || typeof callback === 'function') {
	      return;
	    }

	    var key = callerName + "_" + callback;

	    if (!didWarnOnInvalidCallback.has(key)) {
	      didWarnOnInvalidCallback.add(key);

	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  };

	  warnOnUndefinedDerivedState = function (type, partialState) {
	    if (partialState === undefined) {
	      var componentName = getComponentName(type) || 'Component';

	      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
	        didWarnAboutUndefinedDerivedState.add(componentName);

	        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
	      }
	    }
	  }; // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.


	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      {
	        {
	          throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
	        }
	      }
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
	  var prevState = workInProgress.memoizedState;

	  {
	    if ( workInProgress.mode & StrictMode) {
	      // Invoke the function an extra time to help detect side-effects.
	      getDerivedStateFromProps(nextProps, prevState);
	    }
	  }

	  var partialState = getDerivedStateFromProps(nextProps, prevState);

	  {
	    warnOnUndefinedDerivedState(ctor, partialState);
	  } // Merge the partial state and the previous state.


	  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
	  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
	  // base state.

	  if (workInProgress.expirationTime === NoWork) {
	    // Queue is always non-null for classes
	    var updateQueue = workInProgress.updateQueue;
	    updateQueue.baseState = memoizedState;
	  }
	}
	var classComponentUpdater = {
	  isMounted: isMounted,
	  enqueueSetState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var update = createUpdate(expirationTime, suspenseConfig);
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'setState');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var update = createUpdate(expirationTime, suspenseConfig);
	    update.tag = ReplaceState;
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'replaceState');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    var fiber = get(inst);
	    var currentTime = requestCurrentTimeForUpdate();
	    var suspenseConfig = requestCurrentSuspenseConfig();
	    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	    var update = createUpdate(expirationTime, suspenseConfig);
	    update.tag = ForceUpdate;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'forceUpdate');
	      }

	      update.callback = callback;
	    }

	    enqueueUpdate(fiber, update);
	    scheduleWork(fiber, expirationTime);
	  }
	};

	function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
	  var instance = workInProgress.stateNode;

	  if (typeof instance.shouldComponentUpdate === 'function') {
	    {
	      if ( workInProgress.mode & StrictMode) {
	        // Invoke the function an extra time to help detect side-effects.
	        instance.shouldComponentUpdate(newProps, newState, nextContext);
	      }
	    }

	    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
	    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
	    stopPhaseTimer();

	    {
	      if (shouldUpdate === undefined) {
	        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
	      }
	    }

	    return shouldUpdate;
	  }

	  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
	    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	  }

	  return true;
	}

	function checkClassInstance(workInProgress, ctor, newProps) {
	  var instance = workInProgress.stateNode;

	  {
	    var name = getComponentName(ctor) || 'Component';
	    var renderPresent = instance.render;

	    if (!renderPresent) {
	      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	      } else {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	      }
	    }

	    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
	      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
	    }

	    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
	    }

	    if (instance.propTypes) {
	      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
	    }

	    if (instance.contextType) {
	      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
	    }

	    {
	      if (instance.contextTypes) {
	        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
	      }

	      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
	        didWarnAboutContextTypeAndContextTypes.add(ctor);

	        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
	      }
	    }

	    if (typeof instance.componentShouldUpdate === 'function') {
	      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
	    }

	    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
	    }

	    if (typeof instance.componentDidUnmount === 'function') {
	      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
	    }

	    if (typeof instance.componentDidReceiveProps === 'function') {
	      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
	    }

	    if (typeof instance.componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
	    }

	    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
	    }

	    var hasMutatedProps = instance.props !== newProps;

	    if (instance.props !== undefined && hasMutatedProps) {
	      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
	    }

	    if (instance.defaultProps) {
	      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
	      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

	      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
	    }

	    if (typeof instance.getDerivedStateFromProps === 'function') {
	      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof instance.getDerivedStateFromError === 'function') {
	      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
	      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
	    }

	    var _state = instance.state;

	    if (_state && (typeof _state !== 'object' || isArray(_state))) {
	      error('%s.state: must be set to an object or null', name);
	    }

	    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
	      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
	    }
	  }
	}

	function adoptClassInstance(workInProgress, instance) {
	  instance.updater = classComponentUpdater;
	  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

	  set(instance, workInProgress);

	  {
	    instance._reactInternalInstance = fakeInternalInstance;
	  }
	}

	function constructClassInstance(workInProgress, ctor, props) {
	  var isLegacyContextConsumer = false;
	  var unmaskedContext = emptyContextObject;
	  var context = emptyContextObject;
	  var contextType = ctor.contextType;

	  {
	    if ('contextType' in ctor) {
	      var isValid = // Allow null for conditional declaration
	      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

	      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
	        didWarnAboutInvalidateContextType.add(ctor);
	        var addendum = '';

	        if (contextType === undefined) {
	          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
	        } else if (typeof contextType !== 'object') {
	          addendum = ' However, it is set to a ' + typeof contextType + '.';
	        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
	          addendum = ' Did you accidentally pass the Context.Provider instead?';
	        } else if (contextType._context !== undefined) {
	          // <Context.Consumer>
	          addendum = ' Did you accidentally pass the Context.Consumer instead?';
	        } else {
	          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
	        }

	        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
	      }
	    }
	  }

	  if (typeof contextType === 'object' && contextType !== null) {
	    context = readContext(contextType);
	  } else {
	    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    var contextTypes = ctor.contextTypes;
	    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
	    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
	  } // Instantiate twice to help detect side-effects.


	  {
	    if ( workInProgress.mode & StrictMode) {
	      new ctor(props, context); // eslint-disable-line no-new
	    }
	  }

	  var instance = new ctor(props, context);
	  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
	  adoptClassInstance(workInProgress, instance);

	  {
	    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
	      var componentName = getComponentName(ctor) || 'Component';

	      if (!didWarnAboutUninitializedState.has(componentName)) {
	        didWarnAboutUninitializedState.add(componentName);

	        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
	      }
	    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
	    // Warn about these lifecycles if they are present.
	    // Don't warn about react-lifecycles-compat polyfilled methods though.


	    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
	      var foundWillMountName = null;
	      var foundWillReceivePropsName = null;
	      var foundWillUpdateName = null;

	      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	        foundWillMountName = 'componentWillMount';
	      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        foundWillMountName = 'UNSAFE_componentWillMount';
	      }

	      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	        foundWillReceivePropsName = 'componentWillReceiveProps';
	      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	      }

	      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	        foundWillUpdateName = 'componentWillUpdate';
	      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	      }

	      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
	        var _componentName = getComponentName(ctor) || 'Component';

	        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

	        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
	          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

	          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
	        }
	      }
	    }
	  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // ReactFiberContext usually updates this cache but can't for newly-created instances.


	  if (isLegacyContextConsumer) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return instance;
	}

	function callComponentWillMount(workInProgress, instance) {
	  startPhaseTimer(workInProgress, 'componentWillMount');
	  var oldState = instance.state;

	  if (typeof instance.componentWillMount === 'function') {
	    instance.componentWillMount();
	  }

	  if (typeof instance.UNSAFE_componentWillMount === 'function') {
	    instance.UNSAFE_componentWillMount();
	  }

	  stopPhaseTimer();

	  if (oldState !== instance.state) {
	    {
	      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
	  var oldState = instance.state;
	  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

	  if (typeof instance.componentWillReceiveProps === 'function') {
	    instance.componentWillReceiveProps(newProps, nextContext);
	  }

	  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  }

	  stopPhaseTimer();

	  if (instance.state !== oldState) {
	    {
	      var componentName = getComponentName(workInProgress.type) || 'Component';

	      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
	        didWarnAboutStateAssignmentForComponent.add(componentName);

	        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	      }
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	} // Invokes the mount life-cycles on a previously never rendered instance.


	function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  {
	    checkClassInstance(workInProgress, ctor, newProps);
	  }

	  var instance = workInProgress.stateNode;
	  instance.props = newProps;
	  instance.state = workInProgress.memoizedState;
	  instance.refs = emptyRefsObject;
	  initializeUpdateQueue(workInProgress);
	  var contextType = ctor.contextType;

	  if (typeof contextType === 'object' && contextType !== null) {
	    instance.context = readContext(contextType);
	  } else {
	    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  {
	    if (instance.state === newProps) {
	      var componentName = getComponentName(ctor) || 'Component';

	      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
	        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

	        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
	    }

	    {
	      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
	    }
	  }

	  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
	  instance.state = workInProgress.memoizedState;
	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    instance.state = workInProgress.memoizedState;
	  } // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.


	  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
	    // process them now.

	    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
	    instance.state = workInProgress.memoizedState;
	  }

	  if (typeof instance.componentDidMount === 'function') {
	    workInProgress.effectTag |= Update;
	  }
	}

	function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = oldProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
	  newState = workInProgress.memoizedState;

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillMount');

	      if (typeof instance.componentWillMount === 'function') {
	        instance.componentWillMount();
	      }

	      if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        instance.UNSAFE_componentWillMount();
	      }

	      stopPhaseTimer();
	    }

	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	} // Invokes the update life-cycles and returns false if it shouldn't rerender.


	function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
	  var instance = workInProgress.stateNode;
	  cloneUpdateQueue(current, workInProgress);
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
	  newState = workInProgress.memoizedState;

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
	      startPhaseTimer(workInProgress, 'componentWillUpdate');

	      if (typeof instance.componentWillUpdate === 'function') {
	        instance.componentWillUpdate(newProps, newState, nextContext);
	      }

	      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
	      }

	      stopPhaseTimer();
	    }

	    if (typeof instance.componentDidUpdate === 'function') {
	      workInProgress.effectTag |= Update;
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      workInProgress.effectTag |= Snapshot;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.effectTag |= Snapshot;
	      }
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized props/state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	}

	var didWarnAboutMaps;
	var didWarnAboutGenerators;
	var didWarnAboutStringRefs;
	var ownerHasKeyUseWarning;
	var ownerHasFunctionTypeWarning;

	var warnForMissingKey = function (child) {};

	{
	  didWarnAboutMaps = false;
	  didWarnAboutGenerators = false;
	  didWarnAboutStringRefs = {};
	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */

	  ownerHasKeyUseWarning = {};
	  ownerHasFunctionTypeWarning = {};

	  warnForMissingKey = function (child) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }

	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }

	    if (!(typeof child._store === 'object')) {
	      {
	        throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    child._store.validated = true;
	    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }

	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

	    error('Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
	  };
	}

	var isArray$1 = Array.isArray;

	function coerceRef(returnFiber, current, element) {
	  var mixedRef = element.ref;

	  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
	    {
	      // TODO: Clean this up once we turn on the string ref warning for
	      // everyone, because the strict mode case will no longer be relevant
	      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
	      // because these cannot be automatically converted to an arrow function
	      // using a codemod. Therefore, we don't have to warn about string refs again.
	      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
	        var componentName = getComponentName(returnFiber.type) || 'Component';

	        if (!didWarnAboutStringRefs[componentName]) {
	          {
	            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
	          }

	          didWarnAboutStringRefs[componentName] = true;
	        }
	      }
	    }

	    if (element._owner) {
	      var owner = element._owner;
	      var inst;

	      if (owner) {
	        var ownerFiber = owner;

	        if (!(ownerFiber.tag === ClassComponent)) {
	          {
	            throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref" );
	          }
	        }

	        inst = ownerFiber.stateNode;
	      }

	      if (!inst) {
	        {
	          throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
	        }
	      }

	      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

	      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
	        return current.ref;
	      }

	      var ref = function (value) {
	        var refs = inst.refs;

	        if (refs === emptyRefsObject) {
	          // This is a lazy pooled frozen object, so we need to initialize.
	          refs = inst.refs = {};
	        }

	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };

	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      if (!(typeof mixedRef === 'string')) {
	        {
	          throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
	        }
	      }

	      if (!element._owner) {
	        {
	          throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information." );
	        }
	      }
	    }
	  }

	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  if (returnFiber.type !== 'textarea') {
	    var addendum = '';

	    {
	      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
	    }

	    {
	      {
	        throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum );
	      }
	    }
	  }
	}

	function warnOnFunctionType() {
	  {
	    var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

	    if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
	      return;
	    }

	    ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

	    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
	  }
	} // This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.


	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    } // Deletions are added in reversed order so we add it to the front.
	    // At this point, the return fiber's effect list is empty except for
	    // deletions, so we can just append the deletion to the list. The remaining
	    // effects aren't added until the complete phase. Once we implement
	    // resuming, this may not be true.


	    var last = returnFiber.lastEffect;

	    if (last !== null) {
	      last.nextEffect = childToDelete;
	      returnFiber.lastEffect = childToDelete;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	    }

	    childToDelete.nextEffect = null;
	    childToDelete.effectTag = Deletion;
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.


	    var childToDelete = currentFirstChild;

	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }

	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    // instead.
	    var existingChildren = new Map();
	    var existingChild = currentFirstChild;

	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }

	      existingChild = existingChild.sibling;
	    }

	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;

	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return lastPlacedIndex;
	    }

	    var current = newFiber.alternate;

	    if (current !== null) {
	      var oldIndex = current.index;

	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.effectTag = Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.effectTag = Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.effectTag = Placement;
	    }

	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current, textContent, expirationTime) {
	    if (current === null || current.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, textContent);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current, element, expirationTime) {
	    if (current !== null) {
	      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
	       isCompatibleFamilyForHotReloading(current, element) )) {
	        // Move based on index
	        var existing = useFiber(current, element.props);
	        existing.ref = coerceRef(returnFiber, current, element);
	        existing.return = returnFiber;

	        {
	          existing._debugSource = element._source;
	          existing._debugOwner = element._owner;
	        }

	        return existing;
	      }
	    } // Insert


	    var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
	    created.ref = coerceRef(returnFiber, current, element);
	    created.return = returnFiber;
	    return created;
	  }

	  function updatePortal(returnFiber, current, portal, expirationTime) {
	    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, portal.children || []);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
	    if (current === null || current.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, fragment);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
	      created.return = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

	            _created.ref = coerceRef(returnFiber, null, newChild);
	            _created.return = returnFiber;
	            return _created;
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

	            _created2.return = returnFiber;
	            return _created2;
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

	        _created3.return = returnFiber;
	        return _created3;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
	    // Update the fiber if the keys match, otherwise return null.
	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }

	      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              if (newChild.type === REACT_FRAGMENT_TYPE) {
	                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
	              }

	              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            if (newChild.type === REACT_FRAGMENT_TYPE) {
	              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
	            }

	            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber3 = existingChildren.get(newIdx) || null;

	        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }
	  /**
	   * Warns if there is a duplicate or missing key
	   */


	  function warnOnInvalidKey(child, knownKeys) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }

	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child);
	          var key = child.key;

	          if (typeof key !== 'string') {
	            break;
	          }

	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }

	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }

	          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted â the behavior is unsupported and ' + 'could change in a future version.', key);

	          break;
	      }
	    }

	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
	    // This algorithm can't optimize by searching from both ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.
	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.
	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.
	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.
	    {
	      // First, validate keys.
	      var knownKeys = null;

	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

	        if (_newFiber === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }

	        previousNewFiber = _newFiber;
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

	      if (_newFiber2 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }

	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.
	    var iteratorFn = getIteratorFn(newChildrenIterable);

	    if (!(typeof iteratorFn === 'function')) {
	      {
	        throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
	      }
	    }

	    {
	      // We don't support rendering Generators because it's a mutation.
	      // See https://github.com/facebook/react/issues/12995
	      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
	      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
	        if (!didWarnAboutGenerators) {
	          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
	        }

	        didWarnAboutGenerators = true;
	      } // Warn about using Maps as children


	      if (newChildrenIterable.entries === iteratorFn) {
	        if (!didWarnAboutMaps) {
	          error('Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.');
	        }

	        didWarnAboutMaps = true;
	      } // First, validate keys.
	      // We'll get a different iterator later for the main pass.


	      var _newChildren = iteratorFn.call(newChildrenIterable);

	      if (_newChildren) {
	        var knownKeys = null;

	        var _step = _newChildren.next();

	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);

	    if (!(newChildren != null)) {
	      {
	        throw Error( "An iterable object provided no iterator." );
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    var step = newChildren.next();

	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

	        if (_newFiber3 === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }

	        previousNewFiber = _newFiber3;
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }

	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent);
	      existing.return = returnFiber;
	      return existing;
	    } // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.


	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
	    var key = element.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        switch (child.tag) {
	          case Fragment:
	            {
	              if (element.type === REACT_FRAGMENT_TYPE) {
	                deleteRemainingChildren(returnFiber, child.sibling);
	                var existing = useFiber(child, element.props.children);
	                existing.return = returnFiber;

	                {
	                  existing._debugSource = element._source;
	                  existing._debugOwner = element._owner;
	                }

	                return existing;
	              }

	              break;
	            }

	          case Block:

	          // We intentionally fallthrough here if enableBlocksAPI is not on.
	          // eslint-disable-next-lined no-fallthrough

	          default:
	            {
	              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
	               isCompatibleFamilyForHotReloading(child, element) )) {
	                deleteRemainingChildren(returnFiber, child.sibling);

	                var _existing3 = useFiber(child, element.props);

	                _existing3.ref = coerceRef(returnFiber, child, element);
	                _existing3.return = returnFiber;

	                {
	                  _existing3._debugSource = element._source;
	                  _existing3._debugOwner = element._owner;
	                }

	                return _existing3;
	              }

	              break;
	            }
	        } // Didn't match.


	        deleteRemainingChildren(returnFiber, child);
	        break;
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

	      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
	      _created4.return = returnFiber;
	      return _created4;
	    }
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
	    var key = portal.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || []);
	          existing.return = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
	    created.return = returnFiber;
	    return created;
	  } // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.


	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.
	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

	    if (isUnkeyedTopLevelFragment) {
	      newChild = newChild.props.children;
	    } // Handle object types


	    var isObject = typeof newChild === 'object' && newChild !== null;

	    if (isObject) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
	      }
	    }

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
	    }

	    if (isArray$1(newChild)) {
	      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (getIteratorFn(newChild)) {
	      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (isObject) {
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
	      // If the new child is undefined, and the return fiber is a composite
	      // component, throw an error. If Fiber return types are disabled,
	      // we already threw above.
	      switch (returnFiber.tag) {
	        case ClassComponent:
	          {
	            {
	              var instance = returnFiber.stateNode;

	              if (instance.render._isMockFunction) {
	                // We allow auto-mocks to proceed as if they're returning null.
	                break;
	              }
	            }
	          }
	        // Intentionally fall through to the next case, which handles both
	        // functions and classes
	        // eslint-disable-next-lined no-fallthrough

	        case FunctionComponent:
	          {
	            var Component = returnFiber.type;

	            {
	              {
	                throw Error( (Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
	              }
	            }
	          }
	      }
	    } // Remaining cases are all treated as empty.


	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);
	function cloneChildFibers(current, workInProgress) {
	  if (!(current === null || workInProgress.child === current.child)) {
	    {
	      throw Error( "Resuming work not yet implemented." );
	    }
	  }

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
	  workInProgress.child = newChild;
	  newChild.return = workInProgress;

	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
	    newChild.return = workInProgress;
	  }

	  newChild.sibling = null;
	} // Reset a workInProgress child set to prepare it for a second pass.

	function resetChildFibers(workInProgress, renderExpirationTime) {
	  var child = workInProgress.child;

	  while (child !== null) {
	    resetWorkInProgress(child, renderExpirationTime);
	    child = child.sibling;
	  }
	}

	var NO_CONTEXT = {};
	var contextStackCursor$1 = createCursor(NO_CONTEXT);
	var contextFiberStackCursor = createCursor(NO_CONTEXT);
	var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	function requiredContext(c) {
	  if (!(c !== NO_CONTEXT)) {
	    {
	      throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  return c;
	}

	function getRootHostContainer() {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  return rootInstance;
	}

	function pushHostContainer(fiber, nextRootInstance) {
	  // Push current root instance onto the stack;
	  // This allows us to reset root when portals are popped.
	  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.

	  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
	  // However, we can't just call getRootHostContext() and push it because
	  // we'd have a different number of entries on the stack depending on
	  // whether getRootHostContext() throws somewhere in renderer code or not.
	  // So we push an empty value first. This lets us safely unwind on errors.

	  push(contextStackCursor$1, NO_CONTEXT, fiber);
	  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

	  pop(contextStackCursor$1, fiber);
	  push(contextStackCursor$1, nextRootContext, fiber);
	}

	function popHostContainer(fiber) {
	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	  pop(rootInstanceStackCursor, fiber);
	}

	function getHostContext() {
	  var context = requiredContext(contextStackCursor$1.current);
	  return context;
	}

	function pushHostContext(fiber) {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  var context = requiredContext(contextStackCursor$1.current);
	  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

	  if (context === nextContext) {
	    return;
	  } // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.


	  push(contextFiberStackCursor, fiber, fiber);
	  push(contextStackCursor$1, nextContext, fiber);
	}

	function popHostContext(fiber) {
	  // Do not pop unless this Fiber provided the current context.
	  // pushHostContext() only pushes Fibers that provide unique contexts.
	  if (contextFiberStackCursor.current !== fiber) {
	    return;
	  }

	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	}

	var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
	// inherited deeply down the subtree. The upper bits only affect
	// this immediate suspense boundary and gets reset each new
	// boundary or suspense list.

	var SubtreeSuspenseContextMask = 1; // Subtree Flags:
	// InvisibleParentSuspenseContext indicates that one of our parent Suspense
	// boundaries is not currently showing visible main content.
	// Either because it is already showing a fallback or is not mounted at all.
	// We can use this to determine if it is desirable to trigger a fallback at
	// the parent. If not, then we might need to trigger undesirable boundaries
	// and/or suspend the commit to avoid hiding the parent content.

	var InvisibleParentSuspenseContext = 1; // Shallow Flags:
	// ForceSuspenseFallback can be used by SuspenseList to force newly added
	// items into their fallback state during one of the render passes.

	var ForceSuspenseFallback = 2;
	var suspenseStackCursor = createCursor(DefaultSuspenseContext);
	function hasSuspenseContext(parentContext, flag) {
	  return (parentContext & flag) !== 0;
	}
	function setDefaultShallowSuspenseContext(parentContext) {
	  return parentContext & SubtreeSuspenseContextMask;
	}
	function setShallowSuspenseContext(parentContext, shallowContext) {
	  return parentContext & SubtreeSuspenseContextMask | shallowContext;
	}
	function addSubtreeSuspenseContext(parentContext, subtreeContext) {
	  return parentContext | subtreeContext;
	}
	function pushSuspenseContext(fiber, newContext) {
	  push(suspenseStackCursor, newContext, fiber);
	}
	function popSuspenseContext(fiber) {
	  pop(suspenseStackCursor, fiber);
	}

	function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
	  // If it was the primary children that just suspended, capture and render the
	  // fallback. Otherwise, don't capture and bubble to the next boundary.
	  var nextState = workInProgress.memoizedState;

	  if (nextState !== null) {
	    if (nextState.dehydrated !== null) {
	      // A dehydrated boundary always captures.
	      return true;
	    }

	    return false;
	  }

	  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

	  if (props.fallback === undefined) {
	    return false;
	  } // Regular boundaries always capture.


	  if (props.unstable_avoidThisFallback !== true) {
	    return true;
	  } // If it's a boundary we should avoid, then we prefer to bubble up to the
	  // parent boundary if it is currently invisible.


	  if (hasInvisibleParent) {
	    return false;
	  } // If the parent is not able to handle it, we must handle it.


	  return true;
	}
	function findFirstSuspended(row) {
	  var node = row;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        var dehydrated = state.dehydrated;

	        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
	          return node;
	        }
	      }
	    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
	    // keep track of whether it suspended or not.
	    node.memoizedProps.revealOrder !== undefined) {
	      var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

	      if (didSuspend) {
	        return node;
	      }
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === row) {
	      return null;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === row) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }

	  return null;
	}

	function createDeprecatedResponderListener(responder, props) {
	  var eventResponderListener = {
	    responder: responder,
	    props: props
	  };

	  {
	    Object.freeze(eventResponderListener);
	  }

	  return eventResponderListener;
	}

	var HasEffect =
	/* */
	1; // Represents the phase in which the effect (not the clean-up) fires.

	var Layout =
	/*    */
	2;
	var Passive$1 =
	/*   */
	4;

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
	var didWarnAboutMismatchedHooksForComponent;

	{
	  didWarnAboutMismatchedHooksForComponent = new Set();
	}

	// These are set right before calling the component.
	var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.

	var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.

	var currentHook = null;
	var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
	// does not get reset if we do another render pass; only when we're completely
	// finished evaluating this component. This is an optimization so we know
	// whether we need to clear render phase updates after a throw.

	var didScheduleRenderPhaseUpdate = false;
	var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

	var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
	// The list stores the order of hooks used during the initial render (mount).
	// Subsequent renders (updates) reference this list.

	var hookTypesDev = null;
	var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
	// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
	// When true, such Hooks will always be "remounted". Only used during hot reload.

	var ignorePreviousDependencies = false;

	function mountHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev === null) {
	      hookTypesDev = [hookName];
	    } else {
	      hookTypesDev.push(hookName);
	    }
	  }
	}

	function updateHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev !== null) {
	      hookTypesUpdateIndexDev++;

	      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
	        warnOnHookMismatchInDev(hookName);
	      }
	    }
	  }
	}

	function checkDepsAreArrayDev(deps) {
	  {
	    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
	      // Verify deps, but only on mount to avoid extra checks.
	      // It's unlikely their type would change as usually you define them inline.
	      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
	    }
	  }
	}

	function warnOnHookMismatchInDev(currentHookName) {
	  {
	    var componentName = getComponentName(currentlyRenderingFiber$1.type);

	    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
	      didWarnAboutMismatchedHooksForComponent.add(componentName);

	      if (hookTypesDev !== null) {
	        var table = '';
	        var secondColumnStart = 30;

	        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
	          var oldHookName = hookTypesDev[i];
	          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
	          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
	          // lol @ IE not supporting String#repeat

	          while (row.length < secondColumnStart) {
	            row += ' ';
	          }

	          row += newHookName + '\n';
	          table += row;
	        }

	        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
	      }
	    }
	  }
	}

	function throwInvalidHookError() {
	  {
	    {
	      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
	    }
	  }
	}

	function areHookInputsEqual(nextDeps, prevDeps) {
	  {
	    if (ignorePreviousDependencies) {
	      // Only true when this component is being hot reloaded.
	      return false;
	    }
	  }

	  if (prevDeps === null) {
	    {
	      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
	    }

	    return false;
	  }

	  {
	    // Don't bother comparing lengths in prod because these arrays should be
	    // passed inline.
	    if (nextDeps.length !== prevDeps.length) {
	      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
	    }
	  }

	  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	    if (objectIs(nextDeps[i], prevDeps[i])) {
	      continue;
	    }

	    return false;
	  }

	  return true;
	}

	function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
	  renderExpirationTime = nextRenderExpirationTime;
	  currentlyRenderingFiber$1 = workInProgress;

	  {
	    hookTypesDev = current !== null ? current._debugHookTypes : null;
	    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

	    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
	  }

	  workInProgress.memoizedState = null;
	  workInProgress.updateQueue = null;
	  workInProgress.expirationTime = NoWork; // The following should have already been reset
	  // currentHook = null;
	  // workInProgressHook = null;
	  // didScheduleRenderPhaseUpdate = false;
	  // TODO Warn if no hooks are used at all during mount, then some are used during update.
	  // Currently we will identify the update render as a mount because memoizedState === null.
	  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
	  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
	  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
	  // so memoizedState would be null during updates and mounts.

	  {
	    if (current !== null && current.memoizedState !== null) {
	      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
	    } else if (hookTypesDev !== null) {
	      // This dispatcher handles an edge case where a component is updating,
	      // but no stateful hooks have been used.
	      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
	      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
	      // This dispatcher does that.
	      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
	    } else {
	      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
	    }
	  }

	  var children = Component(props, secondArg); // Check if there was a render phase update

	  if (workInProgress.expirationTime === renderExpirationTime) {
	    // Keep rendering in a loop for as long as render phase updates continue to
	    // be scheduled. Use a counter to prevent infinite loops.
	    var numberOfReRenders = 0;

	    do {
	      workInProgress.expirationTime = NoWork;

	      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
	        {
	          throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
	        }
	      }

	      numberOfReRenders += 1;

	      {
	        // Even when hot reloading, allow dependencies to stabilize
	        // after first render to prevent infinite render phase updates.
	        ignorePreviousDependencies = false;
	      } // Start over from the beginning of the list


	      currentHook = null;
	      workInProgressHook = null;
	      workInProgress.updateQueue = null;

	      {
	        // Also validate hook order for cascading updates.
	        hookTypesUpdateIndexDev = -1;
	      }

	      ReactCurrentDispatcher.current =  HooksDispatcherOnRerenderInDEV ;
	      children = Component(props, secondArg);
	    } while (workInProgress.expirationTime === renderExpirationTime);
	  } // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrancy.


	  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

	  {
	    workInProgress._debugHookTypes = hookTypesDev;
	  } // This check uses currentHook so that it works the same in DEV and prod bundles.
	  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


	  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
	  renderExpirationTime = NoWork;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    currentHookNameInDev = null;
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	  }

	  didScheduleRenderPhaseUpdate = false;

	  if (!!didRenderTooFewHooks) {
	    {
	      throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
	    }
	  }

	  return children;
	}
	function bailoutHooks(current, workInProgress, expirationTime) {
	  workInProgress.updateQueue = current.updateQueue;
	  workInProgress.effectTag &= ~(Passive | Update);

	  if (current.expirationTime <= expirationTime) {
	    current.expirationTime = NoWork;
	  }
	}
	function resetHooksAfterThrow() {
	  // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrancy.
	  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

	  if (didScheduleRenderPhaseUpdate) {
	    // There were render phase updates. These are only valid for this render
	    // phase, which we are now aborting. Remove the updates from the queues so
	    // they do not persist to the next render. Do not remove updates from hooks
	    // that weren't processed.
	    //
	    // Only reset the updates from the queue if it has a clone. If it does
	    // not have a clone, that means it wasn't processed, and the updates were
	    // scheduled before we entered the render phase.
	    var hook = currentlyRenderingFiber$1.memoizedState;

	    while (hook !== null) {
	      var queue = hook.queue;

	      if (queue !== null) {
	        queue.pending = null;
	      }

	      hook = hook.next;
	    }
	  }

	  renderExpirationTime = NoWork;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	    currentHookNameInDev = null;
	  }

	  didScheduleRenderPhaseUpdate = false;
	}

	function mountWorkInProgressHook() {
	  var hook = {
	    memoizedState: null,
	    baseState: null,
	    baseQueue: null,
	    queue: null,
	    next: null
	  };

	  if (workInProgressHook === null) {
	    // This is the first hook in the list
	    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
	  } else {
	    // Append to the end of the list
	    workInProgressHook = workInProgressHook.next = hook;
	  }

	  return workInProgressHook;
	}

	function updateWorkInProgressHook() {
	  // This function is used both for updates and for re-renders triggered by a
	  // render phase update. It assumes there is either a current hook we can
	  // clone, or a work-in-progress hook from a previous render pass that we can
	  // use as a base. When we reach the end of the base list, we must switch to
	  // the dispatcher used for mounts.
	  var nextCurrentHook;

	  if (currentHook === null) {
	    var current = currentlyRenderingFiber$1.alternate;

	    if (current !== null) {
	      nextCurrentHook = current.memoizedState;
	    } else {
	      nextCurrentHook = null;
	    }
	  } else {
	    nextCurrentHook = currentHook.next;
	  }

	  var nextWorkInProgressHook;

	  if (workInProgressHook === null) {
	    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
	  } else {
	    nextWorkInProgressHook = workInProgressHook.next;
	  }

	  if (nextWorkInProgressHook !== null) {
	    // There's already a work-in-progress. Reuse it.
	    workInProgressHook = nextWorkInProgressHook;
	    nextWorkInProgressHook = workInProgressHook.next;
	    currentHook = nextCurrentHook;
	  } else {
	    // Clone from the current hook.
	    if (!(nextCurrentHook !== null)) {
	      {
	        throw Error( "Rendered more hooks than during the previous render." );
	      }
	    }

	    currentHook = nextCurrentHook;
	    var newHook = {
	      memoizedState: currentHook.memoizedState,
	      baseState: currentHook.baseState,
	      baseQueue: currentHook.baseQueue,
	      queue: currentHook.queue,
	      next: null
	    };

	    if (workInProgressHook === null) {
	      // This is the first hook in the list.
	      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
	    } else {
	      // Append to the end of the list.
	      workInProgressHook = workInProgressHook.next = newHook;
	    }
	  }

	  return workInProgressHook;
	}

	function createFunctionComponentUpdateQueue() {
	  return {
	    lastEffect: null
	  };
	}

	function basicStateReducer(state, action) {
	  // $FlowFixMe: Flow doesn't like mixed types
	  return typeof action === 'function' ? action(state) : action;
	}

	function mountReducer(reducer, initialArg, init) {
	  var hook = mountWorkInProgressHook();
	  var initialState;

	  if (init !== undefined) {
	    initialState = init(initialArg);
	  } else {
	    initialState = initialArg;
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = hook.queue = {
	    pending: null,
	    dispatch: null,
	    lastRenderedReducer: reducer,
	    lastRenderedState: initialState
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (!(queue !== null)) {
	    {
	      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
	    }
	  }

	  queue.lastRenderedReducer = reducer;
	  var current = currentHook; // The last rebase update that is NOT part of the base state.

	  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

	  var pendingQueue = queue.pending;

	  if (pendingQueue !== null) {
	    // We have new updates that haven't been processed yet.
	    // We'll add them to the base queue.
	    if (baseQueue !== null) {
	      // Merge the pending queue and the base queue.
	      var baseFirst = baseQueue.next;
	      var pendingFirst = pendingQueue.next;
	      baseQueue.next = pendingFirst;
	      pendingQueue.next = baseFirst;
	    }

	    current.baseQueue = baseQueue = pendingQueue;
	    queue.pending = null;
	  }

	  if (baseQueue !== null) {
	    // We have a queue to process.
	    var first = baseQueue.next;
	    var newState = current.baseState;
	    var newBaseState = null;
	    var newBaseQueueFirst = null;
	    var newBaseQueueLast = null;
	    var update = first;

	    do {
	      var updateExpirationTime = update.expirationTime;

	      if (updateExpirationTime < renderExpirationTime) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          expirationTime: update.expirationTime,
	          suspenseConfig: update.suspenseConfig,
	          action: update.action,
	          eagerReducer: update.eagerReducer,
	          eagerState: update.eagerState,
	          next: null
	        };

	        if (newBaseQueueLast === null) {
	          newBaseQueueFirst = newBaseQueueLast = clone;
	          newBaseState = newState;
	        } else {
	          newBaseQueueLast = newBaseQueueLast.next = clone;
	        } // Update the remaining priority in the queue.


	        if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
	          currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
	          markUnprocessedUpdateTime(updateExpirationTime);
	        }
	      } else {
	        // This update does have sufficient priority.
	        if (newBaseQueueLast !== null) {
	          var _clone = {
	            expirationTime: Sync,
	            // This update is going to be committed so we never want uncommit it.
	            suspenseConfig: update.suspenseConfig,
	            action: update.action,
	            eagerReducer: update.eagerReducer,
	            eagerState: update.eagerState,
	            next: null
	          };
	          newBaseQueueLast = newBaseQueueLast.next = _clone;
	        } // Mark the event time of this update as relevant to this render pass.
	        // TODO: This should ideally use the true event time of this update rather than
	        // its priority which is a derived and not reverseable value.
	        // TODO: We should skip this update if it was already committed but currently
	        // we have no way of detecting the difference between a committed and suspended
	        // update here.


	        markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

	        if (update.eagerReducer === reducer) {
	          // If this update was processed eagerly, and its reducer matches the
	          // current reducer, we can use the eagerly computed state.
	          newState = update.eagerState;
	        } else {
	          var action = update.action;
	          newState = reducer(newState, action);
	        }
	      }

	      update = update.next;
	    } while (update !== null && update !== first);

	    if (newBaseQueueLast === null) {
	      newBaseState = newState;
	    } else {
	      newBaseQueueLast.next = newBaseQueueFirst;
	    } // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState;
	    hook.baseState = newBaseState;
	    hook.baseQueue = newBaseQueueLast;
	    queue.lastRenderedState = newState;
	  }

	  var dispatch = queue.dispatch;
	  return [hook.memoizedState, dispatch];
	}

	function rerenderReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (!(queue !== null)) {
	    {
	      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
	    }
	  }

	  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
	  // work-in-progress hook.

	  var dispatch = queue.dispatch;
	  var lastRenderPhaseUpdate = queue.pending;
	  var newState = hook.memoizedState;

	  if (lastRenderPhaseUpdate !== null) {
	    // The queue doesn't persist past this render pass.
	    queue.pending = null;
	    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
	    var update = firstRenderPhaseUpdate;

	    do {
	      // Process this render phase update. We don't have to check the
	      // priority because it will always be the same as the current
	      // render's.
	      var action = update.action;
	      newState = reducer(newState, action);
	      update = update.next;
	    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
	    // the base state unless the queue is empty.
	    // TODO: Not sure if this is the desired semantics, but it's what we
	    // do for gDSFP. I can't remember why.

	    if (hook.baseQueue === null) {
	      hook.baseState = newState;
	    }

	    queue.lastRenderedState = newState;
	  }

	  return [newState, dispatch];
	}

	function mountState(initialState) {
	  var hook = mountWorkInProgressHook();

	  if (typeof initialState === 'function') {
	    // $FlowFixMe: Flow doesn't like mixed types
	    initialState = initialState();
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = hook.queue = {
	    pending: null,
	    dispatch: null,
	    lastRenderedReducer: basicStateReducer,
	    lastRenderedState: initialState
	  };
	  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateState(initialState) {
	  return updateReducer(basicStateReducer);
	}

	function rerenderState(initialState) {
	  return rerenderReducer(basicStateReducer);
	}

	function pushEffect(tag, create, destroy, deps) {
	  var effect = {
	    tag: tag,
	    create: create,
	    destroy: destroy,
	    deps: deps,
	    // Circular
	    next: null
	  };
	  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
	    componentUpdateQueue.lastEffect = effect.next = effect;
	  } else {
	    var lastEffect = componentUpdateQueue.lastEffect;

	    if (lastEffect === null) {
	      componentUpdateQueue.lastEffect = effect.next = effect;
	    } else {
	      var firstEffect = lastEffect.next;
	      lastEffect.next = effect;
	      effect.next = firstEffect;
	      componentUpdateQueue.lastEffect = effect;
	    }
	  }

	  return effect;
	}

	function mountRef(initialValue) {
	  var hook = mountWorkInProgressHook();
	  var ref = {
	    current: initialValue
	  };

	  {
	    Object.seal(ref);
	  }

	  hook.memoizedState = ref;
	  return ref;
	}

	function updateRef(initialValue) {
	  var hook = updateWorkInProgressHook();
	  return hook.memoizedState;
	}

	function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
	  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps);
	}

	function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var destroy = undefined;

	  if (currentHook !== null) {
	    var prevEffect = currentHook.memoizedState;
	    destroy = prevEffect.destroy;

	    if (nextDeps !== null) {
	      var prevDeps = prevEffect.deps;

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        pushEffect(hookEffectTag, create, destroy, nextDeps);
	        return;
	      }
	    }
	  }

	  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
	  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
	}

	function mountEffect(create, deps) {
	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
	    }
	  }

	  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
	}

	function updateEffect(create, deps) {
	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
	    }
	  }

	  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
	}

	function mountLayoutEffect(create, deps) {
	  return mountEffectImpl(Update, Layout, create, deps);
	}

	function updateLayoutEffect(create, deps) {
	  return updateEffectImpl(Update, Layout, create, deps);
	}

	function imperativeHandleEffect(create, ref) {
	  if (typeof ref === 'function') {
	    var refCallback = ref;

	    var _inst = create();

	    refCallback(_inst);
	    return function () {
	      refCallback(null);
	    };
	  } else if (ref !== null && ref !== undefined) {
	    var refObject = ref;

	    {
	      if (!refObject.hasOwnProperty('current')) {
	        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
	      }
	    }

	    var _inst2 = create();

	    refObject.current = _inst2;
	    return function () {
	      refObject.current = null;
	    };
	  }
	}

	function mountImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function updateImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
	  // The react-debug-hooks package injects its own implementation
	  // so that e.g. DevTools can display custom hook values.
	}

	var updateDebugValue = mountDebugValue;

	function mountCallback(callback, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function updateCallback(callback, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function mountMemo(nextCreate, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function updateMemo(nextCreate, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    // Assume these are defined. If they're not, areHookInputsEqual will warn.
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function mountDeferredValue(value, config) {
	  var _mountState = mountState(value),
	      prevValue = _mountState[0],
	      setValue = _mountState[1];

	  mountEffect(function () {
	    var previousConfig = ReactCurrentBatchConfig$1.suspense;
	    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	    try {
	      setValue(value);
	    } finally {
	      ReactCurrentBatchConfig$1.suspense = previousConfig;
	    }
	  }, [value, config]);
	  return prevValue;
	}

	function updateDeferredValue(value, config) {
	  var _updateState = updateState(),
	      prevValue = _updateState[0],
	      setValue = _updateState[1];

	  updateEffect(function () {
	    var previousConfig = ReactCurrentBatchConfig$1.suspense;
	    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	    try {
	      setValue(value);
	    } finally {
	      ReactCurrentBatchConfig$1.suspense = previousConfig;
	    }
	  }, [value, config]);
	  return prevValue;
	}

	function rerenderDeferredValue(value, config) {
	  var _rerenderState = rerenderState(),
	      prevValue = _rerenderState[0],
	      setValue = _rerenderState[1];

	  updateEffect(function () {
	    var previousConfig = ReactCurrentBatchConfig$1.suspense;
	    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	    try {
	      setValue(value);
	    } finally {
	      ReactCurrentBatchConfig$1.suspense = previousConfig;
	    }
	  }, [value, config]);
	  return prevValue;
	}

	function startTransition(setPending, config, callback) {
	  var priorityLevel = getCurrentPriorityLevel();
	  runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {
	    setPending(true);
	  });
	  runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function () {
	    var previousConfig = ReactCurrentBatchConfig$1.suspense;
	    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

	    try {
	      setPending(false);
	      callback();
	    } finally {
	      ReactCurrentBatchConfig$1.suspense = previousConfig;
	    }
	  });
	}

	function mountTransition(config) {
	  var _mountState2 = mountState(false),
	      isPending = _mountState2[0],
	      setPending = _mountState2[1];

	  var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
	  return [start, isPending];
	}

	function updateTransition(config) {
	  var _updateState2 = updateState(),
	      isPending = _updateState2[0],
	      setPending = _updateState2[1];

	  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
	  return [start, isPending];
	}

	function rerenderTransition(config) {
	  var _rerenderState2 = rerenderState(),
	      isPending = _rerenderState2[0],
	      setPending = _rerenderState2[1];

	  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
	  return [start, isPending];
	}

	function dispatchAction(fiber, queue, action) {
	  {
	    if (typeof arguments[3] === 'function') {
	      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
	    }
	  }

	  var currentTime = requestCurrentTimeForUpdate();
	  var suspenseConfig = requestCurrentSuspenseConfig();
	  var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
	  var update = {
	    expirationTime: expirationTime,
	    suspenseConfig: suspenseConfig,
	    action: action,
	    eagerReducer: null,
	    eagerState: null,
	    next: null
	  };

	  {
	    update.priority = getCurrentPriorityLevel();
	  } // Append the update to the end of the list.


	  var pending = queue.pending;

	  if (pending === null) {
	    // This is the first update. Create a circular list.
	    update.next = update;
	  } else {
	    update.next = pending.next;
	    pending.next = update;
	  }

	  queue.pending = update;
	  var alternate = fiber.alternate;

	  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
	    // This is a render phase update. Stash it in a lazily-created map of
	    // queue -> linked list of updates. After this render pass, we'll restart
	    // and apply the stashed updates on top of the work-in-progress hook.
	    didScheduleRenderPhaseUpdate = true;
	    update.expirationTime = renderExpirationTime;
	    currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
	  } else {
	    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
	      // The queue is currently empty, which means we can eagerly compute the
	      // next state before entering the render phase. If the new state is the
	      // same as the current state, we may be able to bail out entirely.
	      var lastRenderedReducer = queue.lastRenderedReducer;

	      if (lastRenderedReducer !== null) {
	        var prevDispatcher;

	        {
	          prevDispatcher = ReactCurrentDispatcher.current;
	          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        }

	        try {
	          var currentState = queue.lastRenderedState;
	          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
	          // it, on the update object. If the reducer hasn't changed by the
	          // time we enter the render phase, then the eager state can be used
	          // without calling the reducer again.

	          update.eagerReducer = lastRenderedReducer;
	          update.eagerState = eagerState;

	          if (objectIs(eagerState, currentState)) {
	            // Fast path. We can bail out without scheduling React to re-render.
	            // It's still possible that we'll need to rebase this update later,
	            // if the component re-renders for a different reason and by that
	            // time the reducer has changed.
	            return;
	          }
	        } catch (error) {// Suppress the error. It will throw again in the render phase.
	        } finally {
	          {
	            ReactCurrentDispatcher.current = prevDispatcher;
	          }
	        }
	      }
	    }

	    {
	      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	      if ('undefined' !== typeof jest) {
	        warnIfNotScopedWithMatchingAct(fiber);
	        warnIfNotCurrentlyActingUpdatesInDev(fiber);
	      }
	    }

	    scheduleWork(fiber, expirationTime);
	  }
	}

	var ContextOnlyDispatcher = {
	  readContext: readContext,
	  useCallback: throwInvalidHookError,
	  useContext: throwInvalidHookError,
	  useEffect: throwInvalidHookError,
	  useImperativeHandle: throwInvalidHookError,
	  useLayoutEffect: throwInvalidHookError,
	  useMemo: throwInvalidHookError,
	  useReducer: throwInvalidHookError,
	  useRef: throwInvalidHookError,
	  useState: throwInvalidHookError,
	  useDebugValue: throwInvalidHookError,
	  useResponder: throwInvalidHookError,
	  useDeferredValue: throwInvalidHookError,
	  useTransition: throwInvalidHookError
	};
	var HooksDispatcherOnMountInDEV = null;
	var HooksDispatcherOnMountWithHookTypesInDEV = null;
	var HooksDispatcherOnUpdateInDEV = null;
	var HooksDispatcherOnRerenderInDEV = null;
	var InvalidNestedHooksDispatcherOnMountInDEV = null;
	var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
	var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

	{
	  var warnInvalidContextAccess = function () {
	    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	  };

	  var warnInvalidHookAccess = function () {
	    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
	  };

	  HooksDispatcherOnMountInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      mountHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      mountHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      mountHookTypesDev();
	      return mountDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      mountHookTypesDev();
	      return mountTransition(config);
	    }
	  };
	  HooksDispatcherOnMountWithHookTypesInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return mountDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return mountDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return mountTransition(config);
	    }
	  };
	  HooksDispatcherOnUpdateInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return updateDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return updateTransition(config);
	    }
	  };
	  HooksDispatcherOnRerenderInDEV = {
	    readContext: function (context, observedBits) {
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return rerenderDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return rerenderTransition(config);
	    }
	  };
	  InvalidNestedHooksDispatcherOnMountInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountTransition(config);
	    }
	  };
	  InvalidNestedHooksDispatcherOnUpdateInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateTransition(config);
	    }
	  };
	  InvalidNestedHooksDispatcherOnRerenderInDEV = {
	    readContext: function (context, observedBits) {
	      warnInvalidContextAccess();
	      return readContext(context, observedBits);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context, observedBits) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context, observedBits);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher.current;
	      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useResponder: function (responder, props) {
	      currentHookNameInDev = 'useResponder';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return createDeprecatedResponderListener(responder, props);
	    },
	    useDeferredValue: function (value, config) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderDeferredValue(value, config);
	    },
	    useTransition: function (config) {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderTransition(config);
	    }
	  };
	}

	var now$1 = Scheduler.unstable_now;
	var commitTime = 0;
	var profilerStartTime = -1;

	function getCommitTime() {
	  return commitTime;
	}

	function recordCommitTime() {

	  commitTime = now$1();
	}

	function startProfilerTimer(fiber) {

	  profilerStartTime = now$1();

	  if (fiber.actualStartTime < 0) {
	    fiber.actualStartTime = now$1();
	  }
	}

	function stopProfilerTimerIfRunning(fiber) {

	  profilerStartTime = -1;
	}

	function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

	  if (profilerStartTime >= 0) {
	    var elapsedTime = now$1() - profilerStartTime;
	    fiber.actualDuration += elapsedTime;

	    if (overrideBaseTime) {
	      fiber.selfBaseDuration = elapsedTime;
	    }

	    profilerStartTime = -1;
	  }
	}

	// This may have been an insertion or a hydration.

	var hydrationParentFiber = null;
	var nextHydratableInstance = null;
	var isHydrating = false;

	function enterHydrationState(fiber) {

	  var parentInstance = fiber.stateNode.containerInfo;
	  nextHydratableInstance = getFirstHydratableChild(parentInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  return true;
	}

	function deleteHydratableInstance(returnFiber, instance) {
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
	        break;

	      case HostComponent:
	        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
	        break;
	    }
	  }

	  var childToDelete = createFiberFromHostInstanceForDeletion();
	  childToDelete.stateNode = instance;
	  childToDelete.return = returnFiber;
	  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
	  // these children are not part of the reconciliation list of children.
	  // Even if we abort and rereconcile the children, that will try to hydrate
	  // again and the nodes are still in the host tree so these will be
	  // recreated.

	  if (returnFiber.lastEffect !== null) {
	    returnFiber.lastEffect.nextEffect = childToDelete;
	    returnFiber.lastEffect = childToDelete;
	  } else {
	    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	  }
	}

	function insertNonHydratedInstance(returnFiber, fiber) {
	  fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;

	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          var parentContainer = returnFiber.stateNode.containerInfo;

	          switch (fiber.tag) {
	            case HostComponent:
	              var type = fiber.type;
	              var props = fiber.pendingProps;
	              didNotFindHydratableContainerInstance(parentContainer, type);
	              break;

	            case HostText:
	              var text = fiber.pendingProps;
	              didNotFindHydratableContainerTextInstance(parentContainer, text);
	              break;
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var parentType = returnFiber.type;
	          var parentProps = returnFiber.memoizedProps;
	          var parentInstance = returnFiber.stateNode;

	          switch (fiber.tag) {
	            case HostComponent:
	              var _type = fiber.type;
	              var _props = fiber.pendingProps;
	              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
	              break;

	            case HostText:
	              var _text = fiber.pendingProps;
	              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
	              break;

	            case SuspenseComponent:
	              didNotFindHydratableSuspenseInstance(parentType, parentProps);
	              break;
	          }

	          break;
	        }

	      default:
	        return;
	    }
	  }
	}

	function tryHydrate(fiber, nextInstance) {
	  switch (fiber.tag) {
	    case HostComponent:
	      {
	        var type = fiber.type;
	        var props = fiber.pendingProps;
	        var instance = canHydrateInstance(nextInstance, type);

	        if (instance !== null) {
	          fiber.stateNode = instance;
	          return true;
	        }

	        return false;
	      }

	    case HostText:
	      {
	        var text = fiber.pendingProps;
	        var textInstance = canHydrateTextInstance(nextInstance, text);

	        if (textInstance !== null) {
	          fiber.stateNode = textInstance;
	          return true;
	        }

	        return false;
	      }

	    case SuspenseComponent:
	      {

	        return false;
	      }

	    default:
	      return false;
	  }
	}

	function tryToClaimNextHydratableInstance(fiber) {
	  if (!isHydrating) {
	    return;
	  }

	  var nextInstance = nextHydratableInstance;

	  if (!nextInstance) {
	    // Nothing to hydrate. Make it an insertion.
	    insertNonHydratedInstance(hydrationParentFiber, fiber);
	    isHydrating = false;
	    hydrationParentFiber = fiber;
	    return;
	  }

	  var firstAttemptedInstance = nextInstance;

	  if (!tryHydrate(fiber, nextInstance)) {
	    // If we can't hydrate this instance let's try the next one.
	    // We use this as a heuristic. It's based on intuition and not data so it
	    // might be flawed or unnecessary.
	    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

	    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    } // We matched the next one, we'll now assume that the first one was
	    // superfluous and we'll delete it. Since we can't eagerly delete it
	    // we'll have to schedule a deletion. To do that, this node needs a dummy
	    // fiber associated with it.


	    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
	  }

	  hydrationParentFiber = fiber;
	  nextHydratableInstance = getFirstHydratableChild(nextInstance);
	}

	function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

	  var instance = fiber.stateNode;
	  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

	  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	  // is a new ref we mark this as an update.

	  if (updatePayload !== null) {
	    return true;
	  }

	  return false;
	}

	function prepareToHydrateHostTextInstance(fiber) {

	  var textInstance = fiber.stateNode;
	  var textContent = fiber.memoizedProps;
	  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

	  {
	    if (shouldUpdate) {
	      // We assume that prepareToHydrateHostTextInstance is called in a context where the
	      // hydration parent is the parent host component of this host text.
	      var returnFiber = hydrationParentFiber;

	      if (returnFiber !== null) {
	        switch (returnFiber.tag) {
	          case HostRoot:
	            {
	              var parentContainer = returnFiber.stateNode.containerInfo;
	              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
	              break;
	            }

	          case HostComponent:
	            {
	              var parentType = returnFiber.type;
	              var parentProps = returnFiber.memoizedProps;
	              var parentInstance = returnFiber.stateNode;
	              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
	              break;
	            }
	        }
	      }
	    }
	  }

	  return shouldUpdate;
	}

	function skipPastDehydratedSuspenseInstance(fiber) {

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    {
	      throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
	}

	function popToNextHostParent(fiber) {
	  var parent = fiber.return;

	  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
	    parent = parent.return;
	  }

	  hydrationParentFiber = parent;
	}

	function popHydrationState(fiber) {

	  if (fiber !== hydrationParentFiber) {
	    // We're deeper than the current hydration context, inside an inserted
	    // tree.
	    return false;
	  }

	  if (!isHydrating) {
	    // If we're not currently hydrating but we're in a hydration context, then
	    // we were an insertion and now need to pop up reenter hydration of our
	    // siblings.
	    popToNextHostParent(fiber);
	    isHydrating = true;
	    return false;
	  }

	  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
	  // We only do this deeper than head and body since they tend to have random
	  // other nodes in them. We also ignore components with pure text content in
	  // side of them.
	  // TODO: Better heuristic.

	  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
	    var nextInstance = nextHydratableInstance;

	    while (nextInstance) {
	      deleteHydratableInstance(fiber, nextInstance);
	      nextInstance = getNextHydratableSibling(nextInstance);
	    }
	  }

	  popToNextHostParent(fiber);

	  if (fiber.tag === SuspenseComponent) {
	    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
	  } else {
	    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	  }

	  return true;
	}

	function resetHydrationState() {

	  hydrationParentFiber = null;
	  nextHydratableInstance = null;
	  isHydrating = false;
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var didReceiveUpdate = false;
	var didWarnAboutBadClass;
	var didWarnAboutModulePatternComponent;
	var didWarnAboutContextTypeOnFunctionComponent;
	var didWarnAboutGetDerivedStateOnFunctionComponent;
	var didWarnAboutFunctionRefs;
	var didWarnAboutReassigningProps;
	var didWarnAboutRevealOrder;
	var didWarnAboutTailOptions;

	{
	  didWarnAboutBadClass = {};
	  didWarnAboutModulePatternComponent = {};
	  didWarnAboutContextTypeOnFunctionComponent = {};
	  didWarnAboutGetDerivedStateOnFunctionComponent = {};
	  didWarnAboutFunctionRefs = {};
	  didWarnAboutReassigningProps = false;
	  didWarnAboutRevealOrder = {};
	  didWarnAboutTailOptions = {};
	}

	function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
	  if (current === null) {
	    // If this is a fresh new component that hasn't been rendered yet, we
	    // won't update its child set by applying minimal side-effects. Instead,
	    // we will add them all to the child before it gets rendered. That means
	    // we can optimize this reconciliation pass by not tracking side-effects.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    // If the current child is the same as the work in progress, it means that
	    // we haven't yet started any work on these children. Therefore, we use
	    // the clone algorithm to create a copy of all the current children.
	    // If we had any progressed work already, that is invalid at this point so
	    // let's throw it out.
	    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
	  }
	}

	function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime) {
	  // This function is fork of reconcileChildren. It's used in cases where we
	  // want to reconcile without matching against the existing set. This has the
	  // effect of all current children being unmounted; even if the type and key
	  // are the same, the old child is unmounted and a new child is created.
	  //
	  // To do this, we're going to go through the reconcile algorithm twice. In
	  // the first pass, we schedule a deletion for all the current children by
	  // passing null.
	  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
	  // pass null in place of where we usually pass the current child set. This has
	  // the effect of remounting all children regardless of whether their
	  // identities match.

	  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	}

	function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens after the first render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  }

	  var render = Component.render;
	  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

	  var nextChildren;
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);

	    if ( workInProgress.mode & StrictMode) {
	      // Only double-render components with Hooks
	      if (workInProgress.memoizedState !== null) {
	        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
	      }
	    }

	    setIsRendering(false);
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderExpirationTime);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  if (current === null) {
	    var type = Component.type;

	    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
	    Component.defaultProps === undefined) {
	      var resolvedType = type;

	      {
	        resolvedType = resolveFunctionForHotReloading(type);
	      } // If this is a plain function component without default props,
	      // and with only the default shallow comparison, we upgrade it
	      // to a SimpleMemoComponent to allow fast path updates.


	      workInProgress.tag = SimpleMemoComponent;
	      workInProgress.type = resolvedType;

	      {
	        validateFunctionComponentInDev(workInProgress, type);
	      }

	      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
	    }

	    {
	      var innerPropTypes = type.propTypes;

	      if (innerPropTypes) {
	        // Inner memo component props aren't currently validated in createElement.
	        // We could move it there, but we'd still need this for lazy code path.
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(type), getCurrentFiberStackInDev);
	      }
	    }

	    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
	    child.ref = workInProgress.ref;
	    child.return = workInProgress;
	    workInProgress.child = child;
	    return child;
	  }

	  {
	    var _type = Component.type;
	    var _innerPropTypes = _type.propTypes;

	    if (_innerPropTypes) {
	      // Inner memo component props aren't currently validated in createElement.
	      // We could move it there, but we'd still need this for lazy code path.
	      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
	      'prop', getComponentName(_type), getCurrentFiberStackInDev);
	    }
	  }

	  var currentChild = current.child; // This is always exactly one child

	  if (updateExpirationTime < renderExpirationTime) {
	    // This will be the props with resolved defaultProps,
	    // unlike current.memoizedProps which will be the unresolved ones.
	    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

	    var compare = Component.compare;
	    compare = compare !== null ? compare : shallowEqual;

	    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  var newChild = createWorkInProgress(currentChild, nextProps);
	  newChild.ref = workInProgress.ref;
	  newChild.return = workInProgress;
	  workInProgress.child = newChild;
	  return newChild;
	}

	function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens when the inner render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var outerMemoType = workInProgress.elementType;

	      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
	        // We warn when you define propTypes on lazy()
	        // so let's just skip over it to find memo() outer wrapper.
	        // Inner props for memo are validated later.
	        outerMemoType = refineResolvedLazyComponent(outerMemoType);
	      }

	      var outerPropTypes = outerMemoType && outerMemoType.propTypes;

	      if (outerPropTypes) {
	        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
	        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
	      } // Inner propTypes will be validated in the function component path.

	    }
	  }

	  if (current !== null) {
	    var prevProps = current.memoizedProps;

	    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
	     workInProgress.type === current.type )) {
	      didReceiveUpdate = false;

	      if (updateExpirationTime < renderExpirationTime) {
	        // The pending update priority was cleared at the beginning of
	        // beginWork. We're about to bail out, but there might be additional
	        // updates at a lower priority. Usually, the priority level of the
	        // remaining updates is accumlated during the evaluation of the
	        // component (i.e. when processing the update queue). But since since
	        // we're bailing out early *without* evaluating the component, we need
	        // to account for it here, too. Reset to the value of the current fiber.
	        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
	        // because a MemoComponent fiber does not have hooks or an update queue;
	        // rather, it wraps around an inner component, which may or may not
	        // contains hooks.
	        // TODO: Move the reset at in beginWork out of the common path so that
	        // this is no longer necessary.
	        workInProgress.expirationTime = current.expirationTime;
	        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	      }
	    }
	  }

	  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
	}

	function updateFragment(current, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateMode(current, workInProgress, renderExpirationTime) {
	  var nextChildren = workInProgress.pendingProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateProfiler(current, workInProgress, renderExpirationTime) {
	  {
	    workInProgress.effectTag |= Update;
	  }

	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function markRef(current, workInProgress) {
	  var ref = workInProgress.ref;

	  if (current === null && ref !== null || current !== null && current.ref !== ref) {
	    // Schedule a Ref effect
	    workInProgress.effectTag |= Ref;
	  }
	}

	function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  }

	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  var nextChildren;
	  prepareToReadContext(workInProgress, renderExpirationTime);

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);

	    if ( workInProgress.mode & StrictMode) {
	      // Only double-render components with Hooks
	      if (workInProgress.memoizedState !== null) {
	        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
	      }
	    }

	    setIsRendering(false);
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderExpirationTime);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentName(Component), getCurrentFiberStackInDev);
	      }
	    }
	  } // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.


	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var instance = workInProgress.stateNode;
	  var shouldUpdate;

	  if (instance === null) {
	    if (current !== null) {
	      // A class component without an instance only mounts if it suspended
	      // inside a non-concurrent tree, in an inconsistent state. We want to
	      // treat it like a new mount, even though an empty version of it already
	      // committed. Disconnect the alternate pointers.
	      current.alternate = null;
	      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	      workInProgress.effectTag |= Placement;
	    } // In the initial pass we might need to construct the instance.


	    constructClassInstance(workInProgress, Component, nextProps);
	    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	    shouldUpdate = true;
	  } else if (current === null) {
	    // In a resume, we'll already have an instance we can reuse.
	    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  } else {
	    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderExpirationTime);
	  }

	  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);

	  {
	    var inst = workInProgress.stateNode;

	    if (inst.props !== nextProps) {
	      if (!didWarnAboutReassigningProps) {
	        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
	      }

	      didWarnAboutReassigningProps = true;
	    }
	  }

	  return nextUnitOfWork;
	}

	function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
	  // Refs should update even if shouldComponentUpdate returns false
	  markRef(current, workInProgress);
	  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

	  if (!shouldUpdate && !didCaptureError) {
	    // Context providers should defer to sCU for rendering
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, Component, false);
	    }

	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	  }

	  var instance = workInProgress.stateNode; // Rerender

	  ReactCurrentOwner$1.current = workInProgress;
	  var nextChildren;

	  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
	    // If we captured an error, but getDerivedStateFromError is not defined,
	    // unmount all the children. componentDidCatch will schedule an update to
	    // re-render a fallback. This is temporary until we migrate everyone to
	    // the new API.
	    // TODO: Warn in a future release.
	    nextChildren = null;

	    {
	      stopProfilerTimerIfRunning();
	    }
	  } else {
	    {
	      setIsRendering(true);
	      nextChildren = instance.render();

	      if ( workInProgress.mode & StrictMode) {
	        instance.render();
	      }

	      setIsRendering(false);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;

	  if (current !== null && didCaptureError) {
	    // If we're recovering from an error, reconcile without reusing any of
	    // the existing children. Conceptually, the normal children and the children
	    // that are shown on error are two different sets, so we shouldn't reuse
	    // normal children even if their identities match.
	    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  } // Memoize state using the values we just used to render.
	  // TODO: Restructure so we never read values from the instance.


	  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

	  if (hasContext) {
	    invalidateContextProvider(workInProgress, Component, true);
	  }

	  return workInProgress.child;
	}

	function pushHostRootContext(workInProgress) {
	  var root = workInProgress.stateNode;

	  if (root.pendingContext) {
	    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	  } else if (root.context) {
	    // Should always be set
	    pushTopLevelContextObject(workInProgress, root.context, false);
	  }

	  pushHostContainer(workInProgress, root.containerInfo);
	}

	function updateHostRoot(current, workInProgress, renderExpirationTime) {
	  pushHostRootContext(workInProgress);
	  var updateQueue = workInProgress.updateQueue;

	  if (!(current !== null && updateQueue !== null)) {
	    {
	      throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }

	  var nextProps = workInProgress.pendingProps;
	  var prevState = workInProgress.memoizedState;
	  var prevChildren = prevState !== null ? prevState.element : null;
	  cloneUpdateQueue(current, workInProgress);
	  processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime);
	  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  var nextChildren = nextState.element;

	  if (nextChildren === prevChildren) {
	    // If the state is the same as before, that's a bailout because we had
	    // no work that expires at this time.
	    resetHydrationState();
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	  }

	  var root = workInProgress.stateNode;

	  if (root.hydrate && enterHydrationState(workInProgress)) {
	    // If we don't have any current children this might be the first pass.
	    // We always try to hydrate. If this isn't a hydration pass there won't
	    // be any children to hydrate which is effectively the same thing as
	    // not hydrating.
	    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	    workInProgress.child = child;
	    var node = child;

	    while (node) {
	      // Mark each child as hydrating. This is a fast path to know whether this
	      // tree is part of a hydrating tree. This is used to determine if a child
	      // node has fully mounted yet, and for scheduling event replaying.
	      // Conceptually this is similar to Placement in that a new subtree is
	      // inserted into the React tree here. It just happens to not need DOM
	      // mutations because it already exists.
	      node.effectTag = node.effectTag & ~Placement | Hydrating;
	      node = node.sibling;
	    }
	  } else {
	    // Otherwise reset hydration state in case we aborted and resumed another
	    // root.
	    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	    resetHydrationState();
	  }

	  return workInProgress.child;
	}

	function updateHostComponent(current, workInProgress, renderExpirationTime) {
	  pushHostContext(workInProgress);

	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }

	  var type = workInProgress.type;
	  var nextProps = workInProgress.pendingProps;
	  var prevProps = current !== null ? current.memoizedProps : null;
	  var nextChildren = nextProps.children;
	  var isDirectTextChild = shouldSetTextContent(type, nextProps);

	  if (isDirectTextChild) {
	    // We special case a direct text child of a host node. This is a common
	    // case. We won't handle it as a reified child. We will instead handle
	    // this in the host environment that also has access to this prop. That
	    // avoids allocating another HostText fiber and traversing it.
	    nextChildren = null;
	  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
	    // If we're switching from a direct text child to a normal child, or to
	    // empty, we need to schedule the text content to be reset.
	    workInProgress.effectTag |= ContentReset;
	  }

	  markRef(current, workInProgress); // Check the host config to see if the children are offscreen/hidden.

	  if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
	    {
	      markSpawnedWork(Never);
	    } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
	    return null;
	  }

	  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function updateHostText(current, workInProgress) {
	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  } // Nothing to do here. This is terminal. We'll do the completion step
	  // immediately after.


	  return null;
	}

	function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
	  if (_current !== null) {
	    // A lazy component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
	  // Cancel and resume right after we know the tag.

	  cancelWorkTimer(workInProgress);
	  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

	  workInProgress.type = Component;
	  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
	  startWorkTimer(workInProgress);
	  var resolvedProps = resolveDefaultProps(Component, props);
	  var child;

	  switch (resolvedTag) {
	    case FunctionComponent:
	      {
	        {
	          validateFunctionComponentInDev(workInProgress, Component);
	          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
	        }

	        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        return child;
	      }

	    case ClassComponent:
	      {
	        {
	          workInProgress.type = Component = resolveClassForHotReloading(Component);
	        }

	        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        return child;
	      }

	    case ForwardRef:
	      {
	        {
	          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
	        }

	        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
	        return child;
	      }

	    case MemoComponent:
	      {
	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = Component.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
	              'prop', getComponentName(Component), getCurrentFiberStackInDev);
	            }
	          }
	        }

	        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
	        updateExpirationTime, renderExpirationTime);
	        return child;
	      }
	  }

	  var hint = '';

	  {
	    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
	      hint = ' Did you wrap a component in React.lazy() more than once?';
	    }
	  } // This message intentionally doesn't mention ForwardRef or MemoComponent
	  // because the fact that it's a separate type of work is an
	  // implementation detail.


	  {
	    {
	      throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
	    }
	  }
	}

	function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
	  if (_current !== null) {
	    // An incomplete component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.effectTag |= Placement;
	  } // Promote the fiber to a class and try rendering again.


	  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.

	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  constructClassInstance(workInProgress, Component, nextProps);
	  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
	  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	}

	function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
	  if (_current !== null) {
	    // An indeterminate component only mounts if it suspended inside a non-
	    // concurrent tree, in an inconsistent state. We want to treat it like
	    // a new mount, even though an empty version of it already committed.
	    // Disconnect the alternate pointers.
	    _current.alternate = null;
	    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	    workInProgress.effectTag |= Placement;
	  }

	  var props = workInProgress.pendingProps;
	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var value;

	  {
	    if (Component.prototype && typeof Component.prototype.render === 'function') {
	      var componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutBadClass[componentName]) {
	        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

	        didWarnAboutBadClass[componentName] = true;
	      }
	    }

	    if (workInProgress.mode & StrictMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
	    }

	    setIsRendering(true);
	    ReactCurrentOwner$1.current = workInProgress;
	    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
	    setIsRendering(false);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;

	  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	    {
	      var _componentName = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

	        didWarnAboutModulePatternComponent[_componentName] = true;
	      }
	    } // Proceed under the assumption that this is a class instance


	    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.

	    var hasContext = false;

	    if (isContextProvider(Component)) {
	      hasContext = true;
	      pushContextProvider(workInProgress);
	    } else {
	      hasContext = false;
	    }

	    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
	    initializeUpdateQueue(workInProgress);
	    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

	    if (typeof getDerivedStateFromProps === 'function') {
	      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
	    }

	    adoptClassInstance(workInProgress, value);
	    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
	    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
	  } else {
	    // Proceed under the assumption that this is a function component
	    workInProgress.tag = FunctionComponent;

	    {

	      if ( workInProgress.mode & StrictMode) {
	        // Only double-render components with Hooks
	        if (workInProgress.memoizedState !== null) {
	          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
	        }
	      }
	    }

	    reconcileChildren(null, workInProgress, value, renderExpirationTime);

	    {
	      validateFunctionComponentInDev(workInProgress, Component);
	    }

	    return workInProgress.child;
	  }
	}

	function validateFunctionComponentInDev(workInProgress, Component) {
	  {
	    if (Component) {
	      if (Component.childContextTypes) {
	        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
	      }
	    }

	    if (workInProgress.ref !== null) {
	      var info = '';
	      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	      if (ownerName) {
	        info += '\n\nCheck the render method of `' + ownerName + '`.';
	      }

	      var warningKey = ownerName || workInProgress._debugID || '';
	      var debugSource = workInProgress._debugSource;

	      if (debugSource) {
	        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	      }

	      if (!didWarnAboutFunctionRefs[warningKey]) {
	        didWarnAboutFunctionRefs[warningKey] = true;

	        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
	      }
	    }

	    if (typeof Component.getDerivedStateFromProps === 'function') {
	      var _componentName2 = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
	        error('%s: Function components do not support getDerivedStateFromProps.', _componentName2);

	        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
	      }
	    }

	    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
	      var _componentName3 = getComponentName(Component) || 'Unknown';

	      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
	        error('%s: Function components do not support contextType.', _componentName3);

	        didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
	      }
	    }
	  }
	}

	var SUSPENDED_MARKER = {
	  dehydrated: null,
	  retryTime: NoWork
	};

	function shouldRemainOnFallback(suspenseContext, current, workInProgress) {
	  // If the context is telling us that we should show a fallback, and we're not
	  // already showing content, then we should show the fallback instead.
	  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current === null || current.memoizedState !== null);
	}

	function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
	  var mode = workInProgress.mode;
	  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

	  {
	    if (shouldSuspend(workInProgress)) {
	      workInProgress.effectTag |= DidCapture;
	    }
	  }

	  var suspenseContext = suspenseStackCursor.current;
	  var nextDidTimeout = false;
	  var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

	  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
	    // Something in this boundary's subtree already suspended. Switch to
	    // rendering the fallback children.
	    nextDidTimeout = true;
	    workInProgress.effectTag &= ~DidCapture;
	  } else {
	    // Attempting the main content
	    if (current === null || current.memoizedState !== null) {
	      // This is a new mount or this boundary is already showing a fallback state.
	      // Mark this subtree context as having at least one invisible parent that could
	      // handle the fallback state.
	      // Boundaries without fallbacks or should be avoided are not considered since
	      // they cannot handle preferred fallback states.
	      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
	        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
	      }
	    }
	  }

	  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  pushSuspenseContext(workInProgress, suspenseContext); // This next part is a bit confusing. If the children timeout, we switch to
	  // showing the fallback children in place of the "primary" children.
	  // However, we don't want to delete the primary children because then their
	  // state will be lost (both the React state and the host state, e.g.
	  // uncontrolled form inputs). Instead we keep them mounted and hide them.
	  // Both the fallback children AND the primary children are rendered at the
	  // same time. Once the primary children are un-suspended, we can delete
	  // the fallback children â don't need to preserve their state.
	  //
	  // The two sets of children are siblings in the host environment, but
	  // semantically, for purposes of reconciliation, they are two separate sets.
	  // So we store them using two fragment fibers.
	  //
	  // However, we want to avoid allocating extra fibers for every placeholder.
	  // They're only necessary when the children time out, because that's the
	  // only time when both sets are mounted.
	  //
	  // So, the extra fragment fibers are only used if the children time out.
	  // Otherwise, we render the primary children directly. This requires some
	  // custom reconciliation logic to preserve the state of the primary
	  // children. It's essentially a very basic form of re-parenting.

	  if (current === null) {
	    // If we're currently hydrating, try to hydrate this boundary.
	    // But only if this has a fallback.
	    if (nextProps.fallback !== undefined) {
	      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
	    } // This is the initial mount. This branch is pretty simple because there's
	    // no previous state that needs to be preserved.


	    if (nextDidTimeout) {
	      // Mount separate fragments for primary and fallback children.
	      var nextFallbackChildren = nextProps.fallback;
	      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
	      primaryChildFragment.return = workInProgress;

	      if ((workInProgress.mode & BlockingMode) === NoMode) {
	        // Outside of blocking mode, we commit the effects from the
	        // partially completed, timed-out tree, too.
	        var progressedState = workInProgress.memoizedState;
	        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
	        primaryChildFragment.child = progressedPrimaryChild;
	        var progressedChild = progressedPrimaryChild;

	        while (progressedChild !== null) {
	          progressedChild.return = primaryChildFragment;
	          progressedChild = progressedChild.sibling;
	        }
	      }

	      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
	      fallbackChildFragment.return = workInProgress;
	      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
	      // fallback children.

	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      workInProgress.child = primaryChildFragment;
	      return fallbackChildFragment;
	    } else {
	      // Mount the primary children without an intermediate fragment fiber.
	      var nextPrimaryChildren = nextProps.children;
	      workInProgress.memoizedState = null;
	      return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
	    }
	  } else {
	    // This is an update. This branch is more complicated because we need to
	    // ensure the state of the primary children is preserved.
	    var prevState = current.memoizedState;

	    if (prevState !== null) {
	      // wrapped in a fragment fiber.


	      var currentPrimaryChildFragment = current.child;
	      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

	      if (nextDidTimeout) {
	        // Still timed out. Reuse the current primary children by cloning
	        // its fragment. We're going to skip over these entirely.
	        var _nextFallbackChildren2 = nextProps.fallback;

	        var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);

	        _primaryChildFragment2.return = workInProgress;

	        if ((workInProgress.mode & BlockingMode) === NoMode) {
	          // Outside of blocking mode, we commit the effects from the
	          // partially completed, timed-out tree, too.
	          var _progressedState = workInProgress.memoizedState;

	          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

	          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
	            _primaryChildFragment2.child = _progressedPrimaryChild;
	            var _progressedChild2 = _progressedPrimaryChild;

	            while (_progressedChild2 !== null) {
	              _progressedChild2.return = _primaryChildFragment2;
	              _progressedChild2 = _progressedChild2.sibling;
	            }
	          }
	        } // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.


	        if ( workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var _treeBaseDuration = 0;
	          var _hiddenChild = _primaryChildFragment2.child;

	          while (_hiddenChild !== null) {
	            _treeBaseDuration += _hiddenChild.treeBaseDuration;
	            _hiddenChild = _hiddenChild.sibling;
	          }

	          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
	        } // Clone the fallback child fragment, too. These we'll continue
	        // working on.


	        var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);

	        _fallbackChildFragment2.return = workInProgress;
	        _primaryChildFragment2.sibling = _fallbackChildFragment2;
	        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
	        // fallback children.

	        workInProgress.memoizedState = SUSPENDED_MARKER;
	        workInProgress.child = _primaryChildFragment2;
	        return _fallbackChildFragment2;
	      } else {
	        // No longer suspended. Switch back to showing the primary children,
	        // and remove the intermediate fragment fiber.
	        var _nextPrimaryChildren = nextProps.children;
	        var currentPrimaryChild = currentPrimaryChildFragment.child;
	        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
	        // children. Wait until the complete phase, after we've confirmed the
	        // fallback is no longer needed.
	        // TODO: Would it be better to store the fallback fragment on
	        // the stateNode?
	        // Continue rendering the children, like we normally do.

	        workInProgress.memoizedState = null;
	        return workInProgress.child = primaryChild;
	      }
	    } else {
	      // The current tree has not already timed out. That means the primary
	      // children are not wrapped in a fragment fiber.
	      var _currentPrimaryChild = current.child;

	      if (nextDidTimeout) {
	        // Timed out. Wrap the children in a fragment fiber to keep them
	        // separate from the fallback children.
	        var _nextFallbackChildren3 = nextProps.fallback;

	        var _primaryChildFragment3 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
	        // going to render this fragment.
	        null, mode, NoWork, null);

	        _primaryChildFragment3.return = workInProgress;
	        _primaryChildFragment3.child = _currentPrimaryChild;

	        if (_currentPrimaryChild !== null) {
	          _currentPrimaryChild.return = _primaryChildFragment3;
	        } // Even though we're creating a new fiber, there are no new children,
	        // because we're reusing an already mounted tree. So we don't need to
	        // schedule a placement.
	        // primaryChildFragment.effectTag |= Placement;


	        if ((workInProgress.mode & BlockingMode) === NoMode) {
	          // Outside of blocking mode, we commit the effects from the
	          // partially completed, timed-out tree, too.
	          var _progressedState2 = workInProgress.memoizedState;

	          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

	          _primaryChildFragment3.child = _progressedPrimaryChild2;
	          var _progressedChild3 = _progressedPrimaryChild2;

	          while (_progressedChild3 !== null) {
	            _progressedChild3.return = _primaryChildFragment3;
	            _progressedChild3 = _progressedChild3.sibling;
	          }
	        } // Because primaryChildFragment is a new fiber that we're inserting as the
	        // parent of a new tree, we need to set its treeBaseDuration.


	        if ( workInProgress.mode & ProfileMode) {
	          // treeBaseDuration is the sum of all the child tree base durations.
	          var _treeBaseDuration2 = 0;
	          var _hiddenChild2 = _primaryChildFragment3.child;

	          while (_hiddenChild2 !== null) {
	            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
	            _hiddenChild2 = _hiddenChild2.sibling;
	          }

	          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
	        } // Create a fragment from the fallback children, too.


	        var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

	        _fallbackChildFragment3.return = workInProgress;
	        _primaryChildFragment3.sibling = _fallbackChildFragment3;
	        _fallbackChildFragment3.effectTag |= Placement;
	        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
	        // fallback children.

	        workInProgress.memoizedState = SUSPENDED_MARKER;
	        workInProgress.child = _primaryChildFragment3;
	        return _fallbackChildFragment3;
	      } else {
	        // Still haven't timed out. Continue rendering the children, like we
	        // normally do.
	        workInProgress.memoizedState = null;
	        var _nextPrimaryChildren2 = nextProps.children;
	        return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
	      }
	    }
	  }
	}

	function scheduleWorkOnFiber(fiber, renderExpirationTime) {
	  if (fiber.expirationTime < renderExpirationTime) {
	    fiber.expirationTime = renderExpirationTime;
	  }

	  var alternate = fiber.alternate;

	  if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
	    alternate.expirationTime = renderExpirationTime;
	  }

	  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
	}

	function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
	  // Mark any Suspense boundaries with fallbacks as having work to do.
	  // If they were previously forced into fallbacks, they may now be able
	  // to unblock.
	  var node = firstChild;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        scheduleWorkOnFiber(node, renderExpirationTime);
	      }
	    } else if (node.tag === SuspenseListComponent) {
	      // If the tail is hidden there might not be an Suspense boundaries
	      // to schedule work on. In this case we have to schedule it on the
	      // list itself.
	      // We don't have to traverse to the children of the list since
	      // the list will propagate the change when it rerenders.
	      scheduleWorkOnFiber(node, renderExpirationTime);
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === workInProgress) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === workInProgress) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function findLastContentRow(firstChild) {
	  // This is going to find the last row among these children that is already
	  // showing content on the screen, as opposed to being in fallback state or
	  // new. If a row has multiple Suspense boundaries, any of them being in the
	  // fallback state, counts as the whole row being in a fallback state.
	  // Note that the "rows" will be workInProgress, but any nested children
	  // will still be current since we haven't rendered them yet. The mounted
	  // order may not be the same as the new order. We use the new order.
	  var row = firstChild;
	  var lastContentRow = null;

	  while (row !== null) {
	    var currentRow = row.alternate; // New rows can't be content rows.

	    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	      lastContentRow = row;
	    }

	    row = row.sibling;
	  }

	  return lastContentRow;
	}

	function validateRevealOrder(revealOrder) {
	  {
	    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
	      didWarnAboutRevealOrder[revealOrder] = true;

	      if (typeof revealOrder === 'string') {
	        switch (revealOrder.toLowerCase()) {
	          case 'together':
	          case 'forwards':
	          case 'backwards':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          case 'forward':
	          case 'backward':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          default:
	            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

	            break;
	        }
	      } else {
	        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
	      }
	    }
	  }
	}

	function validateTailOptions(tailMode, revealOrder) {
	  {
	    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
	      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
	      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
	      }
	    }
	  }
	}

	function validateSuspenseListNestedChild(childSlot, index) {
	  {
	    var isArray = Array.isArray(childSlot);
	    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

	    if (isArray || isIterable) {
	      var type = isArray ? 'array' : 'iterable';

	      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

	      return false;
	    }
	  }

	  return true;
	}

	function validateSuspenseListChildren(children, revealOrder) {
	  {
	    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
	      if (Array.isArray(children)) {
	        for (var i = 0; i < children.length; i++) {
	          if (!validateSuspenseListNestedChild(children[i], i)) {
	            return;
	          }
	        }
	      } else {
	        var iteratorFn = getIteratorFn(children);

	        if (typeof iteratorFn === 'function') {
	          var childrenIterator = iteratorFn.call(children);

	          if (childrenIterator) {
	            var step = childrenIterator.next();
	            var _i = 0;

	            for (; !step.done; step = childrenIterator.next()) {
	              if (!validateSuspenseListNestedChild(step.value, _i)) {
	                return;
	              }

	              _i++;
	            }
	          }
	        } else {
	          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
	        }
	      }
	    }
	  }
	}

	function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
	  var renderState = workInProgress.memoizedState;

	  if (renderState === null) {
	    workInProgress.memoizedState = {
	      isBackwards: isBackwards,
	      rendering: null,
	      renderingStartTime: 0,
	      last: lastContentRow,
	      tail: tail,
	      tailExpiration: 0,
	      tailMode: tailMode,
	      lastEffect: lastEffectBeforeRendering
	    };
	  } else {
	    // We can reuse the existing object from previous renders.
	    renderState.isBackwards = isBackwards;
	    renderState.rendering = null;
	    renderState.renderingStartTime = 0;
	    renderState.last = lastContentRow;
	    renderState.tail = tail;
	    renderState.tailExpiration = 0;
	    renderState.tailMode = tailMode;
	    renderState.lastEffect = lastEffectBeforeRendering;
	  }
	} // This can end up rendering this component multiple passes.
	// The first pass splits the children fibers into two sets. A head and tail.
	// We first render the head. If anything is in fallback state, we do another
	// pass through beginWork to rerender all children (including the tail) with
	// the force suspend context. If the first render didn't have anything in
	// in fallback state. Then we render each row in the tail one-by-one.
	// That happens in the completeWork phase without going back to beginWork.


	function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
	  var nextProps = workInProgress.pendingProps;
	  var revealOrder = nextProps.revealOrder;
	  var tailMode = nextProps.tail;
	  var newChildren = nextProps.children;
	  validateRevealOrder(revealOrder);
	  validateTailOptions(tailMode, revealOrder);
	  validateSuspenseListChildren(newChildren, revealOrder);
	  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
	  var suspenseContext = suspenseStackCursor.current;
	  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

	  if (shouldForceFallback) {
	    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	    workInProgress.effectTag |= DidCapture;
	  } else {
	    var didSuspendBefore = current !== null && (current.effectTag & DidCapture) !== NoEffect;

	    if (didSuspendBefore) {
	      // If we previously forced a fallback, we need to schedule work
	      // on any nested boundaries to let them know to try to render
	      // again. This is the same as context updating.
	      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
	    }

	    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  }

	  pushSuspenseContext(workInProgress, suspenseContext);

	  if ((workInProgress.mode & BlockingMode) === NoMode) {
	    // Outside of blocking mode, SuspenseList doesn't work so we just
	    // use make it a noop by treating it as the default revealOrder.
	    workInProgress.memoizedState = null;
	  } else {
	    switch (revealOrder) {
	      case 'forwards':
	        {
	          var lastContentRow = findLastContentRow(workInProgress.child);
	          var tail;

	          if (lastContentRow === null) {
	            // The whole list is part of the tail.
	            // TODO: We could fast path by just rendering the tail now.
	            tail = workInProgress.child;
	            workInProgress.child = null;
	          } else {
	            // Disconnect the tail rows after the content row.
	            // We're going to render them separately later.
	            tail = lastContentRow.sibling;
	            lastContentRow.sibling = null;
	          }

	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          tail, lastContentRow, tailMode, workInProgress.lastEffect);
	          break;
	        }

	      case 'backwards':
	        {
	          // We're going to find the first row that has existing content.
	          // At the same time we're going to reverse the list of everything
	          // we pass in the meantime. That's going to be our tail in reverse
	          // order.
	          var _tail = null;
	          var row = workInProgress.child;
	          workInProgress.child = null;

	          while (row !== null) {
	            var currentRow = row.alternate; // New rows can't be content rows.

	            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	              // This is the beginning of the main content.
	              workInProgress.child = row;
	              break;
	            }

	            var nextRow = row.sibling;
	            row.sibling = _tail;
	            _tail = row;
	            row = nextRow;
	          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


	          initSuspenseListRenderState(workInProgress, true, // isBackwards
	          _tail, null, // last
	          tailMode, workInProgress.lastEffect);
	          break;
	        }

	      case 'together':
	        {
	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          null, // tail
	          null, // last
	          undefined, workInProgress.lastEffect);
	          break;
	        }

	      default:
	        {
	          // The default reveal order is the same as not having
	          // a boundary.
	          workInProgress.memoizedState = null;
	        }
	    }
	  }

	  return workInProgress.child;
	}

	function updatePortalComponent(current, workInProgress, renderExpirationTime) {
	  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	  var nextChildren = workInProgress.pendingProps;

	  if (current === null) {
	    // Portals are special because we don't append the children during mount
	    // but at commit. Therefore we need to track insertions which the normal
	    // flow doesn't do during mount. This doesn't happen at the root because
	    // the root always starts with a "current" with a null child.
	    // TODO: Consider unifying this with how the root works.
	    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
	  }

	  return workInProgress.child;
	}

	function updateContextProvider(current, workInProgress, renderExpirationTime) {
	  var providerType = workInProgress.type;
	  var context = providerType._context;
	  var newProps = workInProgress.pendingProps;
	  var oldProps = workInProgress.memoizedProps;
	  var newValue = newProps.value;

	  {
	    var providerPropTypes = workInProgress.type.propTypes;

	    if (providerPropTypes) {
	      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
	    }
	  }

	  pushProvider(workInProgress, newValue);

	  if (oldProps !== null) {
	    var oldValue = oldProps.value;
	    var changedBits = calculateChangedBits(context, newValue, oldValue);

	    if (changedBits === 0) {
	      // No change. Bailout early if children are the same.
	      if (oldProps.children === newProps.children && !hasContextChanged()) {
	        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	      }
	    } else {
	      // The context value changed. Search for matching consumers and schedule
	      // them to update.
	      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
	    }
	  }

	  var newChildren = newProps.children;
	  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	var hasWarnedAboutUsingContextAsConsumer = false;

	function updateContextConsumer(current, workInProgress, renderExpirationTime) {
	  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
	  // DEV mode, we create a separate object for Context.Consumer that acts
	  // like a proxy to Context. This proxy object adds unnecessary code in PROD
	  // so we use the old behaviour (Context.Consumer references Context) to
	  // reduce size and overhead. The separate object references context via
	  // a property called "_context", which also gives us the ability to check
	  // in DEV mode if this property exists or not and warn if it does not.

	  {
	    if (context._context === undefined) {
	      // This may be because it's a Context (rather than a Consumer).
	      // Or it may be because it's older React where they're the same thing.
	      // We only want to warn if we're sure it's a new React.
	      if (context !== context.Consumer) {
	        if (!hasWarnedAboutUsingContextAsConsumer) {
	          hasWarnedAboutUsingContextAsConsumer = true;

	          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	        }
	      }
	    } else {
	      context = context._context;
	    }
	  }

	  var newProps = workInProgress.pendingProps;
	  var render = newProps.children;

	  {
	    if (typeof render !== 'function') {
	      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
	    }
	  }

	  prepareToReadContext(workInProgress, renderExpirationTime);
	  var newValue = readContext(context, newProps.unstable_observedBits);
	  var newChildren;

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    newChildren = render(newValue);
	    setIsRendering(false);
	  } // React DevTools reads this flag.


	  workInProgress.effectTag |= PerformedWork;
	  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
	  return workInProgress.child;
	}

	function markWorkInProgressReceivedUpdate() {
	  didReceiveUpdate = true;
	}

	function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
	  cancelWorkTimer(workInProgress);

	  if (current !== null) {
	    // Reuse previous dependencies
	    workInProgress.dependencies = current.dependencies;
	  }

	  {
	    // Don't update "base" render times for bailouts.
	    stopProfilerTimerIfRunning();
	  }

	  var updateExpirationTime = workInProgress.expirationTime;

	  if (updateExpirationTime !== NoWork) {
	    markUnprocessedUpdateTime(updateExpirationTime);
	  } // Check if the children have any pending work.


	  var childExpirationTime = workInProgress.childExpirationTime;

	  if (childExpirationTime < renderExpirationTime) {
	    // The children don't have any work either. We can skip them.
	    // TODO: Once we add back resuming, we should check if the children are
	    // a work-in-progress set. If so, we need to transfer their effects.
	    return null;
	  } else {
	    // This fiber doesn't have work, but its subtree does. Clone the child
	    // fibers and continue.
	    cloneChildFibers(current, workInProgress);
	    return workInProgress.child;
	  }
	}

	function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
	  {
	    var returnFiber = oldWorkInProgress.return;

	    if (returnFiber === null) {
	      throw new Error('Cannot swap the root fiber.');
	    } // Disconnect from the old current.
	    // It will get deleted.


	    current.alternate = null;
	    oldWorkInProgress.alternate = null; // Connect to the new tree.

	    newWorkInProgress.index = oldWorkInProgress.index;
	    newWorkInProgress.sibling = oldWorkInProgress.sibling;
	    newWorkInProgress.return = oldWorkInProgress.return;
	    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

	    if (oldWorkInProgress === returnFiber.child) {
	      returnFiber.child = newWorkInProgress;
	    } else {
	      var prevSibling = returnFiber.child;

	      if (prevSibling === null) {
	        throw new Error('Expected parent to have a child.');
	      }

	      while (prevSibling.sibling !== oldWorkInProgress) {
	        prevSibling = prevSibling.sibling;

	        if (prevSibling === null) {
	          throw new Error('Expected to find the previous sibling.');
	        }
	      }

	      prevSibling.sibling = newWorkInProgress;
	    } // Delete the old fiber and place the new one.
	    // Since the old fiber is disconnected, we have to schedule it manually.


	    var last = returnFiber.lastEffect;

	    if (last !== null) {
	      last.nextEffect = current;
	      returnFiber.lastEffect = current;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = current;
	    }

	    current.nextEffect = null;
	    current.effectTag = Deletion;
	    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

	    return newWorkInProgress;
	  }
	}

	function beginWork(current, workInProgress, renderExpirationTime) {
	  var updateExpirationTime = workInProgress.expirationTime;

	  {
	    if (workInProgress._debugNeedsRemount && current !== null) {
	      // This will restart the begin phase with a new fiber.
	      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
	    }
	  }

	  if (current !== null) {
	    var oldProps = current.memoizedProps;
	    var newProps = workInProgress.pendingProps;

	    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
	     workInProgress.type !== current.type )) {
	      // If props or context changed, mark the fiber as having performed work.
	      // This may be unset if the props are determined to be equal later (memo).
	      didReceiveUpdate = true;
	    } else if (updateExpirationTime < renderExpirationTime) {
	      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
	      // the begin phase. There's still some bookkeeping we that needs to be done
	      // in this optimized path, mostly pushing stuff onto the stack.

	      switch (workInProgress.tag) {
	        case HostRoot:
	          pushHostRootContext(workInProgress);
	          resetHydrationState();
	          break;

	        case HostComponent:
	          pushHostContext(workInProgress);

	          if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
	            {
	              markSpawnedWork(Never);
	            } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
	            return null;
	          }

	          break;

	        case ClassComponent:
	          {
	            var Component = workInProgress.type;

	            if (isContextProvider(Component)) {
	              pushContextProvider(workInProgress);
	            }

	            break;
	          }

	        case HostPortal:
	          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	          break;

	        case ContextProvider:
	          {
	            var newValue = workInProgress.memoizedProps.value;
	            pushProvider(workInProgress, newValue);
	            break;
	          }

	        case Profiler:
	          {
	            // Profiler should only call onRender when one of its descendants actually rendered.
	            var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

	            if (hasChildWork) {
	              workInProgress.effectTag |= Update;
	            }
	          }

	          break;

	        case SuspenseComponent:
	          {
	            var state = workInProgress.memoizedState;

	            if (state !== null) {
	              // whether to retry the primary children, or to skip over it and
	              // go straight to the fallback. Check the priority of the primary
	              // child fragment.


	              var primaryChildFragment = workInProgress.child;
	              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

	              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
	                // The primary children have pending work. Use the normal path
	                // to attempt to render the primary children again.
	                return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
	              } else {
	                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
	                // priority. Bailout.

	                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);

	                if (child !== null) {
	                  // The fallback children have pending work. Skip over the
	                  // primary children and work on the fallback.
	                  return child.sibling;
	                } else {
	                  return null;
	                }
	              }
	            } else {
	              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
	            }

	            break;
	          }

	        case SuspenseListComponent:
	          {
	            var didSuspendBefore = (current.effectTag & DidCapture) !== NoEffect;

	            var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

	            if (didSuspendBefore) {
	              if (_hasChildWork) {
	                // If something was in fallback state last time, and we have all the
	                // same children then we're still in progressive loading state.
	                // Something might get unblocked by state updates or retries in the
	                // tree which will affect the tail. So we need to use the normal
	                // path to compute the correct tail.
	                return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
	              } // If none of the children had any work, that means that none of
	              // them got retried so they'll still be blocked in the same way
	              // as before. We can fast bail out.


	              workInProgress.effectTag |= DidCapture;
	            } // If nothing suspended before and we're rendering the same children,
	            // then the tail doesn't matter. Anything new that suspends will work
	            // in the "together" mode, so we can continue from the state we had.


	            var renderState = workInProgress.memoizedState;

	            if (renderState !== null) {
	              // Reset to the "together" mode in case we've started a different
	              // update in the past but didn't complete it.
	              renderState.rendering = null;
	              renderState.tail = null;
	            }

	            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

	            if (_hasChildWork) {
	              break;
	            } else {
	              // If none of the children had any work, that means that none of
	              // them got retried so they'll still be blocked in the same way
	              // as before. We can fast bail out.
	              return null;
	            }
	          }
	      }

	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
	    } else {
	      // An update was scheduled on this fiber, but there are no new props
	      // nor legacy context. Set this to false. If an update queue or context
	      // consumer produces a changed value, it will set this to true. Otherwise,
	      // the component will assume the children have not changed and bail out.
	      didReceiveUpdate = false;
	    }
	  } else {
	    didReceiveUpdate = false;
	  } // Before entering the begin phase, clear pending update priority.
	  // TODO: This assumes that we're about to evaluate the component and process
	  // the update queue. However, there's an exception: SimpleMemoComponent
	  // sometimes bails out later in the begin phase. This indicates that we should
	  // move this assignment out of the common path and into each branch.


	  workInProgress.expirationTime = NoWork;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      {
	        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderExpirationTime);
	      }

	    case LazyComponent:
	      {
	        var elementType = workInProgress.elementType;
	        return mountLazyComponent(current, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
	      }

	    case FunctionComponent:
	      {
	        var _Component = workInProgress.type;
	        var unresolvedProps = workInProgress.pendingProps;
	        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
	        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderExpirationTime);
	      }

	    case ClassComponent:
	      {
	        var _Component2 = workInProgress.type;
	        var _unresolvedProps = workInProgress.pendingProps;

	        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

	        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
	      }

	    case HostRoot:
	      return updateHostRoot(current, workInProgress, renderExpirationTime);

	    case HostComponent:
	      return updateHostComponent(current, workInProgress, renderExpirationTime);

	    case HostText:
	      return updateHostText(current, workInProgress);

	    case SuspenseComponent:
	      return updateSuspenseComponent(current, workInProgress, renderExpirationTime);

	    case HostPortal:
	      return updatePortalComponent(current, workInProgress, renderExpirationTime);

	    case ForwardRef:
	      {
	        var type = workInProgress.type;
	        var _unresolvedProps2 = workInProgress.pendingProps;

	        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

	        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderExpirationTime);
	      }

	    case Fragment:
	      return updateFragment(current, workInProgress, renderExpirationTime);

	    case Mode:
	      return updateMode(current, workInProgress, renderExpirationTime);

	    case Profiler:
	      return updateProfiler(current, workInProgress, renderExpirationTime);

	    case ContextProvider:
	      return updateContextProvider(current, workInProgress, renderExpirationTime);

	    case ContextConsumer:
	      return updateContextConsumer(current, workInProgress, renderExpirationTime);

	    case MemoComponent:
	      {
	        var _type2 = workInProgress.type;
	        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

	        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = _type2.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
	              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
	            }
	          }
	        }

	        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
	        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
	      }

	    case SimpleMemoComponent:
	      {
	        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
	      }

	    case IncompleteClassComponent:
	      {
	        var _Component3 = workInProgress.type;
	        var _unresolvedProps4 = workInProgress.pendingProps;

	        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

	        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
	      }

	    case SuspenseListComponent:
	      {
	        return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
	      }
	  }

	  {
	    {
	      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function markUpdate(workInProgress) {
	  // Tag the fiber with an update effect. This turns a Placement into
	  // a PlacementAndUpdate.
	  workInProgress.effectTag |= Update;
	}

	function markRef$1(workInProgress) {
	  workInProgress.effectTag |= Ref;
	}

	var appendAllChildren;
	var updateHostContainer;
	var updateHostComponent$1;
	var updateHostText$1;

	{
	  // Mutation mode
	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;

	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === workInProgress) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (workInProgress) {// Noop
	  };

	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // If we have an alternate, that means this is an update and we need to
	    // schedule a side-effect to do the updates.
	    var oldProps = current.memoizedProps;

	    if (oldProps === newProps) {
	      // In mutation mode, this is sufficient for a bailout because
	      // we won't touch this node even if children changed.
	      return;
	    } // If we get updated because one of our children updated, we don't
	    // have newProps so we'll have to reuse them.
	    // TODO: Split the update API as separate for the props vs. children.
	    // Even better would be if children weren't special cased at all tho.


	    var instance = workInProgress.stateNode;
	    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
	    // component is hitting the resume path. Figure out why. Possibly
	    // related to `hidden`.

	    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

	    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update. All the work is done in commitWork.

	    if (updatePayload) {
	      markUpdate(workInProgress);
	    }
	  };

	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // If the text differs, mark it as an update. All the work in done in commitWork.
	    if (oldText !== newText) {
	      markUpdate(workInProgress);
	    }
	  };
	}

	function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
	  switch (renderState.tailMode) {
	    case 'hidden':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var tailNode = renderState.tail;
	        var lastTailNode = null;

	        while (tailNode !== null) {
	          if (tailNode.alternate !== null) {
	            lastTailNode = tailNode;
	          }

	          tailNode = tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          renderState.tail = null;
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          lastTailNode.sibling = null;
	        }

	        break;
	      }

	    case 'collapsed':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var _tailNode = renderState.tail;
	        var _lastTailNode = null;

	        while (_tailNode !== null) {
	          if (_tailNode.alternate !== null) {
	            _lastTailNode = _tailNode;
	          }

	          _tailNode = _tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (_lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          if (!hasRenderedATailFallback && renderState.tail !== null) {
	            // We suspended during the head. We want to show at least one
	            // row at the tail. So we'll keep on and cut off the rest.
	            renderState.tail.sibling = null;
	          } else {
	            renderState.tail = null;
	          }
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          _lastTailNode.sibling = null;
	        }

	        break;
	      }
	  }
	}

	function completeWork(current, workInProgress, renderExpirationTime) {
	  var newProps = workInProgress.pendingProps;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	    case LazyComponent:
	    case SimpleMemoComponent:
	    case FunctionComponent:
	    case ForwardRef:
	    case Fragment:
	    case Mode:
	    case Profiler:
	    case ContextConsumer:
	    case MemoComponent:
	      return null;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var fiberRoot = workInProgress.stateNode;

	        if (fiberRoot.pendingContext) {
	          fiberRoot.context = fiberRoot.pendingContext;
	          fiberRoot.pendingContext = null;
	        }

	        if (current === null || current.child === null) {
	          // If we hydrated, pop so that we can delete any remaining children
	          // that weren't hydrated.
	          var wasHydrated = popHydrationState(workInProgress);

	          if (wasHydrated) {
	            // If we hydrated, then we'll need to schedule an update for
	            // the commit side-effects on the root.
	            markUpdate(workInProgress);
	          }
	        }

	        updateHostContainer(workInProgress);
	        return null;
	      }

	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        var rootContainerInstance = getRootHostContainer();
	        var type = workInProgress.type;

	        if (current !== null && workInProgress.stateNode != null) {
	          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

	          if (current.ref !== workInProgress.ref) {
	            markRef$1(workInProgress);
	          }
	        } else {
	          if (!newProps) {
	            if (!(workInProgress.stateNode !== null)) {
	              {
	                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
	              }
	            } // This can happen when we abort work.


	            return null;
	          }

	          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
	          // "stack" as the parent. Then append children as we go in beginWork
	          // or completeWork depending on whether we want to add them top->down or
	          // bottom->up. Top->down is faster in IE11.

	          var _wasHydrated = popHydrationState(workInProgress);

	          if (_wasHydrated) {
	            // TODO: Move this and createInstance step into the beginPhase
	            // to consolidate.
	            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
	              // If changes to the hydrated node need to be applied at the
	              // commit-phase we mark this as such.
	              markUpdate(workInProgress);
	            }
	          } else {
	            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
	            appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners

	            workInProgress.stateNode = instance;
	            // (eg DOM renderer supports auto-focus for certain elements).
	            // Make sure such renderers get scheduled for later work.


	            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
	              markUpdate(workInProgress);
	            }
	          }

	          if (workInProgress.ref !== null) {
	            // If there is a ref on a host node we need to schedule a callback
	            markRef$1(workInProgress);
	          }
	        }

	        return null;
	      }

	    case HostText:
	      {
	        var newText = newProps;

	        if (current && workInProgress.stateNode != null) {
	          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
	          // to schedule a side-effect to do the updates.

	          updateHostText$1(current, workInProgress, oldText, newText);
	        } else {
	          if (typeof newText !== 'string') {
	            if (!(workInProgress.stateNode !== null)) {
	              {
	                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
	              }
	            } // This can happen when we abort work.

	          }

	          var _rootContainerInstance = getRootHostContainer();

	          var _currentHostContext = getHostContext();

	          var _wasHydrated2 = popHydrationState(workInProgress);

	          if (_wasHydrated2) {
	            if (prepareToHydrateHostTextInstance(workInProgress)) {
	              markUpdate(workInProgress);
	            }
	          } else {
	            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
	          }
	        }

	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var nextState = workInProgress.memoizedState;

	        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
	          // Something suspended. Re-render with the fallback children.
	          workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

	          return workInProgress;
	        }

	        var nextDidTimeout = nextState !== null;
	        var prevDidTimeout = false;

	        if (current === null) {
	          if (workInProgress.memoizedProps.fallback !== undefined) {
	            popHydrationState(workInProgress);
	          }
	        } else {
	          var prevState = current.memoizedState;
	          prevDidTimeout = prevState !== null;

	          if (!nextDidTimeout && prevState !== null) {
	            // We just switched from the fallback to the normal children.
	            // Delete the fallback.
	            // TODO: Would it be better to store the fallback fragment on
	            // the stateNode during the begin phase?
	            var currentFallbackChild = current.child.sibling;

	            if (currentFallbackChild !== null) {
	              // Deletions go at the beginning of the return fiber's effect list
	              var first = workInProgress.firstEffect;

	              if (first !== null) {
	                workInProgress.firstEffect = currentFallbackChild;
	                currentFallbackChild.nextEffect = first;
	              } else {
	                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
	                currentFallbackChild.nextEffect = null;
	              }

	              currentFallbackChild.effectTag = Deletion;
	            }
	          }
	        }

	        if (nextDidTimeout && !prevDidTimeout) {
	          // If this subtreee is running in blocking mode we can suspend,
	          // otherwise we won't suspend.
	          // TODO: This will still suspend a synchronous tree if anything
	          // in the concurrent tree already suspended during this render.
	          // This is a known bug.
	          if ((workInProgress.mode & BlockingMode) !== NoMode) {
	            // TODO: Move this back to throwException because this is too late
	            // if this is a large tree which is common for initial loads. We
	            // don't know if we should restart a render or not until we get
	            // this marker, and this is too late.
	            // If this render already had a ping or lower pri updates,
	            // and this is the first time we know we're going to suspend we
	            // should be able to immediately restart from within throwException.
	            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

	            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
	              // If this was in an invisible tree or a new render, then showing
	              // this boundary is ok.
	              renderDidSuspend();
	            } else {
	              // Otherwise, we're going to have to hide content so we should
	              // suspend for longer if possible.
	              renderDidSuspendDelayIfPossible();
	            }
	          }
	        }

	        {
	          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
	          if (nextDidTimeout || prevDidTimeout) {
	            // If this boundary just timed out, schedule an effect to attach a
	            // retry listener to the promise. This flag is also used to hide the
	            // primary children. In mutation mode, we also need the flag to
	            // *unhide* children that were previously hidden, so check if this
	            // is currently timed out, too.
	            workInProgress.effectTag |= Update;
	          }
	        }

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      updateHostContainer(workInProgress);
	      return null;

	    case ContextProvider:
	      // Pop provider fiber
	      popProvider(workInProgress);
	      return null;

	    case IncompleteClassComponent:
	      {
	        // Same as class component case. I put it down here so that the tags are
	        // sequential to ensure this switch is compiled to a jump table.
	        var _Component = workInProgress.type;

	        if (isContextProvider(_Component)) {
	          popContext(workInProgress);
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var renderState = workInProgress.memoizedState;

	        if (renderState === null) {
	          // We're running in the default, "independent" mode.
	          // We don't do anything in this mode.
	          return null;
	        }

	        var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
	        var renderedTail = renderState.rendering;

	        if (renderedTail === null) {
	          // We just rendered the head.
	          if (!didSuspendAlready) {
	            // This is the first pass. We need to figure out if anything is still
	            // suspended in the rendered set.
	            // If new content unsuspended, but there's still some content that
	            // didn't. Then we need to do a second pass that forces everything
	            // to keep showing their fallbacks.
	            // We might be suspended if something in this render pass suspended, or
	            // something in the previous committed pass suspended. Otherwise,
	            // there's no chance so we can skip the expensive call to
	            // findFirstSuspended.
	            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

	            if (!cannotBeSuspended) {
	              var row = workInProgress.child;

	              while (row !== null) {
	                var suspended = findFirstSuspended(row);

	                if (suspended !== null) {
	                  didSuspendAlready = true;
	                  workInProgress.effectTag |= DidCapture;
	                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
	                  // part of the second pass. In that case nothing will subscribe to
	                  // its thennables. Instead, we'll transfer its thennables to the
	                  // SuspenseList so that it can retry if they resolve.
	                  // There might be multiple of these in the list but since we're
	                  // going to wait for all of them anyway, it doesn't really matter
	                  // which ones gets to ping. In theory we could get clever and keep
	                  // track of how many dependencies remain but it gets tricky because
	                  // in the meantime, we can add/remove/change items and dependencies.
	                  // We might bail out of the loop before finding any but that
	                  // doesn't matter since that means that the other boundaries that
	                  // we did find already has their listeners attached.

	                  var newThennables = suspended.updateQueue;

	                  if (newThennables !== null) {
	                    workInProgress.updateQueue = newThennables;
	                    workInProgress.effectTag |= Update;
	                  } // Rerender the whole list, but this time, we'll force fallbacks
	                  // to stay in place.
	                  // Reset the effect list before doing the second pass since that's now invalid.


	                  if (renderState.lastEffect === null) {
	                    workInProgress.firstEffect = null;
	                  }

	                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

	                  resetChildFibers(workInProgress, renderExpirationTime); // Set up the Suspense Context to force suspense and immediately
	                  // rerender the children.

	                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
	                  return workInProgress.child;
	                }

	                row = row.sibling;
	              }
	            }
	          } else {
	            cutOffTailIfNeeded(renderState, false);
	          } // Next we're going to render the tail.

	        } else {
	          // Append the rendered row to the child list.
	          if (!didSuspendAlready) {
	            var _suspended = findFirstSuspended(renderedTail);

	            if (_suspended !== null) {
	              workInProgress.effectTag |= DidCapture;
	              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
	              // get lost if this row ends up dropped during a second pass.

	              var _newThennables = _suspended.updateQueue;

	              if (_newThennables !== null) {
	                workInProgress.updateQueue = _newThennables;
	                workInProgress.effectTag |= Update;
	              }

	              cutOffTailIfNeeded(renderState, true); // This might have been modified.

	              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
	                // We need to delete the row we just rendered.
	                // Reset the effect list to what it was before we rendered this
	                // child. The nested children have already appended themselves.
	                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

	                if (lastEffect !== null) {
	                  lastEffect.nextEffect = null;
	                } // We're done.


	                return null;
	              }
	            } else if ( // The time it took to render last row is greater than time until
	            // the expiration.
	            now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime > Never) {
	              // We have now passed our CPU deadline and we'll just give up further
	              // attempts to render the main content and only render fallbacks.
	              // The assumption is that this is usually faster.
	              workInProgress.effectTag |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. If we can show
	              // them, then they really have the same priority as this render.
	              // So we'll pick it back up the very next render pass once we've had
	              // an opportunity to yield for paint.

	              var nextPriority = renderExpirationTime - 1;
	              workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

	              {
	                markSpawnedWork(nextPriority);
	              }
	            }
	          }

	          if (renderState.isBackwards) {
	            // The effect list of the backwards tail will have been added
	            // to the end. This breaks the guarantee that life-cycles fire in
	            // sibling order but that isn't a strong guarantee promised by React.
	            // Especially since these might also just pop in during future commits.
	            // Append to the beginning of the list.
	            renderedTail.sibling = workInProgress.child;
	            workInProgress.child = renderedTail;
	          } else {
	            var previousSibling = renderState.last;

	            if (previousSibling !== null) {
	              previousSibling.sibling = renderedTail;
	            } else {
	              workInProgress.child = renderedTail;
	            }

	            renderState.last = renderedTail;
	          }
	        }

	        if (renderState.tail !== null) {
	          // We still have tail rows to render.
	          if (renderState.tailExpiration === 0) {
	            // Heuristic for how long we're willing to spend rendering rows
	            // until we just give up and show what we have so far.
	            var TAIL_EXPIRATION_TIMEOUT_MS = 500;
	            renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS; // TODO: This is meant to mimic the train model or JND but this
	            // is a per component value. It should really be since the start
	            // of the total render or last commit. Consider using something like
	            // globalMostRecentFallbackTime. That doesn't account for being
	            // suspended for part of the time or when it's a new render.
	            // It should probably use a global start time value instead.
	          } // Pop a row.


	          var next = renderState.tail;
	          renderState.rendering = next;
	          renderState.tail = next.sibling;
	          renderState.lastEffect = workInProgress.lastEffect;
	          renderState.renderingStartTime = now();
	          next.sibling = null; // Restore the context.
	          // TODO: We can probably just avoid popping it instead and only
	          // setting it the first time we go from not suspended to suspended.

	          var suspenseContext = suspenseStackCursor.current;

	          if (didSuspendAlready) {
	            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	          } else {
	            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	          }

	          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

	          return next;
	        }

	        return null;
	      }
	  }

	  {
	    {
	      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function unwindWork(workInProgress, renderExpirationTime) {
	  switch (workInProgress.tag) {
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        var effectTag = workInProgress.effectTag;

	        if (effectTag & ShouldCapture) {
	          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
	          return workInProgress;
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        var _effectTag = workInProgress.effectTag;

	        if (!((_effectTag & DidCapture) === NoEffect)) {
	          {
	            throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
	          }
	        }

	        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
	        return workInProgress;
	      }

	    case HostComponent:
	      {
	        // TODO: popHydrationState
	        popHostContext(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);

	        var _effectTag2 = workInProgress.effectTag;

	        if (_effectTag2 & ShouldCapture) {
	          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

	          return workInProgress;
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
	        // caught by a nested boundary. If not, it should bubble through.

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      return null;

	    case ContextProvider:
	      popProvider(workInProgress);
	      return null;

	    default:
	      return null;
	  }
	}

	function unwindInterruptedWork(interruptedWork) {
	  switch (interruptedWork.tag) {
	    case ClassComponent:
	      {
	        var childContextTypes = interruptedWork.type.childContextTypes;

	        if (childContextTypes !== null && childContextTypes !== undefined) {
	          popContext(interruptedWork);
	        }

	        break;
	      }

	    case HostRoot:
	      {
	        popHostContainer(interruptedWork);
	        popTopLevelContextObject(interruptedWork);
	        break;
	      }

	    case HostComponent:
	      {
	        popHostContext(interruptedWork);
	        break;
	      }

	    case HostPortal:
	      popHostContainer(interruptedWork);
	      break;

	    case SuspenseComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case SuspenseListComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case ContextProvider:
	      popProvider(interruptedWork);
	      break;
	  }
	}

	function createCapturedValue(value, source) {
	  // If the value is an error, call this function immediately after it is thrown
	  // so the stack is accurate.
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source)
	  };
	}

	function logCapturedError(capturedError) {

	  var error = capturedError.error;

	  {
	    var componentName = capturedError.componentName,
	        componentStack = capturedError.componentStack,
	        errorBoundaryName = capturedError.errorBoundaryName,
	        errorBoundaryFound = capturedError.errorBoundaryFound,
	        willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
	    // `preventDefault()` in window `error` handler.
	    // We record this information as an expando on the error.

	    if (error != null && error._suppressLogging) {
	      if (errorBoundaryFound && willRetry) {
	        // The error is recoverable and was silenced.
	        // Ignore it and don't print the stack addendum.
	        // This is handy for testing error boundaries without noise.
	        return;
	      } // The error is fatal. Since the silencing might have
	      // been accidental, we'll surface it anyway.
	      // However, the browser would have silenced the original error
	      // so we'll print it first, and then print the stack addendum.


	      console['error'](error); // Don't transform to our wrapper
	      // For a more detailed description of this block, see:
	      // https://github.com/facebook/react/pull/13384
	    }

	    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
	    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

	    if (errorBoundaryFound && errorBoundaryName) {
	      if (willRetry) {
	        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
	      } else {
	        errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
	      }
	    } else {
	      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
	    }

	    var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
	    // We don't include the original error message and JS stack because the browser
	    // has already printed it. Even if the application swallows the error, it is still
	    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

	    console['error'](combinedMessage); // Don't transform to our wrapper
	  }
	}

	var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

	{
	  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	}

	var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
	function logError(boundary, errorInfo) {
	  var source = errorInfo.source;
	  var stack = errorInfo.stack;

	  if (stack === null && source !== null) {
	    stack = getStackByFiberInDevAndProd(source);
	  }

	  var capturedError = {
	    componentName: source !== null ? getComponentName(source.type) : null,
	    componentStack: stack !== null ? stack : '',
	    error: errorInfo.value,
	    errorBoundary: null,
	    errorBoundaryName: null,
	    errorBoundaryFound: false,
	    willRetry: false
	  };

	  if (boundary !== null && boundary.tag === ClassComponent) {
	    capturedError.errorBoundary = boundary.stateNode;
	    capturedError.errorBoundaryName = getComponentName(boundary.type);
	    capturedError.errorBoundaryFound = true;
	    capturedError.willRetry = true;
	  }

	  try {
	    logCapturedError(capturedError);
	  } catch (e) {
	    // This method must not throw, or React internal state will get messed up.
	    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
	    // we want to report this error outside of the normal stack as a last resort.
	    // https://github.com/facebook/react/issues/13188
	    setTimeout(function () {
	      throw e;
	    });
	  }
	}

	var callComponentWillUnmountWithTimer = function (current, instance) {
	  startPhaseTimer(current, 'componentWillUnmount');
	  instance.props = current.memoizedProps;
	  instance.state = current.memoizedState;
	  instance.componentWillUnmount();
	  stopPhaseTimer();
	}; // Capture errors so they don't interrupt unmounting.


	function safelyCallComponentWillUnmount(current, instance) {
	  {
	    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

	    if (hasCaughtError()) {
	      var unmountError = clearCaughtError();
	      captureCommitPhaseError(current, unmountError);
	    }
	  }
	}

	function safelyDetachRef(current) {
	  var ref = current.ref;

	  if (ref !== null) {
	    if (typeof ref === 'function') {
	      {
	        invokeGuardedCallback(null, ref, null, null);

	        if (hasCaughtError()) {
	          var refError = clearCaughtError();
	          captureCommitPhaseError(current, refError);
	        }
	      }
	    } else {
	      ref.current = null;
	    }
	  }
	}

	function safelyCallDestroy(current, destroy) {
	  {
	    invokeGuardedCallback(null, destroy, null);

	    if (hasCaughtError()) {
	      var error = clearCaughtError();
	      captureCommitPhaseError(current, error);
	    }
	  }
	}

	function commitBeforeMutationLifeCycles(current, finishedWork) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        return;
	      }

	    case ClassComponent:
	      {
	        if (finishedWork.effectTag & Snapshot) {
	          if (current !== null) {
	            var prevProps = current.memoizedProps;
	            var prevState = current.memoizedState;
	            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
	            var instance = finishedWork.stateNode; // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }
	              }
	            }

	            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

	            {
	              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

	              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
	                didWarnSet.add(finishedWork.type);

	                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
	              }
	            }

	            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
	            stopPhaseTimer();
	          }
	        }

	        return;
	      }

	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case IncompleteClassComponent:
	      // Nothing to do for these component types
	      return;
	  }

	  {
	    {
	      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function commitHookEffectListUnmount(tag, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & tag) === tag) {
	        // Unmount
	        var destroy = effect.destroy;
	        effect.destroy = undefined;

	        if (destroy !== undefined) {
	          destroy();
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitHookEffectListMount(tag, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & tag) === tag) {
	        // Mount
	        var create = effect.create;
	        effect.destroy = create();

	        {
	          var destroy = effect.destroy;

	          if (destroy !== undefined && typeof destroy !== 'function') {
	            var addendum = void 0;

	            if (destroy === null) {
	              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
	            } else if (typeof destroy.then === 'function') {
	              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
	            } else {
	              addendum = ' You returned: ' + destroy;
	            }

	            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitPassiveHookEffects(finishedWork) {
	  if ((finishedWork.effectTag & Passive) !== NoEffect) {
	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	      case Block:
	        {
	          // TODO (#17945) We should call all passive destroy functions (for all fibers)
	          // before calling any create functions. The current approach only serializes
	          // these for a single fiber.
	          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
	          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
	          break;
	        }
	    }
	  }
	}

	function commitLifeCycles(finishedRoot, current, finishedWork, committedExpirationTime) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        // At this point layout effects have already been destroyed (during mutation phase).
	        // This is done to prevent sibling component effects from interfering with each other,
	        // e.g. a destroy function in one component should never override a ref set
	        // by a create function in another component during the same commit.
	        commitHookEffectListMount(Layout | HasEffect, finishedWork);

	        return;
	      }

	    case ClassComponent:
	      {
	        var instance = finishedWork.stateNode;

	        if (finishedWork.effectTag & Update) {
	          if (current === null) {
	            startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }
	              }
	            }

	            instance.componentDidMount();
	            stopPhaseTimer();
	          } else {
	            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
	            var prevState = current.memoizedState;
	            startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	                }
	              }
	            }

	            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	            stopPhaseTimer();
	          }
	        }

	        var updateQueue = finishedWork.updateQueue;

	        if (updateQueue !== null) {
	          {
	            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	              if (instance.props !== finishedWork.memoizedProps) {
	                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	              }

	              if (instance.state !== finishedWork.memoizedState) {
	                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
	              }
	            }
	          } // We could update instance props and state here,
	          // but instead we rely on them being set during last render.
	          // TODO: revisit this when we implement resuming.


	          commitUpdateQueue(finishedWork, updateQueue, instance);
	        }

	        return;
	      }

	    case HostRoot:
	      {
	        var _updateQueue = finishedWork.updateQueue;

	        if (_updateQueue !== null) {
	          var _instance = null;

	          if (finishedWork.child !== null) {
	            switch (finishedWork.child.tag) {
	              case HostComponent:
	                _instance = getPublicInstance(finishedWork.child.stateNode);
	                break;

	              case ClassComponent:
	                _instance = finishedWork.child.stateNode;
	                break;
	            }
	          }

	          commitUpdateQueue(finishedWork, _updateQueue, _instance);
	        }

	        return;
	      }

	    case HostComponent:
	      {
	        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
	        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	        // These effects should only be committed when components are first mounted,
	        // aka when there is no current/alternate.

	        if (current === null && finishedWork.effectTag & Update) {
	          var type = finishedWork.type;
	          var props = finishedWork.memoizedProps;
	          commitMount(_instance2, type, props);
	        }

	        return;
	      }

	    case HostText:
	      {
	        // We have no life-cycles associated with text.
	        return;
	      }

	    case HostPortal:
	      {
	        // We have no life-cycles associated with portals.
	        return;
	      }

	    case Profiler:
	      {
	        {
	          var onRender = finishedWork.memoizedProps.onRender;

	          if (typeof onRender === 'function') {
	            {
	              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
	            }
	          }
	        }

	        return;
	      }

	    case SuspenseComponent:
	      {
	        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	        return;
	      }

	    case SuspenseListComponent:
	    case IncompleteClassComponent:
	    case FundamentalComponent:
	    case ScopeComponent:
	      return;
	  }

	  {
	    {
	      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function hideOrUnhideAllChildren(finishedWork, isHidden) {
	  {
	    // We only have the top Fiber that was inserted but we need to recurse down its
	    // children to find all the terminal nodes.
	    var node = finishedWork;

	    while (true) {
	      if (node.tag === HostComponent) {
	        var instance = node.stateNode;

	        if (isHidden) {
	          hideInstance(instance);
	        } else {
	          unhideInstance(node.stateNode, node.memoizedProps);
	        }
	      } else if (node.tag === HostText) {
	        var _instance3 = node.stateNode;

	        if (isHidden) {
	          hideTextInstance(_instance3);
	        } else {
	          unhideTextInstance(_instance3, node.memoizedProps);
	        }
	      } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
	        // Found a nested Suspense component that timed out. Skip over the
	        // primary child fragment, which should remain hidden.
	        var fallbackChildFragment = node.child.sibling;
	        fallbackChildFragment.return = node;
	        node = fallbackChildFragment;
	        continue;
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === finishedWork) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === finishedWork) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	}

	function commitAttachRef(finishedWork) {
	  var ref = finishedWork.ref;

	  if (ref !== null) {
	    var instance = finishedWork.stateNode;
	    var instanceToUse;

	    switch (finishedWork.tag) {
	      case HostComponent:
	        instanceToUse = getPublicInstance(instance);
	        break;

	      default:
	        instanceToUse = instance;
	    } // Moved outside to ensure DCE works with this flag

	    if (typeof ref === 'function') {
	      ref(instanceToUse);
	    } else {
	      {
	        if (!ref.hasOwnProperty('current')) {
	          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
	        }
	      }

	      ref.current = instanceToUse;
	    }
	  }
	}

	function commitDetachRef(current) {
	  var currentRef = current.ref;

	  if (currentRef !== null) {
	    if (typeof currentRef === 'function') {
	      currentRef(null);
	    } else {
	      currentRef.current = null;
	    }
	  }
	} // User-originating errors (lifecycles and refs) should not interrupt
	// deletion, so don't let them throw. Host-originating errors should
	// interrupt deletion, so it's okay


	function commitUnmount(finishedRoot, current, renderPriorityLevel) {
	  onCommitUnmount(current);

	  switch (current.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        var updateQueue = current.updateQueue;

	        if (updateQueue !== null) {
	          var lastEffect = updateQueue.lastEffect;

	          if (lastEffect !== null) {
	            var firstEffect = lastEffect.next;

	            {
	              // When the owner fiber is deleted, the destroy function of a passive
	              // effect hook is called during the synchronous commit phase. This is
	              // a concession to implementation complexity. Calling it in the
	              // passive effect phase (like they usually are, when dependencies
	              // change during an update) would require either traversing the
	              // children of the deleted fiber again, or including unmount effects
	              // as part of the fiber effect list.
	              //
	              // Because this is during the sync commit phase, we need to change
	              // the priority.
	              //
	              // TODO: Reconsider this implementation trade off.
	              var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
	              runWithPriority$1(priorityLevel, function () {
	                var effect = firstEffect;

	                do {
	                  var _destroy = effect.destroy;

	                  if (_destroy !== undefined) {
	                    safelyCallDestroy(current, _destroy);
	                  }

	                  effect = effect.next;
	                } while (effect !== firstEffect);
	              });
	            }
	          }
	        }

	        return;
	      }

	    case ClassComponent:
	      {
	        safelyDetachRef(current);
	        var instance = current.stateNode;

	        if (typeof instance.componentWillUnmount === 'function') {
	          safelyCallComponentWillUnmount(current, instance);
	        }

	        return;
	      }

	    case HostComponent:
	      {

	        safelyDetachRef(current);
	        return;
	      }

	    case HostPortal:
	      {
	        // TODO: this is recursive.
	        // We are also not using this parent because
	        // the portal will get pushed immediately.
	        {
	          unmountHostComponents(finishedRoot, current, renderPriorityLevel);
	        }

	        return;
	      }

	    case FundamentalComponent:
	      {

	        return;
	      }

	    case DehydratedFragment:
	      {

	        return;
	      }

	    case ScopeComponent:
	      {

	        return;
	      }
	  }
	}

	function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
	  // While we're inside a removed host node we don't want to call
	  // removeChild on the inner nodes because they're removed by the top
	  // call anyway. We also want to call componentWillUnmount on all
	  // composites before this host node is removed from the tree. Therefore
	  // we do an inner loop while we're still inside the host node.
	  var node = root;

	  while (true) {
	    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
	    // Skip portals because commitUnmount() currently visits them recursively.

	    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
	    // If we don't use mutation we drill down into portals here instead.
	     node.tag !== HostPortal)) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === root) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === root) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function detachFiber(current) {
	  var alternate = current.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
	  // should clear the child pointer of the parent alternate to let this
	  // get GC:ed but we don't know which for sure which parent is the current
	  // one so we'll settle for GC:ing the subtree of this child. This child
	  // itself will be GC:ed when the parent updates the next time.

	  current.return = null;
	  current.child = null;
	  current.memoizedState = null;
	  current.updateQueue = null;
	  current.dependencies = null;
	  current.alternate = null;
	  current.firstEffect = null;
	  current.lastEffect = null;
	  current.pendingProps = null;
	  current.memoizedProps = null;
	  current.stateNode = null;

	  if (alternate !== null) {
	    detachFiber(alternate);
	  }
	}

	function getHostParentFiber(fiber) {
	  var parent = fiber.return;

	  while (parent !== null) {
	    if (isHostParent(parent)) {
	      return parent;
	    }

	    parent = parent.return;
	  }

	  {
	    {
	      throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function isHostParent(fiber) {
	  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	}

	function getHostSibling(fiber) {
	  // We're going to search forward into the tree until we find a sibling host
	  // node. Unfortunately, if multiple insertions are done in a row we have to
	  // search past them. This leads to exponential search for the next sibling.
	  // TODO: Find a more efficient way to do this.
	  var node = fiber;

	  siblings: while (true) {
	    // If we didn't find anything, let's try the next sibling.
	    while (node.sibling === null) {
	      if (node.return === null || isHostParent(node.return)) {
	        // If we pop out of the root or hit the parent the fiber we are the
	        // last sibling.
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;

	    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
	      // If it is not host node and, we might have a host node inside it.
	      // Try to search down until we find one.
	      if (node.effectTag & Placement) {
	        // If we don't have a child, try the siblings instead.
	        continue siblings;
	      } // If we don't have a child, try the siblings instead.
	      // We also skip portals because they are not part of this host tree.


	      if (node.child === null || node.tag === HostPortal) {
	        continue siblings;
	      } else {
	        node.child.return = node;
	        node = node.child;
	      }
	    } // Check if this host node is stable or about to be placed.


	    if (!(node.effectTag & Placement)) {
	      // Found it!
	      return node.stateNode;
	    }
	  }
	}

	function commitPlacement(finishedWork) {


	  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

	  var parent;
	  var isContainer;
	  var parentStateNode = parentFiber.stateNode;

	  switch (parentFiber.tag) {
	    case HostComponent:
	      parent = parentStateNode;
	      isContainer = false;
	      break;

	    case HostRoot:
	      parent = parentStateNode.containerInfo;
	      isContainer = true;
	      break;

	    case HostPortal:
	      parent = parentStateNode.containerInfo;
	      isContainer = true;
	      break;

	    case FundamentalComponent:

	    // eslint-disable-next-line-no-fallthrough

	    default:
	      {
	        {
	          throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
	        }
	      }

	  }

	  if (parentFiber.effectTag & ContentReset) {
	    // Reset the text content of the parent before doing any insertions
	    resetTextContent(parent); // Clear ContentReset from the effect tag

	    parentFiber.effectTag &= ~ContentReset;
	  }

	  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
	  // children to find all the terminal nodes.

	  if (isContainer) {
	    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
	  } else {
	    insertOrAppendPlacementNode(finishedWork, before, parent);
	  }
	}

	function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost || enableFundamentalAPI ) {
	    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

	    if (before) {
	      insertInContainerBefore(parent, stateNode, before);
	    } else {
	      appendChildToContainer(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	}

	function insertOrAppendPlacementNode(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost || enableFundamentalAPI ) {
	    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

	    if (before) {
	      insertBefore(parent, stateNode, before);
	    } else {
	      appendChild(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNode(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNode(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	}

	function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
	  // We only have the top Fiber that was deleted but we need to recurse down its
	  // children to find all the terminal nodes.
	  var node = current; // Each iteration, currentParent is populated with node's host parent if not
	  // currentParentIsValid.

	  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

	  var currentParent;
	  var currentParentIsContainer;

	  while (true) {
	    if (!currentParentIsValid) {
	      var parent = node.return;

	      findParent: while (true) {
	        if (!(parent !== null)) {
	          {
	            throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
	          }
	        }

	        var parentStateNode = parent.stateNode;

	        switch (parent.tag) {
	          case HostComponent:
	            currentParent = parentStateNode;
	            currentParentIsContainer = false;
	            break findParent;

	          case HostRoot:
	            currentParent = parentStateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;

	          case HostPortal:
	            currentParent = parentStateNode.containerInfo;
	            currentParentIsContainer = true;
	            break findParent;

	        }

	        parent = parent.return;
	      }

	      currentParentIsValid = true;
	    }

	    if (node.tag === HostComponent || node.tag === HostText) {
	      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
	      // node from the tree.

	      if (currentParentIsContainer) {
	        removeChildFromContainer(currentParent, node.stateNode);
	      } else {
	        removeChild(currentParent, node.stateNode);
	      } // Don't visit children because we already visited them.

	    } else if (node.tag === HostPortal) {
	      if (node.child !== null) {
	        // When we go into a portal, it becomes the parent to remove from.
	        // We will reassign it back when we pop the portal on the way up.
	        currentParent = node.stateNode.containerInfo;
	        currentParentIsContainer = true; // Visit children because portals might contain host components.

	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    } else {
	      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

	      if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }
	    }

	    if (node === current) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === current) {
	        return;
	      }

	      node = node.return;

	      if (node.tag === HostPortal) {
	        // When we go out of the portal, we need to restore the parent.
	        // Since we don't keep a stack of them, we will search for it.
	        currentParentIsValid = false;
	      }
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function commitDeletion(finishedRoot, current, renderPriorityLevel) {
	  {
	    // Recursively delete all host nodes from the parent.
	    // Detach refs and call componentWillUnmount() on the whole subtree.
	    unmountHostComponents(finishedRoot, current, renderPriorityLevel);
	  }

	  detachFiber(current);
	}

	function commitWork(current, finishedWork) {

	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	    case Block:
	      {
	        // Layout effects are destroyed during the mutation phase so that all
	        // destroy functions for all fibers are called before any create functions.
	        // This prevents sibling component effects from interfering with each other,
	        // e.g. a destroy function in one component should never override a ref set
	        // by a create function in another component during the same commit.
	        commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
	        return;
	      }

	    case ClassComponent:
	      {
	        return;
	      }

	    case HostComponent:
	      {
	        var instance = finishedWork.stateNode;

	        if (instance != null) {
	          // Commit the work prepared earlier.
	          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	          // as the newProps. The updatePayload will contain the real change in
	          // this case.

	          var oldProps = current !== null ? current.memoizedProps : newProps;
	          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

	          var updatePayload = finishedWork.updateQueue;
	          finishedWork.updateQueue = null;

	          if (updatePayload !== null) {
	            commitUpdate(instance, updatePayload, type, oldProps, newProps);
	          }
	        }

	        return;
	      }

	    case HostText:
	      {
	        if (!(finishedWork.stateNode !== null)) {
	          {
	            throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
	          }
	        }

	        var textInstance = finishedWork.stateNode;
	        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	        // as the newProps. The updatePayload will contain the real change in
	        // this case.

	        var oldText = current !== null ? current.memoizedProps : newText;
	        commitTextUpdate(textInstance, oldText, newText);
	        return;
	      }

	    case HostRoot:
	      {
	        {
	          var _root = finishedWork.stateNode;

	          if (_root.hydrate) {
	            // We've just hydrated. No need to hydrate again.
	            _root.hydrate = false;
	            commitHydratedContainer(_root.containerInfo);
	          }
	        }

	        return;
	      }

	    case Profiler:
	      {
	        return;
	      }

	    case SuspenseComponent:
	      {
	        commitSuspenseComponent(finishedWork);
	        attachSuspenseRetryListeners(finishedWork);
	        return;
	      }

	    case SuspenseListComponent:
	      {
	        attachSuspenseRetryListeners(finishedWork);
	        return;
	      }

	    case IncompleteClassComponent:
	      {
	        return;
	      }
	  }

	  {
	    {
	      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  }
	}

	function commitSuspenseComponent(finishedWork) {
	  var newState = finishedWork.memoizedState;
	  var newDidTimeout;
	  var primaryChildParent = finishedWork;

	  if (newState === null) {
	    newDidTimeout = false;
	  } else {
	    newDidTimeout = true;
	    primaryChildParent = finishedWork.child;
	    markCommitTimeOfFallback();
	  }

	  if ( primaryChildParent !== null) {
	    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
	  }
	}

	function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

	  var newState = finishedWork.memoizedState;

	  if (newState === null) {
	    var current = finishedWork.alternate;

	    if (current !== null) {
	      var prevState = current.memoizedState;

	      if (prevState !== null) {
	        var suspenseInstance = prevState.dehydrated;

	        if (suspenseInstance !== null) {
	          commitHydratedSuspenseInstance(suspenseInstance);
	        }
	      }
	    }
	  }
	}

	function attachSuspenseRetryListeners(finishedWork) {
	  // If this boundary just timed out, then it will have a set of thenables.
	  // For each thenable, attach a listener so that when it resolves, React
	  // attempts to re-render the boundary in the primary (pre-timeout) state.
	  var thenables = finishedWork.updateQueue;

	  if (thenables !== null) {
	    finishedWork.updateQueue = null;
	    var retryCache = finishedWork.stateNode;

	    if (retryCache === null) {
	      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
	    }

	    thenables.forEach(function (thenable) {
	      // Memoize using the boundary fiber to prevent redundant listeners.
	      var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

	      if (!retryCache.has(thenable)) {
	        {
	          if (thenable.__reactDoNotTraceInteractions !== true) {
	            retry = tracing$1.unstable_wrap(retry);
	          }
	        }

	        retryCache.add(thenable);
	        thenable.then(retry, retry);
	      }
	    });
	  }
	}

	function commitResetTextContent(current) {

	  resetTextContent(current.stateNode);
	}

	var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

	function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

	  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: null
	  };
	  var error = errorInfo.value;

	  update.callback = function () {
	    onUncaughtError(error);
	    logError(fiber, errorInfo);
	  };

	  return update;
	}

	function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
	  var update = createUpdate(expirationTime, null);
	  update.tag = CaptureUpdate;
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

	  if (typeof getDerivedStateFromError === 'function') {
	    var error$1 = errorInfo.value;

	    update.payload = function () {
	      logError(fiber, errorInfo);
	      return getDerivedStateFromError(error$1);
	    };
	  }

	  var inst = fiber.stateNode;

	  if (inst !== null && typeof inst.componentDidCatch === 'function') {
	    update.callback = function callback() {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      if (typeof getDerivedStateFromError !== 'function') {
	        // To preserve the preexisting retry behavior of error boundaries,
	        // we keep track of which ones already failed during this batch.
	        // This gets reset before we yield back to the browser.
	        // TODO: Warn in strict mode if getDerivedStateFromError is
	        // not defined.
	        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

	        logError(fiber, errorInfo);
	      }

	      var error$1 = errorInfo.value;
	      var stack = errorInfo.stack;
	      this.componentDidCatch(error$1, {
	        componentStack: stack !== null ? stack : ''
	      });

	      {
	        if (typeof getDerivedStateFromError !== 'function') {
	          // If componentDidCatch is the only error boundary method defined,
	          // then it needs to call setState to recover from errors.
	          // If no state update is scheduled then the boundary will swallow the error.
	          if (fiber.expirationTime !== Sync) {
	            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
	          }
	        }
	      }
	    };
	  } else {
	    update.callback = function () {
	      markFailedErrorBoundaryForHotReloading(fiber);
	    };
	  }

	  return update;
	}

	function attachPingListener(root, renderExpirationTime, thenable) {
	  // Attach a listener to the promise to "ping" the root and retry. But
	  // only if one does not already exist for the current render expiration
	  // time (which acts like a "thread ID" here).
	  var pingCache = root.pingCache;
	  var threadIDs;

	  if (pingCache === null) {
	    pingCache = root.pingCache = new PossiblyWeakMap$1();
	    threadIDs = new Set();
	    pingCache.set(thenable, threadIDs);
	  } else {
	    threadIDs = pingCache.get(thenable);

	    if (threadIDs === undefined) {
	      threadIDs = new Set();
	      pingCache.set(thenable, threadIDs);
	    }
	  }

	  if (!threadIDs.has(renderExpirationTime)) {
	    // Memoize using the thread ID to prevent redundant listeners.
	    threadIDs.add(renderExpirationTime);
	    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
	    thenable.then(ping, ping);
	  }
	}

	function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
	  // The source fiber did not complete.
	  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

	  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

	  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
	    // This is a thenable.
	    var thenable = value;

	    if ((sourceFiber.mode & BlockingMode) === NoMode) {
	      // Reset the memoizedState to what it was before we attempted
	      // to render it.
	      var currentSource = sourceFiber.alternate;

	      if (currentSource) {
	        sourceFiber.updateQueue = currentSource.updateQueue;
	        sourceFiber.memoizedState = currentSource.memoizedState;
	        sourceFiber.expirationTime = currentSource.expirationTime;
	      } else {
	        sourceFiber.updateQueue = null;
	        sourceFiber.memoizedState = null;
	      }
	    }

	    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

	    var _workInProgress = returnFiber;

	    do {
	      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
	        // Found the nearest boundary.
	        // Stash the promise on the boundary fiber. If the boundary times out, we'll
	        // attach another listener to flip the boundary back to its normal state.
	        var thenables = _workInProgress.updateQueue;

	        if (thenables === null) {
	          var updateQueue = new Set();
	          updateQueue.add(thenable);
	          _workInProgress.updateQueue = updateQueue;
	        } else {
	          thenables.add(thenable);
	        } // If the boundary is outside of blocking mode, we should *not*
	        // suspend the commit. Pretend as if the suspended component rendered
	        // null and keep rendering. In the commit phase, we'll schedule a
	        // subsequent synchronous update to re-render the Suspense.
	        //
	        // Note: It doesn't matter whether the component that suspended was
	        // inside a blocking mode tree. If the Suspense is outside of it, we
	        // should *not* suspend the commit.


	        if ((_workInProgress.mode & BlockingMode) === NoMode) {
	          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
	          // But we shouldn't call any lifecycle methods or callbacks. Remove
	          // all lifecycle effect tags.

	          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

	          if (sourceFiber.tag === ClassComponent) {
	            var currentSourceFiber = sourceFiber.alternate;

	            if (currentSourceFiber === null) {
	              // This is a new mount. Change the tag so it's not mistaken for a
	              // completed class component. For example, we should not call
	              // componentWillUnmount if it is deleted.
	              sourceFiber.tag = IncompleteClassComponent;
	            } else {
	              // When we try rendering again, we should not reuse the current fiber,
	              // since it's known to be in an inconsistent state. Use a force update to
	              // prevent a bail out.
	              var update = createUpdate(Sync, null);
	              update.tag = ForceUpdate;
	              enqueueUpdate(sourceFiber, update);
	            }
	          } // The source fiber did not complete. Mark it with Sync priority to
	          // indicate that it still has pending work.


	          sourceFiber.expirationTime = Sync; // Exit without suspending.

	          return;
	        } // Confirmed that the boundary is in a concurrent mode tree. Continue
	        // with the normal suspend path.
	        //
	        // After this we'll use a set of heuristics to determine whether this
	        // render pass will run to completion or restart or "suspend" the commit.
	        // The actual logic for this is spread out in different places.
	        //
	        // This first principle is that if we're going to suspend when we complete
	        // a root, then we should also restart if we get an update or ping that
	        // might unsuspend it, and vice versa. The only reason to suspend is
	        // because you think you might want to restart before committing. However,
	        // it doesn't make sense to restart only while in the period we're suspended.
	        //
	        // Restarting too aggressively is also not good because it starves out any
	        // intermediate loading state. So we use heuristics to determine when.
	        // Suspense Heuristics
	        //
	        // If nothing threw a Promise or all the same fallbacks are already showing,
	        // then don't suspend/restart.
	        //
	        // If this is an initial render of a new tree of Suspense boundaries and
	        // those trigger a fallback, then don't suspend/restart. We want to ensure
	        // that we can show the initial loading state as quickly as possible.
	        //
	        // If we hit a "Delayed" case, such as when we'd switch from content back into
	        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
	        // this case. If none is defined, JND is used instead.
	        //
	        // If we're already showing a fallback and it gets "retried", allowing us to show
	        // another level, but there's still an inner boundary that would show a fallback,
	        // then we suspend/restart for 500ms since the last time we showed a fallback
	        // anywhere in the tree. This effectively throttles progressive loading into a
	        // consistent train of commits. This also gives us an opportunity to restart to
	        // get to the completed state slightly earlier.
	        //
	        // If there's ambiguity due to batching it's resolved in preference of:
	        // 1) "delayed", 2) "initial render", 3) "retry".
	        //
	        // We want to ensure that a "busy" state doesn't get force committed. We want to
	        // ensure that new initial loading states can commit as soon as possible.


	        attachPingListener(root, renderExpirationTime, thenable);
	        _workInProgress.effectTag |= ShouldCapture;
	        _workInProgress.expirationTime = renderExpirationTime;
	        return;
	      } // This boundary already captured during this render. Continue to the next
	      // boundary.


	      _workInProgress = _workInProgress.return;
	    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
	    // TODO: Use invariant so the message is stripped in prod?


	    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
	  } // We didn't find a boundary that could handle this type of exception. Start
	  // over and traverse parent path again, this time treating the exception
	  // as an error.


	  renderDidError();
	  value = createCapturedValue(value, sourceFiber);
	  var workInProgress = returnFiber;

	  do {
	    switch (workInProgress.tag) {
	      case HostRoot:
	        {
	          var _errorInfo = value;
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime;

	          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

	          enqueueCapturedUpdate(workInProgress, _update);
	          return;
	        }

	      case ClassComponent:
	        // Capture and retry
	        var errorInfo = value;
	        var ctor = workInProgress.type;
	        var instance = workInProgress.stateNode;

	        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
	          workInProgress.effectTag |= ShouldCapture;
	          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

	          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

	          enqueueCapturedUpdate(workInProgress, _update2);
	          return;
	        }

	        break;
	    }

	    workInProgress = workInProgress.return;
	  } while (workInProgress !== null);
	}

	var ceil = Math.ceil;
	var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
	    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
	var NoContext =
	/*                    */
	0;
	var BatchedContext =
	/*               */
	1;
	var EventContext =
	/*                 */
	2;
	var DiscreteEventContext =
	/*         */
	4;
	var LegacyUnbatchedContext =
	/*       */
	8;
	var RenderContext =
	/*                */
	16;
	var CommitContext =
	/*                */
	32;
	var RootIncomplete = 0;
	var RootFatalErrored = 1;
	var RootErrored = 2;
	var RootSuspended = 3;
	var RootSuspendedWithDelay = 4;
	var RootCompleted = 5;
	// Describes where we are in the React execution stack
	var executionContext = NoContext; // The root we're working on

	var workInProgressRoot = null; // The fiber we're working on

	var workInProgress = null; // The expiration time we're rendering

	var renderExpirationTime$1 = NoWork; // Whether to root completed, errored, suspended, etc.

	var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

	var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
	// This is conceptually a time stamp but expressed in terms of an ExpirationTime
	// because we deal mostly with expiration times in the hot path, so this avoids
	// the conversion happening in the hot path.

	var workInProgressRootLatestProcessedExpirationTime = Sync;
	var workInProgressRootLatestSuspenseTimeout = Sync;
	var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
	// includes unprocessed updates, not work in bailed out children.

	var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
	// This flag determines if it might be worthwhile to restart if an opportunity
	// happens latere.

	var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
	// model where we don't commit new loading states in too quick succession.

	var globalMostRecentFallbackTime = 0;
	var FALLBACK_THROTTLE_MS = 500;
	var nextEffect = null;
	var hasUncaughtError = false;
	var firstUncaughtError = null;
	var legacyErrorBoundariesThatAlreadyFailed = null;
	var rootDoesHavePassiveEffects = false;
	var rootWithPendingPassiveEffects = null;
	var pendingPassiveEffectsRenderPriority = NoPriority;
	var pendingPassiveEffectsExpirationTime = NoWork;
	var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

	var NESTED_UPDATE_LIMIT = 50;
	var nestedUpdateCount = 0;
	var rootWithNestedUpdates = null;
	var NESTED_PASSIVE_UPDATE_LIMIT = 50;
	var nestedPassiveUpdateCount = 0;
	var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
	// during the commit phase. This enables them to be traced across components
	// that spawn new work during render. E.g. hidden boundaries, suspended SSR
	// hydration or SuspenseList.

	var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
	// time). However, if two updates are scheduled within the same event, we
	// should treat their start times as simultaneous, even if the actual clock
	// time has advanced between the first and second call.
	// In other words, because expiration times determine how updates are batched,
	// we want all updates of like priority that occur within the same event to
	// receive the same expiration time. Otherwise we get tearing.

	var currentEventTime = NoWork;
	function requestCurrentTimeForUpdate() {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    // We're inside React, so it's fine to read the actual time.
	    return msToExpirationTime(now());
	  } // We're not inside React, so we may be in the middle of a browser event.


	  if (currentEventTime !== NoWork) {
	    // Use the same start time for all updates until we enter React again.
	    return currentEventTime;
	  } // This is the first update since React yielded. Compute a new start time.


	  currentEventTime = msToExpirationTime(now());
	  return currentEventTime;
	}
	function getCurrentTime() {
	  return msToExpirationTime(now());
	}
	function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
	  var mode = fiber.mode;

	  if ((mode & BlockingMode) === NoMode) {
	    return Sync;
	  }

	  var priorityLevel = getCurrentPriorityLevel();

	  if ((mode & ConcurrentMode) === NoMode) {
	    return priorityLevel === ImmediatePriority ? Sync : Batched;
	  }

	  if ((executionContext & RenderContext) !== NoContext) {
	    // Use whatever time we're already rendering
	    // TODO: Should there be a way to opt out, like with `runWithPriority`?
	    return renderExpirationTime$1;
	  }

	  var expirationTime;

	  if (suspenseConfig !== null) {
	    // Compute an expiration time based on the Suspense timeout.
	    expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
	  } else {
	    // Compute an expiration time based on the Scheduler priority.
	    switch (priorityLevel) {
	      case ImmediatePriority:
	        expirationTime = Sync;
	        break;

	      case UserBlockingPriority$1:
	        // TODO: Rename this to computeUserBlockingExpiration
	        expirationTime = computeInteractiveExpiration(currentTime);
	        break;

	      case NormalPriority:
	      case LowPriority:
	        // TODO: Handle LowPriority
	        // TODO: Rename this to... something better.
	        expirationTime = computeAsyncExpiration(currentTime);
	        break;

	      case IdlePriority:
	        expirationTime = Idle;
	        break;

	      default:
	        {
	          {
	            throw Error( "Expected a valid priority level" );
	          }
	        }

	    }
	  } // If we're in the middle of rendering a tree, do not update at the same
	  // expiration time that is already rendering.
	  // TODO: We shouldn't have to do this if the update is on a different root.
	  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
	  // the root when we check for this condition.


	  if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
	    // This is a trick to move this update into a separate batch
	    expirationTime -= 1;
	  }

	  return expirationTime;
	}
	function scheduleUpdateOnFiber(fiber, expirationTime) {
	  checkForNestedUpdates();
	  warnAboutRenderPhaseUpdatesInDEV(fiber);
	  var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

	  if (root === null) {
	    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
	    return;
	  }

	  checkForInterruption(fiber, expirationTime);
	  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
	  // priority as an argument to that function and this one.

	  var priorityLevel = getCurrentPriorityLevel();

	  if (expirationTime === Sync) {
	    if ( // Check if we're inside unbatchedUpdates
	    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
	    (executionContext & (RenderContext | CommitContext)) === NoContext) {
	      // Register pending interactions on the root to avoid losing traced interaction data.
	      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
	      // root inside of batchedUpdates should be synchronous, but layout updates
	      // should be deferred until the end of the batch.

	      performSyncWorkOnRoot(root);
	    } else {
	      ensureRootIsScheduled(root);
	      schedulePendingInteractions(root, expirationTime);

	      if (executionContext === NoContext) {
	        // Flush the synchronous work now, unless we're already working or inside
	        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
	        // scheduleCallbackForFiber to preserve the ability to schedule a callback
	        // without immediately flushing it. We only do this for user-initiated
	        // updates, to preserve historical behavior of legacy mode.
	        flushSyncCallbackQueue();
	      }
	    }
	  } else {
	    ensureRootIsScheduled(root);
	    schedulePendingInteractions(root, expirationTime);
	  }

	  if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
	  // discrete, even inside a discrete event.
	  priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
	    // This is the result of a discrete event. Track the lowest priority
	    // discrete update per root so we can flush them early, if needed.
	    if (rootsWithPendingDiscreteUpdates === null) {
	      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
	    } else {
	      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

	      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
	        rootsWithPendingDiscreteUpdates.set(root, expirationTime);
	      }
	    }
	  }
	}
	var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
	// work without treating it as a typical update that originates from an event;
	// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
	// on a fiber.

	function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
	  // Update the source fiber's expiration time
	  if (fiber.expirationTime < expirationTime) {
	    fiber.expirationTime = expirationTime;
	  }

	  var alternate = fiber.alternate;

	  if (alternate !== null && alternate.expirationTime < expirationTime) {
	    alternate.expirationTime = expirationTime;
	  } // Walk the parent path to the root and update the child expiration time.


	  var node = fiber.return;
	  var root = null;

	  if (node === null && fiber.tag === HostRoot) {
	    root = fiber.stateNode;
	  } else {
	    while (node !== null) {
	      alternate = node.alternate;

	      if (node.childExpirationTime < expirationTime) {
	        node.childExpirationTime = expirationTime;

	        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	          alternate.childExpirationTime = expirationTime;
	        }
	      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
	        alternate.childExpirationTime = expirationTime;
	      }

	      if (node.return === null && node.tag === HostRoot) {
	        root = node.stateNode;
	        break;
	      }

	      node = node.return;
	    }
	  }

	  if (root !== null) {
	    if (workInProgressRoot === root) {
	      // Received an update to a tree that's in the middle of rendering. Mark
	      // that's unprocessed work on this root.
	      markUnprocessedUpdateTime(expirationTime);

	      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
	        // The root already suspended with a delay, which means this render
	        // definitely won't finish. Since we have a new update, let's mark it as
	        // suspended now, right before marking the incoming update. This has the
	        // effect of interrupting the current render and switching to the update.
	        // TODO: This happens to work when receiving an update during the render
	        // phase, because of the trick inside computeExpirationForFiber to
	        // subtract 1 from `renderExpirationTime` to move it into a
	        // separate bucket. But we should probably model it with an exception,
	        // using the same mechanism we use to force hydration of a subtree.
	        // TODO: This does not account for low pri updates that were already
	        // scheduled before the root started rendering. Need to track the next
	        // pending expiration time (perhaps by backtracking the return path) and
	        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
	        markRootSuspendedAtTime(root, renderExpirationTime$1);
	      }
	    } // Mark that the root has a pending update.


	    markRootUpdatedAtTime(root, expirationTime);
	  }

	  return root;
	}

	function getNextRootExpirationTimeToWorkOn(root) {
	  // Determines the next expiration time that the root should render, taking
	  // into account levels that may be suspended, or levels that may have
	  // received a ping.
	  var lastExpiredTime = root.lastExpiredTime;

	  if (lastExpiredTime !== NoWork) {
	    return lastExpiredTime;
	  } // "Pending" refers to any update that hasn't committed yet, including if it
	  // suspended. The "suspended" range is therefore a subset.


	  var firstPendingTime = root.firstPendingTime;

	  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
	    // The highest priority pending time is not suspended. Let's work on that.
	    return firstPendingTime;
	  } // If the first pending time is suspended, check if there's a lower priority
	  // pending level that we know about. Or check if we received a ping. Work
	  // on whichever is higher priority.


	  var lastPingedTime = root.lastPingedTime;
	  var nextKnownPendingLevel = root.nextKnownPendingLevel;
	  var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;

	  if ( nextLevel <= Idle && firstPendingTime !== nextLevel) {
	    // Don't work on Idle/Never priority unless everything else is committed.
	    return NoWork;
	  }

	  return nextLevel;
	} // Use this function to schedule a task for a root. There's only one task per
	// root; if a task was already scheduled, we'll check to make sure the
	// expiration time of the existing task is the same as the expiration time of
	// the next level that the root has work on. This function is called on every
	// update, and right before exiting a task.


	function ensureRootIsScheduled(root) {
	  var lastExpiredTime = root.lastExpiredTime;

	  if (lastExpiredTime !== NoWork) {
	    // Special case: Expired work should flush synchronously.
	    root.callbackExpirationTime = Sync;
	    root.callbackPriority = ImmediatePriority;
	    root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	    return;
	  }

	  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
	  var existingCallbackNode = root.callbackNode;

	  if (expirationTime === NoWork) {
	    // There's nothing to work on.
	    if (existingCallbackNode !== null) {
	      root.callbackNode = null;
	      root.callbackExpirationTime = NoWork;
	      root.callbackPriority = NoPriority;
	    }

	    return;
	  } // TODO: If this is an update, we already read the current time. Pass the
	  // time as an argument.


	  var currentTime = requestCurrentTimeForUpdate();
	  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
	  // expiration time. Otherwise, we'll cancel it and schedule a new one.

	  if (existingCallbackNode !== null) {
	    var existingCallbackPriority = root.callbackPriority;
	    var existingCallbackExpirationTime = root.callbackExpirationTime;

	    if ( // Callback must have the exact same expiration time.
	    existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
	    existingCallbackPriority >= priorityLevel) {
	      // Existing callback is sufficient.
	      return;
	    } // Need to schedule a new task.
	    // TODO: Instead of scheduling a new task, we should be able to change the
	    // priority of the existing one.


	    cancelCallback(existingCallbackNode);
	  }

	  root.callbackExpirationTime = expirationTime;
	  root.callbackPriority = priorityLevel;
	  var callbackNode;

	  if (expirationTime === Sync) {
	    // Sync React callbacks are scheduled on a special internal queue
	    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	  } else {
	    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
	    // ordering because tasks are processed in timeout order.
	    {
	      timeout: expirationTimeToMs(expirationTime) - now()
	    });
	  }

	  root.callbackNode = callbackNode;
	} // This is the entry point for every concurrent task, i.e. anything that
	// goes through Scheduler.


	function performConcurrentWorkOnRoot(root, didTimeout) {
	  // Since we know we're in a React event, we can clear the current
	  // event time. The next update will compute a new event time.
	  currentEventTime = NoWork;

	  if (didTimeout) {
	    // The render task took too long to complete. Mark the current time as
	    // expired to synchronously render all expired work in a single batch.
	    var currentTime = requestCurrentTimeForUpdate();
	    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

	    ensureRootIsScheduled(root);
	    return null;
	  } // Determine the next expiration time to work on, using the fields stored
	  // on the root.


	  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

	  if (expirationTime !== NoWork) {
	    var originalCallbackNode = root.callbackNode;

	    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	      {
	        throw Error( "Should not already be working." );
	      }
	    }

	    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
	    // and prepare a fresh one. Otherwise we'll continue where we left off.

	    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
	      prepareFreshStack(root, expirationTime);
	      startWorkOnPendingInteractions(root, expirationTime);
	    } // If we have a work-in-progress fiber, it means there's still work to do
	    // in this root.


	    if (workInProgress !== null) {
	      var prevExecutionContext = executionContext;
	      executionContext |= RenderContext;
	      var prevDispatcher = pushDispatcher();
	      var prevInteractions = pushInteractions(root);
	      startWorkLoopTimer(workInProgress);

	      do {
	        try {
	          workLoopConcurrent();
	          break;
	        } catch (thrownValue) {
	          handleError(root, thrownValue);
	        }
	      } while (true);

	      resetContextDependencies();
	      executionContext = prevExecutionContext;
	      popDispatcher(prevDispatcher);

	      {
	        popInteractions(prevInteractions);
	      }

	      if (workInProgressRootExitStatus === RootFatalErrored) {
	        var fatalError = workInProgressRootFatalError;
	        stopInterruptedWorkLoopTimer();
	        prepareFreshStack(root, expirationTime);
	        markRootSuspendedAtTime(root, expirationTime);
	        ensureRootIsScheduled(root);
	        throw fatalError;
	      }

	      if (workInProgress !== null) {
	        // There's still work left over. Exit without committing.
	        stopInterruptedWorkLoopTimer();
	      } else {
	        // We now have a consistent tree. The next step is either to commit it,
	        // or, if something suspended, wait to commit it after a timeout.
	        stopFinishedWorkLoopTimer();
	        var finishedWork = root.finishedWork = root.current.alternate;
	        root.finishedExpirationTime = expirationTime;
	        finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
	      }

	      ensureRootIsScheduled(root);

	      if (root.callbackNode === originalCallbackNode) {
	        // The task node scheduled for this root is the same one that's
	        // currently executed. Need to return a continuation.
	        return performConcurrentWorkOnRoot.bind(null, root);
	      }
	    }
	  }

	  return null;
	}

	function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
	  // Set this to null to indicate there's no in-progress render.
	  workInProgressRoot = null;

	  switch (exitStatus) {
	    case RootIncomplete:
	    case RootFatalErrored:
	      {
	        {
	          {
	            throw Error( "Root did not complete. This is a bug in React." );
	          }
	        }
	      }
	    // Flow knows about invariant, so it complains if I add a break
	    // statement, but eslint doesn't know about invariant, so it complains
	    // if I do. eslint-disable-next-line no-fallthrough

	    case RootErrored:
	      {
	        // If this was an async render, the error may have happened due to
	        // a mutation in a concurrent event. Try rendering one more time,
	        // synchronously, to see if the error goes away. If there are
	        // lower priority updates, let's include those, too, in case they
	        // fix the inconsistency. Render at Idle to include all updates.
	        // If it was Idle or Never or some not-yet-invented time, render
	        // at that time.
	        markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
	        // and therefore not hit this path again.

	        break;
	      }

	    case RootSuspended:
	      {
	        markRootSuspendedAtTime(root, expirationTime);
	        var lastSuspendedTime = root.lastSuspendedTime;

	        if (expirationTime === lastSuspendedTime) {
	          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
	        } // We have an acceptable loading state. We need to figure out if we
	        // should immediately commit it or wait a bit.
	        // If we have processed new updates during this render, we may now
	        // have a new loading state ready. We want to ensure that we commit
	        // that as soon as possible.


	        var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

	        if (hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
	        !( IsThisRendererActing.current)) {
	          // If we have not processed any new updates during this pass, then
	          // this is either a retry of an existing fallback state or a
	          // hidden tree. Hidden trees shouldn't be batched with other work
	          // and after that's fixed it can only be a retry. We're going to
	          // throttle committing retries so that we don't show too many
	          // loading states too quickly.
	          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

	          if (msUntilTimeout > 10) {
	            if (workInProgressRootHasPendingPing) {
	              var lastPingedTime = root.lastPingedTime;

	              if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
	                // This render was pinged but we didn't get to restart
	                // earlier so try restarting now instead.
	                root.lastPingedTime = expirationTime;
	                prepareFreshStack(root, expirationTime);
	                break;
	              }
	            }

	            var nextTime = getNextRootExpirationTimeToWorkOn(root);

	            if (nextTime !== NoWork && nextTime !== expirationTime) {
	              // There's additional work on this root.
	              break;
	            }

	            if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
	              // We should prefer to render the fallback of at the last
	              // suspended level. Ping the last suspended level to try
	              // rendering it again.
	              root.lastPingedTime = lastSuspendedTime;
	              break;
	            } // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.


	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root);
	        break;
	      }

	    case RootSuspendedWithDelay:
	      {
	        markRootSuspendedAtTime(root, expirationTime);
	        var _lastSuspendedTime = root.lastSuspendedTime;

	        if (expirationTime === _lastSuspendedTime) {
	          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
	        }

	        if ( // do not delay if we're inside an act() scope
	        !( IsThisRendererActing.current)) {
	          // We're suspended in a state that should be avoided. We'll try to
	          // avoid committing it for as long as the timeouts let us.
	          if (workInProgressRootHasPendingPing) {
	            var _lastPingedTime = root.lastPingedTime;

	            if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
	              // This render was pinged but we didn't get to restart earlier
	              // so try restarting now instead.
	              root.lastPingedTime = expirationTime;
	              prepareFreshStack(root, expirationTime);
	              break;
	            }
	          }

	          var _nextTime = getNextRootExpirationTimeToWorkOn(root);

	          if (_nextTime !== NoWork && _nextTime !== expirationTime) {
	            // There's additional work on this root.
	            break;
	          }

	          if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
	            // We should prefer to render the fallback of at the last
	            // suspended level. Ping the last suspended level to try
	            // rendering it again.
	            root.lastPingedTime = _lastSuspendedTime;
	            break;
	          }

	          var _msUntilTimeout;

	          if (workInProgressRootLatestSuspenseTimeout !== Sync) {
	            // We have processed a suspense config whose expiration time we
	            // can use as the timeout.
	            _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
	          } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
	            // This should never normally happen because only new updates
	            // cause delayed states, so we should have processed something.
	            // However, this could also happen in an offscreen tree.
	            _msUntilTimeout = 0;
	          } else {
	            // If we don't have a suspense config, we're going to use a
	            // heuristic to determine how long we can suspend.
	            var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
	            var currentTimeMs = now();
	            var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
	            var timeElapsed = currentTimeMs - eventTimeMs;

	            if (timeElapsed < 0) {
	              // We get this wrong some time since we estimate the time.
	              timeElapsed = 0;
	            }

	            _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
	            // event time is exact instead of inferred from expiration time
	            // we don't need this.

	            if (timeUntilExpirationMs < _msUntilTimeout) {
	              _msUntilTimeout = timeUntilExpirationMs;
	            }
	          } // Don't bother with a very short suspense time.


	          if (_msUntilTimeout > 10) {
	            // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root);
	        break;
	      }

	    case RootCompleted:
	      {
	        // The work completed. Ready to commit.
	        if ( // do not delay if we're inside an act() scope
	        !( IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
	          // If we have exceeded the minimum loading delay, which probably
	          // means we have shown a spinner already, we might have to suspend
	          // a bit longer to ensure that the spinner is shown for
	          // enough time.
	          var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

	          if (_msUntilTimeout2 > 10) {
	            markRootSuspendedAtTime(root, expirationTime);
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
	            break;
	          }
	        }

	        commitRoot(root);
	        break;
	      }

	    default:
	      {
	        {
	          {
	            throw Error( "Unknown root exit status." );
	          }
	        }
	      }
	  }
	} // This is the entry point for synchronous tasks that don't go
	// through Scheduler


	function performSyncWorkOnRoot(root) {
	  // Check if there's expired work on this root. Otherwise, render at Sync.
	  var lastExpiredTime = root.lastExpiredTime;
	  var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Should not already be working." );
	    }
	  }

	  flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
	    prepareFreshStack(root, expirationTime);
	    startWorkOnPendingInteractions(root, expirationTime);
	  } // If we have a work-in-progress fiber, it means there's still work to do
	  // in this root.


	  if (workInProgress !== null) {
	    var prevExecutionContext = executionContext;
	    executionContext |= RenderContext;
	    var prevDispatcher = pushDispatcher();
	    var prevInteractions = pushInteractions(root);
	    startWorkLoopTimer(workInProgress);

	    do {
	      try {
	        workLoopSync();
	        break;
	      } catch (thrownValue) {
	        handleError(root, thrownValue);
	      }
	    } while (true);

	    resetContextDependencies();
	    executionContext = prevExecutionContext;
	    popDispatcher(prevDispatcher);

	    {
	      popInteractions(prevInteractions);
	    }

	    if (workInProgressRootExitStatus === RootFatalErrored) {
	      var fatalError = workInProgressRootFatalError;
	      stopInterruptedWorkLoopTimer();
	      prepareFreshStack(root, expirationTime);
	      markRootSuspendedAtTime(root, expirationTime);
	      ensureRootIsScheduled(root);
	      throw fatalError;
	    }

	    if (workInProgress !== null) {
	      // This is a sync render, so we should have finished the whole tree.
	      {
	        {
	          throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
	        }
	      }
	    } else {
	      // We now have a consistent tree. Because this is a sync render, we
	      // will commit it even if something suspended.
	      stopFinishedWorkLoopTimer();
	      root.finishedWork = root.current.alternate;
	      root.finishedExpirationTime = expirationTime;
	      finishSyncRender(root);
	    } // Before exiting, make sure there's a callback scheduled for the next
	    // pending level.


	    ensureRootIsScheduled(root);
	  }

	  return null;
	}

	function finishSyncRender(root) {
	  // Set this to null to indicate there's no in-progress render.
	  workInProgressRoot = null;
	  commitRoot(root);
	}
	function flushDiscreteUpdates() {
	  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
	  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
	  // those two cases. Need to fix this before exposing flushDiscreteUpdates
	  // as a public API.
	  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
	    {
	      if ((executionContext & RenderContext) !== NoContext) {
	        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
	      }
	    } // We're already rendering, so we can't synchronously flush pending work.
	    // This is probably a nested event dispatch triggered by a lifecycle/effect,
	    // like `el.focus()`. Exit.


	    return;
	  }

	  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
	  // they fire before the next serial event.

	  flushPassiveEffects();
	}
	function syncUpdates(fn, a, b, c) {
	  return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
	}

	function flushPendingDiscreteUpdates() {
	  if (rootsWithPendingDiscreteUpdates !== null) {
	    // For each root with pending discrete updates, schedule a callback to
	    // immediately flush them.
	    var roots = rootsWithPendingDiscreteUpdates;
	    rootsWithPendingDiscreteUpdates = null;
	    roots.forEach(function (expirationTime, root) {
	      markRootExpiredAtTime(root, expirationTime);
	      ensureRootIsScheduled(root);
	    }); // Now flush the immediate queue.

	    flushSyncCallbackQueue();
	  }
	}

	function batchedUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function batchedEventUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= EventContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function discreteUpdates$1(fn, a, b, c, d) {
	  var prevExecutionContext = executionContext;
	  executionContext |= DiscreteEventContext;

	  try {
	    // Should this
	    return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function unbatchedUpdates(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext &= ~BatchedContext;
	  executionContext |= LegacyUnbatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      flushSyncCallbackQueue();
	    }
	  }
	}
	function flushSync(fn, a) {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    {
	      {
	        throw Error( "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering." );
	      }
	    }
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
	  } finally {
	    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
	    // Note that this will happen even if batchedUpdates is higher up
	    // the stack.

	    flushSyncCallbackQueue();
	  }
	}

	function prepareFreshStack(root, expirationTime) {
	  root.finishedWork = null;
	  root.finishedExpirationTime = NoWork;
	  var timeoutHandle = root.timeoutHandle;

	  if (timeoutHandle !== noTimeout) {
	    // The root previous suspended and scheduled a timeout to commit a fallback
	    // state. Now that we have additional work, cancel the timeout.
	    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

	    cancelTimeout(timeoutHandle);
	  }

	  if (workInProgress !== null) {
	    var interruptedWork = workInProgress.return;

	    while (interruptedWork !== null) {
	      unwindInterruptedWork(interruptedWork);
	      interruptedWork = interruptedWork.return;
	    }
	  }

	  workInProgressRoot = root;
	  workInProgress = createWorkInProgress(root.current, null);
	  renderExpirationTime$1 = expirationTime;
	  workInProgressRootExitStatus = RootIncomplete;
	  workInProgressRootFatalError = null;
	  workInProgressRootLatestProcessedExpirationTime = Sync;
	  workInProgressRootLatestSuspenseTimeout = Sync;
	  workInProgressRootCanSuspendUsingConfig = null;
	  workInProgressRootNextUnprocessedUpdateTime = NoWork;
	  workInProgressRootHasPendingPing = false;

	  {
	    spawnedWorkDuringRender = null;
	  }

	  {
	    ReactStrictModeWarnings.discardPendingWarnings();
	  }
	}

	function handleError(root, thrownValue) {
	  do {
	    try {
	      // Reset module-level state that was set during the render phase.
	      resetContextDependencies();
	      resetHooksAfterThrow();
	      resetCurrentFiber();

	      if (workInProgress === null || workInProgress.return === null) {
	        // Expected to be working on a non-root fiber. This is a fatal error
	        // because there's no ancestor that can handle it; the root is
	        // supposed to capture all errors that weren't caught by an error
	        // boundary.
	        workInProgressRootExitStatus = RootFatalErrored;
	        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
	        // sibling, or the parent if there are no siblings. But since the root
	        // has no siblings nor a parent, we set it to null. Usually this is
	        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
	        // interntionally not calling those, we need set it here.
	        // TODO: Consider calling `unwindWork` to pop the contexts.

	        workInProgress = null;
	        return null;
	      }

	      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
	        // Record the time spent rendering before an error was thrown. This
	        // avoids inaccurate Profiler durations in the case of a
	        // suspended render.
	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
	      }

	      throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
	      workInProgress = completeUnitOfWork(workInProgress);
	    } catch (yetAnotherThrownValue) {
	      // Something in the return path also threw.
	      thrownValue = yetAnotherThrownValue;
	      continue;
	    } // Return to the normal work loop.


	    return;
	  } while (true);
	}

	function pushDispatcher(root) {
	  var prevDispatcher = ReactCurrentDispatcher$1.current;
	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  if (prevDispatcher === null) {
	    // The React isomorphic package does not include a default dispatcher.
	    // Instead the first renderer will lazily attach one, in order to give
	    // nicer error messages.
	    return ContextOnlyDispatcher;
	  } else {
	    return prevDispatcher;
	  }
	}

	function popDispatcher(prevDispatcher) {
	  ReactCurrentDispatcher$1.current = prevDispatcher;
	}

	function pushInteractions(root) {
	  {
	    var prevInteractions = tracing$1.__interactionsRef.current;
	    tracing$1.__interactionsRef.current = root.memoizedInteractions;
	    return prevInteractions;
	  }
	}

	function popInteractions(prevInteractions) {
	  {
	    tracing$1.__interactionsRef.current = prevInteractions;
	  }
	}

	function markCommitTimeOfFallback() {
	  globalMostRecentFallbackTime = now();
	}
	function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
	  if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
	    workInProgressRootLatestProcessedExpirationTime = expirationTime;
	  }

	  if (suspenseConfig !== null) {
	    if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
	      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

	      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
	    }
	  }
	}
	function markUnprocessedUpdateTime(expirationTime) {
	  if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
	    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
	  }
	}
	function renderDidSuspend() {
	  if (workInProgressRootExitStatus === RootIncomplete) {
	    workInProgressRootExitStatus = RootSuspended;
	  }
	}
	function renderDidSuspendDelayIfPossible() {
	  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
	    workInProgressRootExitStatus = RootSuspendedWithDelay;
	  } // Check if there's a lower priority update somewhere else in the tree.


	  if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
	    // Mark the current render as suspended, and then mark that there's a
	    // pending update.
	    // TODO: This should immediately interrupt the current render, instead
	    // of waiting until the next time we yield.
	    markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
	    markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
	  }
	}
	function renderDidError() {
	  if (workInProgressRootExitStatus !== RootCompleted) {
	    workInProgressRootExitStatus = RootErrored;
	  }
	} // Called during render to determine if anything has suspended.
	// Returns false if we're not sure.

	function renderHasNotSuspendedYet() {
	  // If something errored or completed, we can't really be sure,
	  // so those are false.
	  return workInProgressRootExitStatus === RootIncomplete;
	}

	function inferTimeFromExpirationTime(expirationTime) {
	  // We don't know exactly when the update was scheduled, but we can infer an
	  // approximate start time from the expiration time.
	  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
	  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
	}

	function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
	  // We don't know exactly when the update was scheduled, but we can infer an
	  // approximate start time from the expiration time by subtracting the timeout
	  // that was added to the event time.
	  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
	  return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
	} // The work loop is an extremely hot path. Tell Closure not to inline it.

	/** @noinline */


	function workLoopSync() {
	  // Already timed out, so perform work without checking if we need to yield.
	  while (workInProgress !== null) {
	    workInProgress = performUnitOfWork(workInProgress);
	  }
	}
	/** @noinline */


	function workLoopConcurrent() {
	  // Perform work until Scheduler asks us to yield
	  while (workInProgress !== null && !shouldYield()) {
	    workInProgress = performUnitOfWork(workInProgress);
	  }
	}

	function performUnitOfWork(unitOfWork) {
	  // The current, flushed, state of this fiber is the alternate. Ideally
	  // nothing should rely on this, but relying on it here means that we don't
	  // need an additional field on the work in progress.
	  var current = unitOfWork.alternate;
	  startWorkTimer(unitOfWork);
	  setCurrentFiber(unitOfWork);
	  var next;

	  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
	    startProfilerTimer(unitOfWork);
	    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
	    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
	  } else {
	    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
	  }

	  resetCurrentFiber();
	  unitOfWork.memoizedProps = unitOfWork.pendingProps;

	  if (next === null) {
	    // If this doesn't spawn new work, complete the current work.
	    next = completeUnitOfWork(unitOfWork);
	  }

	  ReactCurrentOwner$2.current = null;
	  return next;
	}

	function completeUnitOfWork(unitOfWork) {
	  // Attempt to complete the current unit of work, then move to the next
	  // sibling. If there are no more siblings, return to the parent fiber.
	  workInProgress = unitOfWork;

	  do {
	    // The current, flushed, state of this fiber is the alternate. Ideally
	    // nothing should rely on this, but relying on it here means that we don't
	    // need an additional field on the work in progress.
	    var current = workInProgress.alternate;
	    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

	    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
	      setCurrentFiber(workInProgress);
	      var next = void 0;

	      if ( (workInProgress.mode & ProfileMode) === NoMode) {
	        next = completeWork(current, workInProgress, renderExpirationTime$1);
	      } else {
	        startProfilerTimer(workInProgress);
	        next = completeWork(current, workInProgress, renderExpirationTime$1); // Update render duration assuming we didn't error.

	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
	      }

	      stopWorkTimer(workInProgress);
	      resetCurrentFiber();
	      resetChildExpirationTime(workInProgress);

	      if (next !== null) {
	        // Completing this fiber spawned new work. Work on that next.
	        return next;
	      }

	      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
	      (returnFiber.effectTag & Incomplete) === NoEffect) {
	        // Append all the effects of the subtree and this fiber onto the effect
	        // list of the parent. The completion order of the children affects the
	        // side-effect order.
	        if (returnFiber.firstEffect === null) {
	          returnFiber.firstEffect = workInProgress.firstEffect;
	        }

	        if (workInProgress.lastEffect !== null) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
	          }

	          returnFiber.lastEffect = workInProgress.lastEffect;
	        } // If this fiber had side-effects, we append it AFTER the children's
	        // side-effects. We can perform certain side-effects earlier if needed,
	        // by doing multiple passes over the effect list. We don't want to
	        // schedule our own side-effect on our own list because if end up
	        // reusing children we'll schedule this effect onto itself since we're
	        // at the end.


	        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
	        // list. PerformedWork effect is read by React DevTools but shouldn't be
	        // committed.

	        if (effectTag > PerformedWork) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress;
	          } else {
	            returnFiber.firstEffect = workInProgress;
	          }

	          returnFiber.lastEffect = workInProgress;
	        }
	      }
	    } else {
	      // This fiber did not complete because something threw. Pop values off
	      // the stack without entering the complete phase. If this is a boundary,
	      // capture values if possible.
	      var _next = unwindWork(workInProgress); // Because this fiber did not complete, don't reset its expiration time.


	      if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	        // Record the render duration for the fiber that errored.
	        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

	        var actualDuration = workInProgress.actualDuration;
	        var child = workInProgress.child;

	        while (child !== null) {
	          actualDuration += child.actualDuration;
	          child = child.sibling;
	        }

	        workInProgress.actualDuration = actualDuration;
	      }

	      if (_next !== null) {
	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        // Since we're restarting, remove anything that is not a host effect
	        // from the effect tag.
	        // TODO: The name stopFailedWorkTimer is misleading because Suspense
	        // also captures and restarts.
	        stopFailedWorkTimer(workInProgress);
	        _next.effectTag &= HostEffectMask;
	        return _next;
	      }

	      stopWorkTimer(workInProgress);

	      if (returnFiber !== null) {
	        // Mark the parent fiber as incomplete and clear its effect list.
	        returnFiber.firstEffect = returnFiber.lastEffect = null;
	        returnFiber.effectTag |= Incomplete;
	      }
	    }

	    var siblingFiber = workInProgress.sibling;

	    if (siblingFiber !== null) {
	      // If there is more work to do in this returnFiber, do that next.
	      return siblingFiber;
	    } // Otherwise, return to the parent


	    workInProgress = returnFiber;
	  } while (workInProgress !== null); // We've reached the root.


	  if (workInProgressRootExitStatus === RootIncomplete) {
	    workInProgressRootExitStatus = RootCompleted;
	  }

	  return null;
	}

	function getRemainingExpirationTime(fiber) {
	  var updateExpirationTime = fiber.expirationTime;
	  var childExpirationTime = fiber.childExpirationTime;
	  return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
	}

	function resetChildExpirationTime(completedWork) {
	  if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
	    // The children of this component are hidden. Don't bubble their
	    // expiration times.
	    return;
	  }

	  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

	  if ( (completedWork.mode & ProfileMode) !== NoMode) {
	    // In profiling mode, resetChildExpirationTime is also used to reset
	    // profiler durations.
	    var actualDuration = completedWork.actualDuration;
	    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
	    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
	    // When work is done, it should bubble to the parent's actualDuration. If
	    // the fiber has not been cloned though, (meaning no work was done), then
	    // this value will reflect the amount of time spent working on a previous
	    // render. In that case it should not bubble. We determine whether it was
	    // cloned by comparing the child pointer.

	    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
	    var child = completedWork.child;

	    while (child !== null) {
	      var childUpdateExpirationTime = child.expirationTime;
	      var childChildExpirationTime = child.childExpirationTime;

	      if (childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childUpdateExpirationTime;
	      }

	      if (childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = childChildExpirationTime;
	      }

	      if (shouldBubbleActualDurations) {
	        actualDuration += child.actualDuration;
	      }

	      treeBaseDuration += child.treeBaseDuration;
	      child = child.sibling;
	    }

	    completedWork.actualDuration = actualDuration;
	    completedWork.treeBaseDuration = treeBaseDuration;
	  } else {
	    var _child = completedWork.child;

	    while (_child !== null) {
	      var _childUpdateExpirationTime = _child.expirationTime;
	      var _childChildExpirationTime = _child.childExpirationTime;

	      if (_childUpdateExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childUpdateExpirationTime;
	      }

	      if (_childChildExpirationTime > newChildExpirationTime) {
	        newChildExpirationTime = _childChildExpirationTime;
	      }

	      _child = _child.sibling;
	    }
	  }

	  completedWork.childExpirationTime = newChildExpirationTime;
	}

	function commitRoot(root) {
	  var renderPriorityLevel = getCurrentPriorityLevel();
	  runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
	  return null;
	}

	function commitRootImpl(root, renderPriorityLevel) {
	  do {
	    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
	    // means `flushPassiveEffects` will sometimes result in additional
	    // passive effects. So we need to keep flushing in a loop until there are
	    // no more pending effects.
	    // TODO: Might be better if `flushPassiveEffects` did not automatically
	    // flush synchronous work at the end, to avoid factoring hazards like this.
	    flushPassiveEffects();
	  } while (rootWithPendingPassiveEffects !== null);

	  flushRenderPhaseStrictModeWarningsInDEV();

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Should not already be working." );
	    }
	  }

	  var finishedWork = root.finishedWork;
	  var expirationTime = root.finishedExpirationTime;

	  if (finishedWork === null) {
	    return null;
	  }

	  root.finishedWork = null;
	  root.finishedExpirationTime = NoWork;

	  if (!(finishedWork !== root.current)) {
	    {
	      throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
	    }
	  } // commitRoot never returns a continuation; it always finishes synchronously.
	  // So we can clear these now to allow a new callback to be scheduled.


	  root.callbackNode = null;
	  root.callbackExpirationTime = NoWork;
	  root.callbackPriority = NoPriority;
	  root.nextKnownPendingLevel = NoWork;
	  startCommitTimer(); // Update the first and last pending times on this root. The new first
	  // pending time is whatever is left on the root fiber.

	  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
	  markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

	  if (root === workInProgressRoot) {
	    // We can reset these now that they are finished.
	    workInProgressRoot = null;
	    workInProgress = null;
	    renderExpirationTime$1 = NoWork;
	  } // This indicates that the last root we worked on is not the same one that
	  // we're committing now. This most commonly happens when a suspended root
	  // times out.
	  // Get the list of effects.


	  var firstEffect;

	  if (finishedWork.effectTag > PerformedWork) {
	    // A fiber's effect list consists only of its children, not itself. So if
	    // the root has an effect, we need to add it to the end of the list. The
	    // resulting list is the set that would belong to the root's parent, if it
	    // had one; that is, all the effects in the tree including the root.
	    if (finishedWork.lastEffect !== null) {
	      finishedWork.lastEffect.nextEffect = finishedWork;
	      firstEffect = finishedWork.firstEffect;
	    } else {
	      firstEffect = finishedWork;
	    }
	  } else {
	    // There is no effect on the root.
	    firstEffect = finishedWork.firstEffect;
	  }

	  if (firstEffect !== null) {
	    var prevExecutionContext = executionContext;
	    executionContext |= CommitContext;
	    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

	    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
	    // of the effect list for each phase: all mutation effects come before all
	    // layout effects, and so on.
	    // The first phase a "before mutation" phase. We use this phase to read the
	    // state of the host tree right before we mutate it. This is where
	    // getSnapshotBeforeUpdate is called.

	    startCommitSnapshotEffectsTimer();
	    prepareForCommit(root.containerInfo);
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var error = clearCaughtError();
	          captureCommitPhaseError(nextEffect, error);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    stopCommitSnapshotEffectsTimer();

	    {
	      // Mark the current commit time to be shared by all Profilers in this
	      // batch. This enables them to be grouped later.
	      recordCommitTime();
	    } // The next phase is the mutation phase, where we mutate the host tree.


	    startCommitHostEffectsTimer();
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var _error = clearCaughtError();

	          captureCommitPhaseError(nextEffect, _error);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    stopCommitHostEffectsTimer();
	    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
	    // the mutation phase, so that the previous tree is still current during
	    // componentWillUnmount, but before the layout phase, so that the finished
	    // work is current during componentDidMount/Update.

	    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
	    // the host tree after it's been mutated. The idiomatic use case for this is
	    // layout, but class component lifecycles also fire here for legacy reasons.

	    startCommitLifeCyclesTimer();
	    nextEffect = firstEffect;

	    do {
	      {
	        invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

	        if (hasCaughtError()) {
	          if (!(nextEffect !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var _error2 = clearCaughtError();

	          captureCommitPhaseError(nextEffect, _error2);
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    } while (nextEffect !== null);

	    stopCommitLifeCyclesTimer();
	    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
	    // opportunity to paint.

	    requestPaint();

	    {
	      popInteractions(prevInteractions);
	    }

	    executionContext = prevExecutionContext;
	  } else {
	    // No effects.
	    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
	    // no effects.
	    // TODO: Maybe there's a better way to report this.

	    startCommitSnapshotEffectsTimer();
	    stopCommitSnapshotEffectsTimer();

	    {
	      recordCommitTime();
	    }

	    startCommitHostEffectsTimer();
	    stopCommitHostEffectsTimer();
	    startCommitLifeCyclesTimer();
	    stopCommitLifeCyclesTimer();
	  }

	  stopCommitTimer();
	  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

	  if (rootDoesHavePassiveEffects) {
	    // This commit has passive effects. Stash a reference to them. But don't
	    // schedule a callback until after flushing layout work.
	    rootDoesHavePassiveEffects = false;
	    rootWithPendingPassiveEffects = root;
	    pendingPassiveEffectsExpirationTime = expirationTime;
	    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
	  } else {
	    // We are done with the effect chain at this point so let's clear the
	    // nextEffect pointers to assist with GC. If we have passive effects, we'll
	    // clear this in flushPassiveEffects.
	    nextEffect = firstEffect;

	    while (nextEffect !== null) {
	      var nextNextEffect = nextEffect.nextEffect;
	      nextEffect.nextEffect = null;
	      nextEffect = nextNextEffect;
	    }
	  } // Check if there's remaining work on this root


	  var remainingExpirationTime = root.firstPendingTime;

	  if (remainingExpirationTime !== NoWork) {
	    {
	      if (spawnedWorkDuringRender !== null) {
	        var expirationTimes = spawnedWorkDuringRender;
	        spawnedWorkDuringRender = null;

	        for (var i = 0; i < expirationTimes.length; i++) {
	          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
	        }
	      }

	      schedulePendingInteractions(root, remainingExpirationTime);
	    }
	  } else {
	    // If there's no remaining work, we can clear the set of already failed
	    // error boundaries.
	    legacyErrorBoundariesThatAlreadyFailed = null;
	  }

	  {
	    if (!rootDidHavePassiveEffects) {
	      // If there are no passive effects, then we can complete the pending interactions.
	      // Otherwise, we'll wait until after the passive effects are flushed.
	      // Wait to do this until after remaining work has been scheduled,
	      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
	      finishPendingInteractions(root, expirationTime);
	    }
	  }

	  if (remainingExpirationTime === Sync) {
	    // Count the number of times the root synchronously re-renders without
	    // finishing. If there are too many, it indicates an infinite update loop.
	    if (root === rootWithNestedUpdates) {
	      nestedUpdateCount++;
	    } else {
	      nestedUpdateCount = 0;
	      rootWithNestedUpdates = root;
	    }
	  } else {
	    nestedUpdateCount = 0;
	  }

	  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
	  // additional work on this root is scheduled.

	  ensureRootIsScheduled(root);

	  if (hasUncaughtError) {
	    hasUncaughtError = false;
	    var _error3 = firstUncaughtError;
	    firstUncaughtError = null;
	    throw _error3;
	  }

	  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
	    // This is a legacy edge case. We just committed the initial mount of
	    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
	    // synchronously, but layout updates should be deferred until the end
	    // of the batch.
	    return null;
	  } // If layout work was scheduled, flush it now.


	  flushSyncCallbackQueue();
	  return null;
	}

	function commitBeforeMutationEffects() {
	  while (nextEffect !== null) {
	    var effectTag = nextEffect.effectTag;

	    if ((effectTag & Snapshot) !== NoEffect) {
	      setCurrentFiber(nextEffect);
	      recordEffect();
	      var current = nextEffect.alternate;
	      commitBeforeMutationLifeCycles(current, nextEffect);
	      resetCurrentFiber();
	    }

	    if ((effectTag & Passive) !== NoEffect) {
	      // If there are passive effects, schedule a callback to flush at
	      // the earliest opportunity.
	      if (!rootDoesHavePassiveEffects) {
	        rootDoesHavePassiveEffects = true;
	        scheduleCallback(NormalPriority, function () {
	          flushPassiveEffects();
	          return null;
	        });
	      }
	    }

	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function commitMutationEffects(root, renderPriorityLevel) {
	  // TODO: Should probably move the bulk of this function to commitWork.
	  while (nextEffect !== null) {
	    setCurrentFiber(nextEffect);
	    var effectTag = nextEffect.effectTag;

	    if (effectTag & ContentReset) {
	      commitResetTextContent(nextEffect);
	    }

	    if (effectTag & Ref) {
	      var current = nextEffect.alternate;

	      if (current !== null) {
	        commitDetachRef(current);
	      }
	    } // The following switch statement is only concerned about placement,
	    // updates, and deletions. To avoid needing to add a case for every possible
	    // bitmap value, we remove the secondary effects from the effect tag and
	    // switch on that value.


	    var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

	    switch (primaryEffectTag) {
	      case Placement:
	        {
	          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
	          // inserted, before any life-cycles like componentDidMount gets called.
	          // TODO: findDOMNode doesn't rely on this any more but isMounted does
	          // and isMounted is deprecated anyway so we should be able to kill this.

	          nextEffect.effectTag &= ~Placement;
	          break;
	        }

	      case PlacementAndUpdate:
	        {
	          // Placement
	          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
	          // inserted, before any life-cycles like componentDidMount gets called.

	          nextEffect.effectTag &= ~Placement; // Update

	          var _current = nextEffect.alternate;
	          commitWork(_current, nextEffect);
	          break;
	        }

	      case Hydrating:
	        {
	          nextEffect.effectTag &= ~Hydrating;
	          break;
	        }

	      case HydratingAndUpdate:
	        {
	          nextEffect.effectTag &= ~Hydrating; // Update

	          var _current2 = nextEffect.alternate;
	          commitWork(_current2, nextEffect);
	          break;
	        }

	      case Update:
	        {
	          var _current3 = nextEffect.alternate;
	          commitWork(_current3, nextEffect);
	          break;
	        }

	      case Deletion:
	        {
	          commitDeletion(root, nextEffect, renderPriorityLevel);
	          break;
	        }
	    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.


	    recordEffect();
	    resetCurrentFiber();
	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function commitLayoutEffects(root, committedExpirationTime) {
	  // TODO: Should probably move the bulk of this function to commitWork.
	  while (nextEffect !== null) {
	    setCurrentFiber(nextEffect);
	    var effectTag = nextEffect.effectTag;

	    if (effectTag & (Update | Callback)) {
	      recordEffect();
	      var current = nextEffect.alternate;
	      commitLifeCycles(root, current, nextEffect);
	    }

	    if (effectTag & Ref) {
	      recordEffect();
	      commitAttachRef(nextEffect);
	    }

	    resetCurrentFiber();
	    nextEffect = nextEffect.nextEffect;
	  }
	}

	function flushPassiveEffects() {
	  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
	    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
	    pendingPassiveEffectsRenderPriority = NoPriority;
	    return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
	  }
	}

	function flushPassiveEffectsImpl() {
	  if (rootWithPendingPassiveEffects === null) {
	    return false;
	  }

	  var root = rootWithPendingPassiveEffects;
	  var expirationTime = pendingPassiveEffectsExpirationTime;
	  rootWithPendingPassiveEffects = null;
	  pendingPassiveEffectsExpirationTime = NoWork;

	  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
	    {
	      throw Error( "Cannot flush passive effects while already rendering." );
	    }
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= CommitContext;
	  var prevInteractions = pushInteractions(root);

	  {
	    // Note: This currently assumes there are no passive effects on the root fiber
	    // because the root is not part of its own effect list.
	    // This could change in the future.
	    var _effect2 = root.current.firstEffect;

	    while (_effect2 !== null) {
	      {
	        setCurrentFiber(_effect2);
	        invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);

	        if (hasCaughtError()) {
	          if (!(_effect2 !== null)) {
	            {
	              throw Error( "Should be working on an effect." );
	            }
	          }

	          var _error5 = clearCaughtError();

	          captureCommitPhaseError(_effect2, _error5);
	        }

	        resetCurrentFiber();
	      }

	      var nextNextEffect = _effect2.nextEffect; // Remove nextEffect pointer to assist GC

	      _effect2.nextEffect = null;
	      _effect2 = nextNextEffect;
	    }
	  }

	  {
	    popInteractions(prevInteractions);
	    finishPendingInteractions(root, expirationTime);
	  }

	  executionContext = prevExecutionContext;
	  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
	  // exceeds the limit, we'll fire a warning.

	  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
	  return true;
	}

	function isAlreadyFailedLegacyErrorBoundary(instance) {
	  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
	}
	function markLegacyErrorBoundaryAsFailed(instance) {
	  if (legacyErrorBoundariesThatAlreadyFailed === null) {
	    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
	  } else {
	    legacyErrorBoundariesThatAlreadyFailed.add(instance);
	  }
	}

	function prepareToThrowUncaughtError(error) {
	  if (!hasUncaughtError) {
	    hasUncaughtError = true;
	    firstUncaughtError = error;
	  }
	}

	var onUncaughtError = prepareToThrowUncaughtError;

	function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
	  var errorInfo = createCapturedValue(error, sourceFiber);
	  var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
	  enqueueUpdate(rootFiber, update);
	  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

	  if (root !== null) {
	    ensureRootIsScheduled(root);
	    schedulePendingInteractions(root, Sync);
	  }
	}

	function captureCommitPhaseError(sourceFiber, error) {
	  if (sourceFiber.tag === HostRoot) {
	    // Error was thrown at the root. There is no parent, so the root
	    // itself should capture it.
	    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
	    return;
	  }

	  var fiber = sourceFiber.return;

	  while (fiber !== null) {
	    if (fiber.tag === HostRoot) {
	      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
	      return;
	    } else if (fiber.tag === ClassComponent) {
	      var ctor = fiber.type;
	      var instance = fiber.stateNode;

	      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	        var errorInfo = createCapturedValue(error, sourceFiber);
	        var update = createClassErrorUpdate(fiber, errorInfo, // TODO: This is always sync
	        Sync);
	        enqueueUpdate(fiber, update);
	        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

	        if (root !== null) {
	          ensureRootIsScheduled(root);
	          schedulePendingInteractions(root, Sync);
	        }

	        return;
	      }
	    }

	    fiber = fiber.return;
	  }
	}
	function pingSuspendedRoot(root, thenable, suspendedTime) {
	  var pingCache = root.pingCache;

	  if (pingCache !== null) {
	    // The thenable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    pingCache.delete(thenable);
	  }

	  if (workInProgressRoot === root && renderExpirationTime$1 === suspendedTime) {
	    // Received a ping at the same priority level at which we're currently
	    // rendering. We might want to restart this render. This should mirror
	    // the logic of whether or not a root suspends once it completes.
	    // TODO: If we're rendering sync either due to Sync, Batched or expired,
	    // we should probably never restart.
	    // If we're suspended with delay, we'll always suspend so we can always
	    // restart. If we're suspended without any updates, it might be a retry.
	    // If it's early in the retry we can restart. We can't know for sure
	    // whether we'll eventually process an update during this render pass,
	    // but it's somewhat unlikely that we get to a ping before that, since
	    // getting to the root most update is usually very fast.
	    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
	      // Restart from the root. Don't need to schedule a ping because
	      // we're already working on this tree.
	      prepareFreshStack(root, renderExpirationTime$1);
	    } else {
	      // Even though we can't restart right now, we might get an
	      // opportunity later. So we mark this render as having a ping.
	      workInProgressRootHasPendingPing = true;
	    }

	    return;
	  }

	  if (!isRootSuspendedAtTime(root, suspendedTime)) {
	    // The root is no longer suspended at this time.
	    return;
	  }

	  var lastPingedTime = root.lastPingedTime;

	  if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
	    // There's already a lower priority ping scheduled.
	    return;
	  } // Mark the time at which this ping was scheduled.


	  root.lastPingedTime = suspendedTime;

	  ensureRootIsScheduled(root);
	  schedulePendingInteractions(root, suspendedTime);
	}

	function retryTimedOutBoundary(boundaryFiber, retryTime) {
	  // The boundary fiber (a Suspense component or SuspenseList component)
	  // previously was rendered in its fallback state. One of the promises that
	  // suspended it has resolved, which means at least part of the tree was
	  // likely unblocked. Try rendering again, at a new expiration time.
	  if (retryTime === NoWork) {
	    var suspenseConfig = null; // Retries don't carry over the already committed update.

	    var currentTime = requestCurrentTimeForUpdate();
	    retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
	  } // TODO: Special case idle priority?


	  var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

	  if (root !== null) {
	    ensureRootIsScheduled(root);
	    schedulePendingInteractions(root, retryTime);
	  }
	}
	function resolveRetryThenable(boundaryFiber, thenable) {
	  var retryTime = NoWork; // Default

	  var retryCache;

	  {
	    retryCache = boundaryFiber.stateNode;
	  }

	  if (retryCache !== null) {
	    // The thenable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    retryCache.delete(thenable);
	  }

	  retryTimedOutBoundary(boundaryFiber, retryTime);
	} // Computes the next Just Noticeable Difference (JND) boundary.
	// The theory is that a person can't tell the difference between small differences in time.
	// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
	// difference in the experience. However, waiting for longer might mean that we can avoid
	// showing an intermediate loading state. The longer we have already waited, the harder it
	// is to tell small differences in time. Therefore, the longer we've already waited,
	// the longer we can wait additionally. At some point we have to give up though.
	// We pick a train model where the next boundary commits at a consistent schedule.
	// These particular numbers are vague estimates. We expect to adjust them based on research.

	function jnd(timeElapsed) {
	  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
	}

	function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
	  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

	  if (busyMinDurationMs <= 0) {
	    return 0;
	  }

	  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

	  var currentTimeMs = now();
	  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
	  var timeElapsed = currentTimeMs - eventTimeMs;

	  if (timeElapsed <= busyDelayMs) {
	    // If we haven't yet waited longer than the initial delay, we don't
	    // have to wait any additional time.
	    return 0;
	  }

	  var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

	  return msUntilTimeout;
	}

	function checkForNestedUpdates() {
	  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	    nestedUpdateCount = 0;
	    rootWithNestedUpdates = null;

	    {
	      {
	        throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
	      }
	    }
	  }

	  {
	    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
	      nestedPassiveUpdateCount = 0;

	      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
	    }
	  }
	}

	function flushRenderPhaseStrictModeWarningsInDEV() {
	  {
	    ReactStrictModeWarnings.flushLegacyContextWarning();

	    {
	      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	    }
	  }
	}

	function stopFinishedWorkLoopTimer() {
	  var didCompleteRoot = true;
	  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
	  interruptedBy = null;
	}

	function stopInterruptedWorkLoopTimer() {
	  // TODO: Track which fiber caused the interruption.
	  var didCompleteRoot = false;
	  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
	  interruptedBy = null;
	}

	function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
	  if ( workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
	    interruptedBy = fiberThatReceivedUpdate;
	  }
	}

	var didWarnStateUpdateForUnmountedComponent = null;

	function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
	  {
	    var tag = fiber.tag;

	    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
	      // Only warn for user-defined components, not internal ones like Suspense.
	      return;
	    }
	    // the problematic code almost always lies inside that component.


	    var componentName = getComponentName(fiber.type) || 'ReactComponent';

	    if (didWarnStateUpdateForUnmountedComponent !== null) {
	      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
	        return;
	      }

	      didWarnStateUpdateForUnmountedComponent.add(componentName);
	    } else {
	      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
	    }

	    error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
	  }
	}

	var beginWork$1;

	{
	  var dummyFiber = null;

	  beginWork$1 = function (current, unitOfWork, expirationTime) {
	    // If a component throws an error, we replay it again in a synchronously
	    // dispatched event, so that the debugger will treat it as an uncaught
	    // error See ReactErrorUtils for more information.
	    // Before entering the begin phase, copy the work-in-progress onto a dummy
	    // fiber. If beginWork throws, we'll use this to reset the state.
	    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

	    try {
	      return beginWork(current, unitOfWork, expirationTime);
	    } catch (originalError) {
	      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
	        // Don't replay promises. Treat everything else like an error.
	        throw originalError;
	      } // Keep this code in sync with handleError; any changes here must have
	      // corresponding changes there.


	      resetContextDependencies();
	      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
	      // same fiber again.
	      // Unwind the failed stack frame

	      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

	      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

	      if ( unitOfWork.mode & ProfileMode) {
	        // Reset the profiler timer.
	        startProfilerTimer(unitOfWork);
	      } // Run beginWork again.


	      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, expirationTime);

	      if (hasCaughtError()) {
	        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
	        // Rethrow this error instead of the original one.

	        throw replayError;
	      } else {
	        // This branch is reachable if the render phase is impure.
	        throw originalError;
	      }
	    }
	  };
	}

	var didWarnAboutUpdateInRender = false;
	var didWarnAboutUpdateInRenderForAnotherComponent;

	{
	  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
	}

	function warnAboutRenderPhaseUpdatesInDEV(fiber) {
	  {
	    if (isRendering && (executionContext & RenderContext) !== NoContext) {
	      switch (fiber.tag) {
	        case FunctionComponent:
	        case ForwardRef:
	        case SimpleMemoComponent:
	          {
	            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

	            var dedupeKey = renderingComponentName;

	            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
	              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
	              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

	              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://fb.me/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
	            }

	            break;
	          }

	        case ClassComponent:
	          {
	            if (!didWarnAboutUpdateInRender) {
	              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

	              didWarnAboutUpdateInRender = true;
	            }

	            break;
	          }
	      }
	    }
	  }
	} // a 'shared' variable that changes when act() opens/closes in tests.


	var IsThisRendererActing = {
	  current: false
	};
	function warnIfNotScopedWithMatchingAct(fiber) {
	  {
	    if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
	      error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}
	function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
	  {
	    if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
	      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}

	function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
	  {
	    if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
	      error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
	    }
	  }
	}

	var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

	var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
	// scheduler is the actual recommendation. The alternative could be a testing build,
	// a new lib, or whatever; we dunno just yet. This message is for early adopters
	// to get their tests right.

	function warnIfUnmockedScheduler(fiber) {
	  {
	    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
	      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
	        didWarnAboutUnmockedScheduler = true;

	        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
	      }
	    }
	  }
	}

	function computeThreadID(root, expirationTime) {
	  // Interaction threads are unique per root and expiration time.
	  return expirationTime * 1000 + root.interactionThreadID;
	}

	function markSpawnedWork(expirationTime) {

	  if (spawnedWorkDuringRender === null) {
	    spawnedWorkDuringRender = [expirationTime];
	  } else {
	    spawnedWorkDuringRender.push(expirationTime);
	  }
	}

	function scheduleInteractions(root, expirationTime, interactions) {

	  if (interactions.size > 0) {
	    var pendingInteractionMap = root.pendingInteractionMap;
	    var pendingInteractions = pendingInteractionMap.get(expirationTime);

	    if (pendingInteractions != null) {
	      interactions.forEach(function (interaction) {
	        if (!pendingInteractions.has(interaction)) {
	          // Update the pending async work count for previously unscheduled interaction.
	          interaction.__count++;
	        }

	        pendingInteractions.add(interaction);
	      });
	    } else {
	      pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

	      interactions.forEach(function (interaction) {
	        interaction.__count++;
	      });
	    }

	    var subscriber = tracing$1.__subscriberRef.current;

	    if (subscriber !== null) {
	      var threadID = computeThreadID(root, expirationTime);
	      subscriber.onWorkScheduled(interactions, threadID);
	    }
	  }
	}

	function schedulePendingInteractions(root, expirationTime) {

	  scheduleInteractions(root, expirationTime, tracing$1.__interactionsRef.current);
	}

	function startWorkOnPendingInteractions(root, expirationTime) {
	  // we can accurately attribute time spent working on it, And so that cascading
	  // work triggered during the render phase will be associated with it.


	  var interactions = new Set();
	  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	    if (scheduledExpirationTime >= expirationTime) {
	      scheduledInteractions.forEach(function (interaction) {
	        return interactions.add(interaction);
	      });
	    }
	  }); // Store the current set of interactions on the FiberRoot for a few reasons:
	  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
	  // without having to recalculate it. We will also use it in commitWork() to
	  // pass to any Profiler onRender() hooks. This also provides DevTools with a
	  // way to access it when the onCommitRoot() hook is called.

	  root.memoizedInteractions = interactions;

	  if (interactions.size > 0) {
	    var subscriber = tracing$1.__subscriberRef.current;

	    if (subscriber !== null) {
	      var threadID = computeThreadID(root, expirationTime);

	      try {
	        subscriber.onWorkStarted(interactions, threadID);
	      } catch (error) {
	        // If the subscriber throws, rethrow it in a separate task
	        scheduleCallback(ImmediatePriority, function () {
	          throw error;
	        });
	      }
	    }
	  }
	}

	function finishPendingInteractions(root, committedExpirationTime) {

	  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
	  var subscriber;

	  try {
	    subscriber = tracing$1.__subscriberRef.current;

	    if (subscriber !== null && root.memoizedInteractions.size > 0) {
	      var threadID = computeThreadID(root, committedExpirationTime);
	      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
	    }
	  } catch (error) {
	    // If the subscriber throws, rethrow it in a separate task
	    scheduleCallback(ImmediatePriority, function () {
	      throw error;
	    });
	  } finally {
	    // Clear completed interactions from the pending Map.
	    // Unless the render was suspended or cascading work was scheduled,
	    // In which caseâ leave pending interactions until the subsequent render.
	    var pendingInteractionMap = root.pendingInteractionMap;
	    pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
	      // Only decrement the pending interaction count if we're done.
	      // If there's still work at the current priority,
	      // That indicates that we are waiting for suspense data.
	      if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
	        pendingInteractionMap.delete(scheduledExpirationTime);
	        scheduledInteractions.forEach(function (interaction) {
	          interaction.__count--;

	          if (subscriber !== null && interaction.__count === 0) {
	            try {
	              subscriber.onInteractionScheduledWorkCompleted(interaction);
	            } catch (error) {
	              // If the subscriber throws, rethrow it in a separate task
	              scheduleCallback(ImmediatePriority, function () {
	                throw error;
	              });
	            }
	          }
	        });
	      }
	    });
	  }
	}

	var onScheduleFiberRoot = null;
	var onCommitFiberRoot = null;
	var onCommitFiberUnmount = null;
	var hasLoggedError = false;
	var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }

	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }

	  if (!hook.supportsFiber) {
	    {
	      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
	    } // DevTools exists, even though it doesn't support Fiber.


	    return true;
	  }

	  try {
	    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

	    if (true) {
	      // Only used by Fast Refresh
	      if (typeof hook.onScheduleFiberRoot === 'function') {
	        onScheduleFiberRoot = function (root, children) {
	          try {
	            hook.onScheduleFiberRoot(rendererID, root, children);
	          } catch (err) {
	            if (true && !hasLoggedError) {
	              hasLoggedError = true;

	              error('React instrumentation encountered an error: %s', err);
	            }
	          }
	        };
	      }
	    }

	    onCommitFiberRoot = function (root, expirationTime) {
	      try {
	        var didError = (root.current.effectTag & DidCapture) === DidCapture;

	        if (enableProfilerTimer) {
	          var currentTime = getCurrentTime();
	          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
	          hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
	        } else {
	          hook.onCommitFiberRoot(rendererID, root, undefined, didError);
	        }
	      } catch (err) {
	        if (true) {
	          if (!hasLoggedError) {
	            hasLoggedError = true;

	            error('React instrumentation encountered an error: %s', err);
	          }
	        }
	      }
	    };

	    onCommitFiberUnmount = function (fiber) {
	      try {
	        hook.onCommitFiberUnmount(rendererID, fiber);
	      } catch (err) {
	        if (true) {
	          if (!hasLoggedError) {
	            hasLoggedError = true;

	            error('React instrumentation encountered an error: %s', err);
	          }
	        }
	      }
	    };
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      error('React instrumentation encountered an error: %s.', err);
	    }
	  } // DevTools exists


	  return true;
	}
	function onScheduleRoot(root, children) {
	  if (typeof onScheduleFiberRoot === 'function') {
	    onScheduleFiberRoot(root, children);
	  }
	}
	function onCommitRoot(root, expirationTime) {
	  if (typeof onCommitFiberRoot === 'function') {
	    onCommitFiberRoot(root, expirationTime);
	  }
	}
	function onCommitUnmount(fiber) {
	  if (typeof onCommitFiberUnmount === 'function') {
	    onCommitFiberUnmount(fiber);
	  }
	}

	var hasBadMapPolyfill;

	{
	  hasBadMapPolyfill = false;

	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    var testMap = new Map([[nonExtensibleObject, null]]);
	    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
	    // https://github.com/rollup/rollup/issues/1771
	    // TODO: we can remove these if Rollup fixes the bug.

	    testMap.set(0, 0);
	    testSet.add(0);
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	var debugCounter = 1;

	function FiberNode(tag, pendingProps, key, mode) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.elementType = null;
	  this.type = null;
	  this.stateNode = null; // Fiber

	  this.return = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;
	  this.ref = null;
	  this.pendingProps = pendingProps;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;
	  this.dependencies = null;
	  this.mode = mode; // Effects

	  this.effectTag = NoEffect;
	  this.nextEffect = null;
	  this.firstEffect = null;
	  this.lastEffect = null;
	  this.expirationTime = NoWork;
	  this.childExpirationTime = NoWork;
	  this.alternate = null;

	  {
	    // Note: The following is done to avoid a v8 performance cliff.
	    //
	    // Initializing the fields below to smis and later updating them with
	    // double values will cause Fibers to end up having separate shapes.
	    // This behavior/bug has something to do with Object.preventExtension().
	    // Fortunately this only impacts DEV builds.
	    // Unfortunately it makes React unusably slow for some applications.
	    // To work around this, initialize the fields below with doubles.
	    //
	    // Learn more about this here:
	    // https://github.com/facebook/react/issues/14365
	    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
	    this.actualDuration = Number.NaN;
	    this.actualStartTime = Number.NaN;
	    this.selfBaseDuration = Number.NaN;
	    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
	    // This won't trigger the performance cliff mentioned above,
	    // and it simplifies other profiler code (including DevTools).

	    this.actualDuration = 0;
	    this.actualStartTime = -1;
	    this.selfBaseDuration = 0;
	    this.treeBaseDuration = 0;
	  } // This is normally DEV-only except www when it adds listeners.
	  // TODO: remove the User Timing integration in favor of Root Events.


	  {
	    this._debugID = debugCounter++;
	    this._debugIsCurrentlyTiming = false;
	  }

	  {
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugNeedsRemount = false;
	    this._debugHookTypes = null;

	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	} // This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.


	var createFiber = function (tag, pendingProps, key, mode) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, pendingProps, key, mode);
	};

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function isSimpleFunctionComponent(type) {
	  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
	}
	function resolveLazyComponentTag(Component) {
	  if (typeof Component === 'function') {
	    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
	  } else if (Component !== undefined && Component !== null) {
	    var $$typeof = Component.$$typeof;

	    if ($$typeof === REACT_FORWARD_REF_TYPE) {
	      return ForwardRef;
	    }

	    if ($$typeof === REACT_MEMO_TYPE) {
	      return MemoComponent;
	    }
	  }

	  return IndeterminateComponent;
	} // This is used to create an alternate fiber to do work on.

	function createWorkInProgress(current, pendingProps) {
	  var workInProgress = current.alternate;

	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
	    workInProgress.elementType = current.elementType;
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      {
	        workInProgress._debugID = current._debugID;
	      }

	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	      workInProgress._debugHookTypes = current._debugHookTypes;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    workInProgress.pendingProps = pendingProps; // We already have an alternate.
	    // Reset the effect tag.

	    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

	    workInProgress.nextEffect = null;
	    workInProgress.firstEffect = null;
	    workInProgress.lastEffect = null;

	    {
	      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
	      // This prevents time from endlessly accumulating in new commits.
	      // This has the downside of resetting values for different priority renders,
	      // But works for yielding (the common case) and should support resuming.
	      workInProgress.actualDuration = 0;
	      workInProgress.actualStartTime = -1;
	    }
	  }

	  workInProgress.childExpirationTime = current.childExpirationTime;
	  workInProgress.expirationTime = current.expirationTime;
	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	  // it cannot be shared with the current fiber.

	  var currentDependencies = current.dependencies;
	  workInProgress.dependencies = currentDependencies === null ? null : {
	    expirationTime: currentDependencies.expirationTime,
	    firstContext: currentDependencies.firstContext,
	    responders: currentDependencies.responders
	  }; // These will be overridden during the parent's reconciliation

	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  {
	    workInProgress.selfBaseDuration = current.selfBaseDuration;
	    workInProgress.treeBaseDuration = current.treeBaseDuration;
	  }

	  {
	    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

	    switch (workInProgress.tag) {
	      case IndeterminateComponent:
	      case FunctionComponent:
	      case SimpleMemoComponent:
	        workInProgress.type = resolveFunctionForHotReloading(current.type);
	        break;

	      case ClassComponent:
	        workInProgress.type = resolveClassForHotReloading(current.type);
	        break;

	      case ForwardRef:
	        workInProgress.type = resolveForwardRefForHotReloading(current.type);
	        break;
	    }
	  }

	  return workInProgress;
	} // Used to reuse a Fiber for a second pass.

	function resetWorkInProgress(workInProgress, renderExpirationTime) {
	  // This resets the Fiber to what createFiber or createWorkInProgress would
	  // have set the values to before during the first pass. Ideally this wouldn't
	  // be necessary but unfortunately many code paths reads from the workInProgress
	  // when they should be reading from current and writing to workInProgress.
	  // We assume pendingProps, index, key, ref, return are still untouched to
	  // avoid doing another reconciliation.
	  // Reset the effect tag but keep any Placement tags, since that's something
	  // that child fiber is setting, not the reconciliation.
	  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

	  workInProgress.nextEffect = null;
	  workInProgress.firstEffect = null;
	  workInProgress.lastEffect = null;
	  var current = workInProgress.alternate;

	  if (current === null) {
	    // Reset to createFiber's initial values.
	    workInProgress.childExpirationTime = NoWork;
	    workInProgress.expirationTime = renderExpirationTime;
	    workInProgress.child = null;
	    workInProgress.memoizedProps = null;
	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null;
	    workInProgress.dependencies = null;

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = 0;
	      workInProgress.treeBaseDuration = 0;
	    }
	  } else {
	    // Reset to the cloned values that createWorkInProgress would've.
	    workInProgress.childExpirationTime = current.childExpirationTime;
	    workInProgress.expirationTime = current.expirationTime;
	    workInProgress.child = current.child;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	    // it cannot be shared with the current fiber.

	    var currentDependencies = current.dependencies;
	    workInProgress.dependencies = currentDependencies === null ? null : {
	      expirationTime: currentDependencies.expirationTime,
	      firstContext: currentDependencies.firstContext,
	      responders: currentDependencies.responders
	    };

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = current.selfBaseDuration;
	      workInProgress.treeBaseDuration = current.treeBaseDuration;
	    }
	  }

	  return workInProgress;
	}
	function createHostRootFiber(tag) {
	  var mode;

	  if (tag === ConcurrentRoot) {
	    mode = ConcurrentMode | BlockingMode | StrictMode;
	  } else if (tag === BlockingRoot) {
	    mode = BlockingMode | StrictMode;
	  } else {
	    mode = NoMode;
	  }

	  if ( isDevToolsPresent) {
	    // Always collect profile timings when DevTools are present.
	    // This enables DevTools to start capturing timing at any pointâ
	    // Without some nodes in the tree having empty base times.
	    mode |= ProfileMode;
	  }

	  return createFiber(HostRoot, null, null, mode);
	}
	function createFiberFromTypeAndProps(type, // React$ElementType
	key, pendingProps, owner, mode, expirationTime) {
	  var fiber;
	  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

	  var resolvedType = type;

	  if (typeof type === 'function') {
	    if (shouldConstruct(type)) {
	      fiberTag = ClassComponent;

	      {
	        resolvedType = resolveClassForHotReloading(resolvedType);
	      }
	    } else {
	      {
	        resolvedType = resolveFunctionForHotReloading(resolvedType);
	      }
	    }
	  } else if (typeof type === 'string') {
	    fiberTag = HostComponent;
	  } else {
	    getTag: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

	      case REACT_CONCURRENT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= ConcurrentMode | BlockingMode | StrictMode;
	        break;

	      case REACT_STRICT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= StrictMode;
	        break;

	      case REACT_PROFILER_TYPE:
	        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

	      case REACT_SUSPENSE_TYPE:
	        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

	      case REACT_SUSPENSE_LIST_TYPE:
	        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

	      default:
	        {
	          if (typeof type === 'object' && type !== null) {
	            switch (type.$$typeof) {
	              case REACT_PROVIDER_TYPE:
	                fiberTag = ContextProvider;
	                break getTag;

	              case REACT_CONTEXT_TYPE:
	                // This is a consumer
	                fiberTag = ContextConsumer;
	                break getTag;

	              case REACT_FORWARD_REF_TYPE:
	                fiberTag = ForwardRef;

	                {
	                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
	                }

	                break getTag;

	              case REACT_MEMO_TYPE:
	                fiberTag = MemoComponent;
	                break getTag;

	              case REACT_LAZY_TYPE:
	                fiberTag = LazyComponent;
	                resolvedType = null;
	                break getTag;

	              case REACT_BLOCK_TYPE:
	                fiberTag = Block;
	                break getTag;

	            }
	          }

	          var info = '';

	          {
	            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
	            }

	            var ownerName = owner ? getComponentName(owner.type) : null;

	            if (ownerName) {
	              info += '\n\nCheck the render method of `' + ownerName + '`.';
	            }
	          }

	          {
	            {
	              throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
	            }
	          }
	        }
	    }
	  }

	  fiber = createFiber(fiberTag, pendingProps, key, mode);
	  fiber.elementType = type;
	  fiber.type = resolvedType;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromElement(element, mode, expirationTime) {
	  var owner = null;

	  {
	    owner = element._owner;
	  }

	  var type = element.type;
	  var key = element.key;
	  var pendingProps = element.props;
	  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);

	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }

	  return fiber;
	}
	function createFiberFromFragment(elements, mode, expirationTime, key) {
	  var fiber = createFiber(Fragment, elements, key, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
	  {
	    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
	      error('Profiler must specify an "id" string and "onRender" function as props');
	    }
	  }

	  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

	  fiber.elementType = REACT_PROFILER_TYPE;
	  fiber.type = REACT_PROFILER_TYPE;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
	  // This needs to be fixed in getComponentName so that it relies on the tag
	  // instead.

	  fiber.type = REACT_SUSPENSE_TYPE;
	  fiber.elementType = REACT_SUSPENSE_TYPE;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
	  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

	  {
	    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
	    // This needs to be fixed in getComponentName so that it relies on the tag
	    // instead.
	    fiber.type = REACT_SUSPENSE_LIST_TYPE;
	  }

	  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromText(content, mode, expirationTime) {
	  var fiber = createFiber(HostText, content, null, mode);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}
	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

	  fiber.elementType = 'DELETED';
	  fiber.type = 'DELETED';
	  return fiber;
	}
	function createFiberFromPortal(portal, mode, expirationTime) {
	  var pendingProps = portal.children !== null ? portal.children : [];
	  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
	  fiber.expirationTime = expirationTime;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null,
	    // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	} // Used for stashing WIP properties to replay failed work in DEV.

	function assignFiberPropertiesInDEV(target, source) {
	  if (target === null) {
	    // This Fiber's initial properties will always be overwritten.
	    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	    target = createFiber(IndeterminateComponent, null, null, NoMode);
	  } // This is intentionally written as a list of all properties.
	  // We tried to use Object.assign() instead but this is called in
	  // the hottest path, and Object.assign() was too slow:
	  // https://github.com/facebook/react/issues/12502
	  // This code is DEV-only so size is not a concern.


	  target.tag = source.tag;
	  target.key = source.key;
	  target.elementType = source.elementType;
	  target.type = source.type;
	  target.stateNode = source.stateNode;
	  target.return = source.return;
	  target.child = source.child;
	  target.sibling = source.sibling;
	  target.index = source.index;
	  target.ref = source.ref;
	  target.pendingProps = source.pendingProps;
	  target.memoizedProps = source.memoizedProps;
	  target.updateQueue = source.updateQueue;
	  target.memoizedState = source.memoizedState;
	  target.dependencies = source.dependencies;
	  target.mode = source.mode;
	  target.effectTag = source.effectTag;
	  target.nextEffect = source.nextEffect;
	  target.firstEffect = source.firstEffect;
	  target.lastEffect = source.lastEffect;
	  target.expirationTime = source.expirationTime;
	  target.childExpirationTime = source.childExpirationTime;
	  target.alternate = source.alternate;

	  {
	    target.actualDuration = source.actualDuration;
	    target.actualStartTime = source.actualStartTime;
	    target.selfBaseDuration = source.selfBaseDuration;
	    target.treeBaseDuration = source.treeBaseDuration;
	  }

	  {
	    target._debugID = source._debugID;
	  }

	  target._debugSource = source._debugSource;
	  target._debugOwner = source._debugOwner;
	  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
	  target._debugNeedsRemount = source._debugNeedsRemount;
	  target._debugHookTypes = source._debugHookTypes;
	  return target;
	}

	function FiberRootNode(containerInfo, tag, hydrate) {
	  this.tag = tag;
	  this.current = null;
	  this.containerInfo = containerInfo;
	  this.pendingChildren = null;
	  this.pingCache = null;
	  this.finishedExpirationTime = NoWork;
	  this.finishedWork = null;
	  this.timeoutHandle = noTimeout;
	  this.context = null;
	  this.pendingContext = null;
	  this.hydrate = hydrate;
	  this.callbackNode = null;
	  this.callbackPriority = NoPriority;
	  this.firstPendingTime = NoWork;
	  this.firstSuspendedTime = NoWork;
	  this.lastSuspendedTime = NoWork;
	  this.nextKnownPendingLevel = NoWork;
	  this.lastPingedTime = NoWork;
	  this.lastExpiredTime = NoWork;

	  {
	    this.interactionThreadID = tracing$1.unstable_getThreadID();
	    this.memoizedInteractions = new Set();
	    this.pendingInteractionMap = new Map();
	  }
	}

	function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
	  var root = new FiberRootNode(containerInfo, tag, hydrate);
	  // stateNode is any.


	  var uninitializedFiber = createHostRootFiber(tag);
	  root.current = uninitializedFiber;
	  uninitializedFiber.stateNode = root;
	  initializeUpdateQueue(uninitializedFiber);
	  return root;
	}
	function isRootSuspendedAtTime(root, expirationTime) {
	  var firstSuspendedTime = root.firstSuspendedTime;
	  var lastSuspendedTime = root.lastSuspendedTime;
	  return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
	}
	function markRootSuspendedAtTime(root, expirationTime) {
	  var firstSuspendedTime = root.firstSuspendedTime;
	  var lastSuspendedTime = root.lastSuspendedTime;

	  if (firstSuspendedTime < expirationTime) {
	    root.firstSuspendedTime = expirationTime;
	  }

	  if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
	    root.lastSuspendedTime = expirationTime;
	  }

	  if (expirationTime <= root.lastPingedTime) {
	    root.lastPingedTime = NoWork;
	  }

	  if (expirationTime <= root.lastExpiredTime) {
	    root.lastExpiredTime = NoWork;
	  }
	}
	function markRootUpdatedAtTime(root, expirationTime) {
	  // Update the range of pending times
	  var firstPendingTime = root.firstPendingTime;

	  if (expirationTime > firstPendingTime) {
	    root.firstPendingTime = expirationTime;
	  } // Update the range of suspended times. Treat everything lower priority or
	  // equal to this update as unsuspended.


	  var firstSuspendedTime = root.firstSuspendedTime;

	  if (firstSuspendedTime !== NoWork) {
	    if (expirationTime >= firstSuspendedTime) {
	      // The entire suspended range is now unsuspended.
	      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
	    } else if (expirationTime >= root.lastSuspendedTime) {
	      root.lastSuspendedTime = expirationTime + 1;
	    } // This is a pending level. Check if it's higher priority than the next
	    // known pending level.


	    if (expirationTime > root.nextKnownPendingLevel) {
	      root.nextKnownPendingLevel = expirationTime;
	    }
	  }
	}
	function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
	  // Update the range of pending times
	  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
	  // equal to this update as unsuspended.

	  if (finishedExpirationTime <= root.lastSuspendedTime) {
	    // The entire suspended range is now unsuspended.
	    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
	  } else if (finishedExpirationTime <= root.firstSuspendedTime) {
	    // Part of the suspended range is now unsuspended. Narrow the range to
	    // include everything between the unsuspended time (non-inclusive) and the
	    // last suspended time.
	    root.firstSuspendedTime = finishedExpirationTime - 1;
	  }

	  if (finishedExpirationTime <= root.lastPingedTime) {
	    // Clear the pinged time
	    root.lastPingedTime = NoWork;
	  }

	  if (finishedExpirationTime <= root.lastExpiredTime) {
	    // Clear the expired time
	    root.lastExpiredTime = NoWork;
	  }
	}
	function markRootExpiredAtTime(root, expirationTime) {
	  var lastExpiredTime = root.lastExpiredTime;

	  if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
	    root.lastExpiredTime = expirationTime;
	  }
	}

	var didWarnAboutNestedUpdates;
	var didWarnAboutFindNodeInStrictMode;

	{
	  didWarnAboutNestedUpdates = false;
	  didWarnAboutFindNodeInStrictMode = {};
	}

	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyContextObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);

	  if (fiber.tag === ClassComponent) {
	    var Component = fiber.type;

	    if (isContextProvider(Component)) {
	      return processChildContext(fiber, Component, parentContext);
	    }
	  }

	  return parentContext;
	}

	function findHostInstanceWithWarning(component, methodName) {
	  {
	    var fiber = get(component);

	    if (fiber === undefined) {
	      if (typeof component.render === 'function') {
	        {
	          {
	            throw Error( "Unable to find node on an unmounted component." );
	          }
	        }
	      } else {
	        {
	          {
	            throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
	          }
	        }
	      }
	    }

	    var hostFiber = findCurrentHostFiber(fiber);

	    if (hostFiber === null) {
	      return null;
	    }

	    if (hostFiber.mode & StrictMode) {
	      var componentName = getComponentName(fiber.type) || 'Component';

	      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
	        didWarnAboutFindNodeInStrictMode[componentName] = true;

	        if (fiber.mode & StrictMode) {
	          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        } else {
	          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
	        }
	      }
	    }

	    return hostFiber.stateNode;
	  }
	}

	function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
	  return createFiberRoot(containerInfo, tag, hydrate);
	}
	function updateContainer(element, container, parentComponent, callback) {
	  {
	    onScheduleRoot(container, element);
	  }

	  var current$1 = container.current;
	  var currentTime = requestCurrentTimeForUpdate();

	  {
	    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
	    if ('undefined' !== typeof jest) {
	      warnIfUnmockedScheduler(current$1);
	      warnIfNotScopedWithMatchingAct(current$1);
	    }
	  }

	  var suspenseConfig = requestCurrentSuspenseConfig();
	  var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
	  var context = getContextForSubtree(parentComponent);

	  if (container.context === null) {
	    container.context = context;
	  } else {
	    container.pendingContext = context;
	  }

	  {
	    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
	      didWarnAboutNestedUpdates = true;

	      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
	    }
	  }

	  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: element
	  };
	  callback = callback === undefined ? null : callback;

	  if (callback !== null) {
	    {
	      if (typeof callback !== 'function') {
	        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
	      }
	    }

	    update.callback = callback;
	  }

	  enqueueUpdate(current$1, update);
	  scheduleWork(current$1, expirationTime);
	  return expirationTime;
	}
	function getPublicRootInstance(container) {
	  var containerFiber = container.current;

	  if (!containerFiber.child) {
	    return null;
	  }

	  switch (containerFiber.child.tag) {
	    case HostComponent:
	      return getPublicInstance(containerFiber.child.stateNode);

	    default:
	      return containerFiber.child.stateNode;
	  }
	}

	function markRetryTimeImpl(fiber, retryTime) {
	  var suspenseState = fiber.memoizedState;

	  if (suspenseState !== null && suspenseState.dehydrated !== null) {
	    if (suspenseState.retryTime < retryTime) {
	      suspenseState.retryTime = retryTime;
	    }
	  }
	} // Increases the priority of thennables when they resolve within this boundary.


	function markRetryTimeIfNotHydrated(fiber, retryTime) {
	  markRetryTimeImpl(fiber, retryTime);
	  var alternate = fiber.alternate;

	  if (alternate) {
	    markRetryTimeImpl(alternate, retryTime);
	  }
	}

	function attemptUserBlockingHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
	  scheduleWork(fiber, expTime);
	  markRetryTimeIfNotHydrated(fiber, expTime);
	}
	function attemptContinuousHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  scheduleWork(fiber, ContinuousHydration);
	  markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
	}
	function attemptHydrationAtCurrentPriority$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority other than synchronously flush it.
	    return;
	  }

	  var currentTime = requestCurrentTimeForUpdate();
	  var expTime = computeExpirationForFiber(currentTime, fiber, null);
	  scheduleWork(fiber, expTime);
	  markRetryTimeIfNotHydrated(fiber, expTime);
	}
	function findHostInstanceWithNoPortals(fiber) {
	  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  if (hostFiber.tag === FundamentalComponent) {
	    return hostFiber.stateNode.instance;
	  }

	  return hostFiber.stateNode;
	}

	var shouldSuspendImpl = function (fiber) {
	  return false;
	};

	function shouldSuspend(fiber) {
	  return shouldSuspendImpl(fiber);
	}
	var overrideHookState = null;
	var overrideProps = null;
	var scheduleUpdate = null;
	var setSuspenseHandler = null;

	{
	  var copyWithSetImpl = function (obj, path, idx, value) {
	    if (idx >= path.length) {
	      return value;
	    }

	    var key = path[idx];
	    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

	    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
	    return updated;
	  };

	  var copyWithSet = function (obj, path, value) {
	    return copyWithSetImpl(obj, path, 0, value);
	  }; // Support DevTools editable values for useState and useReducer.


	  overrideHookState = function (fiber, id, path, value) {
	    // For now, the "id" of stateful hooks is just the stateful hook index.
	    // This may change in the future with e.g. nested hooks.
	    var currentHook = fiber.memoizedState;

	    while (currentHook !== null && id > 0) {
	      currentHook = currentHook.next;
	      id--;
	    }

	    if (currentHook !== null) {
	      var newState = copyWithSet(currentHook.memoizedState, path, value);
	      currentHook.memoizedState = newState;
	      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
	      scheduleWork(fiber, Sync);
	    }
	  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


	  overrideProps = function (fiber, path, value) {
	    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    scheduleWork(fiber, Sync);
	  };

	  scheduleUpdate = function (fiber) {
	    scheduleWork(fiber, Sync);
	  };

	  setSuspenseHandler = function (newShouldSuspendImpl) {
	    shouldSuspendImpl = newShouldSuspendImpl;
	  };
	}

	function injectIntoDevTools(devToolsConfig) {
	  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
	  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	  return injectInternals(_assign({}, devToolsConfig, {
	    overrideHookState: overrideHookState,
	    overrideProps: overrideProps,
	    setSuspenseHandler: setSuspenseHandler,
	    scheduleUpdate: scheduleUpdate,
	    currentDispatcherRef: ReactCurrentDispatcher,
	    findHostInstanceByFiber: function (fiber) {
	      var hostFiber = findCurrentHostFiber(fiber);

	      if (hostFiber === null) {
	        return null;
	      }

	      return hostFiber.stateNode;
	    },
	    findFiberByHostInstance: function (instance) {
	      if (!findFiberByHostInstance) {
	        // Might not be implemented by the renderer.
	        return null;
	      }

	      return findFiberByHostInstance(instance);
	    },
	    // React Refresh
	    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
	    scheduleRefresh:  scheduleRefresh ,
	    scheduleRoot:  scheduleRoot ,
	    setRefreshHandler:  setRefreshHandler ,
	    // Enables DevTools to append owner stacks to error messages in DEV mode.
	    getCurrentFiber:  function () {
	      return current;
	    } 
	  }));
	}
	var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;

	function ReactDOMRoot(container, options) {
	  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
	}

	function ReactDOMBlockingRoot(container, tag, options) {
	  this._internalRoot = createRootImpl(container, tag, options);
	}

	ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
	  var root = this._internalRoot;

	  {
	    if (typeof arguments[1] === 'function') {
	      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    }

	    var container = root.containerInfo;

	    if (container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(root.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
	        }
	      }
	    }
	  }

	  updateContainer(children, root, null, null);
	};

	ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
	  {
	    if (typeof arguments[0] === 'function') {
	      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    }
	  }

	  var root = this._internalRoot;
	  var container = root.containerInfo;
	  updateContainer(null, root, null, function () {
	    unmarkContainerAsRoot(container);
	  });
	};

	function createRootImpl(container, tag, options) {
	  // Tag is either LegacyRoot or Concurrent Root
	  var hydrate = options != null && options.hydrate === true;
	  var hydrationCallbacks = options != null && options.hydrationOptions || null;
	  var root = createContainer(container, tag, hydrate);
	  markContainerAsRoot(root.current, container);

	  if (hydrate && tag !== LegacyRoot) {
	    var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
	    eagerlyTrapReplayableEvents(container, doc);
	  }

	  return root;
	}
	function createLegacyRoot(container, options) {
	  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
	}
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
	}

	var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
	var topLevelUpdateWarnings;
	var warnedAboutHydrateAPI = false;

	{
	  topLevelUpdateWarnings = function (container) {
	    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
	        }
	      }
	    }

	    var isRootRenderedBySomeReact = !!container._reactRootContainer;
	    var rootEl = getReactRootElementInContainer(container);
	    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

	    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
	      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
	    }

	    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
	      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
	    }
	  };
	}

	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOCUMENT_NODE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function shouldHydrateDueToLegacyHeuristic(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
	}

	function legacyCreateRootFromDOMContainer(container, forceHydrate) {
	  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

	  if (!shouldHydrate) {
	    var warned = false;
	    var rootSibling;

	    while (rootSibling = container.lastChild) {
	      {
	        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
	          warned = true;

	          error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
	        }
	      }

	      container.removeChild(rootSibling);
	    }
	  }

	  {
	    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
	      warnedAboutHydrateAPI = true;

	      warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
	    }
	  }

	  return createLegacyRoot(container, shouldHydrate ? {
	    hydrate: true
	  } : undefined);
	}

	function warnOnInvalidCallback$1(callback, callerName) {
	  {
	    if (callback !== null && typeof callback !== 'function') {
	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  }
	}

	function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
	  {
	    topLevelUpdateWarnings(container);
	    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
	  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
	  // member of intersection type." Whyyyyyy.


	  var root = container._reactRootContainer;
	  var fiberRoot;

	  if (!root) {
	    // Initial mount
	    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
	    fiberRoot = root._internalRoot;

	    if (typeof callback === 'function') {
	      var originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(fiberRoot);
	        originalCallback.call(instance);
	      };
	    } // Initial mount should not be batched.


	    unbatchedUpdates(function () {
	      updateContainer(children, fiberRoot, parentComponent, callback);
	    });
	  } else {
	    fiberRoot = root._internalRoot;

	    if (typeof callback === 'function') {
	      var _originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(fiberRoot);

	        _originalCallback.call(instance);
	      };
	    } // Update


	    updateContainer(children, fiberRoot, parentComponent, callback);
	  }

	  return getPublicRootInstance(fiberRoot);
	}

	function findDOMNode(componentOrElement) {
	  {
	    var owner = ReactCurrentOwner$3.current;

	    if (owner !== null && owner.stateNode !== null) {
	      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

	      if (!warnedAboutRefsInRender) {
	        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
	      }

	      owner.stateNode._warnedAboutRefsInRender = true;
	    }
	  }

	  if (componentOrElement == null) {
	    return null;
	  }

	  if (componentOrElement.nodeType === ELEMENT_NODE) {
	    return componentOrElement;
	  }

	  {
	    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
	  }
	}
	function hydrate(element, container, callback) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
	    }
	  } // TODO: throw or warn if we couldn't hydrate?


	  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
	}
	function render(element, container, callback) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
	}
	function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
	  if (!isValidContainer(containerNode)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  }

	  if (!(parentComponent != null && has(parentComponent))) {
	    {
	      throw Error( "parentComponent must be a valid React Component" );
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
	}
	function unmountComponentAtNode(container) {
	  if (!isValidContainer(container)) {
	    {
	      throw Error( "unmountComponentAtNode(...): Target container is not a DOM element." );
	    }
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
	    }
	  }

	  if (container._reactRootContainer) {
	    {
	      var rootEl = getReactRootElementInContainer(container);
	      var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);

	      if (renderedByDifferentReact) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
	      }
	    } // Unmount should not be batched.


	    unbatchedUpdates(function () {
	      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
	        // $FlowFixMe This should probably use `delete container._reactRootContainer`
	        container._reactRootContainer = null;
	        unmarkContainerAsRoot(container);
	      });
	    }); // If you call unmountComponentAtNode twice in quick succession, you'll
	    // get `true` twice. That's probably fine?

	    return true;
	  } else {
	    {
	      var _rootEl = getReactRootElementInContainer(container);

	      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

	      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

	      if (hasNonRootReactChild) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
	      }
	    }

	    return false;
	  }
	}

	function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	var ReactVersion = '16.13.1';

	setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
	setAttemptContinuousHydration(attemptContinuousHydration$1);
	setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
	var didWarnAboutUnstableCreatePortal = false;

	{
	  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
	  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
	  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
	    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
	  }
	}

	setRestoreImplementation(restoreControlledState$3);
	setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

	function createPortal$1(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  if (!isValidContainer(container)) {
	    {
	      throw Error( "Target container is not a DOM element." );
	    }
	  } // TODO: pass ReactDOM portal implementation as third argument
	  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


	  return createPortal(children, container, null, key);
	}

	function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

	  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
	}

	function unstable_createPortal(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  {
	    if (!didWarnAboutUnstableCreatePortal) {
	      didWarnAboutUnstableCreatePortal = true;

	      warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
	    }
	  }

	  return createPortal$1(children, container, key);
	}

	var Internals = {
	  // Keep in sync with ReactDOMUnstableNativeDependencies.js
	  // ReactTestUtils.js, and ReactTestUtilsAct.js. This is an array for better minification.
	  Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
	};
	var foundDevTools = injectIntoDevTools({
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  bundleType:  1 ,
	  version: ReactVersion,
	  rendererPackageName: 'react-dom'
	});

	{
	  if (!foundDevTools && canUseDOM && window.top === window.self) {
	    // If we're in Chrome or Firefox, provide a download link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

	      if (/^(https?|file):$/.test(protocol)) {
	        // eslint-disable-next-line react-internal/no-production-logging
	        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
	      }
	    }
	  }
	}

	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
	exports.createPortal = createPortal$1;
	exports.findDOMNode = findDOMNode;
	exports.flushSync = flushSync;
	exports.hydrate = hydrate;
	exports.render = render;
	exports.unmountComponentAtNode = unmountComponentAtNode;
	exports.unstable_batchedUpdates = batchedUpdates$1;
	exports.unstable_createPortal = unstable_createPortal;
	exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
	exports.version = ReactVersion;
	  })();
	}
	});

	var reactDom = createCommonjsModule(function (module) {

	{
	  module.exports = reactDom_development;
	}
	});

	var global$2 = (typeof global !== "undefined" ? global :
	            typeof self !== "undefined" ? self :
	            typeof window !== "undefined" ? window : {});

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global$2.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global$2.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue$1 = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue$1 = currentQueue.concat(queue$1);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue$1.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue$1.length;
	    while(len) {
	        currentQueue = queue$1;
	        queue$1 = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue$1.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue$1.push(new Item(fun, args));
	    if (queue$1.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform = 'browser';
	var browser = true;
	var env = {};
	var argv = [];
	var version = ''; // empty string to avoid regexp issues
	var versions$1 = {};
	var release = {};
	var config = {};

	function noop() {}

	var on = noop;
	var addListener = noop;
	var once = noop;
	var off = noop;
	var removeListener = noop;
	var removeAllListeners = noop;
	var emit = noop;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance$1 = global$2.performance || {};
	var performanceNow =
	  performance$1.now        ||
	  performance$1.mozNow     ||
	  performance$1.msNow      ||
	  performance$1.oNow       ||
	  performance$1.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance$1)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var process$3 = {
	  nextTick: nextTick,
	  title: title,
	  browser: browser,
	  env: env,
	  argv: argv,
	  version: version,
	  versions: versions$1,
	  on: on,
	  addListener: addListener,
	  once: once,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform,
	  release: release,
	  config: config,
	  uptime: uptime
	};

	var performanceNow$1 = createCommonjsModule(function (module) {
	// Generated by CoffeeScript 1.12.2
	(function() {
	  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process$3 !== "undefined" && process$3 !== null) && process$3.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - nodeLoadTime) / 1e6;
	    };
	    hrtime = process$3.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    moduleLoadTime = getNanoSeconds();
	    upTime = process$3.uptime() * 1e9;
	    nodeLoadTime = moduleLoadTime - upTime;
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(commonjsGlobal);


	});

	var root = typeof window === 'undefined' ? commonjsGlobal : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = root['request' + suffix]
	  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix];

	for(var i$3 = 0; !raf && i$3 < vendors.length; i$3++) {
	  raf = root[vendors[i$3] + 'Request' + suffix];
	  caf = root[vendors[i$3] + 'Cancel' + suffix]
	      || root[vendors[i$3] + 'CancelRequest' + suffix];
	}

	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id$2 = 0
	    , queue$2 = []
	    , frameDuration = 1000 / 60;

	  raf = function(callback) {
	    if(queue$2.length === 0) {
	      var _now = performanceNow$1()
	        , next = Math.max(0, frameDuration - (_now - last));
	      last = next + _now;
	      setTimeout(function() {
	        var cp = queue$2.slice(0);
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue$2.length = 0;
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last);
	            } catch(e) {
	              setTimeout(function() { throw e }, 0);
	            }
	          }
	        }
	      }, Math.round(next));
	    }
	    queue$2.push({
	      handle: ++id$2,
	      callback: callback,
	      cancelled: false
	    });
	    return id$2
	  };

	  caf = function(handle) {
	    for(var i = 0; i < queue$2.length; i++) {
	      if(queue$2[i].handle === handle) {
	        queue$2[i].cancelled = true;
	      }
	    }
	  };
	}

	var raf_1 = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(root, fn)
	};
	var cancel = function() {
	  caf.apply(root, arguments);
	};
	var polyfill = function(object) {
	  if (!object) {
	    object = root;
	  }
	  object.requestAnimationFrame = raf;
	  object.cancelAnimationFrame = caf;
	};
	raf_1.cancel = cancel;
	raf_1.polyfill = polyfill;

	var div = null;
	var prefixes = [ 'Webkit', 'Moz', 'O', 'ms' ];

	var prefixStyle = function prefixStyle (prop) {
	  // re-use a dummy div
	  if (!div) {
	    div = document.createElement('div');
	  }

	  var style = div.style;

	  // prop exists without prefix
	  if (prop in style) {
	    return prop
	  }

	  // borderRadius -> BorderRadius
	  var titleCase = prop.charAt(0).toUpperCase() + prop.slice(1);

	  // find the vendor-prefixed prop
	  for (var i = prefixes.length; i >= 0; i--) {
	    var name = prefixes[i] + titleCase;
	    // e.g. WebkitBorderRadius or webkitBorderRadius
	    if (name in style) {
	      return name
	    }
	  }

	  return false
	};

	/**
	 * Export.
	 */

	var toNoCase_1 = toNoCase;

	/**
	 * Test whether a string is camel-case.
	 */

	var hasSpace = /\s/;
	var hasSeparator = /(_|-|\.|:)/;
	var hasCamel = /([a-z][A-Z]|[A-Z][a-z])/;

	/**
	 * Remove any starting case from a `string`, like camel or snake, but keep
	 * spaces and punctuation that may be important otherwise.
	 *
	 * @param {String} string
	 * @return {String}
	 */

	function toNoCase(string) {
	  if (hasSpace.test(string)) return string.toLowerCase()
	  if (hasSeparator.test(string)) return (unseparate(string) || string).toLowerCase()
	  if (hasCamel.test(string)) return uncamelize(string).toLowerCase()
	  return string.toLowerCase()
	}

	/**
	 * Separator splitter.
	 */

	var separatorSplitter = /[\W_]+(.|$)/g;

	/**
	 * Un-separate a `string`.
	 *
	 * @param {String} string
	 * @return {String}
	 */

	function unseparate(string) {
	  return string.replace(separatorSplitter, function (m, next) {
	    return next ? ' ' + next : ''
	  })
	}

	/**
	 * Camelcase splitter.
	 */

	var camelSplitter = /(.)([A-Z]+)/g;

	/**
	 * Un-camelcase a `string`.
	 *
	 * @param {String} string
	 * @return {String}
	 */

	function uncamelize(string) {
	  return string.replace(camelSplitter, function (m, previous, uppers) {
	    return previous + ' ' + uppers.toLowerCase().split('').join(' ')
	  })
	}

	/**
	 * Export.
	 */

	var toSpaceCase_1 = toSpaceCase;

	/**
	 * Convert a `string` to space case.
	 *
	 * @param {String} string
	 * @return {String}
	 */

	function toSpaceCase(string) {
	  return toNoCase_1(string).replace(/[\W_]+(.|$)/g, function (matches, match) {
	    return match ? ' ' + match : ''
	  }).trim()
	}

	/**
	 * Export.
	 */

	var toCamelCase_1 = toCamelCase;

	/**
	 * Convert a `string` to camel case.
	 *
	 * @param {String} string
	 * @return {String}
	 */

	function toCamelCase(string) {
	  return toSpaceCase_1(string).replace(/\s(\w)/g, function (matches, letter) {
	    return letter.toUpperCase()
	  })
	}

	/* The following list is defined in React's core */
	var IS_UNITLESS = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	var addPxToStyle = function(name, value) {
	  if(typeof value === 'number' && !IS_UNITLESS[ name ]) {
	    return value + 'px';
	  } else {
	    return value;
	  }
	};

	var cache = { 'float': 'cssFloat' };


	function style (element, property, value) {
	  var camel = cache[property];
	  if (typeof camel === 'undefined') {
	    camel = detect(property);
	  }

	  // may be false if CSS prop is unsupported
	  if (camel) {
	    if (value === undefined) {
	      return element.style[camel]
	    }

	    element.style[camel] = addPxToStyle(camel, value);
	  }
	}

	function each (element, properties) {
	  for (var k in properties) {
	    if (properties.hasOwnProperty(k)) {
	      style(element, k, properties[k]);
	    }
	  }
	}

	function detect (cssProp) {
	  var camel = toCamelCase_1(cssProp);
	  var result = prefixStyle(camel);
	  cache[camel] = cache[cssProp] = cache[result] = result;
	  return result
	}

	function set$1 () {
	  if (arguments.length === 2) {
	    if (typeof arguments[1] === 'string') {
	      arguments[0].style.cssText = arguments[1];
	    } else {
	      each(arguments[0], arguments[1]);
	    }
	  } else {
	    style(arguments[0], arguments[1], arguments[2]);
	  }
	}

	var domCss = set$1;
	var set_1 = set$1;

	var get$1 = function (element, properties) {
	  if (Array.isArray(properties)) {
	    return properties.reduce(function (obj, prop) {
	      obj[prop] = style(element, prop || '');
	      return obj
	    }, {})
	  } else {
	    return style(element, properties || '')
	  }
	};
	domCss.set = set_1;
	domCss.get = get$1;

	var reactIs_development = createCommonjsModule(function (module, exports) {



	{
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	exports.AsyncMode = AsyncMode;
	exports.ConcurrentMode = ConcurrentMode;
	exports.ContextConsumer = ContextConsumer;
	exports.ContextProvider = ContextProvider;
	exports.Element = Element;
	exports.ForwardRef = ForwardRef;
	exports.Fragment = Fragment;
	exports.Lazy = Lazy;
	exports.Memo = Memo;
	exports.Portal = Portal;
	exports.Profiler = Profiler;
	exports.StrictMode = StrictMode;
	exports.Suspense = Suspense;
	exports.isAsyncMode = isAsyncMode;
	exports.isConcurrentMode = isConcurrentMode;
	exports.isContextConsumer = isContextConsumer;
	exports.isContextProvider = isContextProvider;
	exports.isElement = isElement;
	exports.isForwardRef = isForwardRef;
	exports.isFragment = isFragment;
	exports.isLazy = isLazy;
	exports.isMemo = isMemo;
	exports.isPortal = isPortal;
	exports.isProfiler = isProfiler;
	exports.isStrictMode = isStrictMode;
	exports.isSuspense = isSuspense;
	exports.isValidElementType = isValidElementType;
	exports.typeOf = typeOf;
	  })();
	}
	});

	var reactIs = createCommonjsModule(function (module) {

	{
	  module.exports = reactIs_development;
	}
	});

	var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
	var printWarning$1 = function() {};

	{
	  printWarning$1 = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret_1) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if ( typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning$1(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!reactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      {
	        if (arguments.length > 1) {
	          printWarning$1(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has$1(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	       printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') ;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning$1(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = objectAssign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes_1;
	  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	var propTypes = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  var ReactIs = reactIs;

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
	}
	});

	var isString_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = isString;
	function isString(maybe) {
	    return typeof maybe === 'string';
	}
	});

	var getScrollbarWidth_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = getScrollbarWidth;



	var _domCss2 = _interopRequireDefault(domCss);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var scrollbarWidth = false;

	function getScrollbarWidth() {
	    if (scrollbarWidth !== false) return scrollbarWidth;
	    /* istanbul ignore else */
	    if (typeof document !== 'undefined') {
	        var div = document.createElement('div');
	        (0, _domCss2["default"])(div, {
	            width: 100,
	            height: 100,
	            position: 'absolute',
	            top: -9999,
	            overflow: 'scroll',
	            MsOverflowStyle: 'scrollbar'
	        });
	        document.body.appendChild(div);
	        scrollbarWidth = div.offsetWidth - div.clientWidth;
	        document.body.removeChild(div);
	    } else {
	        scrollbarWidth = 0;
	    }
	    return scrollbarWidth || 0;
	}
	});

	var returnFalse_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = returnFalse;
	function returnFalse() {
	    return false;
	}
	});

	var getInnerWidth_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = getInnerWidth;
	function getInnerWidth(el) {
	    var clientWidth = el.clientWidth;

	    var _getComputedStyle = getComputedStyle(el),
	        paddingLeft = _getComputedStyle.paddingLeft,
	        paddingRight = _getComputedStyle.paddingRight;

	    return clientWidth - parseFloat(paddingLeft) - parseFloat(paddingRight);
	}
	});

	var getInnerHeight_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = getInnerHeight;
	function getInnerHeight(el) {
	    var clientHeight = el.clientHeight;

	    var _getComputedStyle = getComputedStyle(el),
	        paddingTop = _getComputedStyle.paddingTop,
	        paddingBottom = _getComputedStyle.paddingBottom;

	    return clientHeight - parseFloat(paddingTop) - parseFloat(paddingBottom);
	}
	});

	var styles = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var containerStyleDefault = exports.containerStyleDefault = {
	    position: 'relative',
	    overflow: 'hidden',
	    width: '100%',
	    height: '100%'
	};

	// Overrides containerStyleDefault properties
	var containerStyleAutoHeight = exports.containerStyleAutoHeight = {
	    height: 'auto'
	};

	var viewStyleDefault = exports.viewStyleDefault = {
	    position: 'absolute',
	    top: 0,
	    left: 0,
	    right: 0,
	    bottom: 0,
	    overflow: 'scroll',
	    WebkitOverflowScrolling: 'touch'
	};

	// Overrides viewStyleDefault properties
	var viewStyleAutoHeight = exports.viewStyleAutoHeight = {
	    position: 'relative',
	    top: undefined,
	    left: undefined,
	    right: undefined,
	    bottom: undefined
	};

	var viewStyleUniversalInitial = exports.viewStyleUniversalInitial = {
	    overflow: 'hidden',
	    marginRight: 0,
	    marginBottom: 0
	};

	var trackHorizontalStyleDefault = exports.trackHorizontalStyleDefault = {
	    position: 'absolute',
	    height: 6
	};

	var trackVerticalStyleDefault = exports.trackVerticalStyleDefault = {
	    position: 'absolute',
	    width: 6
	};

	var thumbHorizontalStyleDefault = exports.thumbHorizontalStyleDefault = {
	    position: 'relative',
	    display: 'block',
	    height: '100%'
	};

	var thumbVerticalStyleDefault = exports.thumbVerticalStyleDefault = {
	    position: 'relative',
	    display: 'block',
	    width: '100%'
	};

	var disableSelectStyle = exports.disableSelectStyle = {
	    userSelect: 'none'
	};

	var disableSelectStyleReset = exports.disableSelectStyleReset = {
	    userSelect: ''
	};
	});

	var defaultRenderElements = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.renderViewDefault = renderViewDefault;
	exports.renderTrackHorizontalDefault = renderTrackHorizontalDefault;
	exports.renderTrackVerticalDefault = renderTrackVerticalDefault;
	exports.renderThumbHorizontalDefault = renderThumbHorizontalDefault;
	exports.renderThumbVerticalDefault = renderThumbVerticalDefault;



	var _react2 = _interopRequireDefault(react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/* eslint-disable react/prop-types */

	function renderViewDefault(props) {
	    return _react2["default"].createElement('div', props);
	}

	function renderTrackHorizontalDefault(_ref) {
	    var style = _ref.style,
	        props = _objectWithoutProperties(_ref, ['style']);

	    var finalStyle = _extends({}, style, {
	        right: 2,
	        bottom: 2,
	        left: 2,
	        borderRadius: 3
	    });
	    return _react2["default"].createElement('div', _extends({ style: finalStyle }, props));
	}

	function renderTrackVerticalDefault(_ref2) {
	    var style = _ref2.style,
	        props = _objectWithoutProperties(_ref2, ['style']);

	    var finalStyle = _extends({}, style, {
	        right: 2,
	        bottom: 2,
	        top: 2,
	        borderRadius: 3
	    });
	    return _react2["default"].createElement('div', _extends({ style: finalStyle }, props));
	}

	function renderThumbHorizontalDefault(_ref3) {
	    var style = _ref3.style,
	        props = _objectWithoutProperties(_ref3, ['style']);

	    var finalStyle = _extends({}, style, {
	        cursor: 'pointer',
	        borderRadius: 'inherit',
	        backgroundColor: 'rgba(0,0,0,.2)'
	    });
	    return _react2["default"].createElement('div', _extends({ style: finalStyle }, props));
	}

	function renderThumbVerticalDefault(_ref4) {
	    var style = _ref4.style,
	        props = _objectWithoutProperties(_ref4, ['style']);

	    var finalStyle = _extends({}, style, {
	        cursor: 'pointer',
	        borderRadius: 'inherit',
	        backgroundColor: 'rgba(0,0,0,.2)'
	    });
	    return _react2["default"].createElement('div', _extends({ style: finalStyle }, props));
	}
	});

	var Scrollbars_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _raf3 = _interopRequireDefault(raf_1);



	var _domCss2 = _interopRequireDefault(domCss);





	var _propTypes2 = _interopRequireDefault(propTypes);



	var _isString2 = _interopRequireDefault(isString_1);



	var _getScrollbarWidth2 = _interopRequireDefault(getScrollbarWidth_1);



	var _returnFalse2 = _interopRequireDefault(returnFalse_1);



	var _getInnerWidth2 = _interopRequireDefault(getInnerWidth_1);



	var _getInnerHeight2 = _interopRequireDefault(getInnerHeight_1);





	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Scrollbars = function (_Component) {
	    _inherits(Scrollbars, _Component);

	    function Scrollbars(props) {
	        var _ref;

	        _classCallCheck(this, Scrollbars);

	        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	            rest[_key - 1] = arguments[_key];
	        }

	        var _this = _possibleConstructorReturn(this, (_ref = Scrollbars.__proto__ || Object.getPrototypeOf(Scrollbars)).call.apply(_ref, [this, props].concat(rest)));

	        _this.getScrollLeft = _this.getScrollLeft.bind(_this);
	        _this.getScrollTop = _this.getScrollTop.bind(_this);
	        _this.getScrollWidth = _this.getScrollWidth.bind(_this);
	        _this.getScrollHeight = _this.getScrollHeight.bind(_this);
	        _this.getClientWidth = _this.getClientWidth.bind(_this);
	        _this.getClientHeight = _this.getClientHeight.bind(_this);
	        _this.getValues = _this.getValues.bind(_this);
	        _this.getThumbHorizontalWidth = _this.getThumbHorizontalWidth.bind(_this);
	        _this.getThumbVerticalHeight = _this.getThumbVerticalHeight.bind(_this);
	        _this.getScrollLeftForOffset = _this.getScrollLeftForOffset.bind(_this);
	        _this.getScrollTopForOffset = _this.getScrollTopForOffset.bind(_this);

	        _this.scrollLeft = _this.scrollLeft.bind(_this);
	        _this.scrollTop = _this.scrollTop.bind(_this);
	        _this.scrollToLeft = _this.scrollToLeft.bind(_this);
	        _this.scrollToTop = _this.scrollToTop.bind(_this);
	        _this.scrollToRight = _this.scrollToRight.bind(_this);
	        _this.scrollToBottom = _this.scrollToBottom.bind(_this);

	        _this.handleTrackMouseEnter = _this.handleTrackMouseEnter.bind(_this);
	        _this.handleTrackMouseLeave = _this.handleTrackMouseLeave.bind(_this);
	        _this.handleHorizontalTrackMouseDown = _this.handleHorizontalTrackMouseDown.bind(_this);
	        _this.handleVerticalTrackMouseDown = _this.handleVerticalTrackMouseDown.bind(_this);
	        _this.handleHorizontalThumbMouseDown = _this.handleHorizontalThumbMouseDown.bind(_this);
	        _this.handleVerticalThumbMouseDown = _this.handleVerticalThumbMouseDown.bind(_this);
	        _this.handleWindowResize = _this.handleWindowResize.bind(_this);
	        _this.handleScroll = _this.handleScroll.bind(_this);
	        _this.handleDrag = _this.handleDrag.bind(_this);
	        _this.handleDragEnd = _this.handleDragEnd.bind(_this);

	        _this.state = {
	            didMountUniversal: false
	        };
	        return _this;
	    }

	    _createClass(Scrollbars, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.addListeners();
	            this.update();
	            this.componentDidMountUniversal();
	        }
	    }, {
	        key: 'componentDidMountUniversal',
	        value: function componentDidMountUniversal() {
	            // eslint-disable-line react/sort-comp
	            var universal = this.props.universal;

	            if (!universal) return;
	            this.setState({ didMountUniversal: true });
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            this.update();
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.removeListeners();
	            (0, raf_1.cancel)(this.requestFrame);
	            clearTimeout(this.hideTracksTimeout);
	            clearInterval(this.detectScrollingInterval);
	        }
	    }, {
	        key: 'getScrollLeft',
	        value: function getScrollLeft() {
	            if (!this.view) return 0;
	            return this.view.scrollLeft;
	        }
	    }, {
	        key: 'getScrollTop',
	        value: function getScrollTop() {
	            if (!this.view) return 0;
	            return this.view.scrollTop;
	        }
	    }, {
	        key: 'getScrollWidth',
	        value: function getScrollWidth() {
	            if (!this.view) return 0;
	            return this.view.scrollWidth;
	        }
	    }, {
	        key: 'getScrollHeight',
	        value: function getScrollHeight() {
	            if (!this.view) return 0;
	            return this.view.scrollHeight;
	        }
	    }, {
	        key: 'getClientWidth',
	        value: function getClientWidth() {
	            if (!this.view) return 0;
	            return this.view.clientWidth;
	        }
	    }, {
	        key: 'getClientHeight',
	        value: function getClientHeight() {
	            if (!this.view) return 0;
	            return this.view.clientHeight;
	        }
	    }, {
	        key: 'getValues',
	        value: function getValues() {
	            var _ref2 = this.view || {},
	                _ref2$scrollLeft = _ref2.scrollLeft,
	                scrollLeft = _ref2$scrollLeft === undefined ? 0 : _ref2$scrollLeft,
	                _ref2$scrollTop = _ref2.scrollTop,
	                scrollTop = _ref2$scrollTop === undefined ? 0 : _ref2$scrollTop,
	                _ref2$scrollWidth = _ref2.scrollWidth,
	                scrollWidth = _ref2$scrollWidth === undefined ? 0 : _ref2$scrollWidth,
	                _ref2$scrollHeight = _ref2.scrollHeight,
	                scrollHeight = _ref2$scrollHeight === undefined ? 0 : _ref2$scrollHeight,
	                _ref2$clientWidth = _ref2.clientWidth,
	                clientWidth = _ref2$clientWidth === undefined ? 0 : _ref2$clientWidth,
	                _ref2$clientHeight = _ref2.clientHeight,
	                clientHeight = _ref2$clientHeight === undefined ? 0 : _ref2$clientHeight;

	            return {
	                left: scrollLeft / (scrollWidth - clientWidth) || 0,
	                top: scrollTop / (scrollHeight - clientHeight) || 0,
	                scrollLeft: scrollLeft,
	                scrollTop: scrollTop,
	                scrollWidth: scrollWidth,
	                scrollHeight: scrollHeight,
	                clientWidth: clientWidth,
	                clientHeight: clientHeight
	            };
	        }
	    }, {
	        key: 'getThumbHorizontalWidth',
	        value: function getThumbHorizontalWidth() {
	            var _props = this.props,
	                thumbSize = _props.thumbSize,
	                thumbMinSize = _props.thumbMinSize;
	            var _view = this.view,
	                scrollWidth = _view.scrollWidth,
	                clientWidth = _view.clientWidth;

	            var trackWidth = (0, _getInnerWidth2["default"])(this.trackHorizontal);
	            var width = Math.ceil(clientWidth / scrollWidth * trackWidth);
	            if (trackWidth === width) return 0;
	            if (thumbSize) return thumbSize;
	            return Math.max(width, thumbMinSize);
	        }
	    }, {
	        key: 'getThumbVerticalHeight',
	        value: function getThumbVerticalHeight() {
	            var _props2 = this.props,
	                thumbSize = _props2.thumbSize,
	                thumbMinSize = _props2.thumbMinSize;
	            var _view2 = this.view,
	                scrollHeight = _view2.scrollHeight,
	                clientHeight = _view2.clientHeight;

	            var trackHeight = (0, _getInnerHeight2["default"])(this.trackVertical);
	            var height = Math.ceil(clientHeight / scrollHeight * trackHeight);
	            if (trackHeight === height) return 0;
	            if (thumbSize) return thumbSize;
	            return Math.max(height, thumbMinSize);
	        }
	    }, {
	        key: 'getScrollLeftForOffset',
	        value: function getScrollLeftForOffset(offset) {
	            var _view3 = this.view,
	                scrollWidth = _view3.scrollWidth,
	                clientWidth = _view3.clientWidth;

	            var trackWidth = (0, _getInnerWidth2["default"])(this.trackHorizontal);
	            var thumbWidth = this.getThumbHorizontalWidth();
	            return offset / (trackWidth - thumbWidth) * (scrollWidth - clientWidth);
	        }
	    }, {
	        key: 'getScrollTopForOffset',
	        value: function getScrollTopForOffset(offset) {
	            var _view4 = this.view,
	                scrollHeight = _view4.scrollHeight,
	                clientHeight = _view4.clientHeight;

	            var trackHeight = (0, _getInnerHeight2["default"])(this.trackVertical);
	            var thumbHeight = this.getThumbVerticalHeight();
	            return offset / (trackHeight - thumbHeight) * (scrollHeight - clientHeight);
	        }
	    }, {
	        key: 'scrollLeft',
	        value: function scrollLeft() {
	            var left = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	            if (!this.view) return;
	            this.view.scrollLeft = left;
	        }
	    }, {
	        key: 'scrollTop',
	        value: function scrollTop() {
	            var top = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	            if (!this.view) return;
	            this.view.scrollTop = top;
	        }
	    }, {
	        key: 'scrollToLeft',
	        value: function scrollToLeft() {
	            if (!this.view) return;
	            this.view.scrollLeft = 0;
	        }
	    }, {
	        key: 'scrollToTop',
	        value: function scrollToTop() {
	            if (!this.view) return;
	            this.view.scrollTop = 0;
	        }
	    }, {
	        key: 'scrollToRight',
	        value: function scrollToRight() {
	            if (!this.view) return;
	            this.view.scrollLeft = this.view.scrollWidth;
	        }
	    }, {
	        key: 'scrollToBottom',
	        value: function scrollToBottom() {
	            if (!this.view) return;
	            this.view.scrollTop = this.view.scrollHeight;
	        }
	    }, {
	        key: 'addListeners',
	        value: function addListeners() {
	            /* istanbul ignore if */
	            if (typeof document === 'undefined' || !this.view) return;
	            var view = this.view,
	                trackHorizontal = this.trackHorizontal,
	                trackVertical = this.trackVertical,
	                thumbHorizontal = this.thumbHorizontal,
	                thumbVertical = this.thumbVertical;

	            view.addEventListener('scroll', this.handleScroll);
	            if (!(0, _getScrollbarWidth2["default"])()) return;
	            trackHorizontal.addEventListener('mouseenter', this.handleTrackMouseEnter);
	            trackHorizontal.addEventListener('mouseleave', this.handleTrackMouseLeave);
	            trackHorizontal.addEventListener('mousedown', this.handleHorizontalTrackMouseDown);
	            trackVertical.addEventListener('mouseenter', this.handleTrackMouseEnter);
	            trackVertical.addEventListener('mouseleave', this.handleTrackMouseLeave);
	            trackVertical.addEventListener('mousedown', this.handleVerticalTrackMouseDown);
	            thumbHorizontal.addEventListener('mousedown', this.handleHorizontalThumbMouseDown);
	            thumbVertical.addEventListener('mousedown', this.handleVerticalThumbMouseDown);
	            window.addEventListener('resize', this.handleWindowResize);
	        }
	    }, {
	        key: 'removeListeners',
	        value: function removeListeners() {
	            /* istanbul ignore if */
	            if (typeof document === 'undefined' || !this.view) return;
	            var view = this.view,
	                trackHorizontal = this.trackHorizontal,
	                trackVertical = this.trackVertical,
	                thumbHorizontal = this.thumbHorizontal,
	                thumbVertical = this.thumbVertical;

	            view.removeEventListener('scroll', this.handleScroll);
	            if (!(0, _getScrollbarWidth2["default"])()) return;
	            trackHorizontal.removeEventListener('mouseenter', this.handleTrackMouseEnter);
	            trackHorizontal.removeEventListener('mouseleave', this.handleTrackMouseLeave);
	            trackHorizontal.removeEventListener('mousedown', this.handleHorizontalTrackMouseDown);
	            trackVertical.removeEventListener('mouseenter', this.handleTrackMouseEnter);
	            trackVertical.removeEventListener('mouseleave', this.handleTrackMouseLeave);
	            trackVertical.removeEventListener('mousedown', this.handleVerticalTrackMouseDown);
	            thumbHorizontal.removeEventListener('mousedown', this.handleHorizontalThumbMouseDown);
	            thumbVertical.removeEventListener('mousedown', this.handleVerticalThumbMouseDown);
	            window.removeEventListener('resize', this.handleWindowResize);
	            // Possibly setup by `handleDragStart`
	            this.teardownDragging();
	        }
	    }, {
	        key: 'handleScroll',
	        value: function handleScroll(event) {
	            var _this2 = this;

	            var _props3 = this.props,
	                onScroll = _props3.onScroll,
	                onScrollFrame = _props3.onScrollFrame;

	            if (onScroll) onScroll(event);
	            this.update(function (values) {
	                var scrollLeft = values.scrollLeft,
	                    scrollTop = values.scrollTop;

	                _this2.viewScrollLeft = scrollLeft;
	                _this2.viewScrollTop = scrollTop;
	                if (onScrollFrame) onScrollFrame(values);
	            });
	            this.detectScrolling();
	        }
	    }, {
	        key: 'handleScrollStart',
	        value: function handleScrollStart() {
	            var onScrollStart = this.props.onScrollStart;

	            if (onScrollStart) onScrollStart();
	            this.handleScrollStartAutoHide();
	        }
	    }, {
	        key: 'handleScrollStartAutoHide',
	        value: function handleScrollStartAutoHide() {
	            var autoHide = this.props.autoHide;

	            if (!autoHide) return;
	            this.showTracks();
	        }
	    }, {
	        key: 'handleScrollStop',
	        value: function handleScrollStop() {
	            var onScrollStop = this.props.onScrollStop;

	            if (onScrollStop) onScrollStop();
	            this.handleScrollStopAutoHide();
	        }
	    }, {
	        key: 'handleScrollStopAutoHide',
	        value: function handleScrollStopAutoHide() {
	            var autoHide = this.props.autoHide;

	            if (!autoHide) return;
	            this.hideTracks();
	        }
	    }, {
	        key: 'handleWindowResize',
	        value: function handleWindowResize() {
	            this.update();
	        }
	    }, {
	        key: 'handleHorizontalTrackMouseDown',
	        value: function handleHorizontalTrackMouseDown(event) {
	            event.preventDefault();
	            var target = event.target,
	                clientX = event.clientX;

	            var _target$getBoundingCl = target.getBoundingClientRect(),
	                targetLeft = _target$getBoundingCl.left;

	            var thumbWidth = this.getThumbHorizontalWidth();
	            var offset = Math.abs(targetLeft - clientX) - thumbWidth / 2;
	            this.view.scrollLeft = this.getScrollLeftForOffset(offset);
	        }
	    }, {
	        key: 'handleVerticalTrackMouseDown',
	        value: function handleVerticalTrackMouseDown(event) {
	            event.preventDefault();
	            var target = event.target,
	                clientY = event.clientY;

	            var _target$getBoundingCl2 = target.getBoundingClientRect(),
	                targetTop = _target$getBoundingCl2.top;

	            var thumbHeight = this.getThumbVerticalHeight();
	            var offset = Math.abs(targetTop - clientY) - thumbHeight / 2;
	            this.view.scrollTop = this.getScrollTopForOffset(offset);
	        }
	    }, {
	        key: 'handleHorizontalThumbMouseDown',
	        value: function handleHorizontalThumbMouseDown(event) {
	            event.preventDefault();
	            this.handleDragStart(event);
	            var target = event.target,
	                clientX = event.clientX;
	            var offsetWidth = target.offsetWidth;

	            var _target$getBoundingCl3 = target.getBoundingClientRect(),
	                left = _target$getBoundingCl3.left;

	            this.prevPageX = offsetWidth - (clientX - left);
	        }
	    }, {
	        key: 'handleVerticalThumbMouseDown',
	        value: function handleVerticalThumbMouseDown(event) {
	            event.preventDefault();
	            this.handleDragStart(event);
	            var target = event.target,
	                clientY = event.clientY;
	            var offsetHeight = target.offsetHeight;

	            var _target$getBoundingCl4 = target.getBoundingClientRect(),
	                top = _target$getBoundingCl4.top;

	            this.prevPageY = offsetHeight - (clientY - top);
	        }
	    }, {
	        key: 'setupDragging',
	        value: function setupDragging() {
	            (0, _domCss2["default"])(document.body, styles.disableSelectStyle);
	            document.addEventListener('mousemove', this.handleDrag);
	            document.addEventListener('mouseup', this.handleDragEnd);
	            document.onselectstart = _returnFalse2["default"];
	        }
	    }, {
	        key: 'teardownDragging',
	        value: function teardownDragging() {
	            (0, _domCss2["default"])(document.body, styles.disableSelectStyleReset);
	            document.removeEventListener('mousemove', this.handleDrag);
	            document.removeEventListener('mouseup', this.handleDragEnd);
	            document.onselectstart = undefined;
	        }
	    }, {
	        key: 'handleDragStart',
	        value: function handleDragStart(event) {
	            this.dragging = true;
	            event.stopImmediatePropagation();
	            this.setupDragging();
	        }
	    }, {
	        key: 'handleDrag',
	        value: function handleDrag(event) {
	            if (this.prevPageX) {
	                var clientX = event.clientX;

	                var _trackHorizontal$getB = this.trackHorizontal.getBoundingClientRect(),
	                    trackLeft = _trackHorizontal$getB.left;

	                var thumbWidth = this.getThumbHorizontalWidth();
	                var clickPosition = thumbWidth - this.prevPageX;
	                var offset = -trackLeft + clientX - clickPosition;
	                this.view.scrollLeft = this.getScrollLeftForOffset(offset);
	            }
	            if (this.prevPageY) {
	                var clientY = event.clientY;

	                var _trackVertical$getBou = this.trackVertical.getBoundingClientRect(),
	                    trackTop = _trackVertical$getBou.top;

	                var thumbHeight = this.getThumbVerticalHeight();
	                var _clickPosition = thumbHeight - this.prevPageY;
	                var _offset = -trackTop + clientY - _clickPosition;
	                this.view.scrollTop = this.getScrollTopForOffset(_offset);
	            }
	            return false;
	        }
	    }, {
	        key: 'handleDragEnd',
	        value: function handleDragEnd() {
	            this.dragging = false;
	            this.prevPageX = this.prevPageY = 0;
	            this.teardownDragging();
	            this.handleDragEndAutoHide();
	        }
	    }, {
	        key: 'handleDragEndAutoHide',
	        value: function handleDragEndAutoHide() {
	            var autoHide = this.props.autoHide;

	            if (!autoHide) return;
	            this.hideTracks();
	        }
	    }, {
	        key: 'handleTrackMouseEnter',
	        value: function handleTrackMouseEnter() {
	            this.trackMouseOver = true;
	            this.handleTrackMouseEnterAutoHide();
	        }
	    }, {
	        key: 'handleTrackMouseEnterAutoHide',
	        value: function handleTrackMouseEnterAutoHide() {
	            var autoHide = this.props.autoHide;

	            if (!autoHide) return;
	            this.showTracks();
	        }
	    }, {
	        key: 'handleTrackMouseLeave',
	        value: function handleTrackMouseLeave() {
	            this.trackMouseOver = false;
	            this.handleTrackMouseLeaveAutoHide();
	        }
	    }, {
	        key: 'handleTrackMouseLeaveAutoHide',
	        value: function handleTrackMouseLeaveAutoHide() {
	            var autoHide = this.props.autoHide;

	            if (!autoHide) return;
	            this.hideTracks();
	        }
	    }, {
	        key: 'showTracks',
	        value: function showTracks() {
	            clearTimeout(this.hideTracksTimeout);
	            (0, _domCss2["default"])(this.trackHorizontal, { opacity: 1 });
	            (0, _domCss2["default"])(this.trackVertical, { opacity: 1 });
	        }
	    }, {
	        key: 'hideTracks',
	        value: function hideTracks() {
	            var _this3 = this;

	            if (this.dragging) return;
	            if (this.scrolling) return;
	            if (this.trackMouseOver) return;
	            var autoHideTimeout = this.props.autoHideTimeout;

	            clearTimeout(this.hideTracksTimeout);
	            this.hideTracksTimeout = setTimeout(function () {
	                (0, _domCss2["default"])(_this3.trackHorizontal, { opacity: 0 });
	                (0, _domCss2["default"])(_this3.trackVertical, { opacity: 0 });
	            }, autoHideTimeout);
	        }
	    }, {
	        key: 'detectScrolling',
	        value: function detectScrolling() {
	            var _this4 = this;

	            if (this.scrolling) return;
	            this.scrolling = true;
	            this.handleScrollStart();
	            this.detectScrollingInterval = setInterval(function () {
	                if (_this4.lastViewScrollLeft === _this4.viewScrollLeft && _this4.lastViewScrollTop === _this4.viewScrollTop) {
	                    clearInterval(_this4.detectScrollingInterval);
	                    _this4.scrolling = false;
	                    _this4.handleScrollStop();
	                }
	                _this4.lastViewScrollLeft = _this4.viewScrollLeft;
	                _this4.lastViewScrollTop = _this4.viewScrollTop;
	            }, 100);
	        }
	    }, {
	        key: 'raf',
	        value: function raf(callback) {
	            var _this5 = this;

	            if (this.requestFrame) _raf3["default"].cancel(this.requestFrame);
	            this.requestFrame = (0, _raf3["default"])(function () {
	                _this5.requestFrame = undefined;
	                callback();
	            });
	        }
	    }, {
	        key: 'update',
	        value: function update(callback) {
	            var _this6 = this;

	            this.raf(function () {
	                return _this6._update(callback);
	            });
	        }
	    }, {
	        key: '_update',
	        value: function _update(callback) {
	            var _props4 = this.props,
	                onUpdate = _props4.onUpdate,
	                hideTracksWhenNotNeeded = _props4.hideTracksWhenNotNeeded;

	            var values = this.getValues();
	            if ((0, _getScrollbarWidth2["default"])()) {
	                var scrollLeft = values.scrollLeft,
	                    clientWidth = values.clientWidth,
	                    scrollWidth = values.scrollWidth;

	                var trackHorizontalWidth = (0, _getInnerWidth2["default"])(this.trackHorizontal);
	                var thumbHorizontalWidth = this.getThumbHorizontalWidth();
	                var thumbHorizontalX = scrollLeft / (scrollWidth - clientWidth) * (trackHorizontalWidth - thumbHorizontalWidth);
	                var thumbHorizontalStyle = {
	                    width: thumbHorizontalWidth,
	                    transform: 'translateX(' + thumbHorizontalX + 'px)'
	                };
	                var scrollTop = values.scrollTop,
	                    clientHeight = values.clientHeight,
	                    scrollHeight = values.scrollHeight;

	                var trackVerticalHeight = (0, _getInnerHeight2["default"])(this.trackVertical);
	                var thumbVerticalHeight = this.getThumbVerticalHeight();
	                var thumbVerticalY = scrollTop / (scrollHeight - clientHeight) * (trackVerticalHeight - thumbVerticalHeight);
	                var thumbVerticalStyle = {
	                    height: thumbVerticalHeight,
	                    transform: 'translateY(' + thumbVerticalY + 'px)'
	                };
	                if (hideTracksWhenNotNeeded) {
	                    var trackHorizontalStyle = {
	                        visibility: scrollWidth > clientWidth ? 'visible' : 'hidden'
	                    };
	                    var trackVerticalStyle = {
	                        visibility: scrollHeight > clientHeight ? 'visible' : 'hidden'
	                    };
	                    (0, _domCss2["default"])(this.trackHorizontal, trackHorizontalStyle);
	                    (0, _domCss2["default"])(this.trackVertical, trackVerticalStyle);
	                }
	                (0, _domCss2["default"])(this.thumbHorizontal, thumbHorizontalStyle);
	                (0, _domCss2["default"])(this.thumbVertical, thumbVerticalStyle);
	            }
	            if (onUpdate) onUpdate(values);
	            if (typeof callback !== 'function') return;
	            callback(values);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this7 = this;

	            var scrollbarWidth = (0, _getScrollbarWidth2["default"])();
	            /* eslint-disable no-unused-vars */

	            var _props5 = this.props,
	                onScroll = _props5.onScroll,
	                onScrollFrame = _props5.onScrollFrame,
	                onScrollStart = _props5.onScrollStart,
	                onScrollStop = _props5.onScrollStop,
	                onUpdate = _props5.onUpdate,
	                renderView = _props5.renderView,
	                renderTrackHorizontal = _props5.renderTrackHorizontal,
	                renderTrackVertical = _props5.renderTrackVertical,
	                renderThumbHorizontal = _props5.renderThumbHorizontal,
	                renderThumbVertical = _props5.renderThumbVertical,
	                tagName = _props5.tagName,
	                hideTracksWhenNotNeeded = _props5.hideTracksWhenNotNeeded,
	                autoHide = _props5.autoHide,
	                autoHideTimeout = _props5.autoHideTimeout,
	                autoHideDuration = _props5.autoHideDuration,
	                thumbSize = _props5.thumbSize,
	                thumbMinSize = _props5.thumbMinSize,
	                universal = _props5.universal,
	                autoHeight = _props5.autoHeight,
	                autoHeightMin = _props5.autoHeightMin,
	                autoHeightMax = _props5.autoHeightMax,
	                style = _props5.style,
	                children = _props5.children,
	                props = _objectWithoutProperties(_props5, ['onScroll', 'onScrollFrame', 'onScrollStart', 'onScrollStop', 'onUpdate', 'renderView', 'renderTrackHorizontal', 'renderTrackVertical', 'renderThumbHorizontal', 'renderThumbVertical', 'tagName', 'hideTracksWhenNotNeeded', 'autoHide', 'autoHideTimeout', 'autoHideDuration', 'thumbSize', 'thumbMinSize', 'universal', 'autoHeight', 'autoHeightMin', 'autoHeightMax', 'style', 'children']);
	            /* eslint-enable no-unused-vars */

	            var didMountUniversal = this.state.didMountUniversal;


	            var containerStyle = _extends({}, styles.containerStyleDefault, autoHeight && _extends({}, styles.containerStyleAutoHeight, {
	                minHeight: autoHeightMin,
	                maxHeight: autoHeightMax
	            }), style);

	            var viewStyle = _extends({}, styles.viewStyleDefault, {
	                // Hide scrollbars by setting a negative margin
	                marginRight: scrollbarWidth ? -scrollbarWidth : 0,
	                marginBottom: scrollbarWidth ? -scrollbarWidth : 0
	            }, autoHeight && _extends({}, styles.viewStyleAutoHeight, {
	                // Add scrollbarWidth to autoHeight in order to compensate negative margins
	                minHeight: (0, _isString2["default"])(autoHeightMin) ? 'calc(' + autoHeightMin + ' + ' + scrollbarWidth + 'px)' : autoHeightMin + scrollbarWidth,
	                maxHeight: (0, _isString2["default"])(autoHeightMax) ? 'calc(' + autoHeightMax + ' + ' + scrollbarWidth + 'px)' : autoHeightMax + scrollbarWidth
	            }), autoHeight && universal && !didMountUniversal && {
	                minHeight: autoHeightMin,
	                maxHeight: autoHeightMax
	            }, universal && !didMountUniversal && styles.viewStyleUniversalInitial);

	            var trackAutoHeightStyle = {
	                transition: 'opacity ' + autoHideDuration + 'ms',
	                opacity: 0
	            };

	            var trackHorizontalStyle = _extends({}, styles.trackHorizontalStyleDefault, autoHide && trackAutoHeightStyle, (!scrollbarWidth || universal && !didMountUniversal) && {
	                display: 'none'
	            });

	            var trackVerticalStyle = _extends({}, styles.trackVerticalStyleDefault, autoHide && trackAutoHeightStyle, (!scrollbarWidth || universal && !didMountUniversal) && {
	                display: 'none'
	            });

	            return (0, react.createElement)(tagName, _extends({}, props, { style: containerStyle, ref: function ref(_ref3) {
	                    _this7.container = _ref3;
	                } }), [(0, react.cloneElement)(renderView({ style: viewStyle }), { key: 'view', ref: function ref(_ref4) {
	                    _this7.view = _ref4;
	                } }, children), (0, react.cloneElement)(renderTrackHorizontal({ style: trackHorizontalStyle }), { key: 'trackHorizontal', ref: function ref(_ref5) {
	                    _this7.trackHorizontal = _ref5;
	                } }, (0, react.cloneElement)(renderThumbHorizontal({ style: styles.thumbHorizontalStyleDefault }), { ref: function ref(_ref6) {
	                    _this7.thumbHorizontal = _ref6;
	                } })), (0, react.cloneElement)(renderTrackVertical({ style: trackVerticalStyle }), { key: 'trackVertical', ref: function ref(_ref7) {
	                    _this7.trackVertical = _ref7;
	                } }, (0, react.cloneElement)(renderThumbVertical({ style: styles.thumbVerticalStyleDefault }), { ref: function ref(_ref8) {
	                    _this7.thumbVertical = _ref8;
	                } }))]);
	        }
	    }]);

	    return Scrollbars;
	}(react.Component);

	exports["default"] = Scrollbars;


	Scrollbars.propTypes = {
	    onScroll: _propTypes2["default"].func,
	    onScrollFrame: _propTypes2["default"].func,
	    onScrollStart: _propTypes2["default"].func,
	    onScrollStop: _propTypes2["default"].func,
	    onUpdate: _propTypes2["default"].func,
	    renderView: _propTypes2["default"].func,
	    renderTrackHorizontal: _propTypes2["default"].func,
	    renderTrackVertical: _propTypes2["default"].func,
	    renderThumbHorizontal: _propTypes2["default"].func,
	    renderThumbVertical: _propTypes2["default"].func,
	    tagName: _propTypes2["default"].string,
	    thumbSize: _propTypes2["default"].number,
	    thumbMinSize: _propTypes2["default"].number,
	    hideTracksWhenNotNeeded: _propTypes2["default"].bool,
	    autoHide: _propTypes2["default"].bool,
	    autoHideTimeout: _propTypes2["default"].number,
	    autoHideDuration: _propTypes2["default"].number,
	    autoHeight: _propTypes2["default"].bool,
	    autoHeightMin: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
	    autoHeightMax: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
	    universal: _propTypes2["default"].bool,
	    style: _propTypes2["default"].object,
	    children: _propTypes2["default"].node
	};

	Scrollbars.defaultProps = {
	    renderView: defaultRenderElements.renderViewDefault,
	    renderTrackHorizontal: defaultRenderElements.renderTrackHorizontalDefault,
	    renderTrackVertical: defaultRenderElements.renderTrackVerticalDefault,
	    renderThumbHorizontal: defaultRenderElements.renderThumbHorizontalDefault,
	    renderThumbVertical: defaultRenderElements.renderThumbVerticalDefault,
	    tagName: 'div',
	    thumbMinSize: 30,
	    hideTracksWhenNotNeeded: false,
	    autoHide: false,
	    autoHideTimeout: 1000,
	    autoHideDuration: 200,
	    autoHeight: false,
	    autoHeightMin: 0,
	    autoHeightMax: 200,
	    universal: false
	};
	});

	var lib$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Scrollbars = undefined;



	var _Scrollbars2 = _interopRequireDefault(Scrollbars_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Scrollbars2["default"];
	exports.Scrollbars = _Scrollbars2["default"];
	});

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var warning = function() {};

	{
	  var printWarning$2 = function printWarning(format, args) {
	    var len = arguments.length;
	    args = new Array(len > 1 ? len - 1 : 0);
	    for (var key = 1; key < len; key++) {
	      args[key - 1] = arguments[key];
	    }
	    var argIndex = 0;
	    var message = 'Warning: ' +
	      format.replace(/%s/g, function() {
	        return args[argIndex++];
	      });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	          '`warning(condition, format, ...args)` requires a warning ' +
	          'message argument'
	      );
	    }
	    if (!condition) {
	      printWarning$2.apply(null, [format].concat(args));
	    }
	  };
	}

	var warning_1 = warning;

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function isAbsolute(pathname) {
	  return pathname.charAt(0) === '/';
	}

	// About 1.5x faster than the two-arg version of Array#splice()
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	    list[i] = list[k];
	  }

	  list.pop();
	}

	// This implementation is based heavily on node's url.parse
	function resolvePathname(to, from) {
	  if (from === undefined) from = '';

	  var toParts = (to && to.split('/')) || [];
	  var fromParts = (from && from.split('/')) || [];

	  var isToAbs = to && isAbsolute(to);
	  var isFromAbs = from && isAbsolute(from);
	  var mustEndAbs = isToAbs || isFromAbs;

	  if (to && isAbsolute(to)) {
	    // to is absolute
	    fromParts = toParts;
	  } else if (toParts.length) {
	    // to is relative, drop the filename
	    fromParts.pop();
	    fromParts = fromParts.concat(toParts);
	  }

	  if (!fromParts.length) return '/';

	  var hasTrailingSlash;
	  if (fromParts.length) {
	    var last = fromParts[fromParts.length - 1];
	    hasTrailingSlash = last === '.' || last === '..' || last === '';
	  } else {
	    hasTrailingSlash = false;
	  }

	  var up = 0;
	  for (var i = fromParts.length; i >= 0; i--) {
	    var part = fromParts[i];

	    if (part === '.') {
	      spliceOne(fromParts, i);
	    } else if (part === '..') {
	      spliceOne(fromParts, i);
	      up++;
	    } else if (up) {
	      spliceOne(fromParts, i);
	      up--;
	    }
	  }

	  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');

	  if (
	    mustEndAbs &&
	    fromParts[0] !== '' &&
	    (!fromParts[0] || !isAbsolute(fromParts[0]))
	  )
	    fromParts.unshift('');

	  var result = fromParts.join('/');

	  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

	  return result;
	}

	function valueOf(obj) {
	  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
	}

	function valueEqual(a, b) {
	  // Test for strict equality first.
	  if (a === b) return true;

	  // Otherwise, if either of them == null they are not equal.
	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return (
	      Array.isArray(b) &&
	      a.length === b.length &&
	      a.every(function(item, index) {
	        return valueEqual(item, b[index]);
	      })
	    );
	  }

	  if (typeof a === 'object' || typeof b === 'object') {
	    var aValue = valueOf(a);
	    var bValue = valueOf(b);

	    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

	    return Object.keys(Object.assign({}, a, b)).every(function(key) {
	      return valueEqual(a[key], b[key]);
	    });
	  }

	  return false;
	}

	function warning$1(condition, message) {
	  {
	    if (condition) {
	      return;
	    }

	    var text = "Warning: " + message;

	    if (typeof console !== 'undefined') {
	      console.warn(text);
	    }

	    try {
	      throw Error(text);
	    } catch (x) {}
	  }
	}

	var prefix = 'Invariant failed';
	function invariant(condition, message) {
	    if (condition) {
	        return;
	    }
	    throw new Error(prefix + ": " + (message || ''));
	}

	function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	}
	function stripLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path.substr(1) : path;
	}
	function hasBasename(path, prefix) {
	  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
	}
	function stripBasename(path, prefix) {
	  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
	}
	function stripTrailingSlash(path) {
	  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
	}
	function parsePath(path) {
	  var pathname = path || '/';
	  var search = '';
	  var hash = '';
	  var hashIndex = pathname.indexOf('#');

	  if (hashIndex !== -1) {
	    hash = pathname.substr(hashIndex);
	    pathname = pathname.substr(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');

	  if (searchIndex !== -1) {
	    search = pathname.substr(searchIndex);
	    pathname = pathname.substr(0, searchIndex);
	  }

	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	}
	function createPath(location) {
	  var pathname = location.pathname,
	      search = location.search,
	      hash = location.hash;
	  var path = pathname || '/';
	  if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
	  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
	  return path;
	}

	function createLocation(path, state, key, currentLocation) {
	  var location;

	  if (typeof path === 'string') {
	    // Two-arg form: push(path, state)
	    location = parsePath(path);
	    location.state = state;
	  } else {
	    // One-arg form: push(location)
	    location = _extends({}, path);
	    if (location.pathname === undefined) location.pathname = '';

	    if (location.search) {
	      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
	    } else {
	      location.search = '';
	    }

	    if (location.hash) {
	      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
	    } else {
	      location.hash = '';
	    }

	    if (state !== undefined && location.state === undefined) location.state = state;
	  }

	  try {
	    location.pathname = decodeURI(location.pathname);
	  } catch (e) {
	    if (e instanceof URIError) {
	      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
	    } else {
	      throw e;
	    }
	  }

	  if (key) location.key = key;

	  if (currentLocation) {
	    // Resolve incomplete/relative pathname relative to current location.
	    if (!location.pathname) {
	      location.pathname = currentLocation.pathname;
	    } else if (location.pathname.charAt(0) !== '/') {
	      location.pathname = resolvePathname(location.pathname, currentLocation.pathname);
	    }
	  } else {
	    // When there is no prior location and pathname is empty, set it to /
	    if (!location.pathname) {
	      location.pathname = '/';
	    }
	  }

	  return location;
	}
	function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);
	}

	function createTransitionManager() {
	  var prompt = null;

	  function setPrompt(nextPrompt) {
	     warning$1(prompt == null, 'A history supports only one prompt at a time') ;
	    prompt = nextPrompt;
	    return function () {
	      if (prompt === nextPrompt) prompt = null;
	    };
	  }

	  function confirmTransitionTo(location, action, getUserConfirmation, callback) {
	    // TODO: If another transition starts while we're still confirming
	    // the previous one, we may end up in a weird state. Figure out the
	    // best way to handle this.
	    if (prompt != null) {
	      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

	      if (typeof result === 'string') {
	        if (typeof getUserConfirmation === 'function') {
	          getUserConfirmation(result, callback);
	        } else {
	           warning$1(false, 'A history needs a getUserConfirmation function in order to use a prompt message') ;
	          callback(true);
	        }
	      } else {
	        // Return false from a transition hook to cancel the transition.
	        callback(result !== false);
	      }
	    } else {
	      callback(true);
	    }
	  }

	  var listeners = [];

	  function appendListener(fn) {
	    var isActive = true;

	    function listener() {
	      if (isActive) fn.apply(void 0, arguments);
	    }

	    listeners.push(listener);
	    return function () {
	      isActive = false;
	      listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }

	  function notifyListeners() {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    listeners.forEach(function (listener) {
	      return listener.apply(void 0, args);
	    });
	  }

	  return {
	    setPrompt: setPrompt,
	    confirmTransitionTo: confirmTransitionTo,
	    appendListener: appendListener,
	    notifyListeners: notifyListeners
	  };
	}

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	function getConfirmation(message, callback) {
	  callback(window.confirm(message)); // eslint-disable-line no-alert
	}
	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */

	function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	}

	var HashChangeEvent$1 = 'hashchange';
	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substr(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: stripLeadingSlash,
	    decodePath: addLeadingSlash
	  },
	  slash: {
	    encodePath: addLeadingSlash,
	    decodePath: addLeadingSlash
	  }
	};

	function stripHash(url) {
	  var hashIndex = url.indexOf('#');
	  return hashIndex === -1 ? url : url.slice(0, hashIndex);
	}

	function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	}

	function pushHashPath(path) {
	  window.location.hash = path;
	}

	function replaceHashPath(path) {
	  window.location.replace(stripHash(window.location.href) + '#' + path);
	}

	function createHashHistory(props) {
	  if (props === void 0) {
	    props = {};
	  }

	  !canUseDOM ?  invariant(false, 'Hash history needs a DOM')  : void 0;
	  var globalHistory = window.history;
	  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
	  var _props = props,
	      _props$getUserConfirm = _props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
	      _props$hashType = _props.hashType,
	      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
	  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
	  var _HashPathCoders$hashT = HashPathCoders[hashType],
	      encodePath = _HashPathCoders$hashT.encodePath,
	      decodePath = _HashPathCoders$hashT.decodePath;

	  function getDOMLocation() {
	    var path = decodePath(getHashPath());
	     warning$1(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') ;
	    if (basename) path = stripBasename(path, basename);
	    return createLocation(path);
	  }

	  var transitionManager = createTransitionManager();

	  function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;
	    transitionManager.notifyListeners(history.location, history.action);
	  }

	  var forceNextPop = false;
	  var ignorePath = null;

	  function locationsAreEqual$$1(a, b) {
	    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
	  }

	  function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = encodePath(path);

	    if (path !== encodedPath) {
	      // Ensure we always have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var location = getDOMLocation();
	      var prevLocation = history.location;
	      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.

	      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

	      ignorePath = null;
	      handlePop(location);
	    }
	  }

	  function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';
	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({
	            action: action,
	            location: location
	          });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  }

	  function revertPop(fromLocation) {
	    var toLocation = history.location; // TODO: We could probably make this more reliable by
	    // keeping a list of paths we've seen in sessionStorage.
	    // Instead, we just default to 0 for paths we don't know.

	    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
	    if (toIndex === -1) toIndex = 0;
	    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
	    if (fromIndex === -1) fromIndex = 0;
	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  } // Ensure the hash is encoded properly before doing anything else.


	  var path = getHashPath();
	  var encodedPath = encodePath(path);
	  if (path !== encodedPath) replaceHashPath(encodedPath);
	  var initialLocation = getDOMLocation();
	  var allPaths = [createPath(initialLocation)]; // Public interface

	  function createHref(location) {
	    var baseTag = document.querySelector('base');
	    var href = '';

	    if (baseTag && baseTag.getAttribute('href')) {
	      href = stripHash(window.location.href);
	    }

	    return href + '#' + encodePath(basename + createPath(location));
	  }

	  function push(path, state) {
	     warning$1(state === undefined, 'Hash history cannot push state; it is ignored') ;
	    var action = 'PUSH';
	    var location = createLocation(path, undefined, undefined, history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      var path = createPath(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a PUSH, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        pushHashPath(encodedPath);
	        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
	        var nextPaths = allPaths.slice(0, prevIndex + 1);
	        nextPaths.push(path);
	        allPaths = nextPaths;
	        setState({
	          action: action,
	          location: location
	        });
	      } else {
	         warning$1(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') ;
	        setState();
	      }
	    });
	  }

	  function replace(path, state) {
	     warning$1(state === undefined, 'Hash history cannot replace state; it is ignored') ;
	    var action = 'REPLACE';
	    var location = createLocation(path, undefined, undefined, history.location);
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	      var path = createPath(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        replaceHashPath(encodedPath);
	      }

	      var prevIndex = allPaths.indexOf(createPath(history.location));
	      if (prevIndex !== -1) allPaths[prevIndex] = path;
	      setState({
	        action: action,
	        location: location
	      });
	    });
	  }

	  function go(n) {
	     warning$1(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') ;
	    globalHistory.go(n);
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  var listenerCount = 0;

	  function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1 && delta === 1) {
	      window.addEventListener(HashChangeEvent$1, handleHashChange);
	    } else if (listenerCount === 0) {
	      window.removeEventListener(HashChangeEvent$1, handleHashChange);
	    }
	  }

	  var isBlocked = false;

	  function block(prompt) {
	    if (prompt === void 0) {
	      prompt = false;
	    }

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  }

	  function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);
	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  }

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };
	  return history;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant$1 = function(condition, format, a, b, c, d, e, f) {
	  {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	var browser$1 = invariant$1;

	var _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for putting history on context.
	 */

	var Router = function (_React$Component) {
	  _inherits(Router, _React$Component);

	  function Router() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Router);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props.history.location.pathname)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Router.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends$1({}, this.context.router, {
	        history: this.props.history,
	        route: {
	          location: this.props.history.location,
	          match: this.state.match
	        }
	      })
	    };
	  };

	  Router.prototype.computeMatch = function computeMatch(pathname) {
	    return {
	      path: "/",
	      url: "/",
	      params: {},
	      isExact: pathname === "/"
	    };
	  };

	  Router.prototype.componentWillMount = function componentWillMount() {
	    var _this2 = this;

	    var _props = this.props,
	        children = _props.children,
	        history = _props.history;


	    browser$1(children == null || react.Children.count(children) === 1, "A <Router> may have only one child element");

	    // Do this here so we can setState when a <Redirect> changes the
	    // location in componentWillMount. This happens e.g. when doing
	    // server rendering using a <StaticRouter>.
	    this.unlisten = history.listen(function () {
	      _this2.setState({
	        match: _this2.computeMatch(history.location.pathname)
	      });
	    });
	  };

	  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    warning_1(this.props.history === nextProps.history, "You cannot change <Router history>");
	  };

	  Router.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unlisten();
	  };

	  Router.prototype.render = function render() {
	    var children = this.props.children;

	    return children ? react.Children.only(children) : null;
	  };

	  return Router;
	}(react.Component);

	Router.propTypes = {
	  history: propTypes.object.isRequired,
	  children: propTypes.node
	};
	Router.contextTypes = {
	  router: propTypes.object
	};
	Router.childContextTypes = {
	  router: propTypes.object.isRequired
	};

	// Written in this round about way for babel-transform-imports

	function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$1(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that uses window.location.hash.
	 */

	var HashRouter = function (_React$Component) {
	  _inherits$1(HashRouter, _React$Component);

	  function HashRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck$1(this, HashRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$1(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = createHashHistory(_this.props), _temp), _possibleConstructorReturn$1(_this, _ret);
	  }

	  HashRouter.prototype.componentWillMount = function componentWillMount() {
	    warning_1(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.");
	  };

	  HashRouter.prototype.render = function render() {
	    return react.createElement(Router, { history: this.history, children: this.props.children });
	  };

	  return HashRouter;
	}(react.Component);

	HashRouter.propTypes = {
	  basename: propTypes.string,
	  getUserConfirmation: propTypes.func,
	  hashType: propTypes.oneOf(["hashbang", "noslash", "slash"]),
	  children: propTypes.node
	};

	var isarray = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};

	/**
	 * Expose `pathToRegexp`.
	 */
	var pathToRegexp_1 = pathToRegexp;
	var parse_1 = parse;
	var compile_1 = compile;
	var tokensToFunction_1 = tokensToFunction;
	var tokensToRegExp_1 = tokensToRegExp;

	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g');

	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */
	function parse (str, options) {
	  var tokens = [];
	  var key = 0;
	  var index = 0;
	  var path = '';
	  var defaultDelimiter = options && options.delimiter || '/';
	  var res;

	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0];
	    var escaped = res[1];
	    var offset = res.index;
	    path += str.slice(index, offset);
	    index = offset + m.length;

	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1];
	      continue
	    }

	    var next = str[index];
	    var prefix = res[2];
	    var name = res[3];
	    var capture = res[4];
	    var group = res[5];
	    var modifier = res[6];
	    var asterisk = res[7];

	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path);
	      path = '';
	    }

	    var partial = prefix != null && next != null && next !== prefix;
	    var repeat = modifier === '+' || modifier === '*';
	    var optional = modifier === '?' || modifier === '*';
	    var delimiter = res[2] || defaultDelimiter;
	    var pattern = capture || group;

	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
	    });
	  }

	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index);
	  }

	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path);
	  }

	  return tokens
	}

	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */
	function compile (str, options) {
	  return tokensToFunction(parse(str, options), options)
	}

	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty (str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk (str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens, options) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length);

	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
	    }
	  }

	  return function (obj, opts) {
	    var path = '';
	    var data = obj || {};
	    var options = opts || {};
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i];

	      if (typeof token === 'string') {
	        path += token;

	        continue
	      }

	      var value = data[token.name];
	      var segment;

	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix;
	          }

	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }

	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
	        }

	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }

	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j]);

	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
	          }

	          path += (j === 0 ? token.prefix : token.delimiter) + segment;
	        }

	        continue
	      }

	      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }

	      path += token.prefix + segment;
	    }

	    return path
	  }
	}

	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
	}

	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}

	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys;
	  return re
	}

	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags (options) {
	  return options && options.sensitive ? '' : 'i'
	}

	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g);

	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      });
	    }
	  }

	  return attachKeys(path, keys)
	}

	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = [];

	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source);
	  }

	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

	  return attachKeys(regexp, keys)
	}

	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  return tokensToRegExp(parse(path, options), keys, options)
	}

	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */
	function tokensToRegExp (tokens, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options);
	    keys = [];
	  }

	  options = options || {};

	  var strict = options.strict;
	  var end = options.end !== false;
	  var route = '';

	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i];

	    if (typeof token === 'string') {
	      route += escapeString(token);
	    } else {
	      var prefix = escapeString(token.prefix);
	      var capture = '(?:' + token.pattern + ')';

	      keys.push(token);

	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*';
	      }

	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?';
	        } else {
	          capture = prefix + '(' + capture + ')?';
	        }
	      } else {
	        capture = prefix + '(' + capture + ')';
	      }

	      route += capture;
	    }
	  }

	  var delimiter = escapeString(options.delimiter || '/');
	  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
	  }

	  if (end) {
	    route += '$';
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
	  }

	  return attachKeys(new RegExp('^' + route, flags(options)), keys)
	}

	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options);
	    keys = [];
	  }

	  options = options || {};

	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */ (keys))
	  }

	  if (isarray(path)) {
	    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
	  }

	  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
	}
	pathToRegexp_1.parse = parse_1;
	pathToRegexp_1.compile = compile_1;
	pathToRegexp_1.tokensToFunction = tokensToFunction_1;
	pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

	var patternCache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;

	var compilePath = function compilePath(pattern, options) {
	  var cacheKey = "" + options.end + options.strict + options.sensitive;
	  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

	  if (cache[pattern]) return cache[pattern];

	  var keys = [];
	  var re = pathToRegexp_1(pattern, keys, options);
	  var compiledPattern = { re: re, keys: keys };

	  if (cacheCount < cacheLimit) {
	    cache[pattern] = compiledPattern;
	    cacheCount++;
	  }

	  return compiledPattern;
	};

	/**
	 * Public API for matching a URL pathname to a path pattern.
	 */
	var matchPath = function matchPath(pathname) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var parent = arguments[2];

	  if (typeof options === "string") options = { path: options };

	  var _options = options,
	      path = _options.path,
	      _options$exact = _options.exact,
	      exact = _options$exact === undefined ? false : _options$exact,
	      _options$strict = _options.strict,
	      strict = _options$strict === undefined ? false : _options$strict,
	      _options$sensitive = _options.sensitive,
	      sensitive = _options$sensitive === undefined ? false : _options$sensitive;


	  if (path == null) return parent;

	  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),
	      re = _compilePath.re,
	      keys = _compilePath.keys;

	  var match = re.exec(pathname);

	  if (!match) return null;

	  var url = match[0],
	      values = match.slice(1);

	  var isExact = pathname === url;

	  if (exact && !isExact) return null;

	  return {
	    path: path, // the path pattern used to match
	    url: path === "/" && url === "" ? "/" : url, // the matched portion of the URL
	    isExact: isExact, // whether or not we matched exactly
	    params: keys.reduce(function (memo, key, index) {
	      memo[key.name] = values[index];
	      return memo;
	    }, {})
	  };
	};

	var _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$2(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$2(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isEmptyChildren = function isEmptyChildren(children) {
	  return react.Children.count(children) === 0;
	};

	/**
	 * The public API for matching a single path and rendering.
	 */

	var Route = function (_React$Component) {
	  _inherits$2(Route, _React$Component);

	  function Route() {
	    var _temp, _this, _ret;

	    _classCallCheck$2(this, Route);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$2(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props, _this.context.router)
	    }, _temp), _possibleConstructorReturn$2(_this, _ret);
	  }

	  Route.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends$2({}, this.context.router, {
	        route: {
	          location: this.props.location || this.context.router.route.location,
	          match: this.state.match
	        }
	      })
	    };
	  };

	  Route.prototype.computeMatch = function computeMatch(_ref, router) {
	    var computedMatch = _ref.computedMatch,
	        location = _ref.location,
	        path = _ref.path,
	        strict = _ref.strict,
	        exact = _ref.exact,
	        sensitive = _ref.sensitive;

	    if (computedMatch) return computedMatch; // <Switch> already computed the match for us

	    browser$1(router, "You should not use <Route> or withRouter() outside a <Router>");

	    var route = router.route;

	    var pathname = (location || route.location).pathname;

	    return matchPath(pathname, { path: path, strict: strict, exact: exact, sensitive: sensitive }, route.match);
	  };

	  Route.prototype.componentWillMount = function componentWillMount() {
	    warning_1(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");

	    warning_1(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored");

	    warning_1(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored");
	  };

	  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
	    warning_1(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

	    warning_1(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');

	    this.setState({
	      match: this.computeMatch(nextProps, nextContext.router)
	    });
	  };

	  Route.prototype.render = function render() {
	    var match = this.state.match;
	    var _props = this.props,
	        children = _props.children,
	        component = _props.component,
	        render = _props.render;
	    var _context$router = this.context.router,
	        history = _context$router.history,
	        route = _context$router.route,
	        staticContext = _context$router.staticContext;

	    var location = this.props.location || route.location;
	    var props = { match: match, location: location, history: history, staticContext: staticContext };

	    if (component) return match ? react.createElement(component, props) : null;

	    if (render) return match ? render(props) : null;

	    if (typeof children === "function") return children(props);

	    if (children && !isEmptyChildren(children)) return react.Children.only(children);

	    return null;
	  };

	  return Route;
	}(react.Component);

	Route.propTypes = {
	  computedMatch: propTypes.object, // private, from <Switch>
	  path: propTypes.string,
	  exact: propTypes.bool,
	  strict: propTypes.bool,
	  sensitive: propTypes.bool,
	  component: propTypes.func,
	  render: propTypes.func,
	  children: propTypes.oneOfType([propTypes.func, propTypes.node]),
	  location: propTypes.object
	};
	Route.contextTypes = {
	  router: propTypes.shape({
	    history: propTypes.object.isRequired,
	    route: propTypes.object.isRequired,
	    staticContext: propTypes.object
	  })
	};
	Route.childContextTypes = {
	  router: propTypes.object.isRequired
	};

	// Written in this round about way for babel-transform-imports

	var patternCache$1 = {};
	var cacheLimit$1 = 10000;
	var cacheCount$1 = 0;

	var compileGenerator = function compileGenerator(pattern) {
	  var cacheKey = pattern;
	  var cache = patternCache$1[cacheKey] || (patternCache$1[cacheKey] = {});

	  if (cache[pattern]) return cache[pattern];

	  var compiledGenerator = pathToRegexp_1.compile(pattern);

	  if (cacheCount$1 < cacheLimit$1) {
	    cache[pattern] = compiledGenerator;
	    cacheCount$1++;
	  }

	  return compiledGenerator;
	};

	/**
	 * Public API for generating a URL pathname from a pattern and parameters.
	 */
	var generatePath = function generatePath() {
	  var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";
	  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  if (pattern === "/") {
	    return pattern;
	  }
	  var generator = compileGenerator(pattern);
	  return generator(params, { pretty: true });
	};

	var _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$3(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$3(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for updating the location programmatically
	 * with a component.
	 */

	var Redirect = function (_React$Component) {
	  _inherits$3(Redirect, _React$Component);

	  function Redirect() {
	    _classCallCheck$3(this, Redirect);

	    return _possibleConstructorReturn$3(this, _React$Component.apply(this, arguments));
	  }

	  Redirect.prototype.isStatic = function isStatic() {
	    return this.context.router && this.context.router.staticContext;
	  };

	  Redirect.prototype.componentWillMount = function componentWillMount() {
	    browser$1(this.context.router, "You should not use <Redirect> outside a <Router>");

	    if (this.isStatic()) this.perform();
	  };

	  Redirect.prototype.componentDidMount = function componentDidMount() {
	    if (!this.isStatic()) this.perform();
	  };

	  Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var prevTo = createLocation(prevProps.to);
	    var nextTo = createLocation(this.props.to);

	    if (locationsAreEqual(prevTo, nextTo)) {
	      warning_1(false, "You tried to redirect to the same route you're currently on: " + ("\"" + nextTo.pathname + nextTo.search + "\""));
	      return;
	    }

	    this.perform();
	  };

	  Redirect.prototype.computeTo = function computeTo(_ref) {
	    var computedMatch = _ref.computedMatch,
	        to = _ref.to;

	    if (computedMatch) {
	      if (typeof to === "string") {
	        return generatePath(to, computedMatch.params);
	      } else {
	        return _extends$3({}, to, {
	          pathname: generatePath(to.pathname, computedMatch.params)
	        });
	      }
	    }

	    return to;
	  };

	  Redirect.prototype.perform = function perform() {
	    var history = this.context.router.history;
	    var push = this.props.push;

	    var to = this.computeTo(this.props);

	    if (push) {
	      history.push(to);
	    } else {
	      history.replace(to);
	    }
	  };

	  Redirect.prototype.render = function render() {
	    return null;
	  };

	  return Redirect;
	}(react.Component);

	Redirect.propTypes = {
	  computedMatch: propTypes.object, // private, from <Switch>
	  push: propTypes.bool,
	  from: propTypes.string,
	  to: propTypes.oneOfType([propTypes.string, propTypes.object]).isRequired
	};
	Redirect.defaultProps = {
	  push: false
	};
	Redirect.contextTypes = {
	  router: propTypes.shape({
	    history: propTypes.shape({
	      push: propTypes.func.isRequired,
	      replace: propTypes.func.isRequired
	    }).isRequired,
	    staticContext: propTypes.object
	  }).isRequired
	};

	// Written in this round about way for babel-transform-imports

	function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$4(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$4(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for rendering the first <Route> that matches.
	 */

	var Switch = function (_React$Component) {
	  _inherits$4(Switch, _React$Component);

	  function Switch() {
	    _classCallCheck$4(this, Switch);

	    return _possibleConstructorReturn$4(this, _React$Component.apply(this, arguments));
	  }

	  Switch.prototype.componentWillMount = function componentWillMount() {
	    browser$1(this.context.router, "You should not use <Switch> outside a <Router>");
	  };

	  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    warning_1(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

	    warning_1(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
	  };

	  Switch.prototype.render = function render() {
	    var route = this.context.router.route;
	    var children = this.props.children;

	    var location = this.props.location || route.location;

	    var match = void 0,
	        child = void 0;
	    react.Children.forEach(children, function (element) {
	      if (match == null && react.isValidElement(element)) {
	        var _element$props = element.props,
	            pathProp = _element$props.path,
	            exact = _element$props.exact,
	            strict = _element$props.strict,
	            sensitive = _element$props.sensitive,
	            from = _element$props.from;

	        var path = pathProp || from;

	        child = element;
	        match = matchPath(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }, route.match);
	      }
	    });

	    return match ? react.cloneElement(child, { location: location, computedMatch: match }) : null;
	  };

	  return Switch;
	}(react.Component);

	Switch.contextTypes = {
	  router: propTypes.shape({
	    route: propTypes.object.isRequired
	  }).isRequired
	};
	Switch.propTypes = {
	  children: propTypes.node,
	  location: propTypes.object
	};

	// Written in this round about way for babel-transform-imports

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    getDerivedStateFromProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    callee: true,
	    arguments: true,
	    arity: true
	};

	var defineProperty$1 = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components

	        if (objectPrototype) {
	            var inheritedComponent = getPrototypeOf(sourceComponent);
	            if (inheritedComponent && inheritedComponent !== objectPrototype) {
	                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	            }
	        }

	        var keys = getOwnPropertyNames(sourceComponent);

	        if (getOwnPropertySymbols$1) {
	            keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
	                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
	                try { // Avoid failures from read-only properties
	                    defineProperty$1(targetComponent, key, descriptor);
	                } catch (e) {}
	            }
	        }

	        return targetComponent;
	    }

	    return targetComponent;
	}

	var hoistNonReactStatics_cjs = hoistNonReactStatics;

	var _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A public higher-order component to access the imperative API
	 */
	var withRouter = function withRouter(Component) {
	  var C = function C(props) {
	    var wrappedComponentRef = props.wrappedComponentRef,
	        remainingProps = _objectWithoutProperties(props, ["wrappedComponentRef"]);

	    return react.createElement(Route, {
	      children: function children(routeComponentProps) {
	        return react.createElement(Component, _extends$4({}, remainingProps, routeComponentProps, {
	          ref: wrappedComponentRef
	        }));
	      }
	    });
	  };

	  C.displayName = "withRouter(" + (Component.displayName || Component.name) + ")";
	  C.WrappedComponent = Component;
	  C.propTypes = {
	    wrappedComponentRef: propTypes.func
	  };

	  return hoistNonReactStatics_cjs(C, Component);
	};

	// Written in this round about way for babel-transform-imports

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var ReactReduxContext = react.createContext(null);

	var Provider =
	/*#__PURE__*/
	function (_Component) {
	  _inheritsLoose(Provider, _Component);

	  function Provider(props) {
	    var _this;

	    _this = _Component.call(this, props) || this;
	    var store = props.store;
	    _this.state = {
	      storeState: store.getState(),
	      store: store
	    };
	    return _this;
	  }

	  var _proto = Provider.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this._isMounted = true;
	    this.subscribe();
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    if (this.unsubscribe) this.unsubscribe();
	    this._isMounted = false;
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    if (this.props.store !== prevProps.store) {
	      if (this.unsubscribe) this.unsubscribe();
	      this.subscribe();
	    }
	  };

	  _proto.subscribe = function subscribe() {
	    var _this2 = this;

	    var store = this.props.store;
	    this.unsubscribe = store.subscribe(function () {
	      var newStoreState = store.getState();

	      if (!_this2._isMounted) {
	        return;
	      }

	      _this2.setState(function (providerState) {
	        // If the value is the same, skip the unnecessary state update.
	        if (providerState.storeState === newStoreState) {
	          return null;
	        }

	        return {
	          storeState: newStoreState
	        };
	      });
	    }); // Actions might have been dispatched between render and mount - handle those

	    var postMountStoreState = store.getState();

	    if (postMountStoreState !== this.state.storeState) {
	      this.setState({
	        storeState: postMountStoreState
	      });
	    }
	  };

	  _proto.render = function render() {
	    var Context = this.props.context || ReactReduxContext;
	    return react.createElement(Context.Provider, {
	      value: this.state
	    }, this.props.children);
	  };

	  return Provider;
	}(react.Component);

	Provider.propTypes = {
	  store: propTypes.shape({
	    subscribe: propTypes.func.isRequired,
	    dispatch: propTypes.func.isRequired,
	    getState: propTypes.func.isRequired
	  }),
	  context: propTypes.object,
	  children: propTypes.any
	};

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS$1 = {
	  childContextTypes: true,
	  contextType: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDefaultProps: true,
	  getDerivedStateFromError: true,
	  getDerivedStateFromProps: true,
	  mixins: true,
	  propTypes: true,
	  type: true
	};
	var KNOWN_STATICS$1 = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	function getStatics(component) {
	  // React v16.11 and below
	  if (reactIs.isMemo(component)) {
	    return MEMO_STATICS;
	  } // React v16.12 and above


	  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS$1;
	}

	var defineProperty$2 = Object.defineProperty;
	var getOwnPropertyNames$1 = Object.getOwnPropertyNames;
	var getOwnPropertySymbols$2 = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
	var getPrototypeOf$1 = Object.getPrototypeOf;
	var objectPrototype$1 = Object.prototype;
	function hoistNonReactStatics$1(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components
	    if (objectPrototype$1) {
	      var inheritedComponent = getPrototypeOf$1(sourceComponent);

	      if (inheritedComponent && inheritedComponent !== objectPrototype$1) {
	        hoistNonReactStatics$1(targetComponent, inheritedComponent, blacklist);
	      }
	    }

	    var keys = getOwnPropertyNames$1(sourceComponent);

	    if (getOwnPropertySymbols$2) {
	      keys = keys.concat(getOwnPropertySymbols$2(sourceComponent));
	    }

	    var targetStatics = getStatics(targetComponent);
	    var sourceStatics = getStatics(sourceComponent);

	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i];

	      if (!KNOWN_STATICS$1[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	        var descriptor = getOwnPropertyDescriptor$1(sourceComponent, key);

	        try {
	          // Avoid failures from read-only properties
	          defineProperty$2(targetComponent, key, descriptor);
	        } catch (e) {}
	      }
	    }
	  }

	  return targetComponent;
	}

	var hoistNonReactStatics_cjs$1 = hoistNonReactStatics$1;

	var stringifyComponent = function stringifyComponent(Comp) {
	  try {
	    return JSON.stringify(Comp);
	  } catch (err) {
	    return String(Comp);
	  }
	};

	function connectAdvanced(
	/*
	  selectorFactory is a func that is responsible for returning the selector function used to
	  compute new props from state, props, and dispatch. For example:
	     export default connectAdvanced((dispatch, options) => (state, props) => ({
	      thing: state.things[props.thingId],
	      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
	    }))(YourComponent)
	   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
	  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
	  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
	   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
	  props. Do not use connectAdvanced directly without memoizing results between calls to your
	  selector, otherwise the Connect component will re-render on every state or props change.
	*/
	selectorFactory, // options object:
	_ref) {
	  if (_ref === void 0) {
	    _ref = {};
	  }

	  var _ref2 = _ref,
	      _ref2$getDisplayName = _ref2.getDisplayName,
	      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
	    return "ConnectAdvanced(" + name + ")";
	  } : _ref2$getDisplayName,
	      _ref2$methodName = _ref2.methodName,
	      methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName,
	      _ref2$renderCountProp = _ref2.renderCountProp,
	      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,
	      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,
	      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,
	      _ref2$storeKey = _ref2.storeKey,
	      storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey,
	      _ref2$withRef = _ref2.withRef,
	      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,
	      _ref2$forwardRef = _ref2.forwardRef,
	      forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef,
	      _ref2$context = _ref2.context,
	      context = _ref2$context === void 0 ? ReactReduxContext : _ref2$context,
	      connectOptions = _objectWithoutPropertiesLoose(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"]);

	  browser$1(renderCountProp === undefined, "renderCountProp is removed. render counting is built into the latest React dev tools profiling extension");
	  browser$1(!withRef, 'withRef is removed. To access the wrapped instance, use a ref on the connected component');
	  var customStoreWarningMessage = 'To use a custom Redux store for specific components,  create a custom React context with ' + "React.createContext(), and pass the context object to React Redux's Provider and specific components" + ' like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. ' + 'You may also pass a {context : MyContext} option to connect';
	  browser$1(storeKey === 'store', 'storeKey has been removed and does not do anything. ' + customStoreWarningMessage);
	  var Context = context;
	  return function wrapWithConnect(WrappedComponent) {
	    {
	      browser$1(reactIs.isValidElementType(WrappedComponent), "You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
	    }

	    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
	    var displayName = getDisplayName(wrappedComponentName);

	    var selectorFactoryOptions = _extends({}, connectOptions, {
	      getDisplayName: getDisplayName,
	      methodName: methodName,
	      renderCountProp: renderCountProp,
	      shouldHandleStateChanges: shouldHandleStateChanges,
	      storeKey: storeKey,
	      displayName: displayName,
	      wrappedComponentName: wrappedComponentName,
	      WrappedComponent: WrappedComponent
	    });

	    var pure = connectOptions.pure;
	    var OuterBaseComponent = react.Component;

	    if (pure) {
	      OuterBaseComponent = react.PureComponent;
	    }

	    function makeDerivedPropsSelector() {
	      var lastProps;
	      var lastState;
	      var lastDerivedProps;
	      var lastStore;
	      var lastSelectorFactoryOptions;
	      var sourceSelector;
	      return function selectDerivedProps(state, props, store, selectorFactoryOptions) {
	        if (pure && lastProps === props && lastState === state) {
	          return lastDerivedProps;
	        }

	        if (store !== lastStore || lastSelectorFactoryOptions !== selectorFactoryOptions) {
	          lastStore = store;
	          lastSelectorFactoryOptions = selectorFactoryOptions;
	          sourceSelector = selectorFactory(store.dispatch, selectorFactoryOptions);
	        }

	        lastProps = props;
	        lastState = state;
	        var nextProps = sourceSelector(state, props);
	        lastDerivedProps = nextProps;
	        return lastDerivedProps;
	      };
	    }

	    function makeChildElementSelector() {
	      var lastChildProps, lastForwardRef, lastChildElement, lastComponent;
	      return function selectChildElement(WrappedComponent, childProps, forwardRef) {
	        if (childProps !== lastChildProps || forwardRef !== lastForwardRef || lastComponent !== WrappedComponent) {
	          lastChildProps = childProps;
	          lastForwardRef = forwardRef;
	          lastComponent = WrappedComponent;
	          lastChildElement = react.createElement(WrappedComponent, _extends({}, childProps, {
	            ref: forwardRef
	          }));
	        }

	        return lastChildElement;
	      };
	    }

	    var Connect =
	    /*#__PURE__*/
	    function (_OuterBaseComponent) {
	      _inheritsLoose(Connect, _OuterBaseComponent);

	      function Connect(props) {
	        var _this;

	        _this = _OuterBaseComponent.call(this, props) || this;
	        browser$1(forwardRef ? !props.wrapperProps[storeKey] : !props[storeKey], 'Passing redux store in props has been removed and does not do anything. ' + customStoreWarningMessage);
	        _this.selectDerivedProps = makeDerivedPropsSelector();
	        _this.selectChildElement = makeChildElementSelector();
	        _this.indirectRenderWrappedComponent = _this.indirectRenderWrappedComponent.bind(_assertThisInitialized(_this));
	        return _this;
	      }

	      var _proto = Connect.prototype;

	      _proto.indirectRenderWrappedComponent = function indirectRenderWrappedComponent(value) {
	        // calling renderWrappedComponent on prototype from indirectRenderWrappedComponent bound to `this`
	        return this.renderWrappedComponent(value);
	      };

	      _proto.renderWrappedComponent = function renderWrappedComponent(value) {
	        browser$1(value, "Could not find \"store\" in the context of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
	        var storeState = value.storeState,
	            store = value.store;
	        var wrapperProps = this.props;
	        var forwardedRef;

	        if (forwardRef) {
	          wrapperProps = this.props.wrapperProps;
	          forwardedRef = this.props.forwardedRef;
	        }

	        var derivedProps = this.selectDerivedProps(storeState, wrapperProps, store, selectorFactoryOptions);
	        return this.selectChildElement(WrappedComponent, derivedProps, forwardedRef);
	      };

	      _proto.render = function render() {
	        var ContextToUse = this.props.context && this.props.context.Consumer && reactIs.isContextConsumer(react.createElement(this.props.context.Consumer, null)) ? this.props.context : Context;
	        return react.createElement(ContextToUse.Consumer, null, this.indirectRenderWrappedComponent);
	      };

	      return Connect;
	    }(OuterBaseComponent);

	    Connect.WrappedComponent = WrappedComponent;
	    Connect.displayName = displayName;

	    if (forwardRef) {
	      var forwarded = react.forwardRef(function forwardConnectRef(props, ref) {
	        return react.createElement(Connect, {
	          wrapperProps: props,
	          forwardedRef: ref
	        });
	      });
	      forwarded.displayName = displayName;
	      forwarded.WrappedComponent = WrappedComponent;
	      return hoistNonReactStatics_cjs$1(forwarded, WrappedComponent);
	    }

	    return hoistNonReactStatics_cjs$1(Connect, WrappedComponent);
	  };
	}

	var hasOwn = Object.prototype.hasOwnProperty;

	function is$2(x, y) {
	  if (x === y) {
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    return x !== x && y !== y;
	  }
	}

	function shallowEqual(objA, objB) {
	  if (is$2(objA, objB)) return true;

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	  if (keysA.length !== keysB.length) return false;

	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || !is$2(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	function symbolObservablePonyfill(root) {
		var result;
		var Symbol = root.Symbol;

		if (typeof Symbol === 'function') {
			if (Symbol.observable) {
				result = Symbol.observable;
			} else {
				result = Symbol('observable');
				Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	}

	var root$1;

	if (typeof self !== 'undefined') {
	  root$1 = self;
	} else if (typeof window !== 'undefined') {
	  root$1 = window;
	} else if (typeof global$2 !== 'undefined') {
	  root$1 = global$2;
	} else if (typeof module !== 'undefined') {
	  root$1 = module;
	} else {
	  root$1 = Function('return this')();
	}

	var result = symbolObservablePonyfill(root$1);

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var randomString = function randomString() {
	  return Math.random().toString(36).substring(7).split('').join('.');
	};

	var ActionTypes = {
	  INIT: "@@redux/INIT" + randomString(),
	  REPLACE: "@@redux/REPLACE" + randomString(),
	  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
	    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
	  }
	};

	/**
	 * @param {any} obj The object to inspect.
	 * @returns {boolean} True if the argument appears to be a plain object.
	 */
	function isPlainObject(obj) {
	  if (typeof obj !== 'object' || obj === null) return false;
	  var proto = obj;

	  while (Object.getPrototypeOf(proto) !== null) {
	    proto = Object.getPrototypeOf(proto);
	  }

	  return Object.getPrototypeOf(obj) === proto;
	}

	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [preloadedState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */

	function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;

	  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
	    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');
	  }

	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, preloadedState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;
	  /**
	   * This makes a shallow copy of currentListeners so we can use
	   * nextListeners as a temporary list while dispatching.
	   *
	   * This prevents any bugs around consumers calling
	   * subscribe/unsubscribe in the middle of a dispatch.
	   */

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }
	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */


	  function getState() {
	    if (isDispatching) {
	      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
	    }

	    return currentState;
	  }
	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */


	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected the listener to be a function.');
	    }

	    if (isDispatching) {
	      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');
	    }

	    var isSubscribed = true;
	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);
	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      if (isDispatching) {
	        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');
	      }

	      isSubscribed = false;
	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	      currentListeners = null;
	    };
	  }
	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing âwhat changedâ. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */


	  function dispatch(action) {
	    if (!isPlainObject(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;

	    for (var i = 0; i < listeners.length; i++) {
	      var listener = listeners[i];
	      listener();
	    }

	    return action;
	  }
	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */


	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
	    // Any reducers that existed in both the new and old rootReducer
	    // will receive the previous state. This effectively populates
	    // the new state tree with any relevant data from the old one.

	    dispatch({
	      type: ActionTypes.REPLACE
	    });
	  }
	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/tc39/proposal-observable
	   */


	  function observable() {
	    var _ref;

	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object' || observer === null) {
	          throw new TypeError('Expected the observer to be an object.');
	        }

	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }

	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return {
	          unsubscribe: unsubscribe
	        };
	      }
	    }, _ref[result] = function () {
	      return this;
	    }, _ref;
	  } // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.


	  dispatch({
	    type: ActionTypes.INIT
	  });
	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[result] = observable, _ref2;
	}

	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning$2(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */


	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	  } catch (e) {} // eslint-disable-line no-empty

	}

	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionDescription = actionType && "action \"" + String(actionType) + "\"" || 'an action';
	  return "Given " + actionDescription + ", reducer \"" + key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.";
	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!isPlainObject(inputState)) {
	    return "The " + argumentName + " has unexpected type of \"" + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });
	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });
	  if (action && action.type === ActionTypes.REPLACE) return;

	  if (unexpectedKeys.length > 0) {
	    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
	  }
	}

	function assertReducerShape(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, {
	      type: ActionTypes.INIT
	    });

	    if (typeof initialState === 'undefined') {
	      throw new Error("Reducer \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
	    }

	    if (typeof reducer(undefined, {
	      type: ActionTypes.PROBE_UNKNOWN_ACTION()
	    }) === 'undefined') {
	      throw new Error("Reducer \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle " + ActionTypes.INIT + " or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
	    }
	  });
	}
	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */


	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};

	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];

	    {
	      if (typeof reducers[key] === 'undefined') {
	        warning$2("No reducer provided for key \"" + key + "\"");
	      }
	    }

	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }

	  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
	  // keys multiple times.

	  var unexpectedKeyCache;

	  {
	    unexpectedKeyCache = {};
	  }

	  var shapeAssertionError;

	  try {
	    assertReducerShape(finalReducers);
	  } catch (e) {
	    shapeAssertionError = e;
	  }

	  return function combination(state, action) {
	    if (state === void 0) {
	      state = {};
	    }

	    if (shapeAssertionError) {
	      throw shapeAssertionError;
	    }

	    {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

	      if (warningMessage) {
	        warning$2(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};

	    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
	      var _key = finalReducerKeys[_i];
	      var reducer = finalReducers[_key];
	      var previousStateForKey = state[_key];
	      var nextStateForKey = reducer(previousStateForKey, action);

	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(_key, action);
	        throw new Error(errorMessage);
	      }

	      nextState[_key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }

	    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
	    return hasChanged ? nextState : state;
	  };
	}

	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(this, arguments));
	  };
	}
	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass an action creator as the first argument,
	 * and get a dispatch wrapped function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */


	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? 'null' : typeof actionCreators) + ". " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
	  }

	  var boundActionCreators = {};

	  for (var key in actionCreators) {
	    var actionCreator = actionCreators[key];

	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }

	  return boundActionCreators;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    keys.push.apply(keys, Object.getOwnPropertySymbols(object));
	  }

	  if (enumerableOnly) keys = keys.filter(function (sym) {
	    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	  });
	  return keys;
	}

	function _objectSpread2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys(source, true).forEach(function (key) {
	        _defineProperty(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys(source).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */
	function compose() {
	  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(void 0, arguments));
	    };
	  });
	}

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */

	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function () {
	      var store = createStore.apply(void 0, arguments);

	      var _dispatch = function dispatch() {
	        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');
	      };

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch() {
	          return _dispatch.apply(void 0, arguments);
	        }
	      };
	      var chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = compose.apply(void 0, chain)(store.dispatch);
	      return _objectSpread2({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

	/*
	 * This is a dummy function to check if the function name has been altered by minification.
	 * If the function has been minified and NODE_ENV !== 'production', warn the user.
	 */

	function isCrushed() {}

	if ( typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  warning$2('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
	}

	/**
	 * @param {any} obj The object to inspect.
	 * @returns {boolean} True if the argument appears to be a plain object.
	 */
	function isPlainObject$1(obj) {
	  if (typeof obj !== 'object' || obj === null) return false;
	  var proto = Object.getPrototypeOf(obj);
	  if (proto === null) return true;
	  var baseProto = proto;

	  while (Object.getPrototypeOf(baseProto) !== null) {
	    baseProto = Object.getPrototypeOf(baseProto);
	  }

	  return proto === baseProto;
	}

	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning$3(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */


	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */

	}

	function verifyPlainObject(value, displayName, methodName) {
	  if (!isPlainObject$1(value)) {
	    warning$3(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
	  }
	}

	function wrapMapToPropsConstant(getConstant) {
	  return function initConstantSelector(dispatch, options) {
	    var constant = getConstant(dispatch, options);

	    function constantSelector() {
	      return constant;
	    }

	    constantSelector.dependsOnOwnProps = false;
	    return constantSelector;
	  };
	} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
	// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
	// whether mapToProps needs to be invoked when props have changed.
	//
	// A length of one signals that mapToProps does not depend on props from the parent component.
	// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
	// therefore not reporting its length accurately..

	function getDependsOnOwnProps(mapToProps) {
	  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
	} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
	// this function wraps mapToProps in a proxy function which does several things:
	//
	//  * Detects whether the mapToProps function being called depends on props, which
	//    is used by selectorFactory to decide if it should reinvoke on props changes.
	//
	//  * On first call, handles mapToProps if returns another function, and treats that
	//    new function as the true mapToProps for subsequent calls.
	//
	//  * On first call, verifies the first result is a plain object, in order to warn
	//    the developer that their mapToProps function is not returning a valid result.
	//

	function wrapMapToPropsFunc(mapToProps, methodName) {
	  return function initProxySelector(dispatch, _ref) {
	    var displayName = _ref.displayName;

	    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
	      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
	    }; // allow detectFactoryAndVerify to get ownProps


	    proxy.dependsOnOwnProps = true;

	    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
	      proxy.mapToProps = mapToProps;
	      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
	      var props = proxy(stateOrDispatch, ownProps);

	      if (typeof props === 'function') {
	        proxy.mapToProps = props;
	        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
	        props = proxy(stateOrDispatch, ownProps);
	      }

	      verifyPlainObject(props, displayName, methodName);
	      return props;
	    };

	    return proxy;
	  };
	}

	function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
	  return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;
	}
	function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
	  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {
	    return {
	      dispatch: dispatch
	    };
	  }) : undefined;
	}
	function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
	  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? wrapMapToPropsConstant(function (dispatch) {
	    return bindActionCreators(mapDispatchToProps, dispatch);
	  }) : undefined;
	}
	var defaultMapDispatchToPropsFactories = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

	function whenMapStateToPropsIsFunction(mapStateToProps) {
	  return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;
	}
	function whenMapStateToPropsIsMissing(mapStateToProps) {
	  return !mapStateToProps ? wrapMapToPropsConstant(function () {
	    return {};
	  }) : undefined;
	}
	var defaultMapStateToPropsFactories = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

	function defaultMergeProps(stateProps, dispatchProps, ownProps) {
	  return _extends({}, ownProps, stateProps, dispatchProps);
	}
	function wrapMergePropsFunc(mergeProps) {
	  return function initMergePropsProxy(dispatch, _ref) {
	    var displayName = _ref.displayName,
	        pure = _ref.pure,
	        areMergedPropsEqual = _ref.areMergedPropsEqual;
	    var hasRunOnce = false;
	    var mergedProps;
	    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
	      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

	      if (hasRunOnce) {
	        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
	      } else {
	        hasRunOnce = true;
	        mergedProps = nextMergedProps;
	        verifyPlainObject(mergedProps, displayName, 'mergeProps');
	      }

	      return mergedProps;
	    };
	  };
	}
	function whenMergePropsIsFunction(mergeProps) {
	  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
	}
	function whenMergePropsIsOmitted(mergeProps) {
	  return !mergeProps ? function () {
	    return defaultMergeProps;
	  } : undefined;
	}
	var defaultMergePropsFactories = [whenMergePropsIsFunction, whenMergePropsIsOmitted];

	function verify(selector, methodName, displayName) {
	  if (!selector) {
	    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
	  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
	    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
	      warning$3("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
	    }
	  }
	}

	function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
	  verify(mapStateToProps, 'mapStateToProps', displayName);
	  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
	  verify(mergeProps, 'mergeProps', displayName);
	}

	function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
	  return function impureFinalPropsSelector(state, ownProps) {
	    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
	  };
	}
	function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
	  var areStatesEqual = _ref.areStatesEqual,
	      areOwnPropsEqual = _ref.areOwnPropsEqual,
	      areStatePropsEqual = _ref.areStatePropsEqual;
	  var hasRunAtLeastOnce = false;
	  var state;
	  var ownProps;
	  var stateProps;
	  var dispatchProps;
	  var mergedProps;

	  function handleFirstCall(firstState, firstOwnProps) {
	    state = firstState;
	    ownProps = firstOwnProps;
	    stateProps = mapStateToProps(state, ownProps);
	    dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    hasRunAtLeastOnce = true;
	    return mergedProps;
	  }

	  function handleNewPropsAndNewState() {
	    stateProps = mapStateToProps(state, ownProps);
	    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleNewProps() {
	    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
	    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleNewState() {
	    var nextStateProps = mapStateToProps(state, ownProps);
	    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
	    stateProps = nextStateProps;
	    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleSubsequentCalls(nextState, nextOwnProps) {
	    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
	    var stateChanged = !areStatesEqual(nextState, state);
	    state = nextState;
	    ownProps = nextOwnProps;
	    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
	    if (propsChanged) return handleNewProps();
	    if (stateChanged) return handleNewState();
	    return mergedProps;
	  }

	  return function pureFinalPropsSelector(nextState, nextOwnProps) {
	    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
	  };
	} // TODO: Add more comments
	// If pure is true, the selector returned by selectorFactory will memoize its results,
	// allowing connectAdvanced's shouldComponentUpdate to return false if final
	// props have not changed. If false, the selector will always return a new
	// object and shouldComponentUpdate will always return true.

	function finalPropsSelectorFactory(dispatch, _ref2) {
	  var initMapStateToProps = _ref2.initMapStateToProps,
	      initMapDispatchToProps = _ref2.initMapDispatchToProps,
	      initMergeProps = _ref2.initMergeProps,
	      options = _objectWithoutPropertiesLoose(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);

	  var mapStateToProps = initMapStateToProps(dispatch, options);
	  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
	  var mergeProps = initMergeProps(dispatch, options);

	  {
	    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
	  }

	  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
	  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
	}

	/*
	  connect is a facade over connectAdvanced. It turns its args into a compatible
	  selectorFactory, which has the signature:

	    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
	  
	  connect passes its args to connectAdvanced as options, which will in turn pass them to
	  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

	  selectorFactory returns a final props selector from its mapStateToProps,
	  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
	  mergePropsFactories, and pure args.

	  The resulting final props selector is called by the Connect component instance whenever
	  it receives new props or store state.
	 */

	function match(arg, factories, name) {
	  for (var i = factories.length - 1; i >= 0; i--) {
	    var result = factories[i](arg);
	    if (result) return result;
	  }

	  return function (dispatch, options) {
	    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
	  };
	}

	function strictEqual(a, b) {
	  return a === b;
	} // createConnect with default args builds the 'official' connect behavior. Calling it with
	// different options opens up some testing and extensibility scenarios


	function createConnect(_temp) {
	  var _ref = _temp === void 0 ? {} : _temp,
	      _ref$connectHOC = _ref.connectHOC,
	      connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC,
	      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
	      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF,
	      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
	      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro,
	      _ref$mergePropsFactor = _ref.mergePropsFactories,
	      mergePropsFactories = _ref$mergePropsFactor === void 0 ? defaultMergePropsFactories : _ref$mergePropsFactor,
	      _ref$selectorFactory = _ref.selectorFactory,
	      selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;

	  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
	    if (_ref2 === void 0) {
	      _ref2 = {};
	    }

	    var _ref3 = _ref2,
	        _ref3$pure = _ref3.pure,
	        pure = _ref3$pure === void 0 ? true : _ref3$pure,
	        _ref3$areStatesEqual = _ref3.areStatesEqual,
	        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,
	        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,
	        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua,
	        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,
	        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq,
	        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,
	        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE,
	        extraOptions = _objectWithoutPropertiesLoose(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);

	    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
	    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
	    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
	    return connectHOC(selectorFactory, _extends({
	      // used in error messages
	      methodName: 'connect',
	      // used to compute Connect's displayName from the wrapped component's displayName.
	      getDisplayName: function getDisplayName(name) {
	        return "Connect(" + name + ")";
	      },
	      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
	      shouldHandleStateChanges: Boolean(mapStateToProps),
	      // passed through to selectorFactory
	      initMapStateToProps: initMapStateToProps,
	      initMapDispatchToProps: initMapDispatchToProps,
	      initMergeProps: initMergeProps,
	      pure: pure,
	      areStatesEqual: areStatesEqual,
	      areOwnPropsEqual: areOwnPropsEqual,
	      areStatePropsEqual: areStatePropsEqual,
	      areMergedPropsEqual: areMergedPropsEqual
	    }, extraOptions));
	  };
	}
	var connect = createConnect();

	var _extends_1 = createCommonjsModule(function (module) {
	function _extends() {
	  module.exports = _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	module.exports = _extends;
	});

	function _defineProperty$1(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	var defineProperty$3 = _defineProperty$1;

	function _classCallCheck$5(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var classCallCheck = _classCallCheck$5;

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	var createClass = _createClass;

	var setPrototypeOf$1 = createCommonjsModule(function (module) {
	function _setPrototypeOf(o, p) {
	  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	module.exports = _setPrototypeOf;
	});

	function _inherits$5(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) setPrototypeOf$1(subClass, superClass);
	}

	var inherits = _inherits$5;

	var getPrototypeOf$2 = createCommonjsModule(function (module) {
	function _getPrototypeOf(o) {
	  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	module.exports = _getPrototypeOf;
	});

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	var isNativeReflectConstruct = _isNativeReflectConstruct;

	var _typeof_1 = createCommonjsModule(function (module) {
	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    module.exports = _typeof = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    module.exports = _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	module.exports = _typeof;
	});

	function _assertThisInitialized$1(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	var assertThisInitialized = _assertThisInitialized$1;

	function _possibleConstructorReturn$5(self, call) {
	  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return assertThisInitialized(self);
	}

	var possibleConstructorReturn = _possibleConstructorReturn$5;

	function _createSuper(Derived) {
	  var hasNativeReflectConstruct = isNativeReflectConstruct();
	  return function _createSuperInternal() {
	    var Super = getPrototypeOf$2(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = getPrototypeOf$2(this).constructor;
	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return possibleConstructorReturn(this, result);
	  };
	}

	var createSuper = _createSuper;

	var classnames = createCommonjsModule(function (module) {
	/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if ( module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else {
			window.classNames = classNames;
		}
	}());
	});

	function omit(obj, fields) {
	  // eslint-disable-next-line prefer-object-spread
	  var shallowCopy = Object.assign({}, obj);

	  for (var i = 0; i < fields.length; i += 1) {
	    var key = fields[i];
	    delete shallowCopy[key];
	  }

	  return shallowCopy;
	}

	function _defineProperty$2(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _classCallCheck$6(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$1(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$1(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$1(Constructor, staticProps);
	  return Constructor;
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _inherits$6(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	function _possibleConstructorReturn$6(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized(self);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	/**
	 * Return if a node is a DOM node. Else will return by `findDOMNode`
	 */

	function findDOMNode(node) {
	  if (node instanceof HTMLElement) {
	    return node;
	  }

	  return reactDom.findDOMNode(node);
	}

	function toArray(children) {
	  var ret = [];
	  react.Children.forEach(children, function (child) {
	    if (child === undefined || child === null) {
	      return;
	    }

	    if (Array.isArray(child)) {
	      ret = ret.concat(toArray(child));
	    } else if (reactIs.isFragment(child) && child.props) {
	      ret = ret.concat(toArray(child.props.children));
	    } else {
	      ret.push(child);
	    }
	  });
	  return ret;
	}

	/* eslint-disable no-console */
	var warned = {};
	function warning$4(valid, message) {
	  // Support uglify
	  if ( !valid && console !== undefined) {
	    console.error("Warning: ".concat(message));
	  }
	}
	function call(method, valid, message) {
	  if (!valid && !warned[message]) {
	    method(false, message);
	    warned[message] = true;
	  }
	}
	function warningOnce(valid, message) {
	  call(warning$4, valid, message);
	}
	/* eslint-enable */

	function _typeof$1(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }
	function fillRef(ref, node) {
	  if (typeof ref === 'function') {
	    ref(node);
	  } else if (_typeof$1(ref) === 'object' && ref && 'current' in ref) {
	    ref.current = node;
	  }
	}
	/**
	 * Merge refs into one ref function to support ref passing.
	 */

	function composeRef() {
	  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
	    refs[_key] = arguments[_key];
	  }

	  return function (node) {
	    refs.forEach(function (ref) {
	      fillRef(ref, node);
	    });
	  };
	}
	function supportRef(nodeOrComponent) {
	  var _type$prototype, _nodeOrComponent$prot;

	  var type = reactIs.isMemo(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type; // Function component node

	  if (typeof type === 'function' && !((_type$prototype = type.prototype) === null || _type$prototype === void 0 ? void 0 : _type$prototype.render)) {
	    return false;
	  } // Class component


	  if (typeof nodeOrComponent === 'function' && !((_nodeOrComponent$prot = nodeOrComponent.prototype) === null || _nodeOrComponent$prot === void 0 ? void 0 : _nodeOrComponent$prot.render)) {
	    return false;
	  }

	  return true;
	}
	/* eslint-enable */

	/**
	 * A collection of shims that provide minimal functionality of the ES6 collections.
	 *
	 * These implementations are not meant to be used outside of the ResizeObserver
	 * modules as they cover only a limited range of use cases.
	 */
	/* eslint-disable require-jsdoc, valid-jsdoc */
	var MapShim = (function () {
	    if (typeof Map !== 'undefined') {
	        return Map;
	    }
	    /**
	     * Returns index in provided array that matches the specified key.
	     *
	     * @param {Array<Array>} arr
	     * @param {*} key
	     * @returns {number}
	     */
	    function getIndex(arr, key) {
	        var result = -1;
	        arr.some(function (entry, index) {
	            if (entry[0] === key) {
	                result = index;
	                return true;
	            }
	            return false;
	        });
	        return result;
	    }
	    return /** @class */ (function () {
	        function class_1() {
	            this.__entries__ = [];
	        }
	        Object.defineProperty(class_1.prototype, "size", {
	            /**
	             * @returns {boolean}
	             */
	            get: function () {
	                return this.__entries__.length;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {*} key
	         * @returns {*}
	         */
	        class_1.prototype.get = function (key) {
	            var index = getIndex(this.__entries__, key);
	            var entry = this.__entries__[index];
	            return entry && entry[1];
	        };
	        /**
	         * @param {*} key
	         * @param {*} value
	         * @returns {void}
	         */
	        class_1.prototype.set = function (key, value) {
	            var index = getIndex(this.__entries__, key);
	            if (~index) {
	                this.__entries__[index][1] = value;
	            }
	            else {
	                this.__entries__.push([key, value]);
	            }
	        };
	        /**
	         * @param {*} key
	         * @returns {void}
	         */
	        class_1.prototype.delete = function (key) {
	            var entries = this.__entries__;
	            var index = getIndex(entries, key);
	            if (~index) {
	                entries.splice(index, 1);
	            }
	        };
	        /**
	         * @param {*} key
	         * @returns {void}
	         */
	        class_1.prototype.has = function (key) {
	            return !!~getIndex(this.__entries__, key);
	        };
	        /**
	         * @returns {void}
	         */
	        class_1.prototype.clear = function () {
	            this.__entries__.splice(0);
	        };
	        /**
	         * @param {Function} callback
	         * @param {*} [ctx=null]
	         * @returns {void}
	         */
	        class_1.prototype.forEach = function (callback, ctx) {
	            if (ctx === void 0) { ctx = null; }
	            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
	                var entry = _a[_i];
	                callback.call(ctx, entry[1], entry[0]);
	            }
	        };
	        return class_1;
	    }());
	})();

	/**
	 * Detects whether window and document objects are available in current environment.
	 */
	var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

	// Returns global object of a current environment.
	var global$1$1 = (function () {
	    if (typeof global$2 !== 'undefined' && global$2.Math === Math) {
	        return global$2;
	    }
	    if (typeof self !== 'undefined' && self.Math === Math) {
	        return self;
	    }
	    if (typeof window !== 'undefined' && window.Math === Math) {
	        return window;
	    }
	    // eslint-disable-next-line no-new-func
	    return Function('return this')();
	})();

	/**
	 * A shim for the requestAnimationFrame which falls back to the setTimeout if
	 * first one is not supported.
	 *
	 * @returns {number} Requests' identifier.
	 */
	var requestAnimationFrame$1 = (function () {
	    if (typeof requestAnimationFrame === 'function') {
	        // It's required to use a bounded function because IE sometimes throws
	        // an "Invalid calling object" error if rAF is invoked without the global
	        // object on the left hand side.
	        return requestAnimationFrame.bind(global$1$1);
	    }
	    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
	})();

	// Defines minimum timeout before adding a trailing call.
	var trailingTimeout = 2;
	/**
	 * Creates a wrapper function which ensures that provided callback will be
	 * invoked only once during the specified delay period.
	 *
	 * @param {Function} callback - Function to be invoked after the delay period.
	 * @param {number} delay - Delay after which to invoke callback.
	 * @returns {Function}
	 */
	function throttle (callback, delay) {
	    var leadingCall = false, trailingCall = false, lastCallTime = 0;
	    /**
	     * Invokes the original callback function and schedules new invocation if
	     * the "proxy" was called during current request.
	     *
	     * @returns {void}
	     */
	    function resolvePending() {
	        if (leadingCall) {
	            leadingCall = false;
	            callback();
	        }
	        if (trailingCall) {
	            proxy();
	        }
	    }
	    /**
	     * Callback invoked after the specified delay. It will further postpone
	     * invocation of the original function delegating it to the
	     * requestAnimationFrame.
	     *
	     * @returns {void}
	     */
	    function timeoutCallback() {
	        requestAnimationFrame$1(resolvePending);
	    }
	    /**
	     * Schedules invocation of the original function.
	     *
	     * @returns {void}
	     */
	    function proxy() {
	        var timeStamp = Date.now();
	        if (leadingCall) {
	            // Reject immediately following calls.
	            if (timeStamp - lastCallTime < trailingTimeout) {
	                return;
	            }
	            // Schedule new call to be in invoked when the pending one is resolved.
	            // This is important for "transitions" which never actually start
	            // immediately so there is a chance that we might miss one if change
	            // happens amids the pending invocation.
	            trailingCall = true;
	        }
	        else {
	            leadingCall = true;
	            trailingCall = false;
	            setTimeout(timeoutCallback, delay);
	        }
	        lastCallTime = timeStamp;
	    }
	    return proxy;
	}

	// Minimum delay before invoking the update of observers.
	var REFRESH_DELAY = 20;
	// A list of substrings of CSS properties used to find transition events that
	// might affect dimensions of observed elements.
	var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
	// Check if MutationObserver is available.
	var mutationObserverSupported = typeof MutationObserver !== 'undefined';
	/**
	 * Singleton controller class which handles updates of ResizeObserver instances.
	 */
	var ResizeObserverController = /** @class */ (function () {
	    /**
	     * Creates a new instance of ResizeObserverController.
	     *
	     * @private
	     */
	    function ResizeObserverController() {
	        /**
	         * Indicates whether DOM listeners have been added.
	         *
	         * @private {boolean}
	         */
	        this.connected_ = false;
	        /**
	         * Tells that controller has subscribed for Mutation Events.
	         *
	         * @private {boolean}
	         */
	        this.mutationEventsAdded_ = false;
	        /**
	         * Keeps reference to the instance of MutationObserver.
	         *
	         * @private {MutationObserver}
	         */
	        this.mutationsObserver_ = null;
	        /**
	         * A list of connected observers.
	         *
	         * @private {Array<ResizeObserverSPI>}
	         */
	        this.observers_ = [];
	        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
	        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
	    }
	    /**
	     * Adds observer to observers list.
	     *
	     * @param {ResizeObserverSPI} observer - Observer to be added.
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.addObserver = function (observer) {
	        if (!~this.observers_.indexOf(observer)) {
	            this.observers_.push(observer);
	        }
	        // Add listeners if they haven't been added yet.
	        if (!this.connected_) {
	            this.connect_();
	        }
	    };
	    /**
	     * Removes observer from observers list.
	     *
	     * @param {ResizeObserverSPI} observer - Observer to be removed.
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.removeObserver = function (observer) {
	        var observers = this.observers_;
	        var index = observers.indexOf(observer);
	        // Remove observer if it's present in registry.
	        if (~index) {
	            observers.splice(index, 1);
	        }
	        // Remove listeners if controller has no connected observers.
	        if (!observers.length && this.connected_) {
	            this.disconnect_();
	        }
	    };
	    /**
	     * Invokes the update of observers. It will continue running updates insofar
	     * it detects changes.
	     *
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.refresh = function () {
	        var changesDetected = this.updateObservers_();
	        // Continue running updates if changes have been detected as there might
	        // be future ones caused by CSS transitions.
	        if (changesDetected) {
	            this.refresh();
	        }
	    };
	    /**
	     * Updates every observer from observers list and notifies them of queued
	     * entries.
	     *
	     * @private
	     * @returns {boolean} Returns "true" if any observer has detected changes in
	     *      dimensions of it's elements.
	     */
	    ResizeObserverController.prototype.updateObservers_ = function () {
	        // Collect observers that have active observations.
	        var activeObservers = this.observers_.filter(function (observer) {
	            return observer.gatherActive(), observer.hasActive();
	        });
	        // Deliver notifications in a separate cycle in order to avoid any
	        // collisions between observers, e.g. when multiple instances of
	        // ResizeObserver are tracking the same element and the callback of one
	        // of them changes content dimensions of the observed target. Sometimes
	        // this may result in notifications being blocked for the rest of observers.
	        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
	        return activeObservers.length > 0;
	    };
	    /**
	     * Initializes DOM listeners.
	     *
	     * @private
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.connect_ = function () {
	        // Do nothing if running in a non-browser environment or if listeners
	        // have been already added.
	        if (!isBrowser || this.connected_) {
	            return;
	        }
	        // Subscription to the "Transitionend" event is used as a workaround for
	        // delayed transitions. This way it's possible to capture at least the
	        // final state of an element.
	        document.addEventListener('transitionend', this.onTransitionEnd_);
	        window.addEventListener('resize', this.refresh);
	        if (mutationObserverSupported) {
	            this.mutationsObserver_ = new MutationObserver(this.refresh);
	            this.mutationsObserver_.observe(document, {
	                attributes: true,
	                childList: true,
	                characterData: true,
	                subtree: true
	            });
	        }
	        else {
	            document.addEventListener('DOMSubtreeModified', this.refresh);
	            this.mutationEventsAdded_ = true;
	        }
	        this.connected_ = true;
	    };
	    /**
	     * Removes DOM listeners.
	     *
	     * @private
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.disconnect_ = function () {
	        // Do nothing if running in a non-browser environment or if listeners
	        // have been already removed.
	        if (!isBrowser || !this.connected_) {
	            return;
	        }
	        document.removeEventListener('transitionend', this.onTransitionEnd_);
	        window.removeEventListener('resize', this.refresh);
	        if (this.mutationsObserver_) {
	            this.mutationsObserver_.disconnect();
	        }
	        if (this.mutationEventsAdded_) {
	            document.removeEventListener('DOMSubtreeModified', this.refresh);
	        }
	        this.mutationsObserver_ = null;
	        this.mutationEventsAdded_ = false;
	        this.connected_ = false;
	    };
	    /**
	     * "Transitionend" event handler.
	     *
	     * @private
	     * @param {TransitionEvent} event
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
	        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
	        // Detect whether transition may affect dimensions of an element.
	        var isReflowProperty = transitionKeys.some(function (key) {
	            return !!~propertyName.indexOf(key);
	        });
	        if (isReflowProperty) {
	            this.refresh();
	        }
	    };
	    /**
	     * Returns instance of the ResizeObserverController.
	     *
	     * @returns {ResizeObserverController}
	     */
	    ResizeObserverController.getInstance = function () {
	        if (!this.instance_) {
	            this.instance_ = new ResizeObserverController();
	        }
	        return this.instance_;
	    };
	    /**
	     * Holds reference to the controller's instance.
	     *
	     * @private {ResizeObserverController}
	     */
	    ResizeObserverController.instance_ = null;
	    return ResizeObserverController;
	}());

	/**
	 * Defines non-writable/enumerable properties of the provided target object.
	 *
	 * @param {Object} target - Object for which to define properties.
	 * @param {Object} props - Properties to be defined.
	 * @returns {Object} Target object.
	 */
	var defineConfigurable = (function (target, props) {
	    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
	        var key = _a[_i];
	        Object.defineProperty(target, key, {
	            value: props[key],
	            enumerable: false,
	            writable: false,
	            configurable: true
	        });
	    }
	    return target;
	});

	/**
	 * Returns the global object associated with provided element.
	 *
	 * @param {Object} target
	 * @returns {Object}
	 */
	var getWindowOf = (function (target) {
	    // Assume that the element is an instance of Node, which means that it
	    // has the "ownerDocument" property from which we can retrieve a
	    // corresponding global object.
	    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
	    // Return the local global object if it's not possible extract one from
	    // provided element.
	    return ownerGlobal || global$1$1;
	});

	// Placeholder of an empty content rectangle.
	var emptyRect = createRectInit(0, 0, 0, 0);
	/**
	 * Converts provided string to a number.
	 *
	 * @param {number|string} value
	 * @returns {number}
	 */
	function toFloat(value) {
	    return parseFloat(value) || 0;
	}
	/**
	 * Extracts borders size from provided styles.
	 *
	 * @param {CSSStyleDeclaration} styles
	 * @param {...string} positions - Borders positions (top, right, ...)
	 * @returns {number}
	 */
	function getBordersSize(styles) {
	    var positions = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        positions[_i - 1] = arguments[_i];
	    }
	    return positions.reduce(function (size, position) {
	        var value = styles['border-' + position + '-width'];
	        return size + toFloat(value);
	    }, 0);
	}
	/**
	 * Extracts paddings sizes from provided styles.
	 *
	 * @param {CSSStyleDeclaration} styles
	 * @returns {Object} Paddings box.
	 */
	function getPaddings(styles) {
	    var positions = ['top', 'right', 'bottom', 'left'];
	    var paddings = {};
	    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
	        var position = positions_1[_i];
	        var value = styles['padding-' + position];
	        paddings[position] = toFloat(value);
	    }
	    return paddings;
	}
	/**
	 * Calculates content rectangle of provided SVG element.
	 *
	 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
	 *      to be calculated.
	 * @returns {DOMRectInit}
	 */
	function getSVGContentRect(target) {
	    var bbox = target.getBBox();
	    return createRectInit(0, 0, bbox.width, bbox.height);
	}
	/**
	 * Calculates content rectangle of provided HTMLElement.
	 *
	 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
	 * @returns {DOMRectInit}
	 */
	function getHTMLElementContentRect(target) {
	    // Client width & height properties can't be
	    // used exclusively as they provide rounded values.
	    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
	    // By this condition we can catch all non-replaced inline, hidden and
	    // detached elements. Though elements with width & height properties less
	    // than 0.5 will be discarded as well.
	    //
	    // Without it we would need to implement separate methods for each of
	    // those cases and it's not possible to perform a precise and performance
	    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
	    // gives wrong results for elements with width & height less than 0.5.
	    if (!clientWidth && !clientHeight) {
	        return emptyRect;
	    }
	    var styles = getWindowOf(target).getComputedStyle(target);
	    var paddings = getPaddings(styles);
	    var horizPad = paddings.left + paddings.right;
	    var vertPad = paddings.top + paddings.bottom;
	    // Computed styles of width & height are being used because they are the
	    // only dimensions available to JS that contain non-rounded values. It could
	    // be possible to utilize the getBoundingClientRect if only it's data wasn't
	    // affected by CSS transformations let alone paddings, borders and scroll bars.
	    var width = toFloat(styles.width), height = toFloat(styles.height);
	    // Width & height include paddings and borders when the 'border-box' box
	    // model is applied (except for IE).
	    if (styles.boxSizing === 'border-box') {
	        // Following conditions are required to handle Internet Explorer which
	        // doesn't include paddings and borders to computed CSS dimensions.
	        //
	        // We can say that if CSS dimensions + paddings are equal to the "client"
	        // properties then it's either IE, and thus we don't need to subtract
	        // anything, or an element merely doesn't have paddings/borders styles.
	        if (Math.round(width + horizPad) !== clientWidth) {
	            width -= getBordersSize(styles, 'left', 'right') + horizPad;
	        }
	        if (Math.round(height + vertPad) !== clientHeight) {
	            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
	        }
	    }
	    // Following steps can't be applied to the document's root element as its
	    // client[Width/Height] properties represent viewport area of the window.
	    // Besides, it's as well not necessary as the <html> itself neither has
	    // rendered scroll bars nor it can be clipped.
	    if (!isDocumentElement(target)) {
	        // In some browsers (only in Firefox, actually) CSS width & height
	        // include scroll bars size which can be removed at this step as scroll
	        // bars are the only difference between rounded dimensions + paddings
	        // and "client" properties, though that is not always true in Chrome.
	        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
	        var horizScrollbar = Math.round(height + vertPad) - clientHeight;
	        // Chrome has a rather weird rounding of "client" properties.
	        // E.g. for an element with content width of 314.2px it sometimes gives
	        // the client width of 315px and for the width of 314.7px it may give
	        // 314px. And it doesn't happen all the time. So just ignore this delta
	        // as a non-relevant.
	        if (Math.abs(vertScrollbar) !== 1) {
	            width -= vertScrollbar;
	        }
	        if (Math.abs(horizScrollbar) !== 1) {
	            height -= horizScrollbar;
	        }
	    }
	    return createRectInit(paddings.left, paddings.top, width, height);
	}
	/**
	 * Checks whether provided element is an instance of the SVGGraphicsElement.
	 *
	 * @param {Element} target - Element to be checked.
	 * @returns {boolean}
	 */
	var isSVGGraphicsElement = (function () {
	    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
	    // interface.
	    if (typeof SVGGraphicsElement !== 'undefined') {
	        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
	    }
	    // If it's so, then check that element is at least an instance of the
	    // SVGElement and that it has the "getBBox" method.
	    // eslint-disable-next-line no-extra-parens
	    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
	        typeof target.getBBox === 'function'); };
	})();
	/**
	 * Checks whether provided element is a document element (<html>).
	 *
	 * @param {Element} target - Element to be checked.
	 * @returns {boolean}
	 */
	function isDocumentElement(target) {
	    return target === getWindowOf(target).document.documentElement;
	}
	/**
	 * Calculates an appropriate content rectangle for provided html or svg element.
	 *
	 * @param {Element} target - Element content rectangle of which needs to be calculated.
	 * @returns {DOMRectInit}
	 */
	function getContentRect(target) {
	    if (!isBrowser) {
	        return emptyRect;
	    }
	    if (isSVGGraphicsElement(target)) {
	        return getSVGContentRect(target);
	    }
	    return getHTMLElementContentRect(target);
	}
	/**
	 * Creates rectangle with an interface of the DOMRectReadOnly.
	 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
	 *
	 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
	 * @returns {DOMRectReadOnly}
	 */
	function createReadOnlyRect(_a) {
	    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
	    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
	    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
	    var rect = Object.create(Constr.prototype);
	    // Rectangle's properties are not writable and non-enumerable.
	    defineConfigurable(rect, {
	        x: x, y: y, width: width, height: height,
	        top: y,
	        right: x + width,
	        bottom: height + y,
	        left: x
	    });
	    return rect;
	}
	/**
	 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
	 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
	 *
	 * @param {number} x - X coordinate.
	 * @param {number} y - Y coordinate.
	 * @param {number} width - Rectangle's width.
	 * @param {number} height - Rectangle's height.
	 * @returns {DOMRectInit}
	 */
	function createRectInit(x, y, width, height) {
	    return { x: x, y: y, width: width, height: height };
	}

	/**
	 * Class that is responsible for computations of the content rectangle of
	 * provided DOM element and for keeping track of it's changes.
	 */
	var ResizeObservation = /** @class */ (function () {
	    /**
	     * Creates an instance of ResizeObservation.
	     *
	     * @param {Element} target - Element to be observed.
	     */
	    function ResizeObservation(target) {
	        /**
	         * Broadcasted width of content rectangle.
	         *
	         * @type {number}
	         */
	        this.broadcastWidth = 0;
	        /**
	         * Broadcasted height of content rectangle.
	         *
	         * @type {number}
	         */
	        this.broadcastHeight = 0;
	        /**
	         * Reference to the last observed content rectangle.
	         *
	         * @private {DOMRectInit}
	         */
	        this.contentRect_ = createRectInit(0, 0, 0, 0);
	        this.target = target;
	    }
	    /**
	     * Updates content rectangle and tells whether it's width or height properties
	     * have changed since the last broadcast.
	     *
	     * @returns {boolean}
	     */
	    ResizeObservation.prototype.isActive = function () {
	        var rect = getContentRect(this.target);
	        this.contentRect_ = rect;
	        return (rect.width !== this.broadcastWidth ||
	            rect.height !== this.broadcastHeight);
	    };
	    /**
	     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
	     * from the corresponding properties of the last observed content rectangle.
	     *
	     * @returns {DOMRectInit} Last observed content rectangle.
	     */
	    ResizeObservation.prototype.broadcastRect = function () {
	        var rect = this.contentRect_;
	        this.broadcastWidth = rect.width;
	        this.broadcastHeight = rect.height;
	        return rect;
	    };
	    return ResizeObservation;
	}());

	var ResizeObserverEntry = /** @class */ (function () {
	    /**
	     * Creates an instance of ResizeObserverEntry.
	     *
	     * @param {Element} target - Element that is being observed.
	     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
	     */
	    function ResizeObserverEntry(target, rectInit) {
	        var contentRect = createReadOnlyRect(rectInit);
	        // According to the specification following properties are not writable
	        // and are also not enumerable in the native implementation.
	        //
	        // Property accessors are not being used as they'd require to define a
	        // private WeakMap storage which may cause memory leaks in browsers that
	        // don't support this type of collections.
	        defineConfigurable(this, { target: target, contentRect: contentRect });
	    }
	    return ResizeObserverEntry;
	}());

	var ResizeObserverSPI = /** @class */ (function () {
	    /**
	     * Creates a new instance of ResizeObserver.
	     *
	     * @param {ResizeObserverCallback} callback - Callback function that is invoked
	     *      when one of the observed elements changes it's content dimensions.
	     * @param {ResizeObserverController} controller - Controller instance which
	     *      is responsible for the updates of observer.
	     * @param {ResizeObserver} callbackCtx - Reference to the public
	     *      ResizeObserver instance which will be passed to callback function.
	     */
	    function ResizeObserverSPI(callback, controller, callbackCtx) {
	        /**
	         * Collection of resize observations that have detected changes in dimensions
	         * of elements.
	         *
	         * @private {Array<ResizeObservation>}
	         */
	        this.activeObservations_ = [];
	        /**
	         * Registry of the ResizeObservation instances.
	         *
	         * @private {Map<Element, ResizeObservation>}
	         */
	        this.observations_ = new MapShim();
	        if (typeof callback !== 'function') {
	            throw new TypeError('The callback provided as parameter 1 is not a function.');
	        }
	        this.callback_ = callback;
	        this.controller_ = controller;
	        this.callbackCtx_ = callbackCtx;
	    }
	    /**
	     * Starts observing provided element.
	     *
	     * @param {Element} target - Element to be observed.
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.observe = function (target) {
	        if (!arguments.length) {
	            throw new TypeError('1 argument required, but only 0 present.');
	        }
	        // Do nothing if current environment doesn't have the Element interface.
	        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
	            return;
	        }
	        if (!(target instanceof getWindowOf(target).Element)) {
	            throw new TypeError('parameter 1 is not of type "Element".');
	        }
	        var observations = this.observations_;
	        // Do nothing if element is already being observed.
	        if (observations.has(target)) {
	            return;
	        }
	        observations.set(target, new ResizeObservation(target));
	        this.controller_.addObserver(this);
	        // Force the update of observations.
	        this.controller_.refresh();
	    };
	    /**
	     * Stops observing provided element.
	     *
	     * @param {Element} target - Element to stop observing.
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.unobserve = function (target) {
	        if (!arguments.length) {
	            throw new TypeError('1 argument required, but only 0 present.');
	        }
	        // Do nothing if current environment doesn't have the Element interface.
	        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
	            return;
	        }
	        if (!(target instanceof getWindowOf(target).Element)) {
	            throw new TypeError('parameter 1 is not of type "Element".');
	        }
	        var observations = this.observations_;
	        // Do nothing if element is not being observed.
	        if (!observations.has(target)) {
	            return;
	        }
	        observations.delete(target);
	        if (!observations.size) {
	            this.controller_.removeObserver(this);
	        }
	    };
	    /**
	     * Stops observing all elements.
	     *
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.disconnect = function () {
	        this.clearActive();
	        this.observations_.clear();
	        this.controller_.removeObserver(this);
	    };
	    /**
	     * Collects observation instances the associated element of which has changed
	     * it's content rectangle.
	     *
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.gatherActive = function () {
	        var _this = this;
	        this.clearActive();
	        this.observations_.forEach(function (observation) {
	            if (observation.isActive()) {
	                _this.activeObservations_.push(observation);
	            }
	        });
	    };
	    /**
	     * Invokes initial callback function with a list of ResizeObserverEntry
	     * instances collected from active resize observations.
	     *
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.broadcastActive = function () {
	        // Do nothing if observer doesn't have active observations.
	        if (!this.hasActive()) {
	            return;
	        }
	        var ctx = this.callbackCtx_;
	        // Create ResizeObserverEntry instance for every active observation.
	        var entries = this.activeObservations_.map(function (observation) {
	            return new ResizeObserverEntry(observation.target, observation.broadcastRect());
	        });
	        this.callback_.call(ctx, entries, ctx);
	        this.clearActive();
	    };
	    /**
	     * Clears the collection of active observations.
	     *
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.clearActive = function () {
	        this.activeObservations_.splice(0);
	    };
	    /**
	     * Tells whether observer has active observations.
	     *
	     * @returns {boolean}
	     */
	    ResizeObserverSPI.prototype.hasActive = function () {
	        return this.activeObservations_.length > 0;
	    };
	    return ResizeObserverSPI;
	}());

	// Registry of internal observers. If WeakMap is not available use current shim
	// for the Map collection as it has all required methods and because WeakMap
	// can't be fully polyfilled anyway.
	var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
	/**
	 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
	 * exposing only those methods and properties that are defined in the spec.
	 */
	var ResizeObserver = /** @class */ (function () {
	    /**
	     * Creates a new instance of ResizeObserver.
	     *
	     * @param {ResizeObserverCallback} callback - Callback that is invoked when
	     *      dimensions of the observed elements change.
	     */
	    function ResizeObserver(callback) {
	        if (!(this instanceof ResizeObserver)) {
	            throw new TypeError('Cannot call a class as a function.');
	        }
	        if (!arguments.length) {
	            throw new TypeError('1 argument required, but only 0 present.');
	        }
	        var controller = ResizeObserverController.getInstance();
	        var observer = new ResizeObserverSPI(callback, controller, this);
	        observers.set(this, observer);
	    }
	    return ResizeObserver;
	}());
	// Expose public methods of ResizeObserver.
	[
	    'observe',
	    'unobserve',
	    'disconnect'
	].forEach(function (method) {
	    ResizeObserver.prototype[method] = function () {
	        var _a;
	        return (_a = observers.get(this))[method].apply(_a, arguments);
	    };
	});

	var index = (function () {
	    // Export existing implementation if available.
	    if (typeof global$1$1.ResizeObserver !== 'undefined') {
	        return global$1$1.ResizeObserver;
	    }
	    return ResizeObserver;
	})();

	function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$6(this, result); }; }

	function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var INTERNAL_PREFIX_KEY = 'rc-observer-key'; // Still need to be compatible with React 15, we use class component here

	var ReactResizeObserver =
	/** @class */
	function () {
	  var ReactResizeObserver = /*#__PURE__*/function (_React$Component) {
	    _inherits$6(ReactResizeObserver, _React$Component);

	    var _super = _createSuper$1(ReactResizeObserver);

	    function ReactResizeObserver() {
	      var _this;

	      _classCallCheck$6(this, ReactResizeObserver);

	      _this = _super.apply(this, arguments);
	      _this.resizeObserver = null;
	      _this.childNode = null;
	      _this.currentElement = null;
	      _this.state = {
	        width: 0,
	        height: 0
	      };

	      _this.onResize = function (entries) {
	        var onResize = _this.props.onResize;
	        var target = entries[0].target;

	        var _target$getBoundingCl = target.getBoundingClientRect(),
	            width = _target$getBoundingCl.width,
	            height = _target$getBoundingCl.height;

	        var offsetWidth = target.offsetWidth,
	            offsetHeight = target.offsetHeight;
	        /**
	         * Resize observer trigger when content size changed.
	         * In most case we just care about element size,
	         * let's use `boundary` instead of `contentRect` here to avoid shaking.
	         */

	        var fixedWidth = Math.floor(width);
	        var fixedHeight = Math.floor(height);

	        if (_this.state.width !== fixedWidth || _this.state.height !== fixedHeight) {
	          var size = {
	            width: fixedWidth,
	            height: fixedHeight
	          };

	          _this.setState(size);

	          if (onResize) {
	            onResize(_objectSpread(_objectSpread({}, size), {}, {
	              offsetWidth: offsetWidth,
	              offsetHeight: offsetHeight
	            }));
	          }
	        }
	      };

	      _this.setChildNode = function (node) {
	        _this.childNode = node;
	      };

	      return _this;
	    }

	    _createClass$1(ReactResizeObserver, [{
	      key: "componentDidMount",
	      value: function componentDidMount() {
	        this.onComponentUpdated();
	      }
	    }, {
	      key: "componentDidUpdate",
	      value: function componentDidUpdate() {
	        this.onComponentUpdated();
	      }
	    }, {
	      key: "componentWillUnmount",
	      value: function componentWillUnmount() {
	        this.destroyObserver();
	      }
	    }, {
	      key: "onComponentUpdated",
	      value: function onComponentUpdated() {
	        var disabled = this.props.disabled; // Unregister if disabled

	        if (disabled) {
	          this.destroyObserver();
	          return;
	        } // Unregister if element changed


	        var element = findDOMNode(this.childNode || this);
	        var elementChanged = element !== this.currentElement;

	        if (elementChanged) {
	          this.destroyObserver();
	          this.currentElement = element;
	        }

	        if (!this.resizeObserver && element) {
	          this.resizeObserver = new index(this.onResize);
	          this.resizeObserver.observe(element);
	        }
	      }
	    }, {
	      key: "destroyObserver",
	      value: function destroyObserver() {
	        if (this.resizeObserver) {
	          this.resizeObserver.disconnect();
	          this.resizeObserver = null;
	        }
	      }
	    }, {
	      key: "render",
	      value: function render() {
	        var children = this.props.children;
	        var childNodes = toArray(children);

	        if (childNodes.length > 1) {
	          warningOnce(false, 'Find more than one child node with `children` in ResizeObserver. Will only observe first one.');
	        } else if (childNodes.length === 0) {
	          warningOnce(false, '`children` of ResizeObserver is empty. Nothing is in observe.');
	          return null;
	        }

	        var childNode = childNodes[0];

	        if (react.isValidElement(childNode) && supportRef(childNode)) {
	          var ref = childNode.ref;
	          childNodes[0] = react.cloneElement(childNode, {
	            ref: composeRef(ref, this.setChildNode)
	          });
	        }

	        return childNodes.length === 1 ? childNodes[0] : childNodes.map(function (node, index) {
	          if (!react.isValidElement(node) || 'key' in node && node.key !== null) {
	            return node;
	          }

	          return react.cloneElement(node, {
	            key: "".concat(INTERNAL_PREFIX_KEY, "-").concat(index)
	          });
	        });
	      }
	    }]);

	    return ReactResizeObserver;
	  }(react.Component);

	  ReactResizeObserver.displayName = 'ResizeObserver';
	  return ReactResizeObserver;
	}();

	function _objectWithoutProperties$1(source, excluded) {
	  if (source == null) return {};
	  var target = _objectWithoutPropertiesLoose(source, excluded);
	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	var HOOK_MARK = 'RC_FORM_INTERNAL_HOOKS'; // eslint-disable-next-line @typescript-eslint/no-explicit-any

	var warningFunc = function warningFunc() {
	  warningOnce(false, 'Can not find FormContext. Please make sure you wrap Field under Form.');
	};

	var Context = react.createContext({
	  getFieldValue: warningFunc,
	  getFieldsValue: warningFunc,
	  getFieldError: warningFunc,
	  getFieldsError: warningFunc,
	  isFieldsTouched: warningFunc,
	  isFieldTouched: warningFunc,
	  isFieldValidating: warningFunc,
	  isFieldsValidating: warningFunc,
	  resetFields: warningFunc,
	  setFields: warningFunc,
	  setFieldsValue: warningFunc,
	  validateFields: warningFunc,
	  submit: warningFunc,
	  getInternalHooks: function getInternalHooks() {
	    warningFunc();
	    return {
	      dispatch: warningFunc,
	      registerField: warningFunc,
	      useSubscribe: warningFunc,
	      setInitialValues: warningFunc,
	      setCallbacks: warningFunc,
	      getFields: warningFunc,
	      setValidateMessages: warningFunc,
	      setPreserve: warningFunc
	    };
	  }
	});

	function toArray$1(value) {
	  if (value === undefined || value === null) {
	    return [];
	  }

	  return Array.isArray(value) ? value : [value];
	}

	var regenerator = runtime_1;

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _extends$5() {
	  _extends$5 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$5.apply(this, arguments);
	}

	function _inheritsLoose$1(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	function _getPrototypeOf$1(o) {
	  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$1(o);
	}

	function _setPrototypeOf$1(o, p) {
	  _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$1(o, p);
	}

	function _isNativeReflectConstruct$2() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct(Parent, args, Class) {
	  if (_isNativeReflectConstruct$2()) {
	    _construct = Reflect.construct;
	  } else {
	    _construct = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) _setPrototypeOf$1(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct.apply(null, arguments);
	}

	function _isNativeFunction(fn) {
	  return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}

	function _wrapNativeSuper(Class) {
	  var _cache = typeof Map === "function" ? new Map() : undefined;

	  _wrapNativeSuper = function _wrapNativeSuper(Class) {
	    if (Class === null || !_isNativeFunction(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return _construct(Class, arguments, _getPrototypeOf$1(this).constructor);
	    }

	    Wrapper.prototype = Object.create(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return _setPrototypeOf$1(Wrapper, Class);
	  };

	  return _wrapNativeSuper(Class);
	}

	/* eslint no-console:0 */
	var formatRegExp = /%[sdj%]/g;
	var warning$5 = function warning() {}; // don't print warning message when in production env or node runtime

	if (typeof process$3 !== 'undefined' && process$3.env && "development" !== 'production' && typeof window !== 'undefined' && typeof document !== 'undefined') {
	  warning$5 = function warning(type, errors) {
	    if (typeof console !== 'undefined' && console.warn) {
	      if (errors.every(function (e) {
	        return typeof e === 'string';
	      })) {
	        console.warn(type, errors);
	      }
	    }
	  };
	}

	function convertFieldsError(errors) {
	  if (!errors || !errors.length) return null;
	  var fields = {};
	  errors.forEach(function (error) {
	    var field = error.field;
	    fields[field] = fields[field] || [];
	    fields[field].push(error);
	  });
	  return fields;
	}
	function format() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  var i = 1;
	  var f = args[0];
	  var len = args.length;

	  if (typeof f === 'function') {
	    return f.apply(null, args.slice(1));
	  }

	  if (typeof f === 'string') {
	    var str = String(f).replace(formatRegExp, function (x) {
	      if (x === '%%') {
	        return '%';
	      }

	      if (i >= len) {
	        return x;
	      }

	      switch (x) {
	        case '%s':
	          return String(args[i++]);

	        case '%d':
	          return Number(args[i++]);

	        case '%j':
	          try {
	            return JSON.stringify(args[i++]);
	          } catch (_) {
	            return '[Circular]';
	          }

	          break;

	        default:
	          return x;
	      }
	    });
	    return str;
	  }

	  return f;
	}

	function isNativeStringType(type) {
	  return type === 'string' || type === 'url' || type === 'hex' || type === 'email' || type === 'date' || type === 'pattern';
	}

	function isEmptyValue(value, type) {
	  if (value === undefined || value === null) {
	    return true;
	  }

	  if (type === 'array' && Array.isArray(value) && !value.length) {
	    return true;
	  }

	  if (isNativeStringType(type) && typeof value === 'string' && !value) {
	    return true;
	  }

	  return false;
	}

	function asyncParallelArray(arr, func, callback) {
	  var results = [];
	  var total = 0;
	  var arrLength = arr.length;

	  function count(errors) {
	    results.push.apply(results, errors);
	    total++;

	    if (total === arrLength) {
	      callback(results);
	    }
	  }

	  arr.forEach(function (a) {
	    func(a, count);
	  });
	}

	function asyncSerialArray(arr, func, callback) {
	  var index = 0;
	  var arrLength = arr.length;

	  function next(errors) {
	    if (errors && errors.length) {
	      callback(errors);
	      return;
	    }

	    var original = index;
	    index = index + 1;

	    if (original < arrLength) {
	      func(arr[original], next);
	    } else {
	      callback([]);
	    }
	  }

	  next([]);
	}

	function flattenObjArr(objArr) {
	  var ret = [];
	  Object.keys(objArr).forEach(function (k) {
	    ret.push.apply(ret, objArr[k]);
	  });
	  return ret;
	}

	var AsyncValidationError = /*#__PURE__*/function (_Error) {
	  _inheritsLoose$1(AsyncValidationError, _Error);

	  function AsyncValidationError(errors, fields) {
	    var _this;

	    _this = _Error.call(this, 'Async Validation Error') || this;
	    _this.errors = errors;
	    _this.fields = fields;
	    return _this;
	  }

	  return AsyncValidationError;
	}( /*#__PURE__*/_wrapNativeSuper(Error));
	function asyncMap(objArr, option, func, callback) {
	  if (option.first) {
	    var _pending = new Promise(function (resolve, reject) {
	      var next = function next(errors) {
	        callback(errors);
	        return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve();
	      };

	      var flattenArr = flattenObjArr(objArr);
	      asyncSerialArray(flattenArr, func, next);
	    });

	    _pending["catch"](function (e) {
	      return e;
	    });

	    return _pending;
	  }

	  var firstFields = option.firstFields || [];

	  if (firstFields === true) {
	    firstFields = Object.keys(objArr);
	  }

	  var objArrKeys = Object.keys(objArr);
	  var objArrLength = objArrKeys.length;
	  var total = 0;
	  var results = [];
	  var pending = new Promise(function (resolve, reject) {
	    var next = function next(errors) {
	      results.push.apply(results, errors);
	      total++;

	      if (total === objArrLength) {
	        callback(results);
	        return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve();
	      }
	    };

	    if (!objArrKeys.length) {
	      callback(results);
	      resolve();
	    }

	    objArrKeys.forEach(function (key) {
	      var arr = objArr[key];

	      if (firstFields.indexOf(key) !== -1) {
	        asyncSerialArray(arr, func, next);
	      } else {
	        asyncParallelArray(arr, func, next);
	      }
	    });
	  });
	  pending["catch"](function (e) {
	    return e;
	  });
	  return pending;
	}
	function complementError(rule) {
	  return function (oe) {
	    if (oe && oe.message) {
	      oe.field = oe.field || rule.fullField;
	      return oe;
	    }

	    return {
	      message: typeof oe === 'function' ? oe() : oe,
	      field: oe.field || rule.fullField
	    };
	  };
	}
	function deepMerge(target, source) {
	  if (source) {
	    for (var s in source) {
	      if (source.hasOwnProperty(s)) {
	        var value = source[s];

	        if (typeof value === 'object' && typeof target[s] === 'object') {
	          target[s] = _extends$5(_extends$5({}, target[s]), value);
	        } else {
	          target[s] = value;
	        }
	      }
	    }
	  }

	  return target;
	}

	/**
	 *  Rule for validating required fields.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function required(rule, value, source, errors, options, type) {
	  if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type || rule.type))) {
	    errors.push(format(options.messages.required, rule.fullField));
	  }
	}

	/**
	 *  Rule for validating whitespace.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function whitespace(rule, value, source, errors, options) {
	  if (/^\s+$/.test(value) || value === '') {
	    errors.push(format(options.messages.whitespace, rule.fullField));
	  }
	}

	/* eslint max-len:0 */

	var pattern = {
	  // http://emailregex.com/
	  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
	  url: new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", 'i'),
	  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
	};
	var types = {
	  integer: function integer(value) {
	    return types.number(value) && parseInt(value, 10) === value;
	  },
	  "float": function float(value) {
	    return types.number(value) && !types.integer(value);
	  },
	  array: function array(value) {
	    return Array.isArray(value);
	  },
	  regexp: function regexp(value) {
	    if (value instanceof RegExp) {
	      return true;
	    }

	    try {
	      return !!new RegExp(value);
	    } catch (e) {
	      return false;
	    }
	  },
	  date: function date(value) {
	    return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function' && !isNaN(value.getTime());
	  },
	  number: function number(value) {
	    if (isNaN(value)) {
	      return false;
	    }

	    return typeof value === 'number';
	  },
	  object: function object(value) {
	    return typeof value === 'object' && !types.array(value);
	  },
	  method: function method(value) {
	    return typeof value === 'function';
	  },
	  email: function email(value) {
	    return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;
	  },
	  url: function url(value) {
	    return typeof value === 'string' && !!value.match(pattern.url);
	  },
	  hex: function hex(value) {
	    return typeof value === 'string' && !!value.match(pattern.hex);
	  }
	};
	/**
	 *  Rule for validating the type of a value.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function type(rule, value, source, errors, options) {
	  if (rule.required && value === undefined) {
	    required(rule, value, source, errors, options);
	    return;
	  }

	  var custom = ['integer', 'float', 'array', 'regexp', 'object', 'method', 'email', 'number', 'date', 'url', 'hex'];
	  var ruleType = rule.type;

	  if (custom.indexOf(ruleType) > -1) {
	    if (!types[ruleType](value)) {
	      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
	    } // straight typeof check

	  } else if (ruleType && typeof value !== rule.type) {
	    errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
	  }
	}

	/**
	 *  Rule for validating minimum and maximum allowed values.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function range(rule, value, source, errors, options) {
	  var len = typeof rule.len === 'number';
	  var min = typeof rule.min === 'number';
	  var max = typeof rule.max === 'number'; // æ­£åå¹éç ç¹èå´ä»U+010000ä¸ç´å°U+10FFFFçæå­ï¼è¡¥åå¹³é¢Supplementary Planeï¼

	  var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	  var val = value;
	  var key = null;
	  var num = typeof value === 'number';
	  var str = typeof value === 'string';
	  var arr = Array.isArray(value);

	  if (num) {
	    key = 'number';
	  } else if (str) {
	    key = 'string';
	  } else if (arr) {
	    key = 'array';
	  } // if the value is not of a supported type for range validation
	  // the validation rule rule should use the
	  // type property to also test for a particular type


	  if (!key) {
	    return false;
	  }

	  if (arr) {
	    val = value.length;
	  }

	  if (str) {
	    // å¤çç ç¹å¤§äºU+010000çæå­lengthå±æ§ä¸åç¡®çbugï¼å¦"ð ®·ð ®·ð ®·".lenght !== 3
	    val = value.replace(spRegexp, '_').length;
	  }

	  if (len) {
	    if (val !== rule.len) {
	      errors.push(format(options.messages[key].len, rule.fullField, rule.len));
	    }
	  } else if (min && !max && val < rule.min) {
	    errors.push(format(options.messages[key].min, rule.fullField, rule.min));
	  } else if (max && !min && val > rule.max) {
	    errors.push(format(options.messages[key].max, rule.fullField, rule.max));
	  } else if (min && max && (val < rule.min || val > rule.max)) {
	    errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
	  }
	}

	var ENUM = 'enum';
	/**
	 *  Rule for validating a value exists in an enumerable list.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function enumerable(rule, value, source, errors, options) {
	  rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];

	  if (rule[ENUM].indexOf(value) === -1) {
	    errors.push(format(options.messages[ENUM], rule.fullField, rule[ENUM].join(', ')));
	  }
	}

	/**
	 *  Rule for validating a regular expression pattern.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function pattern$1(rule, value, source, errors, options) {
	  if (rule.pattern) {
	    if (rule.pattern instanceof RegExp) {
	      // if a RegExp instance is passed, reset `lastIndex` in case its `global`
	      // flag is accidentally set to `true`, which in a validation scenario
	      // is not necessary and the result might be misleading
	      rule.pattern.lastIndex = 0;

	      if (!rule.pattern.test(value)) {
	        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
	      }
	    } else if (typeof rule.pattern === 'string') {
	      var _pattern = new RegExp(rule.pattern);

	      if (!_pattern.test(value)) {
	        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
	      }
	    }
	  }
	}

	var rules = {
	  required: required,
	  whitespace: whitespace,
	  type: type,
	  range: range,
	  "enum": enumerable,
	  pattern: pattern$1
	};

	/**
	 *  Performs validation for string types.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function string(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (isEmptyValue(value, 'string') && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options, 'string');

	    if (!isEmptyValue(value, 'string')) {
	      rules.type(rule, value, source, errors, options);
	      rules.range(rule, value, source, errors, options);
	      rules.pattern(rule, value, source, errors, options);

	      if (rule.whitespace === true) {
	        rules.whitespace(rule, value, source, errors, options);
	      }
	    }
	  }

	  callback(errors);
	}

	/**
	 *  Validates a function.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function method(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options);

	    if (value !== undefined) {
	      rules.type(rule, value, source, errors, options);
	    }
	  }

	  callback(errors);
	}

	/**
	 *  Validates a number.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function number(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (value === '') {
	      value = undefined;
	    }

	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options);

	    if (value !== undefined) {
	      rules.type(rule, value, source, errors, options);
	      rules.range(rule, value, source, errors, options);
	    }
	  }

	  callback(errors);
	}

	/**
	 *  Validates a boolean.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function _boolean(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options);

	    if (value !== undefined) {
	      rules.type(rule, value, source, errors, options);
	    }
	  }

	  callback(errors);
	}

	/**
	 *  Validates the regular expression type.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function regexp(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options);

	    if (!isEmptyValue(value)) {
	      rules.type(rule, value, source, errors, options);
	    }
	  }

	  callback(errors);
	}

	/**
	 *  Validates a number is an integer.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function integer(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options);

	    if (value !== undefined) {
	      rules.type(rule, value, source, errors, options);
	      rules.range(rule, value, source, errors, options);
	    }
	  }

	  callback(errors);
	}

	/**
	 *  Validates a number is a floating point number.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function floatFn(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options);

	    if (value !== undefined) {
	      rules.type(rule, value, source, errors, options);
	      rules.range(rule, value, source, errors, options);
	    }
	  }

	  callback(errors);
	}

	/**
	 *  Validates an array.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function array(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (isEmptyValue(value, 'array') && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options, 'array');

	    if (!isEmptyValue(value, 'array')) {
	      rules.type(rule, value, source, errors, options);
	      rules.range(rule, value, source, errors, options);
	    }
	  }

	  callback(errors);
	}

	/**
	 *  Validates an object.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function object(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options);

	    if (value !== undefined) {
	      rules.type(rule, value, source, errors, options);
	    }
	  }

	  callback(errors);
	}

	var ENUM$1 = 'enum';
	/**
	 *  Validates an enumerable list.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function enumerable$1(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options);

	    if (value !== undefined) {
	      rules[ENUM$1](rule, value, source, errors, options);
	    }
	  }

	  callback(errors);
	}

	/**
	 *  Validates a regular expression pattern.
	 *
	 *  Performs validation when a rule only contains
	 *  a pattern property but is not declared as a string type.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function pattern$2(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (isEmptyValue(value, 'string') && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options);

	    if (!isEmptyValue(value, 'string')) {
	      rules.pattern(rule, value, source, errors, options);
	    }
	  }

	  callback(errors);
	}

	function date(rule, value, callback, source, options) {
	  // console.log('integer rule called %j', rule);
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field); // console.log('validate on %s value', value);

	  if (validate) {
	    if (isEmptyValue(value, 'date') && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options);

	    if (!isEmptyValue(value, 'date')) {
	      var dateObject;

	      if (value instanceof Date) {
	        dateObject = value;
	      } else {
	        dateObject = new Date(value);
	      }

	      rules.type(rule, dateObject, source, errors, options);

	      if (dateObject) {
	        rules.range(rule, dateObject.getTime(), source, errors, options);
	      }
	    }
	  }

	  callback(errors);
	}

	function required$1(rule, value, callback, source, options) {
	  var errors = [];
	  var type = Array.isArray(value) ? 'array' : typeof value;
	  rules.required(rule, value, source, errors, options, type);
	  callback(errors);
	}

	function type$1(rule, value, callback, source, options) {
	  var ruleType = rule.type;
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (isEmptyValue(value, ruleType) && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options, ruleType);

	    if (!isEmptyValue(value, ruleType)) {
	      rules.type(rule, value, source, errors, options);
	    }
	  }

	  callback(errors);
	}

	/**
	 *  Performs validation for any type.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */

	function any(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }

	    rules.required(rule, value, source, errors, options);
	  }

	  callback(errors);
	}

	var validators = {
	  string: string,
	  method: method,
	  number: number,
	  "boolean": _boolean,
	  regexp: regexp,
	  integer: integer,
	  "float": floatFn,
	  array: array,
	  object: object,
	  "enum": enumerable$1,
	  pattern: pattern$2,
	  date: date,
	  url: type$1,
	  hex: type$1,
	  email: type$1,
	  required: required$1,
	  any: any
	};

	function newMessages() {
	  return {
	    "default": 'Validation error on field %s',
	    required: '%s is required',
	    "enum": '%s must be one of %s',
	    whitespace: '%s cannot be empty',
	    date: {
	      format: '%s date %s is invalid for format %s',
	      parse: '%s date could not be parsed, %s is invalid ',
	      invalid: '%s date %s is invalid'
	    },
	    types: {
	      string: '%s is not a %s',
	      method: '%s is not a %s (function)',
	      array: '%s is not an %s',
	      object: '%s is not an %s',
	      number: '%s is not a %s',
	      date: '%s is not a %s',
	      "boolean": '%s is not a %s',
	      integer: '%s is not an %s',
	      "float": '%s is not a %s',
	      regexp: '%s is not a valid %s',
	      email: '%s is not a valid %s',
	      url: '%s is not a valid %s',
	      hex: '%s is not a valid %s'
	    },
	    string: {
	      len: '%s must be exactly %s characters',
	      min: '%s must be at least %s characters',
	      max: '%s cannot be longer than %s characters',
	      range: '%s must be between %s and %s characters'
	    },
	    number: {
	      len: '%s must equal %s',
	      min: '%s cannot be less than %s',
	      max: '%s cannot be greater than %s',
	      range: '%s must be between %s and %s'
	    },
	    array: {
	      len: '%s must be exactly %s in length',
	      min: '%s cannot be less than %s in length',
	      max: '%s cannot be greater than %s in length',
	      range: '%s must be between %s and %s in length'
	    },
	    pattern: {
	      mismatch: '%s value %s does not match pattern %s'
	    },
	    clone: function clone() {
	      var cloned = JSON.parse(JSON.stringify(this));
	      cloned.clone = this.clone;
	      return cloned;
	    }
	  };
	}
	var messages = newMessages();

	/**
	 *  Encapsulates a validation schema.
	 *
	 *  @param descriptor An object declaring validation rules
	 *  for this schema.
	 */

	function Schema(descriptor) {
	  this.rules = null;
	  this._messages = messages;
	  this.define(descriptor);
	}

	Schema.prototype = {
	  messages: function messages(_messages) {
	    if (_messages) {
	      this._messages = deepMerge(newMessages(), _messages);
	    }

	    return this._messages;
	  },
	  define: function define(rules) {
	    if (!rules) {
	      throw new Error('Cannot configure a schema with no rules');
	    }

	    if (typeof rules !== 'object' || Array.isArray(rules)) {
	      throw new Error('Rules must be an object');
	    }

	    this.rules = {};
	    var z;
	    var item;

	    for (z in rules) {
	      if (rules.hasOwnProperty(z)) {
	        item = rules[z];
	        this.rules[z] = Array.isArray(item) ? item : [item];
	      }
	    }
	  },
	  validate: function validate(source_, o, oc) {
	    var _this = this;

	    if (o === void 0) {
	      o = {};
	    }

	    if (oc === void 0) {
	      oc = function oc() {};
	    }

	    var source = source_;
	    var options = o;
	    var callback = oc;

	    if (typeof options === 'function') {
	      callback = options;
	      options = {};
	    }

	    if (!this.rules || Object.keys(this.rules).length === 0) {
	      if (callback) {
	        callback();
	      }

	      return Promise.resolve();
	    }

	    function complete(results) {
	      var i;
	      var errors = [];
	      var fields = {};

	      function add(e) {
	        if (Array.isArray(e)) {
	          var _errors;

	          errors = (_errors = errors).concat.apply(_errors, e);
	        } else {
	          errors.push(e);
	        }
	      }

	      for (i = 0; i < results.length; i++) {
	        add(results[i]);
	      }

	      if (!errors.length) {
	        errors = null;
	        fields = null;
	      } else {
	        fields = convertFieldsError(errors);
	      }

	      callback(errors, fields);
	    }

	    if (options.messages) {
	      var messages$1 = this.messages();

	      if (messages$1 === messages) {
	        messages$1 = newMessages();
	      }

	      deepMerge(messages$1, options.messages);
	      options.messages = messages$1;
	    } else {
	      options.messages = this.messages();
	    }

	    var arr;
	    var value;
	    var series = {};
	    var keys = options.keys || Object.keys(this.rules);
	    keys.forEach(function (z) {
	      arr = _this.rules[z];
	      value = source[z];
	      arr.forEach(function (r) {
	        var rule = r;

	        if (typeof rule.transform === 'function') {
	          if (source === source_) {
	            source = _extends$5({}, source);
	          }

	          value = source[z] = rule.transform(value);
	        }

	        if (typeof rule === 'function') {
	          rule = {
	            validator: rule
	          };
	        } else {
	          rule = _extends$5({}, rule);
	        }

	        rule.validator = _this.getValidationMethod(rule);
	        rule.field = z;
	        rule.fullField = rule.fullField || z;
	        rule.type = _this.getType(rule);

	        if (!rule.validator) {
	          return;
	        }

	        series[z] = series[z] || [];
	        series[z].push({
	          rule: rule,
	          value: value,
	          source: source,
	          field: z
	        });
	      });
	    });
	    var errorFields = {};
	    return asyncMap(series, options, function (data, doIt) {
	      var rule = data.rule;
	      var deep = (rule.type === 'object' || rule.type === 'array') && (typeof rule.fields === 'object' || typeof rule.defaultField === 'object');
	      deep = deep && (rule.required || !rule.required && data.value);
	      rule.field = data.field;

	      function addFullfield(key, schema) {
	        return _extends$5(_extends$5({}, schema), {}, {
	          fullField: rule.fullField + "." + key
	        });
	      }

	      function cb(e) {
	        if (e === void 0) {
	          e = [];
	        }

	        var errors = e;

	        if (!Array.isArray(errors)) {
	          errors = [errors];
	        }

	        if (!options.suppressWarning && errors.length) {
	          Schema.warning('async-validator:', errors);
	        }

	        if (errors.length && rule.message) {
	          errors = [].concat(rule.message);
	        }

	        errors = errors.map(complementError(rule));

	        if (options.first && errors.length) {
	          errorFields[rule.field] = 1;
	          return doIt(errors);
	        }

	        if (!deep) {
	          doIt(errors);
	        } else {
	          // if rule is required but the target object
	          // does not exist fail at the rule level and don't
	          // go deeper
	          if (rule.required && !data.value) {
	            if (rule.message) {
	              errors = [].concat(rule.message).map(complementError(rule));
	            } else if (options.error) {
	              errors = [options.error(rule, format(options.messages.required, rule.field))];
	            }

	            return doIt(errors);
	          }

	          var fieldsSchema = {};

	          if (rule.defaultField) {
	            for (var k in data.value) {
	              if (data.value.hasOwnProperty(k)) {
	                fieldsSchema[k] = rule.defaultField;
	              }
	            }
	          }

	          fieldsSchema = _extends$5(_extends$5({}, fieldsSchema), data.rule.fields);

	          for (var f in fieldsSchema) {
	            if (fieldsSchema.hasOwnProperty(f)) {
	              var fieldSchema = Array.isArray(fieldsSchema[f]) ? fieldsSchema[f] : [fieldsSchema[f]];
	              fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));
	            }
	          }

	          var schema = new Schema(fieldsSchema);
	          schema.messages(options.messages);

	          if (data.rule.options) {
	            data.rule.options.messages = options.messages;
	            data.rule.options.error = options.error;
	          }

	          schema.validate(data.value, data.rule.options || options, function (errs) {
	            var finalErrors = [];

	            if (errors && errors.length) {
	              finalErrors.push.apply(finalErrors, errors);
	            }

	            if (errs && errs.length) {
	              finalErrors.push.apply(finalErrors, errs);
	            }

	            doIt(finalErrors.length ? finalErrors : null);
	          });
	        }
	      }

	      var res;

	      if (rule.asyncValidator) {
	        res = rule.asyncValidator(rule, data.value, cb, data.source, options);
	      } else if (rule.validator) {
	        res = rule.validator(rule, data.value, cb, data.source, options);

	        if (res === true) {
	          cb();
	        } else if (res === false) {
	          cb(rule.message || rule.field + " fails");
	        } else if (res instanceof Array) {
	          cb(res);
	        } else if (res instanceof Error) {
	          cb(res.message);
	        }
	      }

	      if (res && res.then) {
	        res.then(function () {
	          return cb();
	        }, function (e) {
	          return cb(e);
	        });
	      }
	    }, function (results) {
	      complete(results);
	    });
	  },
	  getType: function getType(rule) {
	    if (rule.type === undefined && rule.pattern instanceof RegExp) {
	      rule.type = 'pattern';
	    }

	    if (typeof rule.validator !== 'function' && rule.type && !validators.hasOwnProperty(rule.type)) {
	      throw new Error(format('Unknown rule type %s', rule.type));
	    }

	    return rule.type || 'string';
	  },
	  getValidationMethod: function getValidationMethod(rule) {
	    if (typeof rule.validator === 'function') {
	      return rule.validator;
	    }

	    var keys = Object.keys(rule);
	    var messageIndex = keys.indexOf('message');

	    if (messageIndex !== -1) {
	      keys.splice(messageIndex, 1);
	    }

	    if (keys.length === 1 && keys[0] === 'required') {
	      return validators.required;
	    }

	    return validators[this.getType(rule)] || false;
	  }
	};

	Schema.register = function register(type, validator) {
	  if (typeof validator !== 'function') {
	    throw new Error('Cannot register a validator by type, validator is not a function');
	  }

	  validators[type] = validator;
	};

	Schema.warning = warning$5;
	Schema.messages = messages;
	Schema.validators = validators;

	function get$2(entity, path) {
	  var current = entity;

	  for (var i = 0; i < path.length; i += 1) {
	    if (current === null || current === undefined) {
	      return undefined;
	    }

	    current = current[path[i]];
	  }

	  return current;
	}

	function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$3(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _toConsumableArray$1(arr) { return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1(); }

	function _nonIterableSpread$1() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

	function _arrayWithoutHoles$1(arr) { if (Array.isArray(arr)) return _arrayLikeToArray$1(arr); }

	function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableRest(); }

	function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

	function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

	function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

	function _iterableToArray$1(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

	function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

	function set$2(entity, paths, value) {
	  if (!paths.length) {
	    return value;
	  }

	  var _paths = _toArray(paths),
	      path = _paths[0],
	      restPath = _paths.slice(1);

	  var clone;

	  if (!entity && typeof path === 'number') {
	    clone = [];
	  } else if (Array.isArray(entity)) {
	    clone = _toConsumableArray$1(entity);
	  } else {
	    clone = _objectSpread$1({}, entity);
	  }

	  clone[path] = set$2(clone[path], restPath, value);
	  return clone;
	}

	function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	/**
	 * Convert name to internal supported format.
	 * This function should keep since we still thinking if need support like `a.b.c` format.
	 * 'a' => ['a']
	 * 123 => [123]
	 * ['a', 123] => ['a', 123]
	 */

	function getNamePath(path) {
	  return toArray$1(path);
	}
	function getValue(store, namePath) {
	  var value = get$2(store, namePath);
	  return value;
	}
	function setValue(store, namePath, value) {
	  var newStore = set$2(store, namePath, value);
	  return newStore;
	}
	function cloneByNamePathList(store, namePathList) {
	  var newStore = {};
	  namePathList.forEach(function (namePath) {
	    var value = getValue(store, namePath);
	    newStore = setValue(newStore, namePath, value);
	  });
	  return newStore;
	}
	function containsNamePath(namePathList, namePath) {
	  return namePathList && namePathList.some(function (path) {
	    return matchNamePath(path, namePath);
	  });
	}

	function isObject(obj) {
	  return _typeof(obj) === 'object' && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;
	}
	/**
	 * Copy values into store and return a new values object
	 * ({ a: 1, b: { c: 2 } }, { a: 4, b: { d: 5 } }) => { a: 4, b: { c: 2, d: 5 } }
	 */


	function internalSetValues(store, values) {
	  var newStore = Array.isArray(store) ? _toConsumableArray(store) : _objectSpread$2({}, store);

	  if (!values) {
	    return newStore;
	  }

	  Object.keys(values).forEach(function (key) {
	    var prevValue = newStore[key];
	    var value = values[key]; // If both are object (but target is not array), we use recursion to set deep value

	    var recursive = isObject(prevValue) && isObject(value);
	    newStore[key] = recursive ? internalSetValues(prevValue, value || {}) : value;
	  });
	  return newStore;
	}

	function setValues(store) {
	  for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    restValues[_key - 1] = arguments[_key];
	  }

	  return restValues.reduce(function (current, newStore) {
	    return internalSetValues(current, newStore);
	  }, store);
	}
	function matchNamePath(namePath, changedNamePath) {
	  if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {
	    return false;
	  }

	  return namePath.every(function (nameUnit, i) {
	    return changedNamePath[i] === nameUnit;
	  });
	}
	function isSimilar(source, target) {
	  if (source === target) {
	    return true;
	  }

	  if (!source && target || source && !target) {
	    return false;
	  }

	  if (!source || !target || _typeof(source) !== 'object' || _typeof(target) !== 'object') {
	    return false;
	  }

	  var sourceKeys = Object.keys(source);
	  var targetKeys = Object.keys(target);
	  var keys = new Set([].concat(_toConsumableArray(sourceKeys), _toConsumableArray(targetKeys)));
	  return _toConsumableArray(keys).every(function (key) {
	    var sourceValue = source[key];
	    var targetValue = target[key];

	    if (typeof sourceValue === 'function' && typeof targetValue === 'function') {
	      return true;
	    }

	    return sourceValue === targetValue;
	  });
	}
	function defaultGetValueFromEvent(valuePropName) {
	  var event = arguments.length <= 1 ? undefined : arguments[1];

	  if (event && event.target && valuePropName in event.target) {
	    return event.target[valuePropName];
	  }

	  return event;
	}
	/**
	 * Moves an array item from one position in an array to another.
	 *
	 * Note: This is a pure function so a new array will be returned, instead
	 * of altering the array argument.
	 *
	 * @param array         Array in which to move an item.         (required)
	 * @param moveIndex     The index of the item to move.          (required)
	 * @param toIndex       The index to move item at moveIndex to. (required)
	 */

	function move(array, moveIndex, toIndex) {
	  var length = array.length;

	  if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) {
	    return array;
	  }

	  var item = array[moveIndex];
	  var diff = moveIndex - toIndex;

	  if (diff > 0) {
	    // move left
	    return [].concat(_toConsumableArray(array.slice(0, toIndex)), [item], _toConsumableArray(array.slice(toIndex, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, length)));
	  }

	  if (diff < 0) {
	    // move right
	    return [].concat(_toConsumableArray(array.slice(0, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array.slice(toIndex + 1, length)));
	  }

	  return array;
	}

	var typeTemplate = "'${name}' is not a valid ${type}";
	var defaultValidateMessages = {
	  default: "Validation error on field '${name}'",
	  required: "'${name}' is required",
	  enum: "'${name}' must be one of [${enum}]",
	  whitespace: "'${name}' cannot be empty",
	  date: {
	    format: "'${name}' is invalid for format date",
	    parse: "'${name}' could not be parsed as date",
	    invalid: "'${name}' is invalid date"
	  },
	  types: {
	    string: typeTemplate,
	    method: typeTemplate,
	    array: typeTemplate,
	    object: typeTemplate,
	    number: typeTemplate,
	    date: typeTemplate,
	    boolean: typeTemplate,
	    integer: typeTemplate,
	    float: typeTemplate,
	    regexp: typeTemplate,
	    email: typeTemplate,
	    url: typeTemplate,
	    hex: typeTemplate
	  },
	  string: {
	    len: "'${name}' must be exactly ${len} characters",
	    min: "'${name}' must be at least ${min} characters",
	    max: "'${name}' cannot be longer than ${max} characters",
	    range: "'${name}' must be between ${min} and ${max} characters"
	  },
	  number: {
	    len: "'${name}' must equal ${len}",
	    min: "'${name}' cannot be less than ${min}",
	    max: "'${name}' cannot be greater than ${max}",
	    range: "'${name}' must be between ${min} and ${max}"
	  },
	  array: {
	    len: "'${name}' must be exactly ${len} in length",
	    min: "'${name}' cannot be less than ${min} in length",
	    max: "'${name}' cannot be greater than ${max} in length",
	    range: "'${name}' must be between ${min} and ${max} in length"
	  },
	  pattern: {
	    mismatch: "'${name}' does not match pattern ${pattern}"
	  }
	};

	function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	var AsyncValidator = Schema;
	/**
	 * Replace with template.
	 *   `I'm ${name}` + { name: 'bamboo' } = I'm bamboo
	 */

	function replaceMessage(template, kv) {
	  return template.replace(/\$\{\w+\}/g, function (str) {
	    var key = str.slice(2, -1);
	    return kv[key];
	  });
	}
	/**
	 * We use `async-validator` to validate rules. So have to hot replace the message with validator.
	 * { required: '${name} is required' } => { required: () => 'field is required' }
	 */


	function convertMessages(messages, name, rule, messageVariables) {
	  var kv = _objectSpread$3({}, rule, {
	    name: name,
	    enum: (rule.enum || []).join(', ')
	  });

	  var replaceFunc = function replaceFunc(template, additionalKV) {
	    return function () {
	      return replaceMessage(template, _objectSpread$3({}, kv, {}, additionalKV));
	    };
	  };
	  /* eslint-disable no-param-reassign */


	  function fillTemplate(source) {
	    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    Object.keys(source).forEach(function (ruleName) {
	      var value = source[ruleName];

	      if (typeof value === 'string') {
	        target[ruleName] = replaceFunc(value, messageVariables);
	      } else if (value && _typeof(value) === 'object') {
	        target[ruleName] = {};
	        fillTemplate(value, target[ruleName]);
	      } else {
	        target[ruleName] = value;
	      }
	    });
	    return target;
	  }
	  /* eslint-enable */


	  return fillTemplate(setValues({}, defaultValidateMessages, messages));
	}

	function validateRule(_x, _x2, _x3, _x4, _x5) {
	  return _validateRule.apply(this, arguments);
	}
	/**
	 * We use `async-validator` to validate the value.
	 * But only check one value in a time to avoid namePath validate issue.
	 */


	function _validateRule() {
	  _validateRule = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(name, value, rule, options, messageVariables) {
	    var cloneRule, subRuleField, validator, messages, result, subResults;
	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            cloneRule = _objectSpread$3({}, rule); // We should special handle array validate

	            subRuleField = null;

	            if (cloneRule && cloneRule.type === 'array' && cloneRule.defaultField) {
	              subRuleField = cloneRule.defaultField;
	              delete cloneRule.defaultField;
	            }

	            validator = new AsyncValidator(_defineProperty$2({}, name, [cloneRule]));
	            messages = convertMessages(options.validateMessages, name, cloneRule, messageVariables);
	            validator.messages(messages);
	            result = [];
	            _context.prev = 7;
	            _context.next = 10;
	            return Promise.resolve(validator.validate(_defineProperty$2({}, name, value), _objectSpread$3({}, options)));

	          case 10:
	            _context.next = 15;
	            break;

	          case 12:
	            _context.prev = 12;
	            _context.t0 = _context["catch"](7);

	            if (_context.t0.errors) {
	              result = _context.t0.errors.map(function (_ref, index) {
	                var message = _ref.message;
	                return (// Wrap ReactNode with `key`
	                  react.isValidElement(message) ? react.cloneElement(message, {
	                    key: "error_".concat(index)
	                  }) : message
	                );
	              });
	            } else {
	              console.error(_context.t0);
	              result = [messages.default()];
	            }

	          case 15:
	            if (!(!result.length && subRuleField)) {
	              _context.next = 20;
	              break;
	            }

	            _context.next = 18;
	            return Promise.all(value.map(function (subValue, i) {
	              return validateRule("".concat(name, ".").concat(i), subValue, subRuleField, options, messageVariables);
	            }));

	          case 18:
	            subResults = _context.sent;
	            return _context.abrupt("return", subResults.reduce(function (prev, errors) {
	              return [].concat(_toConsumableArray(prev), _toConsumableArray(errors));
	            }, []));

	          case 20:
	            return _context.abrupt("return", result);

	          case 21:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee, null, [[7, 12]]);
	  }));
	  return _validateRule.apply(this, arguments);
	}

	function validateRules(namePath, value, rules, options, validateFirst, messageVariables) {
	  var name = namePath.join('.'); // Fill rule with context

	  var filledRules = rules.map(function (currentRule) {
	    var originValidatorFunc = currentRule.validator;

	    if (!originValidatorFunc) {
	      return currentRule;
	    }

	    return _objectSpread$3({}, currentRule, {
	      validator: function validator(rule, val, callback) {
	        var hasPromise = false; // Wrap callback only accept when promise not provided

	        var wrappedCallback = function wrappedCallback() {
	          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	          }

	          // Wait a tick to make sure return type is a promise
	          Promise.resolve().then(function () {
	            warningOnce(!hasPromise, 'Your validator function has already return a promise. `callback` will be ignored.');

	            if (!hasPromise) {
	              callback.apply(void 0, args);
	            }
	          });
	        }; // Get promise


	        var promise = originValidatorFunc(rule, val, wrappedCallback);
	        hasPromise = promise && typeof promise.then === 'function' && typeof promise.catch === 'function';
	        /**
	         * 1. Use promise as the first priority.
	         * 2. If promise not exist, use callback with warning instead
	         */

	        warningOnce(hasPromise, '`callback` is deprecated. Please return a promise instead.');

	        if (hasPromise) {
	          promise.then(function () {
	            callback();
	          }).catch(function (err) {
	            callback(err);
	          });
	        }
	      }
	    });
	  });
	  var rulePromises = filledRules.map(function (rule) {
	    return validateRule(name, value, rule, options, messageVariables);
	  });
	  var summaryPromise = (validateFirst ? finishOnFirstFailed(rulePromises) : finishOnAllFailed(rulePromises)).then(function (errors) {
	    if (!errors.length) {
	      return [];
	    }

	    return Promise.reject(errors);
	  }); // Internal catch error to avoid console error log.

	  summaryPromise.catch(function (e) {
	    return e;
	  });
	  return summaryPromise;
	}

	function finishOnAllFailed(_x6) {
	  return _finishOnAllFailed.apply(this, arguments);
	}

	function _finishOnAllFailed() {
	  _finishOnAllFailed = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(rulePromises) {
	    return regenerator.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            return _context2.abrupt("return", Promise.all(rulePromises).then(function (errorsList) {
	              var _ref2;

	              var errors = (_ref2 = []).concat.apply(_ref2, _toConsumableArray(errorsList));

	              return errors;
	            }));

	          case 1:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	  return _finishOnAllFailed.apply(this, arguments);
	}

	function finishOnFirstFailed(_x7) {
	  return _finishOnFirstFailed.apply(this, arguments);
	}

	function _finishOnFirstFailed() {
	  _finishOnFirstFailed = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(rulePromises) {
	    var count;
	    return regenerator.wrap(function _callee3$(_context3) {
	      while (1) {
	        switch (_context3.prev = _context3.next) {
	          case 0:
	            count = 0;
	            return _context3.abrupt("return", new Promise(function (resolve) {
	              rulePromises.forEach(function (promise) {
	                promise.then(function (errors) {
	                  if (errors.length) {
	                    resolve(errors);
	                  }

	                  count += 1;

	                  if (count === rulePromises.length) {
	                    resolve([]);
	                  }
	                });
	              });
	            }));

	          case 2:
	          case "end":
	            return _context3.stop();
	        }
	      }
	    }, _callee3);
	  }));
	  return _finishOnFirstFailed.apply(this, arguments);
	}

	function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _createSuper$2(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct$3()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$6(this, result); }; }

	function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function requireUpdate(shouldUpdate, prev, next, prevValue, nextValue, info) {
	  if (typeof shouldUpdate === 'function') {
	    return shouldUpdate(prev, next, 'source' in info ? {
	      source: info.source
	    } : {});
	  }

	  return prevValue !== nextValue;
	} // We use Class instead of Hooks here since it will cost much code by using Hooks.


	var Field = /*#__PURE__*/function (_React$Component) {
	  _inherits$6(Field, _React$Component);

	  var _super = _createSuper$2(Field);

	  function Field() {
	    var _this;

	    _classCallCheck$6(this, Field);

	    _this = _super.apply(this, arguments);
	    _this.state = {
	      resetCount: 0
	    };
	    _this.cancelRegisterFunc = null;
	    _this.destroy = false;
	    /**
	     * Follow state should not management in State since it will async update by React.
	     * This makes first render of form can not get correct state value.
	     */

	    _this.touched = false;
	    /** Mark when touched & validated. Currently only used for `dependencies` */

	    _this.dirty = false;
	    _this.validatePromise = null;
	    _this.errors = [];

	    _this.cancelRegister = function () {
	      var preserve = _this.props.preserve;

	      if (_this.cancelRegisterFunc) {
	        _this.cancelRegisterFunc(preserve);
	      }

	      _this.cancelRegisterFunc = null;
	    }; // ================================== Utils ==================================


	    _this.getNamePath = function () {
	      var name = _this.props.name;
	      var _this$context$prefixN = _this.context.prefixName,
	          prefixName = _this$context$prefixN === void 0 ? [] : _this$context$prefixN;
	      return name !== undefined ? [].concat(_toConsumableArray(prefixName), _toConsumableArray(name)) : [];
	    };

	    _this.getRules = function () {
	      var _this$props$rules = _this.props.rules,
	          rules = _this$props$rules === void 0 ? [] : _this$props$rules;
	      return rules.map(function (rule) {
	        if (typeof rule === 'function') {
	          return rule(_this.context);
	        }

	        return rule;
	      });
	    };

	    _this.refresh = function () {
	      if (_this.destroy) return;
	      /**
	       * Clean up current node.
	       */

	      _this.setState(function (_ref) {
	        var resetCount = _ref.resetCount;
	        return {
	          resetCount: resetCount + 1
	        };
	      });
	    }; // ========================= Field Entity Interfaces =========================
	    // Trigger by store update. Check if need update the component


	    _this.onStoreChange = function (prevStore, namePathList, info) {
	      var _this$props = _this.props,
	          shouldUpdate = _this$props.shouldUpdate,
	          _this$props$dependenc = _this$props.dependencies,
	          dependencies = _this$props$dependenc === void 0 ? [] : _this$props$dependenc,
	          onReset = _this$props.onReset;
	      var store = info.store;

	      var namePath = _this.getNamePath();

	      var prevValue = _this.getValue(prevStore);

	      var curValue = _this.getValue(store);

	      var namePathMatch = namePathList && containsNamePath(namePathList, namePath); // `setFieldsValue` is a quick access to update related status

	      if (info.type === 'valueUpdate' && info.source === 'external' && prevValue !== curValue) {
	        _this.touched = true;
	        _this.dirty = true;
	        _this.validatePromise = null;
	        _this.errors = [];
	      }

	      switch (info.type) {
	        case 'reset':
	          if (!namePathList || namePathMatch) {
	            // Clean up state
	            _this.touched = false;
	            _this.dirty = false;
	            _this.validatePromise = null;
	            _this.errors = [];

	            if (onReset) {
	              onReset();
	            }

	            _this.refresh();

	            return;
	          }

	          break;

	        case 'setField':
	          {
	            if (namePathMatch) {
	              var data = info.data;

	              if ('touched' in data) {
	                _this.touched = data.touched;
	              }

	              if ('validating' in data && !('originRCField' in data)) {
	                _this.validatePromise = data.validating ? Promise.resolve([]) : null;
	              }

	              if ('errors' in data) {
	                _this.errors = data.errors || [];
	              }

	              _this.dirty = true;

	              _this.reRender();

	              return;
	            } // Handle update by `setField` with `shouldUpdate`


	            if (shouldUpdate && !namePath.length && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {
	              _this.reRender();

	              return;
	            }

	            break;
	          }

	        case 'dependenciesUpdate':
	          {
	            /**
	             * Trigger when marked `dependencies` updated. Related fields will all update
	             */
	            var dependencyList = dependencies.map(getNamePath);

	            if (namePathMatch || dependencyList.some(function (dependency) {
	              return containsNamePath(info.relatedFields, dependency);
	            })) {
	              _this.reRender();

	              return;
	            }

	            break;
	          }

	        default:
	          /**
	           * - If `namePath` exists in `namePathList`, means it's related value and should update.
	           * - If `dependencies` exists in `namePathList`, means upstream trigger update.
	           * - If `shouldUpdate` provided, use customize logic to update the field
	           *   - else to check if value changed
	           */
	          if (namePathMatch || dependencies.some(function (dependency) {
	            return containsNamePath(namePathList, getNamePath(dependency));
	          }) || requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {
	            _this.reRender();

	            return;
	          }

	          break;
	      }

	      if (shouldUpdate === true) {
	        _this.reRender();
	      }
	    };

	    _this.validateRules = function (options) {
	      var _this$props2 = _this.props,
	          _this$props2$validate = _this$props2.validateFirst,
	          validateFirst = _this$props2$validate === void 0 ? false : _this$props2$validate,
	          messageVariables = _this$props2.messageVariables;

	      var _ref2 = options || {},
	          triggerName = _ref2.triggerName;

	      var namePath = _this.getNamePath();

	      var filteredRules = _this.getRules();

	      if (triggerName) {
	        filteredRules = filteredRules.filter(function (rule) {
	          var validateTrigger = rule.validateTrigger;

	          if (!validateTrigger) {
	            return true;
	          }

	          var triggerList = toArray$1(validateTrigger);
	          return triggerList.includes(triggerName);
	        });
	      }

	      var promise = validateRules(namePath, _this.getValue(), filteredRules, options, validateFirst, messageVariables);
	      _this.dirty = true;
	      _this.validatePromise = promise;
	      _this.errors = [];
	      promise.catch(function (e) {
	        return e;
	      }).then(function () {
	        var errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	        if (_this.validatePromise === promise) {
	          _this.validatePromise = null;
	          _this.errors = errors;

	          _this.reRender();
	        }
	      });
	      return promise;
	    };

	    _this.isFieldValidating = function () {
	      return !!_this.validatePromise;
	    };

	    _this.isFieldTouched = function () {
	      return _this.touched;
	    };

	    _this.isFieldDirty = function () {
	      return _this.dirty;
	    };

	    _this.getErrors = function () {
	      return _this.errors;
	    }; // ============================= Child Component =============================


	    _this.getMeta = function () {
	      // Make error & validating in cache to save perf
	      _this.prevValidating = _this.isFieldValidating();
	      var meta = {
	        touched: _this.isFieldTouched(),
	        validating: _this.prevValidating,
	        errors: _this.errors,
	        name: _this.getNamePath()
	      };
	      return meta;
	    }; // Only return validate child node. If invalidate, will do nothing about field.


	    _this.getOnlyChild = function (children) {
	      // Support render props
	      if (typeof children === 'function') {
	        var meta = _this.getMeta();

	        return _objectSpread$4({}, _this.getOnlyChild(children(_this.getControlled(), meta, _this.context)), {
	          isFunction: true
	        });
	      } // Filed element only


	      var childList = toArray(children);

	      if (childList.length !== 1 || !react.isValidElement(childList[0])) {
	        return {
	          child: childList,
	          isFunction: false
	        };
	      }

	      return {
	        child: childList[0],
	        isFunction: false
	      };
	    }; // ============================== Field Control ==============================


	    _this.getValue = function (store) {
	      var getFieldsValue = _this.context.getFieldsValue;

	      var namePath = _this.getNamePath();

	      return getValue(store || getFieldsValue(true), namePath);
	    };

	    _this.getControlled = function () {
	      var childProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var _this$props3 = _this.props,
	          trigger = _this$props3.trigger,
	          validateTrigger = _this$props3.validateTrigger,
	          getValueFromEvent = _this$props3.getValueFromEvent,
	          normalize = _this$props3.normalize,
	          valuePropName = _this$props3.valuePropName,
	          getValueProps = _this$props3.getValueProps;
	      var mergedValidateTrigger = validateTrigger !== undefined ? validateTrigger : _this.context.validateTrigger;

	      var namePath = _this.getNamePath();

	      var _this$context = _this.context,
	          getInternalHooks = _this$context.getInternalHooks,
	          getFieldsValue = _this$context.getFieldsValue;

	      var _getInternalHooks = getInternalHooks(HOOK_MARK),
	          dispatch = _getInternalHooks.dispatch;

	      var value = _this.getValue();

	      var mergedGetValueProps = getValueProps || function (val) {
	        return _defineProperty$2({}, valuePropName, val);
	      }; // eslint-disable-next-line @typescript-eslint/no-explicit-any


	      var originTriggerFunc = childProps[trigger];

	      var control = _objectSpread$4({}, childProps, {}, mergedGetValueProps(value)); // Add trigger


	      control[trigger] = function () {
	        // Mark as touched
	        _this.touched = true;
	        _this.dirty = true;
	        var newValue;

	        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }

	        if (getValueFromEvent) {
	          newValue = getValueFromEvent.apply(void 0, args);
	        } else {
	          newValue = defaultGetValueFromEvent.apply(void 0, [valuePropName].concat(args));
	        }

	        if (normalize) {
	          newValue = normalize(newValue, value, getFieldsValue(true));
	        }

	        dispatch({
	          type: 'updateValue',
	          namePath: namePath,
	          value: newValue
	        });

	        if (originTriggerFunc) {
	          originTriggerFunc.apply(void 0, args);
	        }
	      }; // Add validateTrigger


	      var validateTriggerList = toArray$1(mergedValidateTrigger || []);
	      validateTriggerList.forEach(function (triggerName) {
	        // Wrap additional function of component, so that we can get latest value from store
	        var originTrigger = control[triggerName];

	        control[triggerName] = function () {
	          if (originTrigger) {
	            originTrigger.apply(void 0, arguments);
	          } // Always use latest rules


	          var rules = _this.props.rules;

	          if (rules && rules.length) {
	            // We dispatch validate to root,
	            // since it will update related data with other field with same name
	            dispatch({
	              type: 'validateField',
	              namePath: namePath,
	              triggerName: triggerName
	            });
	          }
	        };
	      });
	      return control;
	    };

	    return _this;
	  } // ============================== Subscriptions ==============================


	  _createClass$1(Field, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var shouldUpdate = this.props.shouldUpdate;
	      var getInternalHooks = this.context.getInternalHooks;

	      var _getInternalHooks2 = getInternalHooks(HOOK_MARK),
	          registerField = _getInternalHooks2.registerField;

	      this.cancelRegisterFunc = registerField(this); // One more render for component in case fields not ready

	      if (shouldUpdate === true) {
	        this.reRender();
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.cancelRegister();
	      this.destroy = true;
	    }
	  }, {
	    key: "reRender",
	    value: function reRender() {
	      if (this.destroy) return;
	      this.forceUpdate();
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var resetCount = this.state.resetCount;
	      var children = this.props.children;

	      var _this$getOnlyChild = this.getOnlyChild(children),
	          child = _this$getOnlyChild.child,
	          isFunction = _this$getOnlyChild.isFunction; // Not need to `cloneElement` since user can handle this in render function self


	      var returnChildNode;

	      if (isFunction) {
	        returnChildNode = child;
	      } else if (react.isValidElement(child)) {
	        returnChildNode = react.cloneElement(child, this.getControlled(child.props));
	      } else {
	        warningOnce(!child, '`children` of Field is not validate ReactElement.');
	        returnChildNode = child;
	      }

	      return react.createElement(react.Fragment, {
	        key: resetCount
	      }, returnChildNode);
	    }
	  }]);

	  return Field;
	}(react.Component);

	Field.contextType = Context;
	Field.defaultProps = {
	  trigger: 'onChange',
	  valuePropName: 'value'
	};

	var WrapperField = function WrapperField(_ref4) {
	  var name = _ref4.name,
	      isListField = _ref4.isListField,
	      restProps = _objectWithoutProperties$1(_ref4, ["name", "isListField"]);

	  var namePath = name !== undefined ? getNamePath(name) : undefined;
	  var key = 'keep';

	  if (!isListField) {
	    key = "_".concat((namePath || []).join('_'));
	  }

	  return react.createElement(Field, Object.assign({
	    key: key,
	    name: namePath
	  }, restProps));
	};

	function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	var List = function List(_ref) {
	  var name = _ref.name,
	      children = _ref.children;
	  var context = react.useContext(Context);
	  var keyRef = react.useRef({
	    keys: [],
	    id: 0
	  });
	  var keyManager = keyRef.current; // User should not pass `children` as other type.

	  if (typeof children !== 'function') {
	    warningOnce(false, 'Form.List only accepts function as children.');
	    return null;
	  }

	  var parentPrefixName = getNamePath(context.prefixName) || [];
	  var prefixName = [].concat(_toConsumableArray(parentPrefixName), _toConsumableArray(getNamePath(name)));

	  var shouldUpdate = function shouldUpdate(prevValue, nextValue, _ref2) {
	    var source = _ref2.source;

	    if (source === 'internal') {
	      return false;
	    }

	    return prevValue !== nextValue;
	  };

	  return react.createElement(Context.Provider, {
	    value: _objectSpread$5({}, context, {
	      prefixName: prefixName
	    })
	  }, react.createElement(WrapperField, {
	    name: [],
	    shouldUpdate: shouldUpdate
	  }, function (_ref3) {
	    var _ref3$value = _ref3.value,
	        value = _ref3$value === void 0 ? [] : _ref3$value,
	        onChange = _ref3.onChange;
	    var getFieldValue = context.getFieldValue;

	    var getNewValue = function getNewValue() {
	      var values = getFieldValue(prefixName || []);
	      return values || [];
	    };
	    /**
	     * Always get latest value in case user update fields by `form` api.
	     */


	    var operations = {
	      add: function add(defaultValue) {
	        // Mapping keys
	        keyManager.keys = [].concat(_toConsumableArray(keyManager.keys), [keyManager.id]);
	        keyManager.id += 1;
	        var newValue = getNewValue();
	        onChange([].concat(_toConsumableArray(newValue), [defaultValue]));
	      },
	      remove: function remove(index) {
	        var newValue = getNewValue(); // Do not handle out of range

	        if (index < 0 || index >= newValue.length) {
	          return;
	        } // Update key mapping


	        var newKeys = keyManager.keys.map(function (key, id) {
	          if (id < index) {
	            return key;
	          }

	          return keyManager.keys[id + 1];
	        });
	        keyManager.keys = newKeys.slice(0, -1); // Trigger store change

	        onChange(newValue.filter(function (_, id) {
	          return id !== index;
	        }));
	      },
	      move: function move$1(from, to) {
	        if (from === to) {
	          return;
	        }

	        var newValue = getNewValue(); // Do not handle out of range

	        if (from < 0 || from >= newValue.length || to < 0 || to >= newValue.length) {
	          return;
	        }

	        keyManager.keys = move(keyManager.keys, from, to); // Trigger store change

	        onChange(move(newValue, from, to));
	      }
	    };
	    return children(value.map(function (__, index) {
	      var key = keyManager.keys[index];

	      if (key === undefined) {
	        keyManager.keys[index] = keyManager.id;
	        key = keyManager.keys[index];
	        keyManager.id += 1;
	      }

	      return {
	        name: index,
	        key: key,
	        isListField: true
	      };
	    }), operations);
	  }));
	};

	function _arrayWithHoles$1(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArrayLimit(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _nonIterableRest$1() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles$1(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest$1();
	}

	function allPromiseFinish(promiseList) {
	  var hasError = false;
	  var count = promiseList.length;
	  var results = [];

	  if (!promiseList.length) {
	    return Promise.resolve([]);
	  }

	  return new Promise(function (resolve, reject) {
	    promiseList.forEach(function (promise, index) {
	      promise.catch(function (e) {
	        hasError = true;
	        return e;
	      }).then(function (result) {
	        count -= 1;
	        results[index] = result;

	        if (count > 0) {
	          return;
	        }

	        if (hasError) {
	          reject(results);
	        }

	        resolve(results);
	      });
	    });
	  });
	}

	/**
	 * NameMap like a `Map` but accepts `string[]` as key.
	 */

	var NameMap = /*#__PURE__*/function () {
	  function NameMap() {
	    _classCallCheck$6(this, NameMap);

	    this.list = [];
	  }

	  _createClass$1(NameMap, [{
	    key: "set",
	    value: function set(key, value) {
	      var index = this.list.findIndex(function (item) {
	        return matchNamePath(item.key, key);
	      });

	      if (index !== -1) {
	        this.list[index].value = value;
	      } else {
	        this.list.push({
	          key: key,
	          value: value
	        });
	      }
	    }
	  }, {
	    key: "get",
	    value: function get(key) {
	      var result = this.list.find(function (item) {
	        return matchNamePath(item.key, key);
	      });
	      return result && result.value;
	    }
	  }, {
	    key: "update",
	    value: function update(key, updater) {
	      var origin = this.get(key);
	      var next = updater(origin);

	      if (!next) {
	        this.delete(key);
	      } else {
	        this.set(key, next);
	      }
	    }
	  }, {
	    key: "delete",
	    value: function _delete(key) {
	      this.list = this.list.filter(function (item) {
	        return !matchNamePath(item.key, key);
	      });
	    }
	  }, {
	    key: "map",
	    value: function map(callback) {
	      return this.list.map(callback);
	    }
	  }, {
	    key: "toJSON",
	    value: function toJSON() {
	      var json = {};
	      this.map(function (_ref) {
	        var key = _ref.key,
	            value = _ref.value;
	        json[key.join('.')] = value;
	        return null;
	      });
	      return json;
	    }
	  }]);

	  return NameMap;
	}();

	function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var FormStore = function FormStore(forceRootUpdate) {
	  var _this = this;

	  _classCallCheck$6(this, FormStore);

	  this.formHooked = false;
	  this.subscribable = true;
	  this.store = {};
	  this.fieldEntities = [];
	  this.initialValues = {};
	  this.callbacks = {};
	  this.validateMessages = null;
	  this.preserve = null;
	  this.lastValidatePromise = null;

	  this.getForm = function () {
	    return {
	      getFieldValue: _this.getFieldValue,
	      getFieldsValue: _this.getFieldsValue,
	      getFieldError: _this.getFieldError,
	      getFieldsError: _this.getFieldsError,
	      isFieldsTouched: _this.isFieldsTouched,
	      isFieldTouched: _this.isFieldTouched,
	      isFieldValidating: _this.isFieldValidating,
	      isFieldsValidating: _this.isFieldsValidating,
	      resetFields: _this.resetFields,
	      setFields: _this.setFields,
	      setFieldsValue: _this.setFieldsValue,
	      validateFields: _this.validateFields,
	      submit: _this.submit,
	      getInternalHooks: _this.getInternalHooks
	    };
	  }; // ======================== Internal Hooks ========================


	  this.getInternalHooks = function (key) {
	    if (key === HOOK_MARK) {
	      _this.formHooked = true;
	      return {
	        dispatch: _this.dispatch,
	        registerField: _this.registerField,
	        useSubscribe: _this.useSubscribe,
	        setInitialValues: _this.setInitialValues,
	        setCallbacks: _this.setCallbacks,
	        setValidateMessages: _this.setValidateMessages,
	        getFields: _this.getFields,
	        setPreserve: _this.setPreserve
	      };
	    }

	    warningOnce(false, '`getInternalHooks` is internal usage. Should not call directly.');
	    return null;
	  };

	  this.useSubscribe = function (subscribable) {
	    _this.subscribable = subscribable;
	  };
	  /**
	   * First time `setInitialValues` should update store with initial value
	   */


	  this.setInitialValues = function (initialValues, init) {
	    _this.initialValues = initialValues || {};

	    if (init) {
	      _this.store = setValues({}, initialValues, _this.store);
	    }
	  };

	  this.getInitialValue = function (namePath) {
	    return getValue(_this.initialValues, namePath);
	  };

	  this.setCallbacks = function (callbacks) {
	    _this.callbacks = callbacks;
	  };

	  this.setValidateMessages = function (validateMessages) {
	    _this.validateMessages = validateMessages;
	  };

	  this.setPreserve = function (preserve) {
	    _this.preserve = preserve;
	  }; // ========================== Dev Warning =========================


	  this.timeoutId = null;

	  this.warningUnhooked = function () {
	    if ( !_this.timeoutId && typeof window !== 'undefined') {
	      _this.timeoutId = window.setTimeout(function () {
	        _this.timeoutId = null;

	        if (!_this.formHooked) {
	          warningOnce(false, 'Instance created by `useForm` is not connected to any Form element. Forget to pass `form` prop?');
	        }
	      });
	    }
	  }; // ============================ Fields ============================

	  /**
	   * Get registered field entities.
	   * @param pure Only return field which has a `name`. Default: false
	   */


	  this.getFieldEntities = function () {
	    var pure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    if (!pure) {
	      return _this.fieldEntities;
	    }

	    return _this.fieldEntities.filter(function (field) {
	      return field.getNamePath().length;
	    });
	  };

	  this.getFieldsMap = function () {
	    var pure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    var cache = new NameMap();

	    _this.getFieldEntities(pure).forEach(function (field) {
	      var namePath = field.getNamePath();
	      cache.set(namePath, field);
	    });

	    return cache;
	  };

	  this.getFieldEntitiesForNamePathList = function (nameList) {
	    if (!nameList) {
	      return _this.getFieldEntities(true);
	    }

	    var cache = _this.getFieldsMap(true);

	    return nameList.map(function (name) {
	      var namePath = getNamePath(name);
	      return cache.get(namePath) || {
	        INVALIDATE_NAME_PATH: getNamePath(name)
	      };
	    });
	  };

	  this.getFieldsValue = function (nameList, filterFunc) {
	    _this.warningUnhooked();

	    if (nameList === true && !filterFunc) {
	      return _this.store;
	    }

	    var fieldEntities = _this.getFieldEntitiesForNamePathList(Array.isArray(nameList) ? nameList : null);

	    var filteredNameList = [];
	    fieldEntities.forEach(function (entity) {
	      var namePath = 'INVALIDATE_NAME_PATH' in entity ? entity.INVALIDATE_NAME_PATH : entity.getNamePath();

	      if (!filterFunc) {
	        filteredNameList.push(namePath);
	      } else {
	        var meta = 'getMeta' in entity ? entity.getMeta() : null;

	        if (filterFunc(meta)) {
	          filteredNameList.push(namePath);
	        }
	      }
	    });
	    return cloneByNamePathList(_this.store, filteredNameList.map(getNamePath));
	  };

	  this.getFieldValue = function (name) {
	    _this.warningUnhooked();

	    var namePath = getNamePath(name);
	    return getValue(_this.store, namePath);
	  };

	  this.getFieldsError = function (nameList) {
	    _this.warningUnhooked();

	    var fieldEntities = _this.getFieldEntitiesForNamePathList(nameList);

	    return fieldEntities.map(function (entity, index) {
	      if (entity && !('INVALIDATE_NAME_PATH' in entity)) {
	        return {
	          name: entity.getNamePath(),
	          errors: entity.getErrors()
	        };
	      }

	      return {
	        name: getNamePath(nameList[index]),
	        errors: []
	      };
	    });
	  };

	  this.getFieldError = function (name) {
	    _this.warningUnhooked();

	    var namePath = getNamePath(name);

	    var fieldError = _this.getFieldsError([namePath])[0];

	    return fieldError.errors;
	  };

	  this.isFieldsTouched = function () {
	    _this.warningUnhooked();

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var arg0 = args[0],
	        arg1 = args[1];
	    var namePathList;
	    var isAllFieldsTouched = false;

	    if (args.length === 0) {
	      namePathList = null;
	    } else if (args.length === 1) {
	      if (Array.isArray(arg0)) {
	        namePathList = arg0.map(getNamePath);
	        isAllFieldsTouched = false;
	      } else {
	        namePathList = null;
	        isAllFieldsTouched = arg0;
	      }
	    } else {
	      namePathList = arg0.map(getNamePath);
	      isAllFieldsTouched = arg1;
	    }

	    var testTouched = function testTouched(field) {
	      // Not provide `nameList` will check all the fields
	      if (!namePathList) {
	        return field.isFieldTouched();
	      }

	      var fieldNamePath = field.getNamePath();

	      if (containsNamePath(namePathList, fieldNamePath)) {
	        return field.isFieldTouched();
	      }

	      return isAllFieldsTouched;
	    };

	    return isAllFieldsTouched ? _this.getFieldEntities(true).every(testTouched) : _this.getFieldEntities(true).some(testTouched);
	  };

	  this.isFieldTouched = function (name) {
	    _this.warningUnhooked();

	    return _this.isFieldsTouched([name]);
	  };

	  this.isFieldsValidating = function (nameList) {
	    _this.warningUnhooked();

	    var fieldEntities = _this.getFieldEntities();

	    if (!nameList) {
	      return fieldEntities.some(function (testField) {
	        return testField.isFieldValidating();
	      });
	    }

	    var namePathList = nameList.map(getNamePath);
	    return fieldEntities.some(function (testField) {
	      var fieldNamePath = testField.getNamePath();
	      return containsNamePath(namePathList, fieldNamePath) && testField.isFieldValidating();
	    });
	  };

	  this.isFieldValidating = function (name) {
	    _this.warningUnhooked();

	    return _this.isFieldsValidating([name]);
	  };
	  /**
	   * Reset Field with field `initialValue` prop.
	   * Can pass `entities` or `namePathList` or just nothing.
	   */


	  this.resetWithFieldInitialValue = function () {
	    var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    // Create cache
	    var cache = new NameMap();

	    var fieldEntities = _this.getFieldEntities(true);

	    fieldEntities.forEach(function (field) {
	      var initialValue = field.props.initialValue;
	      var namePath = field.getNamePath(); // Record only if has `initialValue`

	      if (initialValue !== undefined) {
	        var records = cache.get(namePath) || new Set();
	        records.add({
	          entity: field,
	          value: initialValue
	        });
	        cache.set(namePath, records);
	      }
	    }); // Reset

	    var resetWithFields = function resetWithFields(entities) {
	      entities.forEach(function (field) {
	        var initialValue = field.props.initialValue;

	        if (initialValue !== undefined) {
	          var namePath = field.getNamePath();

	          var formInitialValue = _this.getInitialValue(namePath);

	          if (formInitialValue !== undefined) {
	            // Warning if conflict with form initialValues and do not modify value
	            warningOnce(false, "Form already set 'initialValues' with path '".concat(namePath.join('.'), "'. Field can not overwrite it."));
	          } else {
	            var records = cache.get(namePath);

	            if (records && records.size > 1) {
	              // Warning if multiple field set `initialValue`and do not modify value
	              warningOnce(false, "Multiple Field with path '".concat(namePath.join('.'), "' set 'initialValue'. Can not decide which one to pick."));
	            } else if (records) {
	              var originValue = _this.getFieldValue(namePath); // Set `initialValue`


	              if (!info.skipExist || originValue === undefined) {
	                _this.store = setValue(_this.store, namePath, _toConsumableArray(records)[0].value);
	              }
	            }
	          }
	        }
	      });
	    };

	    var requiredFieldEntities;

	    if (info.entities) {
	      requiredFieldEntities = info.entities;
	    } else if (info.namePathList) {
	      requiredFieldEntities = [];
	      info.namePathList.forEach(function (namePath) {
	        var records = cache.get(namePath);

	        if (records) {
	          var _requiredFieldEntitie;

	          (_requiredFieldEntitie = requiredFieldEntities).push.apply(_requiredFieldEntitie, _toConsumableArray(_toConsumableArray(records).map(function (r) {
	            return r.entity;
	          })));
	        }
	      });
	    } else {
	      requiredFieldEntities = fieldEntities;
	    }

	    resetWithFields(requiredFieldEntities);
	  };

	  this.resetFields = function (nameList) {
	    _this.warningUnhooked();

	    var prevStore = _this.store;

	    if (!nameList) {
	      _this.store = setValues({}, _this.initialValues);

	      _this.resetWithFieldInitialValue();

	      _this.notifyObservers(prevStore, null, {
	        type: 'reset'
	      });

	      return;
	    } // Reset by `nameList`


	    var namePathList = nameList.map(getNamePath);
	    namePathList.forEach(function (namePath) {
	      var initialValue = _this.getInitialValue(namePath);

	      _this.store = setValue(_this.store, namePath, initialValue);
	    });

	    _this.resetWithFieldInitialValue({
	      namePathList: namePathList
	    });

	    _this.notifyObservers(prevStore, namePathList, {
	      type: 'reset'
	    });
	  };

	  this.setFields = function (fields) {
	    _this.warningUnhooked();

	    var prevStore = _this.store;
	    fields.forEach(function (fieldData) {
	      var name = fieldData.name,
	          errors = fieldData.errors,
	          data = _objectWithoutProperties$1(fieldData, ["name", "errors"]);

	      var namePath = getNamePath(name); // Value

	      if ('value' in data) {
	        _this.store = setValue(_this.store, namePath, data.value);
	      }

	      _this.notifyObservers(prevStore, [namePath], {
	        type: 'setField',
	        data: fieldData
	      });
	    });
	  };

	  this.getFields = function () {
	    var entities = _this.getFieldEntities(true);

	    var fields = entities.map(function (field) {
	      var namePath = field.getNamePath();
	      var meta = field.getMeta();

	      var fieldData = _objectSpread$6({}, meta, {
	        name: namePath,
	        value: _this.getFieldValue(namePath)
	      });

	      Object.defineProperty(fieldData, 'originRCField', {
	        value: true
	      });
	      return fieldData;
	    });
	    return fields;
	  }; // =========================== Observer ===========================


	  this.registerField = function (entity) {
	    _this.fieldEntities.push(entity); // Set initial values


	    if (entity.props.initialValue !== undefined) {
	      var prevStore = _this.store;

	      _this.resetWithFieldInitialValue({
	        entities: [entity],
	        skipExist: true
	      });

	      _this.notifyObservers(prevStore, [entity.getNamePath()], {
	        type: 'valueUpdate',
	        source: 'internal'
	      });
	    } // un-register field callback


	    return function (preserve) {
	      _this.fieldEntities = _this.fieldEntities.filter(function (item) {
	        return item !== entity;
	      }); // Clean up store value if preserve

	      var mergedPreserve = preserve !== undefined ? preserve : _this.preserve;

	      if (mergedPreserve === false) {
	        var namePath = entity.getNamePath();

	        if (_this.getFieldValue(namePath) !== undefined) {
	          _this.store = setValue(_this.store, namePath, undefined);
	        }
	      }
	    };
	  };

	  this.dispatch = function (action) {
	    switch (action.type) {
	      case 'updateValue':
	        {
	          var namePath = action.namePath,
	              value = action.value;

	          _this.updateValue(namePath, value);

	          break;
	        }

	      case 'validateField':
	        {
	          var _namePath = action.namePath,
	              triggerName = action.triggerName;

	          _this.validateFields([_namePath], {
	            triggerName: triggerName
	          });

	          break;
	        }

	    }
	  };

	  this.notifyObservers = function (prevStore, namePathList, info) {
	    if (_this.subscribable) {
	      var mergedInfo = _objectSpread$6({}, info, {
	        store: _this.getFieldsValue(true)
	      });

	      _this.getFieldEntities().forEach(function (_ref) {
	        var onStoreChange = _ref.onStoreChange;
	        onStoreChange(prevStore, namePathList, mergedInfo);
	      });
	    } else {
	      _this.forceRootUpdate();
	    }
	  };

	  this.updateValue = function (name, value) {
	    var namePath = getNamePath(name);
	    var prevStore = _this.store;
	    _this.store = setValue(_this.store, namePath, value);

	    _this.notifyObservers(prevStore, [namePath], {
	      type: 'valueUpdate',
	      source: 'internal'
	    }); // Notify dependencies children with parent update


	    var childrenFields = _this.getDependencyChildrenFields(namePath);

	    _this.validateFields(childrenFields);

	    _this.notifyObservers(prevStore, childrenFields, {
	      type: 'dependenciesUpdate',
	      relatedFields: [namePath].concat(_toConsumableArray(childrenFields))
	    }); // trigger callback function


	    var onValuesChange = _this.callbacks.onValuesChange;

	    if (onValuesChange) {
	      var changedValues = cloneByNamePathList(_this.store, [namePath]);
	      onValuesChange(changedValues, _this.store);
	    }

	    _this.triggerOnFieldsChange([namePath].concat(_toConsumableArray(childrenFields)));
	  }; // Let all child Field get update.


	  this.setFieldsValue = function (store) {
	    _this.warningUnhooked();

	    var prevStore = _this.store;

	    if (store) {
	      _this.store = setValues(_this.store, store);
	    }

	    _this.notifyObservers(prevStore, null, {
	      type: 'valueUpdate',
	      source: 'external'
	    });
	  };

	  this.getDependencyChildrenFields = function (rootNamePath) {
	    var children = new Set();
	    var childrenFields = [];
	    var dependencies2fields = new NameMap();
	    /**
	     * Generate maps
	     * Can use cache to save perf if user report performance issue with this
	     */

	    _this.getFieldEntities().forEach(function (field) {
	      var dependencies = field.props.dependencies;
	      (dependencies || []).forEach(function (dependency) {
	        var dependencyNamePath = getNamePath(dependency);
	        dependencies2fields.update(dependencyNamePath, function () {
	          var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();
	          fields.add(field);
	          return fields;
	        });
	      });
	    });

	    var fillChildren = function fillChildren(namePath) {
	      var fields = dependencies2fields.get(namePath) || new Set();
	      fields.forEach(function (field) {
	        if (!children.has(field)) {
	          children.add(field);
	          var fieldNamePath = field.getNamePath();

	          if (field.isFieldDirty() && fieldNamePath.length) {
	            childrenFields.push(fieldNamePath);
	            fillChildren(fieldNamePath);
	          }
	        }
	      });
	    };

	    fillChildren(rootNamePath);
	    return childrenFields;
	  };

	  this.triggerOnFieldsChange = function (namePathList, filedErrors) {
	    var onFieldsChange = _this.callbacks.onFieldsChange;

	    if (onFieldsChange) {
	      var fields = _this.getFields();
	      /**
	       * Fill errors since `fields` may be replaced by controlled fields
	       */


	      if (filedErrors) {
	        var cache = new NameMap();
	        filedErrors.forEach(function (_ref2) {
	          var name = _ref2.name,
	              errors = _ref2.errors;
	          cache.set(name, errors);
	        });
	        fields.forEach(function (field) {
	          // eslint-disable-next-line no-param-reassign
	          field.errors = cache.get(field.name) || field.errors;
	        });
	      }

	      var changedFields = fields.filter(function (_ref3) {
	        var fieldName = _ref3.name;
	        return containsNamePath(namePathList, fieldName);
	      });
	      onFieldsChange(changedFields, fields);
	    }
	  }; // =========================== Validate ===========================


	  this.validateFields = function (nameList, options) {
	    _this.warningUnhooked();

	    var provideNameList = !!nameList;
	    var namePathList = provideNameList ? nameList.map(getNamePath) : []; // Collect result in promise list

	    var promiseList = [];

	    _this.getFieldEntities(true).forEach(function (field) {
	      // Add field if not provide `nameList`
	      if (!provideNameList) {
	        namePathList.push(field.getNamePath());
	      } // Skip if without rule


	      if (!field.props.rules || !field.props.rules.length) {
	        return;
	      }

	      var fieldNamePath = field.getNamePath(); // Add field validate rule in to promise list

	      if (!provideNameList || containsNamePath(namePathList, fieldNamePath)) {
	        var promise = field.validateRules(_objectSpread$6({
	          validateMessages: _objectSpread$6({}, defaultValidateMessages, {}, _this.validateMessages)
	        }, options)); // Wrap promise with field

	        promiseList.push(promise.then(function () {
	          return {
	            name: fieldNamePath,
	            errors: []
	          };
	        }).catch(function (errors) {
	          return Promise.reject({
	            name: fieldNamePath,
	            errors: errors
	          });
	        }));
	      }
	    });

	    var summaryPromise = allPromiseFinish(promiseList);
	    _this.lastValidatePromise = summaryPromise; // Notify fields with rule that validate has finished and need update

	    summaryPromise.catch(function (results) {
	      return results;
	    }).then(function (results) {
	      var resultNamePathList = results.map(function (_ref4) {
	        var name = _ref4.name;
	        return name;
	      });

	      _this.notifyObservers(_this.store, resultNamePathList, {
	        type: 'validateFinish'
	      });

	      _this.triggerOnFieldsChange(resultNamePathList, results);
	    });
	    var returnPromise = summaryPromise.then(function () {
	      if (_this.lastValidatePromise === summaryPromise) {
	        return Promise.resolve(_this.getFieldsValue(namePathList));
	      }

	      return Promise.reject([]);
	    }).catch(function (results) {
	      var errorList = results.filter(function (result) {
	        return result && result.errors.length;
	      });
	      return Promise.reject({
	        values: _this.getFieldsValue(namePathList),
	        errorFields: errorList,
	        outOfDate: _this.lastValidatePromise !== summaryPromise
	      });
	    }); // Do not throw in console

	    returnPromise.catch(function (e) {
	      return e;
	    });
	    return returnPromise;
	  }; // ============================ Submit ============================


	  this.submit = function () {
	    _this.warningUnhooked();

	    _this.validateFields().then(function (values) {
	      var onFinish = _this.callbacks.onFinish;

	      if (onFinish) {
	        try {
	          onFinish(values);
	        } catch (err) {
	          // Should print error if user `onFinish` callback failed
	          console.error(err);
	        }
	      }
	    }).catch(function (e) {
	      var onFinishFailed = _this.callbacks.onFinishFailed;

	      if (onFinishFailed) {
	        onFinishFailed(e);
	      }
	    });
	  };

	  this.forceRootUpdate = forceRootUpdate;
	};

	function useForm(form) {
	  var formRef = react.useRef();

	  var _React$useState = react.useState(),
	      _React$useState2 = _slicedToArray(_React$useState, 2),
	      forceUpdate = _React$useState2[1];

	  if (!formRef.current) {
	    if (form) {
	      formRef.current = form;
	    } else {
	      // Create a new FormStore if not provided
	      var forceReRender = function forceReRender() {
	        forceUpdate({});
	      };

	      var formStore = new FormStore(forceReRender);
	      formRef.current = formStore.getForm();
	    }
	  }

	  return [formRef.current];
	}

	function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var FormContext = react.createContext({
	  triggerFormChange: function triggerFormChange() {},
	  triggerFormFinish: function triggerFormFinish() {},
	  registerForm: function registerForm() {},
	  unregisterForm: function unregisterForm() {}
	});

	var FormProvider = function FormProvider(_ref) {
	  var validateMessages = _ref.validateMessages,
	      onFormChange = _ref.onFormChange,
	      onFormFinish = _ref.onFormFinish,
	      children = _ref.children;
	  var formContext = react.useContext(FormContext);
	  var formsRef = react.useRef({});
	  return react.createElement(FormContext.Provider, {
	    value: _objectSpread$7({}, formContext, {
	      validateMessages: _objectSpread$7({}, formContext.validateMessages, {}, validateMessages),
	      // =========================================================
	      // =                  Global Form Control                  =
	      // =========================================================
	      triggerFormChange: function triggerFormChange(name, changedFields) {
	        if (onFormChange) {
	          onFormChange(name, {
	            changedFields: changedFields,
	            forms: formsRef.current
	          });
	        }

	        formContext.triggerFormChange(name, changedFields);
	      },
	      triggerFormFinish: function triggerFormFinish(name, values) {
	        if (onFormFinish) {
	          onFormFinish(name, {
	            values: values,
	            forms: formsRef.current
	          });
	        }

	        formContext.triggerFormFinish(name, values);
	      },
	      registerForm: function registerForm(name, form) {
	        if (name) {
	          formsRef.current = _objectSpread$7({}, formsRef.current, _defineProperty$2({}, name, form));
	        }

	        formContext.registerForm(name, form);
	      },
	      unregisterForm: function unregisterForm(name) {
	        var newForms = _objectSpread$7({}, formsRef.current);

	        delete newForms[name];
	        formsRef.current = newForms;
	        formContext.unregisterForm(name);
	      }
	    })
	  }, children);
	};

	function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	var Form = function Form(_ref, ref) {
	  var name = _ref.name,
	      initialValues = _ref.initialValues,
	      fields = _ref.fields,
	      form = _ref.form,
	      preserve = _ref.preserve,
	      children = _ref.children,
	      _ref$component = _ref.component,
	      Component = _ref$component === void 0 ? 'form' : _ref$component,
	      validateMessages = _ref.validateMessages,
	      _ref$validateTrigger = _ref.validateTrigger,
	      validateTrigger = _ref$validateTrigger === void 0 ? 'onChange' : _ref$validateTrigger,
	      onValuesChange = _ref.onValuesChange,
	      _onFieldsChange = _ref.onFieldsChange,
	      _onFinish = _ref.onFinish,
	      onFinishFailed = _ref.onFinishFailed,
	      restProps = _objectWithoutProperties$1(_ref, ["name", "initialValues", "fields", "form", "preserve", "children", "component", "validateMessages", "validateTrigger", "onValuesChange", "onFieldsChange", "onFinish", "onFinishFailed"]);

	  var formContext = react.useContext(FormContext); // We customize handle event since Context will makes all the consumer re-render:
	  // https://reactjs.org/docs/context.html#contextprovider

	  var _useForm = useForm(form),
	      _useForm2 = _slicedToArray(_useForm, 1),
	      formInstance = _useForm2[0];

	  var _formInstance$getInte = formInstance.getInternalHooks(HOOK_MARK),
	      useSubscribe = _formInstance$getInte.useSubscribe,
	      setInitialValues = _formInstance$getInte.setInitialValues,
	      setCallbacks = _formInstance$getInte.setCallbacks,
	      setValidateMessages = _formInstance$getInte.setValidateMessages,
	      setPreserve = _formInstance$getInte.setPreserve; // Pass ref with form instance


	  react.useImperativeHandle(ref, function () {
	    return formInstance;
	  }); // Register form into Context

	  react.useEffect(function () {
	    formContext.registerForm(name, formInstance);
	    return function () {
	      formContext.unregisterForm(name);
	    };
	  }, [formContext, formInstance, name]); // Pass props to store

	  setValidateMessages(_objectSpread$8({}, formContext.validateMessages, {}, validateMessages));
	  setCallbacks({
	    onValuesChange: onValuesChange,
	    onFieldsChange: function onFieldsChange(changedFields) {
	      formContext.triggerFormChange(name, changedFields);

	      if (_onFieldsChange) {
	        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	          rest[_key - 1] = arguments[_key];
	        }

	        _onFieldsChange.apply(void 0, [changedFields].concat(rest));
	      }
	    },
	    onFinish: function onFinish(values) {
	      formContext.triggerFormFinish(name, values);

	      if (_onFinish) {
	        _onFinish(values);
	      }
	    },
	    onFinishFailed: onFinishFailed
	  });
	  setPreserve(preserve); // Set initial value, init store value when first mount

	  var mountRef = react.useRef(null);
	  setInitialValues(initialValues, !mountRef.current);

	  if (!mountRef.current) {
	    mountRef.current = true;
	  } // Prepare children by `children` type


	  var childrenNode = children;
	  var childrenRenderProps = typeof children === 'function';

	  if (childrenRenderProps) {
	    var values = formInstance.getFieldsValue(true);
	    childrenNode = children(values, formInstance);
	  } // Not use subscribe when using render props


	  useSubscribe(!childrenRenderProps); // Listen if fields provided. We use ref to save prev data here to avoid additional render

	  var prevFieldsRef = react.useRef();
	  react.useEffect(function () {
	    if (!isSimilar(prevFieldsRef.current || [], fields || [])) {
	      formInstance.setFields(fields || []);
	    }

	    prevFieldsRef.current = fields;
	  }, [fields, formInstance]);
	  var formContextValue = react.useMemo(function () {
	    return _objectSpread$8({}, formInstance, {
	      validateTrigger: validateTrigger
	    });
	  }, [formInstance, validateTrigger]);
	  var wrapperNode = react.createElement(Context.Provider, {
	    value: formContextValue
	  }, childrenNode);

	  if (Component === false) {
	    return wrapperNode;
	  }

	  return react.createElement(Component, Object.assign({}, restProps, {
	    onSubmit: function onSubmit(event) {
	      event.preventDefault();
	      event.stopPropagation();
	      formInstance.submit();
	    }
	  }), wrapperNode);
	};

	var InternalForm = react.forwardRef(Form);
	var RefForm = InternalForm;
	RefForm.FormProvider = FormProvider;
	RefForm.Field = WrapperField;
	RefForm.List = List;
	RefForm.useForm = useForm;

	var devWarning = (function (valid, component, message) {
	  warningOnce(valid, "[antd: ".concat(component, "] ").concat(message));
	});

	var enUS = {
	  // Options.jsx
	  items_per_page: '/ page',
	  jump_to: 'Go to',
	  jump_to_confirm: 'confirm',
	  page: '',
	  // Pagination.jsx
	  prev_page: 'Previous Page',
	  next_page: 'Next Page',
	  prev_5: 'Previous 5 Pages',
	  next_5: 'Next 5 Pages',
	  prev_3: 'Previous 3 Pages',
	  next_3: 'Next 3 Pages'
	};

	var locale = {
	  locale: 'en_US',
	  today: 'Today',
	  now: 'Now',
	  backToToday: 'Back to today',
	  ok: 'Ok',
	  clear: 'Clear',
	  month: 'Month',
	  year: 'Year',
	  timeSelect: 'select time',
	  dateSelect: 'select date',
	  weekSelect: 'Choose a week',
	  monthSelect: 'Choose a month',
	  yearSelect: 'Choose a year',
	  decadeSelect: 'Choose a decade',
	  yearFormat: 'YYYY',
	  dateFormat: 'M/D/YYYY',
	  dayFormat: 'D',
	  dateTimeFormat: 'M/D/YYYY HH:mm:ss',
	  monthBeforeYear: true,
	  previousMonth: 'Previous month (PageUp)',
	  nextMonth: 'Next month (PageDown)',
	  previousYear: 'Last year (Control + left)',
	  nextYear: 'Next year (Control + right)',
	  previousDecade: 'Last decade',
	  nextDecade: 'Next decade',
	  previousCentury: 'Last century',
	  nextCentury: 'Next century'
	};

	var locale$1 = {
	  placeholder: 'Select time',
	  rangePlaceholder: ['Start time', 'End time']
	};

	var locale$2 = {
	  lang: _extends_1({
	    placeholder: 'Select date',
	    yearPlaceholder: 'Select year',
	    quarterPlaceholder: 'Select quarter',
	    monthPlaceholder: 'Select month',
	    weekPlaceholder: 'Select week',
	    rangePlaceholder: ['Start date', 'End date'],
	    rangeYearPlaceholder: ['Start year', 'End year'],
	    rangeMonthPlaceholder: ['Start month', 'End month'],
	    rangeWeekPlaceholder: ['Start week', 'End week']
	  }, locale),
	  timePickerLocale: _extends_1({}, locale$1)
	}; // All settings at:

	/* eslint-disable no-template-curly-in-string */
	var typeTemplate$1 = '${label} is not a valid ${type}';
	var localeValues = {
	  locale: 'en',
	  Pagination: enUS,
	  DatePicker: locale$2,
	  TimePicker: locale$1,
	  Calendar: locale$2,
	  global: {
	    placeholder: 'Please select'
	  },
	  Table: {
	    filterTitle: 'Filter menu',
	    filterConfirm: 'OK',
	    filterReset: 'Reset',
	    filterEmptyText: 'No filters',
	    selectAll: 'Select current page',
	    selectInvert: 'Invert current page',
	    selectionAll: 'Select all data',
	    sortTitle: 'Sort',
	    expand: 'Expand row',
	    collapse: 'Collapse row',
	    triggerDesc: 'Click sort by descend',
	    triggerAsc: 'Click sort by ascend',
	    cancelSort: 'Click to cancel sort'
	  },
	  Modal: {
	    okText: 'OK',
	    cancelText: 'Cancel',
	    justOkText: 'OK'
	  },
	  Popconfirm: {
	    okText: 'OK',
	    cancelText: 'Cancel'
	  },
	  Transfer: {
	    titles: ['', ''],
	    searchPlaceholder: 'Search here',
	    itemUnit: 'item',
	    itemsUnit: 'items',
	    remove: 'Remove',
	    selectCurrent: 'Select current page',
	    removeCurrent: 'Remove current page',
	    selectAll: 'Select all data',
	    removeAll: 'Remove all data',
	    selectInvert: 'Invert current page'
	  },
	  Upload: {
	    uploading: 'Uploading...',
	    removeFile: 'Remove file',
	    uploadError: 'Upload error',
	    previewFile: 'Preview file',
	    downloadFile: 'Download file'
	  },
	  Empty: {
	    description: 'No Data'
	  },
	  Icon: {
	    icon: 'icon'
	  },
	  Text: {
	    edit: 'Edit',
	    copy: 'Copy',
	    copied: 'Copied',
	    expand: 'Expand'
	  },
	  PageHeader: {
	    back: 'Back'
	  },
	  Form: {
	    defaultValidateMessages: {
	      "default": 'Field validation error ${label}',
	      required: 'Please enter ${label}',
	      "enum": '${label} must be one of [${enum}]',
	      whitespace: '${label} cannot be a blank character',
	      date: {
	        format: '${label} date format is invalid',
	        parse: '${label} cannot be converted to a date',
	        invalid: '${label} is an invalid date'
	      },
	      types: {
	        string: typeTemplate$1,
	        method: typeTemplate$1,
	        array: typeTemplate$1,
	        object: typeTemplate$1,
	        number: typeTemplate$1,
	        date: typeTemplate$1,
	        "boolean": typeTemplate$1,
	        integer: typeTemplate$1,
	        "float": typeTemplate$1,
	        regexp: typeTemplate$1,
	        email: typeTemplate$1,
	        url: typeTemplate$1,
	        hex: typeTemplate$1
	      },
	      string: {
	        len: '${label} must be ${len} characters',
	        min: '${label} at least ${min} characters',
	        max: '${label} up to ${max} characters',
	        range: '${label} must be between ${min}-${max} characters'
	      },
	      number: {
	        len: '${label} must be equal to ${len}',
	        min: '${label} minimum value is ${min}',
	        max: '${label} maximum value is ${max}',
	        range: '${label} must be between ${min}-${max}'
	      },
	      array: {
	        len: 'Must be ${len} ${label}',
	        min: 'At least ${min} ${label}',
	        max: 'At most ${max} ${label}',
	        range: 'The amount of ${label} must be between ${min}-${max}'
	      },
	      pattern: {
	        mismatch: '${label} does not match the pattern ${pattern}'
	      }
	    }
	  }
	};

	var runtimeLocale = _extends_1({}, localeValues.Modal);
	function getConfirmLocale() {
	  return runtimeLocale;
	}

	var LocaleContext = /*#__PURE__*/react.createContext(undefined);

	var LocaleReceiver = /*#__PURE__*/function (_React$Component) {
	  inherits(LocaleReceiver, _React$Component);

	  var _super = createSuper(LocaleReceiver);

	  function LocaleReceiver() {
	    classCallCheck(this, LocaleReceiver);

	    return _super.apply(this, arguments);
	  }

	  createClass(LocaleReceiver, [{
	    key: "getLocale",
	    value: function getLocale() {
	      var _this$props = this.props,
	          componentName = _this$props.componentName,
	          defaultLocale = _this$props.defaultLocale;
	      var locale = defaultLocale || localeValues[componentName || 'global'];
	      var antLocale = this.context;
	      var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
	      return _extends_1(_extends_1({}, typeof locale === 'function' ? locale() : locale), localeFromContext || {});
	    }
	  }, {
	    key: "getLocaleCode",
	    value: function getLocaleCode() {
	      var antLocale = this.context;
	      var localeCode = antLocale && antLocale.locale; // Had use LocaleProvide but didn't set locale

	      if (antLocale && antLocale.exist && !localeCode) {
	        return localeValues.locale;
	      }

	      return localeCode;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return this.props.children(this.getLocale(), this.getLocaleCode(), this.context);
	    }
	  }]);

	  return LocaleReceiver;
	}(react.Component);
	LocaleReceiver.defaultProps = {
	  componentName: 'global'
	};
	LocaleReceiver.contextType = LocaleContext;

	var Empty$1 = function Empty() {
	  var _React$useContext = react.useContext(ConfigContext),
	      getPrefixCls = _React$useContext.getPrefixCls;

	  var prefixCls = getPrefixCls('empty-img-default');
	  return /*#__PURE__*/react.createElement("svg", {
	    className: prefixCls,
	    width: "184",
	    height: "152",
	    viewBox: "0 0 184 152",
	    xmlns: "http://www.w3.org/2000/svg"
	  }, /*#__PURE__*/react.createElement("g", {
	    fill: "none",
	    fillRule: "evenodd"
	  }, /*#__PURE__*/react.createElement("g", {
	    transform: "translate(24 31.67)"
	  }, /*#__PURE__*/react.createElement("ellipse", {
	    className: "".concat(prefixCls, "-ellipse"),
	    cx: "67.797",
	    cy: "106.89",
	    rx: "67.797",
	    ry: "12.668"
	  }), /*#__PURE__*/react.createElement("path", {
	    className: "".concat(prefixCls, "-path-1"),
	    d: "M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z"
	  }), /*#__PURE__*/react.createElement("path", {
	    className: "".concat(prefixCls, "-path-2"),
	    d: "M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",
	    transform: "translate(13.56)"
	  }), /*#__PURE__*/react.createElement("path", {
	    className: "".concat(prefixCls, "-path-3"),
	    d: "M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z"
	  }), /*#__PURE__*/react.createElement("path", {
	    className: "".concat(prefixCls, "-path-4"),
	    d: "M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z"
	  })), /*#__PURE__*/react.createElement("path", {
	    className: "".concat(prefixCls, "-path-5"),
	    d: "M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z"
	  }), /*#__PURE__*/react.createElement("g", {
	    className: "".concat(prefixCls, "-g"),
	    transform: "translate(149.65 15.383)"
	  }, /*#__PURE__*/react.createElement("ellipse", {
	    cx: "20.654",
	    cy: "3.167",
	    rx: "2.849",
	    ry: "2.815"
	  }), /*#__PURE__*/react.createElement("path", {
	    d: "M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"
	  }))));
	};

	var Simple = function Simple() {
	  var _React$useContext = react.useContext(ConfigContext),
	      getPrefixCls = _React$useContext.getPrefixCls;

	  var prefixCls = getPrefixCls('empty-img-simple');
	  return /*#__PURE__*/react.createElement("svg", {
	    className: prefixCls,
	    width: "64",
	    height: "41",
	    viewBox: "0 0 64 41",
	    xmlns: "http://www.w3.org/2000/svg"
	  }, /*#__PURE__*/react.createElement("g", {
	    transform: "translate(0 1)",
	    fill: "none",
	    fillRule: "evenodd"
	  }, /*#__PURE__*/react.createElement("ellipse", {
	    className: "".concat(prefixCls, "-ellipse"),
	    cx: "32",
	    cy: "33",
	    rx: "32",
	    ry: "7"
	  }), /*#__PURE__*/react.createElement("g", {
	    className: "".concat(prefixCls, "-g"),
	    fillRule: "nonzero"
	  }, /*#__PURE__*/react.createElement("path", {
	    d: "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
	  }), /*#__PURE__*/react.createElement("path", {
	    d: "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",
	    className: "".concat(prefixCls, "-path")
	  }))));
	};

	var __rest = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};
	var defaultEmptyImg = /*#__PURE__*/react.createElement(Empty$1, null);
	var simpleEmptyImg = /*#__PURE__*/react.createElement(Simple, null);

	var Empty$2 = function Empty(props) {
	  return /*#__PURE__*/react.createElement(ConfigConsumer, null, function (_ref) {
	    var getPrefixCls = _ref.getPrefixCls,
	        direction = _ref.direction;

	    var className = props.className,
	        customizePrefixCls = props.prefixCls,
	        _props$image = props.image,
	        image = _props$image === void 0 ? defaultEmptyImg : _props$image,
	        description = props.description,
	        children = props.children,
	        imageStyle = props.imageStyle,
	        restProps = __rest(props, ["className", "prefixCls", "image", "description", "children", "imageStyle"]);

	    return /*#__PURE__*/react.createElement(LocaleReceiver, {
	      componentName: "Empty"
	    }, function (locale) {
	      var _classNames;

	      var prefixCls = getPrefixCls('empty', customizePrefixCls);
	      var des = typeof description !== 'undefined' ? description : locale.description;
	      var alt = typeof des === 'string' ? des : 'empty';
	      var imageNode = null;

	      if (typeof image === 'string') {
	        imageNode = /*#__PURE__*/react.createElement("img", {
	          alt: alt,
	          src: image
	        });
	      } else {
	        imageNode = image;
	      }

	      return /*#__PURE__*/react.createElement("div", _extends_1({
	        className: classnames(prefixCls, (_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-normal"), image === simpleEmptyImg), defineProperty$3(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className)
	      }, restProps), /*#__PURE__*/react.createElement("div", {
	        className: "".concat(prefixCls, "-image"),
	        style: imageStyle
	      }, imageNode), des && /*#__PURE__*/react.createElement("p", {
	        className: "".concat(prefixCls, "-description")
	      }, des), children && /*#__PURE__*/react.createElement("div", {
	        className: "".concat(prefixCls, "-footer")
	      }, children));
	    });
	  });
	};

	Empty$2.PRESENTED_IMAGE_DEFAULT = defaultEmptyImg;
	Empty$2.PRESENTED_IMAGE_SIMPLE = simpleEmptyImg;

	var renderEmpty = function renderEmpty(componentName) {
	  return /*#__PURE__*/react.createElement(ConfigConsumer, null, function (_ref) {
	    var getPrefixCls = _ref.getPrefixCls;
	    var prefix = getPrefixCls('empty');

	    switch (componentName) {
	      case 'Table':
	      case 'List':
	        return /*#__PURE__*/react.createElement(Empty$2, {
	          image: Empty$2.PRESENTED_IMAGE_SIMPLE
	        });

	      case 'Select':
	      case 'TreeSelect':
	      case 'Cascader':
	      case 'Transfer':
	      case 'Mentions':
	        return /*#__PURE__*/react.createElement(Empty$2, {
	          image: Empty$2.PRESENTED_IMAGE_SIMPLE,
	          className: "".concat(prefix, "-small")
	        });

	      default:
	        return /*#__PURE__*/react.createElement(Empty$2, null);
	    }
	  });
	};

	var ConfigContext = /*#__PURE__*/react.createContext({
	  // We provide a default function for Context without provider
	  getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
	    if (customizePrefixCls) return customizePrefixCls;
	    return suffixCls ? "ant-".concat(suffixCls) : 'ant';
	  },
	  renderEmpty: renderEmpty
	});
	var ConfigConsumer = ConfigContext.Consumer;

	var SizeContext = /*#__PURE__*/react.createContext(undefined);
	var SizeContextProvider = function SizeContextProvider(_ref) {
	  var children = _ref.children,
	      size = _ref.size;
	  return /*#__PURE__*/react.createElement(SizeContext.Consumer, null, function (originSize) {
	    return /*#__PURE__*/react.createElement(SizeContext.Provider, {
	      value: size || originSize
	    }, children);
	  });
	};

	var unsafeLifecyclesPolyfill = function unsafeLifecyclesPolyfill(Component) {
	  var prototype = Component.prototype;

	  if (!prototype || !prototype.isReactComponent) {
	    throw new Error('Can only polyfill class components');
	  } // only handle componentWillReceiveProps


	  if (typeof prototype.componentWillReceiveProps !== 'function') {
	    return Component;
	  } // In React 16.9, React.Profiler was introduced together with UNSAFE_componentWillReceiveProps
	  // https://reactjs.org/blog/2019/08/08/react-v16.9.0.html#performance-measurements-with-reactprofiler


	  if (!react.Profiler) {
	    return Component;
	  } // Here polyfill get started


	  prototype.UNSAFE_componentWillReceiveProps = prototype.componentWillReceiveProps;
	  delete prototype.componentWillReceiveProps;
	  return Component;
	};

	function toArrayChildren(children) {
	  var ret = [];
	  react.Children.forEach(children, function (child) {
	    ret.push(child);
	  });
	  return ret;
	}

	function findChildInChildrenByKey(children, key) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (ret) {
	        return;
	      }
	      if (child && child.key === key) {
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findShownChildInChildrenByKey(children, key, showProp) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (child && child.key === key && child.props[showProp]) {
	        if (ret) {
	          throw new Error('two child with same key for <rc-animate> children');
	        }
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function isSameChildren(c1, c2, showProp) {
	  var same = c1.length === c2.length;
	  if (same) {
	    c1.forEach(function (child, index) {
	      var child2 = c2[index];
	      if (child && child2) {
	        if (child && !child2 || !child && child2) {
	          same = false;
	        } else if (child.key !== child2.key) {
	          same = false;
	        } else if (showProp && child.props[showProp] !== child2.props[showProp]) {
	          same = false;
	        }
	      }
	    });
	  }
	  return same;
	}

	function mergeChildren(prev, next) {
	  var ret = [];

	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextChildrenPending = {};
	  var pendingChildren = [];
	  prev.forEach(function (child) {
	    if (child && findChildInChildrenByKey(next, child.key)) {
	      if (pendingChildren.length) {
	        nextChildrenPending[child.key] = pendingChildren;
	        pendingChildren = [];
	      }
	    } else {
	      pendingChildren.push(child);
	    }
	  });

	  next.forEach(function (child) {
	    if (child && Object.prototype.hasOwnProperty.call(nextChildrenPending, child.key)) {
	      ret = ret.concat(nextChildrenPending[child.key]);
	    }
	    ret.push(child);
	  });

	  ret = ret.concat(pendingChildren);

	  return ret;
	}

	var START_EVENT_NAME_MAP = {
	  transitionstart: {
	    transition: 'transitionstart',
	    WebkitTransition: 'webkitTransitionStart',
	    MozTransition: 'mozTransitionStart',
	    OTransition: 'oTransitionStart',
	    msTransition: 'MSTransitionStart'
	  },

	  animationstart: {
	    animation: 'animationstart',
	    WebkitAnimation: 'webkitAnimationStart',
	    MozAnimation: 'mozAnimationStart',
	    OAnimation: 'oAnimationStart',
	    msAnimation: 'MSAnimationStart'
	  }
	};

	var END_EVENT_NAME_MAP = {
	  transitionend: {
	    transition: 'transitionend',
	    WebkitTransition: 'webkitTransitionEnd',
	    MozTransition: 'mozTransitionEnd',
	    OTransition: 'oTransitionEnd',
	    msTransition: 'MSTransitionEnd'
	  },

	  animationend: {
	    animation: 'animationend',
	    WebkitAnimation: 'webkitAnimationEnd',
	    MozAnimation: 'mozAnimationEnd',
	    OAnimation: 'oAnimationEnd',
	    msAnimation: 'MSAnimationEnd'
	  }
	};

	var startEvents = [];
	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  if (!('AnimationEvent' in window)) {
	    delete START_EVENT_NAME_MAP.animationstart.animation;
	    delete END_EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete START_EVENT_NAME_MAP.transitionstart.transition;
	    delete END_EVENT_NAME_MAP.transitionend.transition;
	  }

	  function process(EVENT_NAME_MAP, events) {
	    for (var baseEventName in EVENT_NAME_MAP) {
	      if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
	        var baseEvents = EVENT_NAME_MAP[baseEventName];
	        for (var styleName in baseEvents) {
	          if (styleName in style) {
	            events.push(baseEvents[styleName]);
	            break;
	          }
	        }
	      }
	    }
	  }

	  process(START_EVENT_NAME_MAP, startEvents);
	  process(END_EVENT_NAME_MAP, endEvents);
	}

	if (typeof window !== 'undefined' && typeof document !== 'undefined') {
	  detectEvents();
	}

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var TransitionEvents = {
	  // Start events
	  startEvents: startEvents,

	  addStartEventListener: function addStartEventListener(node, eventListener) {
	    if (startEvents.length === 0) {
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    startEvents.forEach(function (startEvent) {
	      addEventListener(node, startEvent, eventListener);
	    });
	  },
	  removeStartEventListener: function removeStartEventListener(node, eventListener) {
	    if (startEvents.length === 0) {
	      return;
	    }
	    startEvents.forEach(function (startEvent) {
	      removeEventListener(node, startEvent, eventListener);
	    });
	  },


	  // End events
	  endEvents: endEvents,

	  addEndEventListener: function addEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },
	  removeEndEventListener: function removeEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	var _typeof$2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var isCssAnimationSupported = TransitionEvents.endEvents.length !== 0;
	var capitalPrefixes = ['Webkit', 'Moz', 'O',
	// ms is special .... !
	'ms'];
	var prefixes$1 = ['-webkit-', '-moz-', '-o-', 'ms-', ''];

	function getStyleProperty(node, name) {
	  // old ff need null, https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle
	  var style = window.getComputedStyle(node, null);
	  var ret = '';
	  for (var i = 0; i < prefixes$1.length; i++) {
	    ret = style.getPropertyValue(prefixes$1[i] + name);
	    if (ret) {
	      break;
	    }
	  }
	  return ret;
	}

	function fixBrowserByTimeout(node) {
	  if (isCssAnimationSupported) {
	    var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;
	    var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;
	    var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
	    var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
	    var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
	    // sometimes, browser bug
	    node.rcEndAnimTimeout = setTimeout(function () {
	      node.rcEndAnimTimeout = null;
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }, time * 1000 + 200);
	  }
	}

	function clearBrowserBugTimeout(node) {
	  if (node.rcEndAnimTimeout) {
	    clearTimeout(node.rcEndAnimTimeout);
	    node.rcEndAnimTimeout = null;
	  }
	}

	var cssAnimation = function cssAnimation(node, transitionName, endCallback) {
	  var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof$2(transitionName)) === 'object';
	  var className = nameIsObj ? transitionName.name : transitionName;
	  var activeClassName = nameIsObj ? transitionName.active : transitionName + '-active';
	  var end = endCallback;
	  var start = void 0;
	  var active = void 0;

	  if (endCallback && Object.prototype.toString.call(endCallback) === '[object Object]') {
	    end = endCallback.end;
	    start = endCallback.start;
	    active = endCallback.active;
	  }

	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }

	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }

	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }

	    clearBrowserBugTimeout(node);

	    node.classList.remove(className);
	    node.classList.remove(activeClassName);

	    TransitionEvents.removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;

	    // Usually this optional end is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (end) {
	      end();
	    }
	  };

	  TransitionEvents.addEndEventListener(node, node.rcEndListener);

	  if (start) {
	    start();
	  }
	  node.classList.add(className);

	  node.rcAnimTimeout = setTimeout(function () {
	    node.rcAnimTimeout = null;
	    node.classList.add(activeClassName);
	    if (active) {
	      active();
	    }
	    fixBrowserByTimeout(node);
	  }, 0);

	  return {
	    stop: function stop() {
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }
	  };
	};

	cssAnimation.style = function (node, style, callback) {
	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }

	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }

	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }

	    clearBrowserBugTimeout(node);

	    TransitionEvents.removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;

	    // Usually this optional callback is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (callback) {
	      callback();
	    }
	  };

	  TransitionEvents.addEndEventListener(node, node.rcEndListener);

	  node.rcAnimTimeout = setTimeout(function () {
	    for (var s in style) {
	      if (style.hasOwnProperty(s)) {
	        node.style[s] = style[s];
	      }
	    }
	    node.rcAnimTimeout = null;
	    fixBrowserByTimeout(node);
	  }, 0);
	};

	cssAnimation.setTransition = function (node, p, value) {
	  var property = p;
	  var v = value;
	  if (value === undefined) {
	    v = property;
	    property = '';
	  }
	  property = property || '';
	  capitalPrefixes.forEach(function (prefix) {
	    node.style[prefix + 'Transition' + property] = v;
	  });
	};

	cssAnimation.isCssAnimationSupported = isCssAnimationSupported;

	var util = {
	  isAppearSupported: function isAppearSupported(props) {
	    return props.transitionName && props.transitionAppear || props.animation.appear;
	  },
	  isEnterSupported: function isEnterSupported(props) {
	    return props.transitionName && props.transitionEnter || props.animation.enter;
	  },
	  isLeaveSupported: function isLeaveSupported(props) {
	    return props.transitionName && props.transitionLeave || props.animation.leave;
	  },
	  allowAppearCallback: function allowAppearCallback(props) {
	    return props.transitionAppear || props.animation.appear;
	  },
	  allowEnterCallback: function allowEnterCallback(props) {
	    return props.transitionEnter || props.animation.enter;
	  },
	  allowLeaveCallback: function allowLeaveCallback(props) {
	    return props.transitionLeave || props.animation.leave;
	  }
	};

	var _createClass$2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$7(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$7(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var transitionMap = {
	  enter: 'transitionEnter',
	  appear: 'transitionAppear',
	  leave: 'transitionLeave'
	};

	var AnimateChild = function (_React$Component) {
	  _inherits$7(AnimateChild, _React$Component);

	  function AnimateChild() {
	    _classCallCheck$7(this, AnimateChild);

	    return _possibleConstructorReturn$7(this, (AnimateChild.__proto__ || Object.getPrototypeOf(AnimateChild)).apply(this, arguments));
	  }

	  _createClass$2(AnimateChild, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.stop();
	    }
	  }, {
	    key: 'componentWillEnter',
	    value: function componentWillEnter(done) {
	      if (util.isEnterSupported(this.props)) {
	        this.transition('enter', done);
	      } else {
	        done();
	      }
	    }
	  }, {
	    key: 'componentWillAppear',
	    value: function componentWillAppear(done) {
	      if (util.isAppearSupported(this.props)) {
	        this.transition('appear', done);
	      } else {
	        done();
	      }
	    }
	  }, {
	    key: 'componentWillLeave',
	    value: function componentWillLeave(done) {
	      if (util.isLeaveSupported(this.props)) {
	        this.transition('leave', done);
	      } else {
	        // always sync, do not interupt with react component life cycle
	        // update hidden -> animate hidden ->
	        // didUpdate -> animate leave -> unmount (if animate is none)
	        done();
	      }
	    }
	  }, {
	    key: 'transition',
	    value: function transition(animationType, finishCallback) {
	      var _this2 = this;

	      var node = reactDom.findDOMNode(this);
	      var props = this.props;
	      var transitionName = props.transitionName;
	      var nameIsObj = typeof transitionName === 'object';
	      this.stop();
	      var end = function end() {
	        _this2.stopper = null;
	        finishCallback();
	      };
	      if ((isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {
	        var name = nameIsObj ? transitionName[animationType] : transitionName + '-' + animationType;
	        var activeName = name + '-active';
	        if (nameIsObj && transitionName[animationType + 'Active']) {
	          activeName = transitionName[animationType + 'Active'];
	        }
	        this.stopper = cssAnimation(node, {
	          name: name,
	          active: activeName
	        }, end);
	      } else {
	        this.stopper = props.animation[animationType](node, end);
	      }
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      var stopper = this.stopper;
	      if (stopper) {
	        this.stopper = null;
	        stopper.stop();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);

	  return AnimateChild;
	}(react.Component);

	var _extends$6 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass$3 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _defineProperty$4(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$8(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$8(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$8(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var defaultKey = 'rc_animate_' + Date.now();

	function getChildrenFromProps(props) {
	  var children = props.children;
	  if (react.isValidElement(children)) {
	    if (!children.key) {
	      return react.cloneElement(children, {
	        key: defaultKey
	      });
	    }
	  }
	  return children;
	}

	function noop$1() {}

	var Animate = function (_React$Component) {
	  _inherits$8(Animate, _React$Component);

	  function Animate(props) {
	    _classCallCheck$8(this, Animate);

	    var _this = _possibleConstructorReturn$8(this, (Animate.__proto__ || Object.getPrototypeOf(Animate)).call(this, props));

	    _initialiseProps.call(_this);

	    _this.currentlyAnimatingKeys = {};
	    _this.keysToEnter = [];
	    _this.keysToLeave = [];

	    _this.state = {
	      children: toArrayChildren(getChildrenFromProps(props))
	    };

	    _this.childrenRefs = {};
	    return _this;
	  } // eslint-disable-line

	  _createClass$3(Animate, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;

	      var showProp = this.props.showProp;
	      var children = this.state.children;
	      if (showProp) {
	        children = children.filter(function (child) {
	          return !!child.props[showProp];
	        });
	      }
	      children.forEach(function (child) {
	        if (child) {
	          _this2.performAppear(child.key);
	        }
	      });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var _this3 = this;

	      this.nextProps = nextProps;
	      var nextChildren = toArrayChildren(getChildrenFromProps(nextProps));
	      var props = this.props;
	      // exclusive needs immediate response
	      if (props.exclusive) {
	        Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {
	          _this3.stop(key);
	        });
	      }
	      var showProp = props.showProp;
	      var currentlyAnimatingKeys = this.currentlyAnimatingKeys;
	      // last props children if exclusive
	      var currentChildren = props.exclusive ? toArrayChildren(getChildrenFromProps(props)) : this.state.children;
	      // in case destroy in showProp mode
	      var newChildren = [];
	      if (showProp) {
	        currentChildren.forEach(function (currentChild) {
	          var nextChild = currentChild && findChildInChildrenByKey(nextChildren, currentChild.key);
	          var newChild = void 0;
	          if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {
	            newChild = react.cloneElement(nextChild || currentChild, _defineProperty$4({}, showProp, true));
	          } else {
	            newChild = nextChild;
	          }
	          if (newChild) {
	            newChildren.push(newChild);
	          }
	        });
	        nextChildren.forEach(function (nextChild) {
	          if (!nextChild || !findChildInChildrenByKey(currentChildren, nextChild.key)) {
	            newChildren.push(nextChild);
	          }
	        });
	      } else {
	        newChildren = mergeChildren(currentChildren, nextChildren);
	      }

	      // need render to avoid update
	      this.setState({
	        children: newChildren
	      });

	      nextChildren.forEach(function (child) {
	        var key = child && child.key;
	        if (child && currentlyAnimatingKeys[key]) {
	          return;
	        }
	        var hasPrev = child && findChildInChildrenByKey(currentChildren, key);
	        if (showProp) {
	          var showInNext = child.props[showProp];
	          if (hasPrev) {
	            var showInNow = findShownChildInChildrenByKey(currentChildren, key, showProp);
	            if (!showInNow && showInNext) {
	              _this3.keysToEnter.push(key);
	            }
	          } else if (showInNext) {
	            _this3.keysToEnter.push(key);
	          }
	        } else if (!hasPrev) {
	          _this3.keysToEnter.push(key);
	        }
	      });

	      currentChildren.forEach(function (child) {
	        var key = child && child.key;
	        if (child && currentlyAnimatingKeys[key]) {
	          return;
	        }
	        var hasNext = child && findChildInChildrenByKey(nextChildren, key);
	        if (showProp) {
	          var showInNow = child.props[showProp];
	          if (hasNext) {
	            var showInNext = findShownChildInChildrenByKey(nextChildren, key, showProp);
	            if (!showInNext && showInNow) {
	              _this3.keysToLeave.push(key);
	            }
	          } else if (showInNow) {
	            _this3.keysToLeave.push(key);
	          }
	        } else if (!hasNext) {
	          _this3.keysToLeave.push(key);
	        }
	      });
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      var keysToEnter = this.keysToEnter;
	      this.keysToEnter = [];
	      keysToEnter.forEach(this.performEnter);
	      var keysToLeave = this.keysToLeave;
	      this.keysToLeave = [];
	      keysToLeave.forEach(this.performLeave);
	    }
	  }, {
	    key: 'isValidChildByKey',
	    value: function isValidChildByKey(currentChildren, key) {
	      var showProp = this.props.showProp;
	      if (showProp) {
	        return findShownChildInChildrenByKey(currentChildren, key, showProp);
	      }
	      return findChildInChildrenByKey(currentChildren, key);
	    }
	  }, {
	    key: 'stop',
	    value: function stop(key) {
	      delete this.currentlyAnimatingKeys[key];
	      var component = this.childrenRefs[key];
	      if (component) {
	        component.stop();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this4 = this;

	      var props = this.props;
	      this.nextProps = props;
	      var stateChildren = this.state.children;
	      var children = null;
	      if (stateChildren) {
	        children = stateChildren.map(function (child) {
	          if (child === null || child === undefined) {
	            return child;
	          }
	          if (!child.key) {
	            throw new Error('must set key for <rc-animate> children');
	          }
	          return react.createElement(
	            AnimateChild,
	            {
	              key: child.key,
	              ref: function ref(node) {
	                _this4.childrenRefs[child.key] = node;
	              },
	              animation: props.animation,
	              transitionName: props.transitionName,
	              transitionEnter: props.transitionEnter,
	              transitionAppear: props.transitionAppear,
	              transitionLeave: props.transitionLeave
	            },
	            child
	          );
	        });
	      }
	      var Component = props.component;
	      if (Component) {
	        var passedProps = props;
	        if (typeof Component === 'string') {
	          passedProps = _extends$6({
	            className: props.className,
	            style: props.style
	          }, props.componentProps);
	        }
	        return react.createElement(
	          Component,
	          passedProps,
	          children
	        );
	      }
	      return children[0] || null;
	    }
	  }]);

	  return Animate;
	}(react.Component);

	Animate.isAnimate = true;
	Animate.defaultProps = {
	  animation: {},
	  component: 'span',
	  componentProps: {},
	  transitionEnter: true,
	  transitionLeave: true,
	  transitionAppear: false,
	  onEnd: noop$1,
	  onEnter: noop$1,
	  onLeave: noop$1,
	  onAppear: noop$1
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this5 = this;

	  this.performEnter = function (key) {
	    // may already remove by exclusive
	    if (_this5.childrenRefs[key]) {
	      _this5.currentlyAnimatingKeys[key] = true;
	      _this5.childrenRefs[key].componentWillEnter(_this5.handleDoneAdding.bind(_this5, key, 'enter'));
	    }
	  };

	  this.performAppear = function (key) {
	    if (_this5.childrenRefs[key]) {
	      _this5.currentlyAnimatingKeys[key] = true;
	      _this5.childrenRefs[key].componentWillAppear(_this5.handleDoneAdding.bind(_this5, key, 'appear'));
	    }
	  };

	  this.handleDoneAdding = function (key, type) {
	    var props = _this5.props;
	    delete _this5.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== _this5.nextProps) {
	      return;
	    }
	    var currentChildren = toArrayChildren(getChildrenFromProps(props));
	    if (!_this5.isValidChildByKey(currentChildren, key)) {
	      // exclusive will not need this
	      _this5.performLeave(key);
	    } else if (type === 'appear') {
	      if (util.allowAppearCallback(props)) {
	        props.onAppear(key);
	        props.onEnd(key, true);
	      }
	    } else if (util.allowEnterCallback(props)) {
	      props.onEnter(key);
	      props.onEnd(key, true);
	    }
	  };

	  this.performLeave = function (key) {
	    // may already remove by exclusive
	    if (_this5.childrenRefs[key]) {
	      _this5.currentlyAnimatingKeys[key] = true;
	      _this5.childrenRefs[key].componentWillLeave(_this5.handleDoneLeaving.bind(_this5, key));
	    }
	  };

	  this.handleDoneLeaving = function (key) {
	    var props = _this5.props;
	    delete _this5.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== _this5.nextProps) {
	      return;
	    }
	    var currentChildren = toArrayChildren(getChildrenFromProps(props));
	    // in case state change is too fast
	    if (_this5.isValidChildByKey(currentChildren, key)) {
	      _this5.performEnter(key);
	    } else {
	      var end = function end() {
	        if (util.allowLeaveCallback(props)) {
	          props.onLeave(key);
	          props.onEnd(key, false);
	        }
	      };
	      if (!isSameChildren(_this5.state.children, currentChildren, props.showProp)) {
	        _this5.setState({
	          children: currentChildren
	        }, end);
	      } else {
	        end();
	      }
	    }
	  };
	};

	var Animate$1 = unsafeLifecyclesPolyfill(Animate);

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @returns {function|null}
	 */
	function createChainedFunction() {
	  var args = [].slice.call(arguments, 0);

	  if (args.length === 1) {
	    return args[0];
	  }

	  return function chainedFunction() {
	    for (var i = 0; i < args.length; i++) {
	      if (args[i] && args[i].apply) {
	        args[i].apply(this, arguments);
	      }
	    }
	  };
	}

	function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$6(this, result); }; }

	function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	var Notice = /*#__PURE__*/function (_Component) {
	  _inherits$6(Notice, _Component);

	  var _super = _createSuper$3(Notice);

	  function Notice() {
	    var _this;

	    _classCallCheck$6(this, Notice);

	    _this = _super.apply(this, arguments);
	    _this.closeTimer = null;

	    _this.close = function (e) {
	      if (e) {
	        e.stopPropagation();
	      }

	      _this.clearCloseTimer();

	      var onClose = _this.props.onClose;

	      if (onClose) {
	        onClose();
	      }
	    };

	    _this.startCloseTimer = function () {
	      if (_this.props.duration) {
	        _this.closeTimer = window.setTimeout(function () {
	          _this.close();
	        }, _this.props.duration * 1000);
	      }
	    };

	    _this.clearCloseTimer = function () {
	      if (_this.closeTimer) {
	        clearTimeout(_this.closeTimer);
	        _this.closeTimer = null;
	      }
	    };

	    return _this;
	  }

	  _createClass$1(Notice, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.startCloseTimer();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      if (this.props.duration !== prevProps.duration || this.props.update) {
	        this.restartCloseTimer();
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.clearCloseTimer();
	    }
	  }, {
	    key: "restartCloseTimer",
	    value: function restartCloseTimer() {
	      this.clearCloseTimer();
	      this.startCloseTimer();
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props = this.props,
	          prefixCls = _this$props.prefixCls,
	          className = _this$props.className,
	          closable = _this$props.closable,
	          closeIcon = _this$props.closeIcon,
	          style = _this$props.style,
	          onClick = _this$props.onClick,
	          children = _this$props.children,
	          holder = _this$props.holder;
	      var componentClass = "".concat(prefixCls, "-notice");
	      var dataOrAriaAttributeProps = Object.keys(this.props).reduce(function (acc, key) {
	        if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-' || key === 'role') {
	          acc[key] = _this2.props[key];
	        }

	        return acc;
	      }, {});
	      var node = react.createElement("div", Object.assign({
	        className: classnames(componentClass, className, _defineProperty$2({}, "".concat(componentClass, "-closable"), closable)),
	        style: style,
	        onMouseEnter: this.clearCloseTimer,
	        onMouseLeave: this.startCloseTimer,
	        onClick: onClick
	      }, dataOrAriaAttributeProps), react.createElement("div", {
	        className: "".concat(componentClass, "-content")
	      }, children), closable ? react.createElement("a", {
	        tabIndex: 0,
	        onClick: this.close,
	        className: "".concat(componentClass, "-close")
	      }, closeIcon || react.createElement("span", {
	        className: "".concat(componentClass, "-close-x")
	      })) : null);

	      if (holder) {
	        return reactDom.createPortal(node, holder);
	      }

	      return node;
	    }
	  }]);

	  return Notice;
	}(react.Component);
	Notice.defaultProps = {
	  onClose: function onClose() {},
	  duration: 1.5,
	  style: {
	    right: '50%'
	  }
	};

	function useNotification(notificationInstance) {
	  var createdRef = react.useRef({});

	  var _React$useState = react.useState([]),
	      _React$useState2 = _slicedToArray(_React$useState, 2),
	      elements = _React$useState2[0],
	      setElements = _React$useState2[1];

	  function notify(noticeProps) {
	    notificationInstance.add(noticeProps, function (div, props) {
	      var key = props.key;

	      if (div && !createdRef.current[key]) {
	        var noticeEle = react.createElement(Notice, Object.assign({}, props, {
	          holder: div
	        }));
	        createdRef.current[key] = noticeEle;
	        setElements(function (originElements) {
	          return [].concat(_toConsumableArray(originElements), [noticeEle]);
	        });
	      }
	    });
	  }

	  return [notify, react.createElement(react.Fragment, null, elements)];
	}

	function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$6(this, result); }; }

	function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	var seed = 0;
	var now = Date.now();

	function getUuid() {
	  var id = seed;
	  seed += 1;
	  return "rcNotification_".concat(now, "_").concat(id);
	}

	var Notification = /*#__PURE__*/function (_Component) {
	  _inherits$6(Notification, _Component);

	  var _super = _createSuper$4(Notification);

	  function Notification() {
	    var _this;

	    _classCallCheck$6(this, Notification);

	    _this = _super.apply(this, arguments);
	    _this.state = {
	      notices: []
	    };
	    _this.hookRefs = new Map();

	    _this.add = function (notice, holderCallback) {
	      // eslint-disable-next-line no-param-reassign
	      notice.key = notice.key || getUuid();
	      var key = notice.key;
	      var maxCount = _this.props.maxCount;

	      _this.setState(function (previousState) {
	        var notices = previousState.notices;
	        var noticeIndex = notices.map(function (v) {
	          return v.notice.key;
	        }).indexOf(key);
	        var updatedNotices = notices.concat();

	        if (noticeIndex !== -1) {
	          updatedNotices.splice(noticeIndex, 1, {
	            notice: notice,
	            holderCallback: holderCallback
	          });
	        } else {
	          if (maxCount && notices.length >= maxCount) {
	            // XXX, use key of first item to update new added (let React to move exsiting
	            // instead of remove and mount). Same key was used before for both a) external
	            // manual control and b) internal react 'key' prop , which is not that good.
	            // eslint-disable-next-line no-param-reassign
	            notice.updateKey = updatedNotices[0].notice.updateKey || updatedNotices[0].notice.key;
	            updatedNotices.shift();
	          }

	          updatedNotices.push({
	            notice: notice,
	            holderCallback: holderCallback
	          });
	        }

	        return {
	          notices: updatedNotices
	        };
	      });
	    };

	    _this.remove = function (key) {
	      _this.setState(function (previousState) {
	        return {
	          notices: previousState.notices.filter(function (_ref) {
	            var notice = _ref.notice;
	            return notice.key !== key;
	          })
	        };
	      });
	    };

	    return _this;
	  }

	  _createClass$1(Notification, [{
	    key: "getTransitionName",
	    value: function getTransitionName() {
	      var _this$props = this.props,
	          prefixCls = _this$props.prefixCls,
	          animation = _this$props.animation;
	      var transitionName = this.props.transitionName;

	      if (!transitionName && animation) {
	        transitionName = "".concat(prefixCls, "-").concat(animation);
	      }

	      return transitionName;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var notices = this.state.notices;
	      var _this$props2 = this.props,
	          prefixCls = _this$props2.prefixCls,
	          className = _this$props2.className,
	          closeIcon = _this$props2.closeIcon,
	          style = _this$props2.style;
	      var noticeNodes = notices.map(function (_ref2, index) {
	        var notice = _ref2.notice,
	            holderCallback = _ref2.holderCallback;
	        var update = Boolean(index === notices.length - 1 && notice.updateKey);
	        var key = notice.updateKey ? notice.updateKey : notice.key;
	        var onClose = createChainedFunction(_this2.remove.bind(_this2, notice.key), notice.onClose);

	        var noticeProps = _objectSpread$9(_objectSpread$9(_objectSpread$9({
	          prefixCls: prefixCls,
	          closeIcon: closeIcon
	        }, notice), notice.props), {}, {
	          key: key,
	          update: update,
	          onClose: onClose,
	          onClick: notice.onClick,
	          children: notice.content
	        });

	        if (holderCallback) {
	          return react.createElement("div", {
	            key: key,
	            className: "".concat(prefixCls, "-hook-holder"),
	            ref: function ref(div) {
	              if (typeof key === 'undefined') {
	                return;
	              }

	              if (div) {
	                _this2.hookRefs.set(key, div);

	                holderCallback(div, noticeProps);
	              } else {
	                _this2.hookRefs.delete(key);
	              }
	            }
	          });
	        }

	        return react.createElement(Notice, Object.assign({}, noticeProps));
	      });
	      return react.createElement("div", {
	        className: classnames(prefixCls, className),
	        style: style
	      }, react.createElement(Animate$1, {
	        transitionName: this.getTransitionName()
	      }, noticeNodes));
	    }
	  }]);

	  return Notification;
	}(react.Component);

	Notification.defaultProps = {
	  prefixCls: 'rc-notification',
	  animation: 'fade',
	  style: {
	    top: 65,
	    left: '50%'
	  }
	};

	Notification.newInstance = function newNotificationInstance(properties, callback) {
	  var _ref3 = properties || {},
	      getContainer = _ref3.getContainer,
	      props = _objectWithoutProperties$1(_ref3, ["getContainer"]);

	  var div = document.createElement('div');

	  if (getContainer) {
	    var root = getContainer();
	    root.appendChild(div);
	  } else {
	    document.body.appendChild(div);
	  }

	  var called = false;

	  function ref(notification) {
	    if (called) {
	      return;
	    }

	    called = true;
	    callback({
	      notice: function notice(noticeProps) {
	        notification.add(noticeProps);
	      },
	      removeNotice: function removeNotice(key) {
	        notification.remove(key);
	      },
	      component: notification,
	      destroy: function destroy() {
	        reactDom.unmountComponentAtNode(div);

	        if (div.parentNode) {
	          div.parentNode.removeChild(div);
	        }
	      },
	      // Hooks
	      useNotification: function useNotification$1() {
	        return useNotification(notification);
	      }
	    });
	  } // Only used for test case usage

	  reactDom.render(react.createElement(Notification, Object.assign({}, props, {
	    ref: ref
	  })), div);
	};

	var interopRequireDefault = createCommonjsModule(function (module) {
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}

	module.exports = _interopRequireDefault;
	});

	var interopRequireWildcard = createCommonjsModule(function (module) {
	function _getRequireWildcardCache() {
	  if (typeof WeakMap !== "function") return null;
	  var cache = new WeakMap();

	  _getRequireWildcardCache = function _getRequireWildcardCache() {
	    return cache;
	  };

	  return cache;
	}

	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  }

	  if (obj === null || _typeof_1(obj) !== "object" && typeof obj !== "function") {
	    return {
	      "default": obj
	    };
	  }

	  var cache = _getRequireWildcardCache();

	  if (cache && cache.has(obj)) {
	    return cache.get(obj);
	  }

	  var newObj = {};
	  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) {
	      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

	      if (desc && (desc.get || desc.set)) {
	        Object.defineProperty(newObj, key, desc);
	      } else {
	        newObj[key] = obj[key];
	      }
	    }
	  }

	  newObj["default"] = obj;

	  if (cache) {
	    cache.set(obj, newObj);
	  }

	  return newObj;
	}

	module.exports = _interopRequireWildcard;
	});

	var LoadingOutlined_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var LoadingOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z" } }] }, "name": "loading", "theme": "outlined" };
	exports.default = LoadingOutlined;
	});

	function _arrayWithHoles$2(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	var arrayWithHoles = _arrayWithHoles$2;

	function _iterableToArrayLimit$1(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	var iterableToArrayLimit = _iterableToArrayLimit$1;

	function _arrayLikeToArray$2(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	var arrayLikeToArray = _arrayLikeToArray$2;

	function _unsupportedIterableToArray$2(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
	}

	var unsupportedIterableToArray = _unsupportedIterableToArray$2;

	function _nonIterableRest$2() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	var nonIterableRest = _nonIterableRest$2;

	function _slicedToArray$1(arr, i) {
	  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
	}

	var slicedToArray = _slicedToArray$1;

	function _objectWithoutPropertiesLoose$1(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose$1;

	function _objectWithoutProperties$2(source, excluded) {
	  if (source == null) return {};
	  var target = objectWithoutPropertiesLoose(source, excluded);
	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	var objectWithoutProperties = _objectWithoutProperties$2;

	function ownKeys$b(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2$1(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$b(Object(source), true).forEach(function (key) {
	        defineProperty$3(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$b(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	var objectSpread2 = _objectSpread2$1;

	var tinycolor = createCommonjsModule(function (module) {
	// TinyColor v1.4.1
	// https://github.com/bgrins/TinyColor
	// Brian Grinstead, MIT License

	(function(Math) {

	var trimLeft = /^\s+/,
	    trimRight = /\s+$/,
	    tinyCounter = 0,
	    mathRound = Math.round,
	    mathMin = Math.min,
	    mathMax = Math.max,
	    mathRandom = Math.random;

	function tinycolor (color, opts) {

	    color = (color) ? color : '';
	    opts = opts || { };

	    // If input is already a tinycolor, return itself
	    if (color instanceof tinycolor) {
	       return color;
	    }
	    // If we are called as a function, call using new instead
	    if (!(this instanceof tinycolor)) {
	        return new tinycolor(color, opts);
	    }

	    var rgb = inputToRGB(color);
	    this._originalInput = color,
	    this._r = rgb.r,
	    this._g = rgb.g,
	    this._b = rgb.b,
	    this._a = rgb.a,
	    this._roundA = mathRound(100*this._a) / 100,
	    this._format = opts.format || rgb.format;
	    this._gradientType = opts.gradientType;

	    // Don't let the range of [0,255] come back in [0,1].
	    // Potentially lose a little bit of precision here, but will fix issues where
	    // .5 gets interpreted as half of the total, instead of half of 1
	    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
	    if (this._r < 1) { this._r = mathRound(this._r); }
	    if (this._g < 1) { this._g = mathRound(this._g); }
	    if (this._b < 1) { this._b = mathRound(this._b); }

	    this._ok = rgb.ok;
	    this._tc_id = tinyCounter++;
	}

	tinycolor.prototype = {
	    isDark: function() {
	        return this.getBrightness() < 128;
	    },
	    isLight: function() {
	        return !this.isDark();
	    },
	    isValid: function() {
	        return this._ok;
	    },
	    getOriginalInput: function() {
	      return this._originalInput;
	    },
	    getFormat: function() {
	        return this._format;
	    },
	    getAlpha: function() {
	        return this._a;
	    },
	    getBrightness: function() {
	        //http://www.w3.org/TR/AERT#color-contrast
	        var rgb = this.toRgb();
	        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
	    },
	    getLuminance: function() {
	        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
	        var rgb = this.toRgb();
	        var RsRGB, GsRGB, BsRGB, R, G, B;
	        RsRGB = rgb.r/255;
	        GsRGB = rgb.g/255;
	        BsRGB = rgb.b/255;

	        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
	        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
	        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
	        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
	    },
	    setAlpha: function(value) {
	        this._a = boundAlpha(value);
	        this._roundA = mathRound(100*this._a) / 100;
	        return this;
	    },
	    toHsv: function() {
	        var hsv = rgbToHsv(this._r, this._g, this._b);
	        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
	    },
	    toHsvString: function() {
	        var hsv = rgbToHsv(this._r, this._g, this._b);
	        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
	        return (this._a == 1) ?
	          "hsv("  + h + ", " + s + "%, " + v + "%)" :
	          "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
	    },
	    toHsl: function() {
	        var hsl = rgbToHsl(this._r, this._g, this._b);
	        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
	    },
	    toHslString: function() {
	        var hsl = rgbToHsl(this._r, this._g, this._b);
	        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
	        return (this._a == 1) ?
	          "hsl("  + h + ", " + s + "%, " + l + "%)" :
	          "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
	    },
	    toHex: function(allow3Char) {
	        return rgbToHex(this._r, this._g, this._b, allow3Char);
	    },
	    toHexString: function(allow3Char) {
	        return '#' + this.toHex(allow3Char);
	    },
	    toHex8: function(allow4Char) {
	        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
	    },
	    toHex8String: function(allow4Char) {
	        return '#' + this.toHex8(allow4Char);
	    },
	    toRgb: function() {
	        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
	    },
	    toRgbString: function() {
	        return (this._a == 1) ?
	          "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
	          "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
	    },
	    toPercentageRgb: function() {
	        return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
	    },
	    toPercentageRgbString: function() {
	        return (this._a == 1) ?
	          "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
	          "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
	    },
	    toName: function() {
	        if (this._a === 0) {
	            return "transparent";
	        }

	        if (this._a < 1) {
	            return false;
	        }

	        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
	    },
	    toFilter: function(secondColor) {
	        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
	        var secondHex8String = hex8String;
	        var gradientType = this._gradientType ? "GradientType = 1, " : "";

	        if (secondColor) {
	            var s = tinycolor(secondColor);
	            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
	        }

	        return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
	    },
	    toString: function(format) {
	        var formatSet = !!format;
	        format = format || this._format;

	        var formattedString = false;
	        var hasAlpha = this._a < 1 && this._a >= 0;
	        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

	        if (needsAlphaFormat) {
	            // Special case for "transparent", all other non-alpha formats
	            // will return rgba when there is transparency.
	            if (format === "name" && this._a === 0) {
	                return this.toName();
	            }
	            return this.toRgbString();
	        }
	        if (format === "rgb") {
	            formattedString = this.toRgbString();
	        }
	        if (format === "prgb") {
	            formattedString = this.toPercentageRgbString();
	        }
	        if (format === "hex" || format === "hex6") {
	            formattedString = this.toHexString();
	        }
	        if (format === "hex3") {
	            formattedString = this.toHexString(true);
	        }
	        if (format === "hex4") {
	            formattedString = this.toHex8String(true);
	        }
	        if (format === "hex8") {
	            formattedString = this.toHex8String();
	        }
	        if (format === "name") {
	            formattedString = this.toName();
	        }
	        if (format === "hsl") {
	            formattedString = this.toHslString();
	        }
	        if (format === "hsv") {
	            formattedString = this.toHsvString();
	        }

	        return formattedString || this.toHexString();
	    },
	    clone: function() {
	        return tinycolor(this.toString());
	    },

	    _applyModification: function(fn, args) {
	        var color = fn.apply(null, [this].concat([].slice.call(args)));
	        this._r = color._r;
	        this._g = color._g;
	        this._b = color._b;
	        this.setAlpha(color._a);
	        return this;
	    },
	    lighten: function() {
	        return this._applyModification(lighten, arguments);
	    },
	    brighten: function() {
	        return this._applyModification(brighten, arguments);
	    },
	    darken: function() {
	        return this._applyModification(darken, arguments);
	    },
	    desaturate: function() {
	        return this._applyModification(desaturate, arguments);
	    },
	    saturate: function() {
	        return this._applyModification(saturate, arguments);
	    },
	    greyscale: function() {
	        return this._applyModification(greyscale, arguments);
	    },
	    spin: function() {
	        return this._applyModification(spin, arguments);
	    },

	    _applyCombination: function(fn, args) {
	        return fn.apply(null, [this].concat([].slice.call(args)));
	    },
	    analogous: function() {
	        return this._applyCombination(analogous, arguments);
	    },
	    complement: function() {
	        return this._applyCombination(complement, arguments);
	    },
	    monochromatic: function() {
	        return this._applyCombination(monochromatic, arguments);
	    },
	    splitcomplement: function() {
	        return this._applyCombination(splitcomplement, arguments);
	    },
	    triad: function() {
	        return this._applyCombination(triad, arguments);
	    },
	    tetrad: function() {
	        return this._applyCombination(tetrad, arguments);
	    }
	};

	// If input is an object, force 1 into "1.0" to handle ratios properly
	// String input requires "1.0" as input, so 1 will be treated as 1
	tinycolor.fromRatio = function(color, opts) {
	    if (typeof color == "object") {
	        var newColor = {};
	        for (var i in color) {
	            if (color.hasOwnProperty(i)) {
	                if (i === "a") {
	                    newColor[i] = color[i];
	                }
	                else {
	                    newColor[i] = convertToPercentage(color[i]);
	                }
	            }
	        }
	        color = newColor;
	    }

	    return tinycolor(color, opts);
	};

	// Given a string or object, convert that input to RGB
	// Possible string inputs:
	//
	//     "red"
	//     "#f00" or "f00"
	//     "#ff0000" or "ff0000"
	//     "#ff000000" or "ff000000"
	//     "rgb 255 0 0" or "rgb (255, 0, 0)"
	//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
	//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
	//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
	//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
	//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
	//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
	//
	function inputToRGB(color) {

	    var rgb = { r: 0, g: 0, b: 0 };
	    var a = 1;
	    var s = null;
	    var v = null;
	    var l = null;
	    var ok = false;
	    var format = false;

	    if (typeof color == "string") {
	        color = stringInputToObject(color);
	    }

	    if (typeof color == "object") {
	        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
	            rgb = rgbToRgb(color.r, color.g, color.b);
	            ok = true;
	            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
	        }
	        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
	            s = convertToPercentage(color.s);
	            v = convertToPercentage(color.v);
	            rgb = hsvToRgb(color.h, s, v);
	            ok = true;
	            format = "hsv";
	        }
	        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
	            s = convertToPercentage(color.s);
	            l = convertToPercentage(color.l);
	            rgb = hslToRgb(color.h, s, l);
	            ok = true;
	            format = "hsl";
	        }

	        if (color.hasOwnProperty("a")) {
	            a = color.a;
	        }
	    }

	    a = boundAlpha(a);

	    return {
	        ok: ok,
	        format: color.format || format,
	        r: mathMin(255, mathMax(rgb.r, 0)),
	        g: mathMin(255, mathMax(rgb.g, 0)),
	        b: mathMin(255, mathMax(rgb.b, 0)),
	        a: a
	    };
	}


	// Conversion Functions
	// --------------------

	// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
	// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

	// `rgbToRgb`
	// Handle bounds / percentage checking to conform to CSS color spec
	// <http://www.w3.org/TR/css3-color/>
	// *Assumes:* r, g, b in [0, 255] or [0, 1]
	// *Returns:* { r, g, b } in [0, 255]
	function rgbToRgb(r, g, b){
	    return {
	        r: bound01(r, 255) * 255,
	        g: bound01(g, 255) * 255,
	        b: bound01(b, 255) * 255
	    };
	}

	// `rgbToHsl`
	// Converts an RGB color value to HSL.
	// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
	// *Returns:* { h, s, l } in [0,1]
	function rgbToHsl(r, g, b) {

	    r = bound01(r, 255);
	    g = bound01(g, 255);
	    b = bound01(b, 255);

	    var max = mathMax(r, g, b), min = mathMin(r, g, b);
	    var h, s, l = (max + min) / 2;

	    if(max == min) {
	        h = s = 0; // achromatic
	    }
	    else {
	        var d = max - min;
	        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	        switch(max) {
	            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
	            case g: h = (b - r) / d + 2; break;
	            case b: h = (r - g) / d + 4; break;
	        }

	        h /= 6;
	    }

	    return { h: h, s: s, l: l };
	}

	// `hslToRgb`
	// Converts an HSL color value to RGB.
	// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
	// *Returns:* { r, g, b } in the set [0, 255]
	function hslToRgb(h, s, l) {
	    var r, g, b;

	    h = bound01(h, 360);
	    s = bound01(s, 100);
	    l = bound01(l, 100);

	    function hue2rgb(p, q, t) {
	        if(t < 0) t += 1;
	        if(t > 1) t -= 1;
	        if(t < 1/6) return p + (q - p) * 6 * t;
	        if(t < 1/2) return q;
	        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
	        return p;
	    }

	    if(s === 0) {
	        r = g = b = l; // achromatic
	    }
	    else {
	        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	        var p = 2 * l - q;
	        r = hue2rgb(p, q, h + 1/3);
	        g = hue2rgb(p, q, h);
	        b = hue2rgb(p, q, h - 1/3);
	    }

	    return { r: r * 255, g: g * 255, b: b * 255 };
	}

	// `rgbToHsv`
	// Converts an RGB color value to HSV
	// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
	// *Returns:* { h, s, v } in [0,1]
	function rgbToHsv(r, g, b) {

	    r = bound01(r, 255);
	    g = bound01(g, 255);
	    b = bound01(b, 255);

	    var max = mathMax(r, g, b), min = mathMin(r, g, b);
	    var h, s, v = max;

	    var d = max - min;
	    s = max === 0 ? 0 : d / max;

	    if(max == min) {
	        h = 0; // achromatic
	    }
	    else {
	        switch(max) {
	            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
	            case g: h = (b - r) / d + 2; break;
	            case b: h = (r - g) / d + 4; break;
	        }
	        h /= 6;
	    }
	    return { h: h, s: s, v: v };
	}

	// `hsvToRgb`
	// Converts an HSV color value to RGB.
	// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
	// *Returns:* { r, g, b } in the set [0, 255]
	 function hsvToRgb(h, s, v) {

	    h = bound01(h, 360) * 6;
	    s = bound01(s, 100);
	    v = bound01(v, 100);

	    var i = Math.floor(h),
	        f = h - i,
	        p = v * (1 - s),
	        q = v * (1 - f * s),
	        t = v * (1 - (1 - f) * s),
	        mod = i % 6,
	        r = [v, q, p, p, t, v][mod],
	        g = [t, v, v, q, p, p][mod],
	        b = [p, p, t, v, v, q][mod];

	    return { r: r * 255, g: g * 255, b: b * 255 };
	}

	// `rgbToHex`
	// Converts an RGB color to hex
	// Assumes r, g, and b are contained in the set [0, 255]
	// Returns a 3 or 6 character hex
	function rgbToHex(r, g, b, allow3Char) {

	    var hex = [
	        pad2(mathRound(r).toString(16)),
	        pad2(mathRound(g).toString(16)),
	        pad2(mathRound(b).toString(16))
	    ];

	    // Return a 3 character hex if possible
	    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
	        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
	    }

	    return hex.join("");
	}

	// `rgbaToHex`
	// Converts an RGBA color plus alpha transparency to hex
	// Assumes r, g, b are contained in the set [0, 255] and
	// a in [0, 1]. Returns a 4 or 8 character rgba hex
	function rgbaToHex(r, g, b, a, allow4Char) {

	    var hex = [
	        pad2(mathRound(r).toString(16)),
	        pad2(mathRound(g).toString(16)),
	        pad2(mathRound(b).toString(16)),
	        pad2(convertDecimalToHex(a))
	    ];

	    // Return a 4 character hex if possible
	    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
	        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
	    }

	    return hex.join("");
	}

	// `rgbaToArgbHex`
	// Converts an RGBA color to an ARGB Hex8 string
	// Rarely used, but required for "toFilter()"
	function rgbaToArgbHex(r, g, b, a) {

	    var hex = [
	        pad2(convertDecimalToHex(a)),
	        pad2(mathRound(r).toString(16)),
	        pad2(mathRound(g).toString(16)),
	        pad2(mathRound(b).toString(16))
	    ];

	    return hex.join("");
	}

	// `equals`
	// Can be called with any tinycolor input
	tinycolor.equals = function (color1, color2) {
	    if (!color1 || !color2) { return false; }
	    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
	};

	tinycolor.random = function() {
	    return tinycolor.fromRatio({
	        r: mathRandom(),
	        g: mathRandom(),
	        b: mathRandom()
	    });
	};


	// Modification Functions
	// ----------------------
	// Thanks to less.js for some of the basics here
	// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

	function desaturate(color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var hsl = tinycolor(color).toHsl();
	    hsl.s -= amount / 100;
	    hsl.s = clamp01(hsl.s);
	    return tinycolor(hsl);
	}

	function saturate(color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var hsl = tinycolor(color).toHsl();
	    hsl.s += amount / 100;
	    hsl.s = clamp01(hsl.s);
	    return tinycolor(hsl);
	}

	function greyscale(color) {
	    return tinycolor(color).desaturate(100);
	}

	function lighten (color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var hsl = tinycolor(color).toHsl();
	    hsl.l += amount / 100;
	    hsl.l = clamp01(hsl.l);
	    return tinycolor(hsl);
	}

	function brighten(color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var rgb = tinycolor(color).toRgb();
	    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
	    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
	    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
	    return tinycolor(rgb);
	}

	function darken (color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var hsl = tinycolor(color).toHsl();
	    hsl.l -= amount / 100;
	    hsl.l = clamp01(hsl.l);
	    return tinycolor(hsl);
	}

	// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
	// Values outside of this range will be wrapped into this range.
	function spin(color, amount) {
	    var hsl = tinycolor(color).toHsl();
	    var hue = (hsl.h + amount) % 360;
	    hsl.h = hue < 0 ? 360 + hue : hue;
	    return tinycolor(hsl);
	}

	// Combination Functions
	// ---------------------
	// Thanks to jQuery xColor for some of the ideas behind these
	// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

	function complement(color) {
	    var hsl = tinycolor(color).toHsl();
	    hsl.h = (hsl.h + 180) % 360;
	    return tinycolor(hsl);
	}

	function triad(color) {
	    var hsl = tinycolor(color).toHsl();
	    var h = hsl.h;
	    return [
	        tinycolor(color),
	        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
	        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
	    ];
	}

	function tetrad(color) {
	    var hsl = tinycolor(color).toHsl();
	    var h = hsl.h;
	    return [
	        tinycolor(color),
	        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
	        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
	        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
	    ];
	}

	function splitcomplement(color) {
	    var hsl = tinycolor(color).toHsl();
	    var h = hsl.h;
	    return [
	        tinycolor(color),
	        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
	        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
	    ];
	}

	function analogous(color, results, slices) {
	    results = results || 6;
	    slices = slices || 30;

	    var hsl = tinycolor(color).toHsl();
	    var part = 360 / slices;
	    var ret = [tinycolor(color)];

	    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
	        hsl.h = (hsl.h + part) % 360;
	        ret.push(tinycolor(hsl));
	    }
	    return ret;
	}

	function monochromatic(color, results) {
	    results = results || 6;
	    var hsv = tinycolor(color).toHsv();
	    var h = hsv.h, s = hsv.s, v = hsv.v;
	    var ret = [];
	    var modification = 1 / results;

	    while (results--) {
	        ret.push(tinycolor({ h: h, s: s, v: v}));
	        v = (v + modification) % 1;
	    }

	    return ret;
	}

	// Utility Functions
	// ---------------------

	tinycolor.mix = function(color1, color2, amount) {
	    amount = (amount === 0) ? 0 : (amount || 50);

	    var rgb1 = tinycolor(color1).toRgb();
	    var rgb2 = tinycolor(color2).toRgb();

	    var p = amount / 100;

	    var rgba = {
	        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
	        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
	        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
	        a: ((rgb2.a - rgb1.a) * p) + rgb1.a
	    };

	    return tinycolor(rgba);
	};


	// Readability Functions
	// ---------------------
	// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

	// `contrast`
	// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
	tinycolor.readability = function(color1, color2) {
	    var c1 = tinycolor(color1);
	    var c2 = tinycolor(color2);
	    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
	};

	// `isReadable`
	// Ensure that foreground and background color combinations meet WCAG2 guidelines.
	// The third argument is an optional Object.
	//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
	//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
	// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

	// *Example*
	//    tinycolor.isReadable("#000", "#111") => false
	//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
	tinycolor.isReadable = function(color1, color2, wcag2) {
	    var readability = tinycolor.readability(color1, color2);
	    var wcag2Parms, out;

	    out = false;

	    wcag2Parms = validateWCAG2Parms(wcag2);
	    switch (wcag2Parms.level + wcag2Parms.size) {
	        case "AAsmall":
	        case "AAAlarge":
	            out = readability >= 4.5;
	            break;
	        case "AAlarge":
	            out = readability >= 3;
	            break;
	        case "AAAsmall":
	            out = readability >= 7;
	            break;
	    }
	    return out;

	};

	// `mostReadable`
	// Given a base color and a list of possible foreground or background
	// colors for that base, returns the most readable color.
	// Optionally returns Black or White if the most readable color is unreadable.
	// *Example*
	//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
	//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
	//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
	//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
	tinycolor.mostReadable = function(baseColor, colorList, args) {
	    var bestColor = null;
	    var bestScore = 0;
	    var readability;
	    var includeFallbackColors, level, size ;
	    args = args || {};
	    includeFallbackColors = args.includeFallbackColors ;
	    level = args.level;
	    size = args.size;

	    for (var i= 0; i < colorList.length ; i++) {
	        readability = tinycolor.readability(baseColor, colorList[i]);
	        if (readability > bestScore) {
	            bestScore = readability;
	            bestColor = tinycolor(colorList[i]);
	        }
	    }

	    if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
	        return bestColor;
	    }
	    else {
	        args.includeFallbackColors=false;
	        return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
	    }
	};


	// Big List of Colors
	// ------------------
	// <http://www.w3.org/TR/css3-color/#svg-color>
	var names = tinycolor.names = {
	    aliceblue: "f0f8ff",
	    antiquewhite: "faebd7",
	    aqua: "0ff",
	    aquamarine: "7fffd4",
	    azure: "f0ffff",
	    beige: "f5f5dc",
	    bisque: "ffe4c4",
	    black: "000",
	    blanchedalmond: "ffebcd",
	    blue: "00f",
	    blueviolet: "8a2be2",
	    brown: "a52a2a",
	    burlywood: "deb887",
	    burntsienna: "ea7e5d",
	    cadetblue: "5f9ea0",
	    chartreuse: "7fff00",
	    chocolate: "d2691e",
	    coral: "ff7f50",
	    cornflowerblue: "6495ed",
	    cornsilk: "fff8dc",
	    crimson: "dc143c",
	    cyan: "0ff",
	    darkblue: "00008b",
	    darkcyan: "008b8b",
	    darkgoldenrod: "b8860b",
	    darkgray: "a9a9a9",
	    darkgreen: "006400",
	    darkgrey: "a9a9a9",
	    darkkhaki: "bdb76b",
	    darkmagenta: "8b008b",
	    darkolivegreen: "556b2f",
	    darkorange: "ff8c00",
	    darkorchid: "9932cc",
	    darkred: "8b0000",
	    darksalmon: "e9967a",
	    darkseagreen: "8fbc8f",
	    darkslateblue: "483d8b",
	    darkslategray: "2f4f4f",
	    darkslategrey: "2f4f4f",
	    darkturquoise: "00ced1",
	    darkviolet: "9400d3",
	    deeppink: "ff1493",
	    deepskyblue: "00bfff",
	    dimgray: "696969",
	    dimgrey: "696969",
	    dodgerblue: "1e90ff",
	    firebrick: "b22222",
	    floralwhite: "fffaf0",
	    forestgreen: "228b22",
	    fuchsia: "f0f",
	    gainsboro: "dcdcdc",
	    ghostwhite: "f8f8ff",
	    gold: "ffd700",
	    goldenrod: "daa520",
	    gray: "808080",
	    green: "008000",
	    greenyellow: "adff2f",
	    grey: "808080",
	    honeydew: "f0fff0",
	    hotpink: "ff69b4",
	    indianred: "cd5c5c",
	    indigo: "4b0082",
	    ivory: "fffff0",
	    khaki: "f0e68c",
	    lavender: "e6e6fa",
	    lavenderblush: "fff0f5",
	    lawngreen: "7cfc00",
	    lemonchiffon: "fffacd",
	    lightblue: "add8e6",
	    lightcoral: "f08080",
	    lightcyan: "e0ffff",
	    lightgoldenrodyellow: "fafad2",
	    lightgray: "d3d3d3",
	    lightgreen: "90ee90",
	    lightgrey: "d3d3d3",
	    lightpink: "ffb6c1",
	    lightsalmon: "ffa07a",
	    lightseagreen: "20b2aa",
	    lightskyblue: "87cefa",
	    lightslategray: "789",
	    lightslategrey: "789",
	    lightsteelblue: "b0c4de",
	    lightyellow: "ffffe0",
	    lime: "0f0",
	    limegreen: "32cd32",
	    linen: "faf0e6",
	    magenta: "f0f",
	    maroon: "800000",
	    mediumaquamarine: "66cdaa",
	    mediumblue: "0000cd",
	    mediumorchid: "ba55d3",
	    mediumpurple: "9370db",
	    mediumseagreen: "3cb371",
	    mediumslateblue: "7b68ee",
	    mediumspringgreen: "00fa9a",
	    mediumturquoise: "48d1cc",
	    mediumvioletred: "c71585",
	    midnightblue: "191970",
	    mintcream: "f5fffa",
	    mistyrose: "ffe4e1",
	    moccasin: "ffe4b5",
	    navajowhite: "ffdead",
	    navy: "000080",
	    oldlace: "fdf5e6",
	    olive: "808000",
	    olivedrab: "6b8e23",
	    orange: "ffa500",
	    orangered: "ff4500",
	    orchid: "da70d6",
	    palegoldenrod: "eee8aa",
	    palegreen: "98fb98",
	    paleturquoise: "afeeee",
	    palevioletred: "db7093",
	    papayawhip: "ffefd5",
	    peachpuff: "ffdab9",
	    peru: "cd853f",
	    pink: "ffc0cb",
	    plum: "dda0dd",
	    powderblue: "b0e0e6",
	    purple: "800080",
	    rebeccapurple: "663399",
	    red: "f00",
	    rosybrown: "bc8f8f",
	    royalblue: "4169e1",
	    saddlebrown: "8b4513",
	    salmon: "fa8072",
	    sandybrown: "f4a460",
	    seagreen: "2e8b57",
	    seashell: "fff5ee",
	    sienna: "a0522d",
	    silver: "c0c0c0",
	    skyblue: "87ceeb",
	    slateblue: "6a5acd",
	    slategray: "708090",
	    slategrey: "708090",
	    snow: "fffafa",
	    springgreen: "00ff7f",
	    steelblue: "4682b4",
	    tan: "d2b48c",
	    teal: "008080",
	    thistle: "d8bfd8",
	    tomato: "ff6347",
	    turquoise: "40e0d0",
	    violet: "ee82ee",
	    wheat: "f5deb3",
	    white: "fff",
	    whitesmoke: "f5f5f5",
	    yellow: "ff0",
	    yellowgreen: "9acd32"
	};

	// Make it easy to access colors via `hexNames[hex]`
	var hexNames = tinycolor.hexNames = flip(names);


	// Utilities
	// ---------

	// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
	function flip(o) {
	    var flipped = { };
	    for (var i in o) {
	        if (o.hasOwnProperty(i)) {
	            flipped[o[i]] = i;
	        }
	    }
	    return flipped;
	}

	// Return a valid alpha value [0,1] with all invalid values being set to 1
	function boundAlpha(a) {
	    a = parseFloat(a);

	    if (isNaN(a) || a < 0 || a > 1) {
	        a = 1;
	    }

	    return a;
	}

	// Take input from [0, n] and return it as [0, 1]
	function bound01(n, max) {
	    if (isOnePointZero(n)) { n = "100%"; }

	    var processPercent = isPercentage(n);
	    n = mathMin(max, mathMax(0, parseFloat(n)));

	    // Automatically convert percentage into number
	    if (processPercent) {
	        n = parseInt(n * max, 10) / 100;
	    }

	    // Handle floating point rounding errors
	    if ((Math.abs(n - max) < 0.000001)) {
	        return 1;
	    }

	    // Convert into [0, 1] range if it isn't already
	    return (n % max) / parseFloat(max);
	}

	// Force a number between 0 and 1
	function clamp01(val) {
	    return mathMin(1, mathMax(0, val));
	}

	// Parse a base-16 hex value into a base-10 integer
	function parseIntFromHex(val) {
	    return parseInt(val, 16);
	}

	// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
	// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
	function isOnePointZero(n) {
	    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
	}

	// Check to see if string passed in is a percentage
	function isPercentage(n) {
	    return typeof n === "string" && n.indexOf('%') != -1;
	}

	// Force a hex value to have 2 characters
	function pad2(c) {
	    return c.length == 1 ? '0' + c : '' + c;
	}

	// Replace a decimal with it's percentage value
	function convertToPercentage(n) {
	    if (n <= 1) {
	        n = (n * 100) + "%";
	    }

	    return n;
	}

	// Converts a decimal to a hex value
	function convertDecimalToHex(d) {
	    return Math.round(parseFloat(d) * 255).toString(16);
	}
	// Converts a hex value to a decimal
	function convertHexToDecimal(h) {
	    return (parseIntFromHex(h) / 255);
	}

	var matchers = (function() {

	    // <http://www.w3.org/TR/css3-values/#integers>
	    var CSS_INTEGER = "[-\\+]?\\d+%?";

	    // <http://www.w3.org/TR/css3-values/#number-value>
	    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

	    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
	    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

	    // Actual matching.
	    // Parentheses and commas are optional, but not required.
	    // Whitespace can take the place of commas or opening paren
	    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
	    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

	    return {
	        CSS_UNIT: new RegExp(CSS_UNIT),
	        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
	        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
	        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
	        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
	        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
	        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
	        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
	        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
	        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
	        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
	    };
	})();

	// `isValidCSSUnit`
	// Take in a single string / number and check to see if it looks like a CSS unit
	// (see `matchers` above for definition).
	function isValidCSSUnit(color) {
	    return !!matchers.CSS_UNIT.exec(color);
	}

	// `stringInputToObject`
	// Permissive string parsing.  Take in a number of formats, and output an object
	// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
	function stringInputToObject(color) {

	    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
	    var named = false;
	    if (names[color]) {
	        color = names[color];
	        named = true;
	    }
	    else if (color == 'transparent') {
	        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
	    }

	    // Try to match string input using regular expressions.
	    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
	    // Just return an object and let the conversion functions handle that.
	    // This way the result will be the same whether the tinycolor is initialized with string or object.
	    var match;
	    if ((match = matchers.rgb.exec(color))) {
	        return { r: match[1], g: match[2], b: match[3] };
	    }
	    if ((match = matchers.rgba.exec(color))) {
	        return { r: match[1], g: match[2], b: match[3], a: match[4] };
	    }
	    if ((match = matchers.hsl.exec(color))) {
	        return { h: match[1], s: match[2], l: match[3] };
	    }
	    if ((match = matchers.hsla.exec(color))) {
	        return { h: match[1], s: match[2], l: match[3], a: match[4] };
	    }
	    if ((match = matchers.hsv.exec(color))) {
	        return { h: match[1], s: match[2], v: match[3] };
	    }
	    if ((match = matchers.hsva.exec(color))) {
	        return { h: match[1], s: match[2], v: match[3], a: match[4] };
	    }
	    if ((match = matchers.hex8.exec(color))) {
	        return {
	            r: parseIntFromHex(match[1]),
	            g: parseIntFromHex(match[2]),
	            b: parseIntFromHex(match[3]),
	            a: convertHexToDecimal(match[4]),
	            format: named ? "name" : "hex8"
	        };
	    }
	    if ((match = matchers.hex6.exec(color))) {
	        return {
	            r: parseIntFromHex(match[1]),
	            g: parseIntFromHex(match[2]),
	            b: parseIntFromHex(match[3]),
	            format: named ? "name" : "hex"
	        };
	    }
	    if ((match = matchers.hex4.exec(color))) {
	        return {
	            r: parseIntFromHex(match[1] + '' + match[1]),
	            g: parseIntFromHex(match[2] + '' + match[2]),
	            b: parseIntFromHex(match[3] + '' + match[3]),
	            a: convertHexToDecimal(match[4] + '' + match[4]),
	            format: named ? "name" : "hex8"
	        };
	    }
	    if ((match = matchers.hex3.exec(color))) {
	        return {
	            r: parseIntFromHex(match[1] + '' + match[1]),
	            g: parseIntFromHex(match[2] + '' + match[2]),
	            b: parseIntFromHex(match[3] + '' + match[3]),
	            format: named ? "name" : "hex"
	        };
	    }

	    return false;
	}

	function validateWCAG2Parms(parms) {
	    // return valid WCAG2 parms for isReadable.
	    // If input parms are invalid, return {"level":"AA", "size":"small"}
	    var level, size;
	    parms = parms || {"level":"AA", "size":"small"};
	    level = (parms.level || "AA").toUpperCase();
	    size = (parms.size || "small").toLowerCase();
	    if (level !== "AA" && level !== "AAA") {
	        level = "AA";
	    }
	    if (size !== "small" && size !== "large") {
	        size = "small";
	    }
	    return {"level":level, "size":size};
	}

	// Node: Export function
	if ( module.exports) {
	    module.exports = tinycolor;
	}
	// AMD/requirejs: Define the module
	else {
	    window.tinycolor = tinycolor;
	}

	})(Math);
	});

	var generate_1 = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var tinycolor2_1 = __importDefault(tinycolor);
	var hueStep = 2; // è²ç¸é¶æ¢¯
	var saturationStep = 16; // é¥±ååº¦é¶æ¢¯ï¼æµè²é¨å
	var saturationStep2 = 5; // é¥±ååº¦é¶æ¢¯ï¼æ·±è²é¨å
	var brightnessStep1 = 5; // äº®åº¦é¶æ¢¯ï¼æµè²é¨å
	var brightnessStep2 = 15; // äº®åº¦é¶æ¢¯ï¼æ·±è²é¨å
	var lightColorCount = 5; // æµè²æ°éï¼ä¸»è²ä¸
	var darkColorCount = 4; // æ·±è²æ°éï¼ä¸»è²ä¸
	function getHue(hsv, i, light) {
	    var hue;
	    // æ ¹æ®è²ç¸ä¸åï¼è²ç¸è½¬åä¸å
	    if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
	        hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;
	    }
	    else {
	        hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;
	    }
	    if (hue < 0) {
	        hue += 360;
	    }
	    else if (hue >= 360) {
	        hue -= 360;
	    }
	    return hue;
	}
	function getSaturation(hsv, i, light) {
	    // grey color don't change saturation
	    if (hsv.h === 0 && hsv.s === 0) {
	        return hsv.s;
	    }
	    var saturation;
	    if (light) {
	        saturation = Math.round(hsv.s * 100) - saturationStep * i;
	    }
	    else if (i === darkColorCount) {
	        saturation = Math.round(hsv.s * 100) + saturationStep;
	    }
	    else {
	        saturation = Math.round(hsv.s * 100) + saturationStep2 * i;
	    }
	    // è¾¹çå¼ä¿®æ­£
	    if (saturation > 100) {
	        saturation = 100;
	    }
	    // ç¬¬ä¸æ ¼ç s éå¶å¨ 6-10 ä¹é´
	    if (light && i === lightColorCount && saturation > 10) {
	        saturation = 10;
	    }
	    if (saturation < 6) {
	        saturation = 6;
	    }
	    return saturation;
	}
	function getValue(hsv, i, light) {
	    if (light) {
	        return Math.round(hsv.v * 100) + brightnessStep1 * i;
	    }
	    return Math.round(hsv.v * 100) - brightnessStep2 * i;
	}
	function generate(color) {
	    var patterns = [];
	    var pColor = tinycolor2_1.default(color);
	    for (var i = lightColorCount; i > 0; i -= 1) {
	        var hsv = pColor.toHsv();
	        var colorString = tinycolor2_1.default({
	            h: getHue(hsv, i, true),
	            s: getSaturation(hsv, i, true),
	            v: getValue(hsv, i, true),
	        }).toHexString();
	        patterns.push(colorString);
	    }
	    patterns.push(pColor.toHexString());
	    for (var i = 1; i <= darkColorCount; i += 1) {
	        var hsv = pColor.toHsv();
	        var colorString = tinycolor2_1.default({
	            h: getHue(hsv, i),
	            s: getSaturation(hsv, i),
	            v: getValue(hsv, i),
	        }).toHexString();
	        patterns.push(colorString);
	    }
	    return patterns;
	}
	exports.default = generate;
	});

	var lib$2 = createCommonjsModule(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var generate_1$1 = __importDefault(generate_1);
	exports.generate = generate_1$1.default;
	var presetPrimaryColors = {
	    red: '#F5222D',
	    volcano: '#FA541C',
	    orange: '#FA8C16',
	    gold: '#FAAD14',
	    yellow: '#FADB14',
	    lime: '#A0D911',
	    green: '#52C41A',
	    cyan: '#13C2C2',
	    blue: '#1890FF',
	    geekblue: '#2F54EB',
	    purple: '#722ED1',
	    magenta: '#EB2F96',
	    grey: '#666666',
	};
	exports.presetPrimaryColors = presetPrimaryColors;
	var presetPalettes = {};
	exports.presetPalettes = presetPalettes;
	Object.keys(presetPrimaryColors).forEach(function (key) {
	    presetPalettes[key] = generate_1$1.default(presetPrimaryColors[key]);
	    presetPalettes[key].primary = presetPalettes[key][5];
	});
	var red = presetPalettes.red;
	exports.red = red;
	var volcano = presetPalettes.volcano;
	exports.volcano = volcano;
	var gold = presetPalettes.gold;
	exports.gold = gold;
	var orange = presetPalettes.orange;
	exports.orange = orange;
	var yellow = presetPalettes.yellow;
	exports.yellow = yellow;
	var lime = presetPalettes.lime;
	exports.lime = lime;
	var green = presetPalettes.green;
	exports.green = green;
	var cyan = presetPalettes.cyan;
	exports.cyan = cyan;
	var blue = presetPalettes.blue;
	exports.blue = blue;
	var geekblue = presetPalettes.geekblue;
	exports.geekblue = geekblue;
	var purple = presetPalettes.purple;
	exports.purple = purple;
	var magenta = presetPalettes.magenta;
	exports.magenta = magenta;
	var grey = presetPalettes.grey;
	exports.grey = grey;
	});

	var warning_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.warning = warning;
	exports.note = note;
	exports.resetWarned = resetWarned;
	exports.call = call;
	exports.warningOnce = warningOnce;
	exports.noteOnce = noteOnce;
	exports.default = void 0;

	/* eslint-disable no-console */
	var warned = {};

	function warning(valid, message) {
	  // Support uglify
	  if ( !valid && console !== undefined) {
	    console.error("Warning: ".concat(message));
	  }
	}

	function note(valid, message) {
	  // Support uglify
	  if ( !valid && console !== undefined) {
	    console.warn("Note: ".concat(message));
	  }
	}

	function resetWarned() {
	  warned = {};
	}

	function call(method, valid, message) {
	  if (!valid && !warned[message]) {
	    method(false, message);
	    warned[message] = true;
	  }
	}

	function warningOnce(valid, message) {
	  call(warning, valid, message);
	}

	function noteOnce(valid, message) {
	  call(note, valid, message);
	}

	var _default = warningOnce;
	/* eslint-enable */

	exports.default = _default;
	});

	var containers = []; // will store container HTMLElement references
	var styleElements = []; // will store {prepend: HTMLElement, append: HTMLElement}

	var usage = 'insert-css: You need to provide a CSS string. Usage: insertCss(cssString[, options]).';

	function insertCss(css, options) {
	    options = options || {};

	    if (css === undefined) {
	        throw new Error(usage);
	    }

	    var position = options.prepend === true ? 'prepend' : 'append';
	    var container = options.container !== undefined ? options.container : document.querySelector('head');
	    var containerId = containers.indexOf(container);

	    // first time we see this container, create the necessary entries
	    if (containerId === -1) {
	        containerId = containers.push(container) - 1;
	        styleElements[containerId] = {};
	    }

	    // try to get the correponding container + position styleElement, create it otherwise
	    var styleElement;

	    if (styleElements[containerId] !== undefined && styleElements[containerId][position] !== undefined) {
	        styleElement = styleElements[containerId][position];
	    } else {
	        styleElement = styleElements[containerId][position] = createStyleElement();

	        if (position === 'prepend') {
	            container.insertBefore(styleElement, container.childNodes[0]);
	        } else {
	            container.appendChild(styleElement);
	        }
	    }

	    // strip potential UTF-8 BOM if css was read from a file
	    if (css.charCodeAt(0) === 0xFEFF) { css = css.substr(1, css.length); }

	    // actually add the stylesheet
	    if (styleElement.styleSheet) {
	        styleElement.styleSheet.cssText += css;
	    } else {
	        styleElement.textContent += css;
	    }

	    return styleElement;
	}
	function createStyleElement() {
	    var styleElement = document.createElement('style');
	    styleElement.setAttribute('type', 'text/css');
	    return styleElement;
	}

	var insertCss_1 = insertCss;
	var insertCss_2 = insertCss;
	insertCss_1.insertCss = insertCss_2;

	var utils = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.warning = warning;
	exports.isIconDefinition = isIconDefinition;
	exports.normalizeAttrs = normalizeAttrs;
	exports.generate = generate;
	exports.getSecondaryColor = getSecondaryColor;
	exports.normalizeTwoToneColors = normalizeTwoToneColors;
	exports.useInsertStyles = exports.iconStyles = exports.svgBaseProps = void 0;

	var _objectSpread2 = interopRequireDefault(objectSpread2);

	var _typeof2 = interopRequireDefault(_typeof_1);



	var _react = interopRequireWildcard(react);

	var _warning = interopRequireDefault(warning_1$1);



	function warning(valid, message) {
	  (0, _warning.default)(valid, "[@ant-design/icons] ".concat(message));
	}

	function isIconDefinition(target) {
	  return (0, _typeof2.default)(target) === 'object' && typeof target.name === 'string' && typeof target.theme === 'string' && ((0, _typeof2.default)(target.icon) === 'object' || typeof target.icon === 'function');
	}

	function normalizeAttrs() {
	  var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  return Object.keys(attrs).reduce(function (acc, key) {
	    var val = attrs[key];

	    switch (key) {
	      case 'class':
	        acc.className = val;
	        delete acc.class;
	        break;

	      default:
	        acc[key] = val;
	    }

	    return acc;
	  }, {});
	}

	function generate(node, key, rootProps) {
	  if (!rootProps) {
	    return _react.default.createElement(node.tag, (0, _objectSpread2.default)({
	      key: key
	    }, normalizeAttrs(node.attrs)), (node.children || []).map(function (child, index) {
	      return generate(child, "".concat(key, "-").concat(node.tag, "-").concat(index));
	    }));
	  }

	  return _react.default.createElement(node.tag, (0, _objectSpread2.default)((0, _objectSpread2.default)({
	    key: key
	  }, normalizeAttrs(node.attrs)), rootProps), (node.children || []).map(function (child, index) {
	    return generate(child, "".concat(key, "-").concat(node.tag, "-").concat(index));
	  }));
	}

	function getSecondaryColor(primaryColor) {
	  // choose the second color
	  return (0, lib$2.generate)(primaryColor)[0];
	}

	function normalizeTwoToneColors(twoToneColor) {
	  if (!twoToneColor) {
	    return [];
	  }

	  return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];
	} // These props make sure that the SVG behaviours like general text.
	// Reference: https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4


	var svgBaseProps = {
	  width: '1em',
	  height: '1em',
	  fill: 'currentColor',
	  'aria-hidden': 'true',
	  focusable: 'false'
	};
	exports.svgBaseProps = svgBaseProps;
	var iconStyles = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
	exports.iconStyles = iconStyles;
	var cssInjectedFlag = false;

	var useInsertStyles = function useInsertStyles() {
	  var styleStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : iconStyles;
	  (0, _react.useEffect)(function () {
	    if (!cssInjectedFlag) {
	      (0, insertCss_1.insertCss)(styleStr, {
	        prepend: true
	      });
	      cssInjectedFlag = true;
	    }
	  }, []);
	};

	exports.useInsertStyles = useInsertStyles;
	});

	var IconBase_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);

	var _objectSpread2 = interopRequireDefault(objectSpread2);



	var twoToneColorPalette = {
	  primaryColor: '#333',
	  secondaryColor: '#E6E6E6',
	  calculated: false
	};

	function setTwoToneColors(_ref) {
	  var primaryColor = _ref.primaryColor,
	      secondaryColor = _ref.secondaryColor;
	  twoToneColorPalette.primaryColor = primaryColor;
	  twoToneColorPalette.secondaryColor = secondaryColor || (0, utils.getSecondaryColor)(primaryColor);
	  twoToneColorPalette.calculated = !!secondaryColor;
	}

	function getTwoToneColors() {
	  return (0, _objectSpread2.default)({}, twoToneColorPalette);
	}

	var IconBase = function IconBase(props) {
	  var icon = props.icon,
	      className = props.className,
	      onClick = props.onClick,
	      style = props.style,
	      primaryColor = props.primaryColor,
	      secondaryColor = props.secondaryColor,
	      restProps = (0, _objectWithoutProperties2.default)(props, ["icon", "className", "onClick", "style", "primaryColor", "secondaryColor"]);
	  var colors = twoToneColorPalette;

	  if (primaryColor) {
	    colors = {
	      primaryColor: primaryColor,
	      secondaryColor: secondaryColor || (0, utils.getSecondaryColor)(primaryColor)
	    };
	  }

	  (0, utils.useInsertStyles)();
	  (0, utils.warning)((0, utils.isIconDefinition)(icon), "icon should be icon definiton, but got ".concat(icon));

	  if (!(0, utils.isIconDefinition)(icon)) {
	    return null;
	  }

	  var target = icon;

	  if (target && typeof target.icon === 'function') {
	    target = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, target), {}, {
	      icon: target.icon(colors.primaryColor, colors.secondaryColor)
	    });
	  }

	  return (0, utils.generate)(target.icon, "svg-".concat(target.name), (0, _objectSpread2.default)({
	    className: className,
	    onClick: onClick,
	    style: style,
	    'data-icon': target.name,
	    width: '1em',
	    height: '1em',
	    fill: 'currentColor',
	    'aria-hidden': 'true'
	  }, restProps));
	};

	IconBase.displayName = 'IconReact';
	IconBase.getTwoToneColors = getTwoToneColors;
	IconBase.setTwoToneColors = setTwoToneColors;
	var _default = IconBase;
	exports.default = _default;
	});

	var twoTonePrimaryColor = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.setTwoToneColor = setTwoToneColor;
	exports.getTwoToneColor = getTwoToneColor;

	var _slicedToArray2 = interopRequireDefault(slicedToArray);

	var _IconBase = interopRequireDefault(IconBase_1);



	function setTwoToneColor(twoToneColor) {
	  var _normalizeTwoToneColo = (0, utils.normalizeTwoToneColors)(twoToneColor),
	      _normalizeTwoToneColo2 = (0, _slicedToArray2.default)(_normalizeTwoToneColo, 2),
	      primaryColor = _normalizeTwoToneColo2[0],
	      secondaryColor = _normalizeTwoToneColo2[1];

	  return _IconBase.default.setTwoToneColors({
	    primaryColor: primaryColor,
	    secondaryColor: secondaryColor
	  });
	}

	function getTwoToneColor() {
	  var colors = _IconBase.default.getTwoToneColors();

	  if (!colors.calculated) {
	    return colors.primaryColor;
	  }

	  return [colors.primaryColor, colors.secondaryColor];
	}
	});

	var AntdIcon = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _slicedToArray2 = interopRequireDefault(slicedToArray);

	var _defineProperty2 = interopRequireDefault(defineProperty$3);

	var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);

	var React = interopRequireWildcard(react);

	var _classnames = interopRequireDefault(classnames);

	var _IconBase = interopRequireDefault(IconBase_1);





	// Initial setting
	// should move it to antd main repo?
	(0, twoTonePrimaryColor.setTwoToneColor)('#1890ff');
	var Icon = React.forwardRef(function (props, ref) {
	  var className = props.className,
	      icon = props.icon,
	      spin = props.spin,
	      rotate = props.rotate,
	      tabIndex = props.tabIndex,
	      onClick = props.onClick,
	      twoToneColor = props.twoToneColor,
	      restProps = (0, _objectWithoutProperties2.default)(props, ["className", "icon", "spin", "rotate", "tabIndex", "onClick", "twoToneColor"]);
	  var classString = (0, _classnames.default)('anticon', (0, _defineProperty2.default)({}, "anticon-".concat(icon.name), Boolean(icon.name)), className);
	  var svgClassString = (0, _classnames.default)({
	    'anticon-spin': !!spin || icon.name === 'loading'
	  });
	  var iconTabIndex = tabIndex;

	  if (iconTabIndex === undefined && onClick) {
	    iconTabIndex = -1;
	  }

	  var svgStyle = rotate ? {
	    msTransform: "rotate(".concat(rotate, "deg)"),
	    transform: "rotate(".concat(rotate, "deg)")
	  } : undefined;

	  var _normalizeTwoToneColo = (0, utils.normalizeTwoToneColors)(twoToneColor),
	      _normalizeTwoToneColo2 = (0, _slicedToArray2.default)(_normalizeTwoToneColo, 2),
	      primaryColor = _normalizeTwoToneColo2[0],
	      secondaryColor = _normalizeTwoToneColo2[1];

	  return React.createElement("span", Object.assign({
	    role: "img",
	    "aria-label": icon.name
	  }, restProps, {
	    ref: ref,
	    tabIndex: iconTabIndex,
	    onClick: onClick,
	    className: classString
	  }), React.createElement(_IconBase.default, {
	    className: svgClassString,
	    icon: icon,
	    primaryColor: primaryColor,
	    secondaryColor: secondaryColor,
	    style: svgStyle
	  }));
	});
	Icon.displayName = 'AntdIcon';
	Icon.getTwoToneColor = twoTonePrimaryColor.getTwoToneColor;
	Icon.setTwoToneColor = twoTonePrimaryColor.setTwoToneColor;
	var _default = Icon;
	exports.default = _default;
	});

	var LoadingOutlined_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _LoadingOutlined = interopRequireDefault(LoadingOutlined_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var LoadingOutlined = function LoadingOutlined(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _LoadingOutlined.default
	  }));
	};

	LoadingOutlined.displayName = 'LoadingOutlined';

	var _default = React.forwardRef(LoadingOutlined);

	exports.default = _default;
	});

	var LoadingOutlined = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _LoadingOutlined = _interopRequireDefault(LoadingOutlined_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _LoadingOutlined;
	  exports.default = _default;
	  module.exports = _default;
	});

	var LoadingOutlined$1 = /*@__PURE__*/getDefaultExportFromCjs(LoadingOutlined);

	var ExclamationCircleFilled_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var ExclamationCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "exclamation-circle", "theme": "filled" };
	exports.default = ExclamationCircleFilled;
	});

	var ExclamationCircleFilled_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _ExclamationCircleFilled = interopRequireDefault(ExclamationCircleFilled_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var ExclamationCircleFilled = function ExclamationCircleFilled(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _ExclamationCircleFilled.default
	  }));
	};

	ExclamationCircleFilled.displayName = 'ExclamationCircleFilled';

	var _default = React.forwardRef(ExclamationCircleFilled);

	exports.default = _default;
	});

	var ExclamationCircleFilled = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _ExclamationCircleFilled = _interopRequireDefault(ExclamationCircleFilled_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _ExclamationCircleFilled;
	  exports.default = _default;
	  module.exports = _default;
	});

	var ExclamationCircleFilled$1 = /*@__PURE__*/getDefaultExportFromCjs(ExclamationCircleFilled);

	var CloseCircleFilled_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var CloseCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z" } }] }, "name": "close-circle", "theme": "filled" };
	exports.default = CloseCircleFilled;
	});

	var CloseCircleFilled_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _CloseCircleFilled = interopRequireDefault(CloseCircleFilled_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var CloseCircleFilled = function CloseCircleFilled(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _CloseCircleFilled.default
	  }));
	};

	CloseCircleFilled.displayName = 'CloseCircleFilled';

	var _default = React.forwardRef(CloseCircleFilled);

	exports.default = _default;
	});

	var CloseCircleFilled = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _CloseCircleFilled = _interopRequireDefault(CloseCircleFilled_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _CloseCircleFilled;
	  exports.default = _default;
	  module.exports = _default;
	});

	var CloseCircleFilled$1 = /*@__PURE__*/getDefaultExportFromCjs(CloseCircleFilled);

	var CheckCircleFilled_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var CheckCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z" } }] }, "name": "check-circle", "theme": "filled" };
	exports.default = CheckCircleFilled;
	});

	var CheckCircleFilled_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _CheckCircleFilled = interopRequireDefault(CheckCircleFilled_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var CheckCircleFilled = function CheckCircleFilled(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _CheckCircleFilled.default
	  }));
	};

	CheckCircleFilled.displayName = 'CheckCircleFilled';

	var _default = React.forwardRef(CheckCircleFilled);

	exports.default = _default;
	});

	var CheckCircleFilled = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _CheckCircleFilled = _interopRequireDefault(CheckCircleFilled_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _CheckCircleFilled;
	  exports.default = _default;
	  module.exports = _default;
	});

	var CheckCircleFilled$1 = /*@__PURE__*/getDefaultExportFromCjs(CheckCircleFilled);

	var InfoCircleFilled_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var InfoCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "info-circle", "theme": "filled" };
	exports.default = InfoCircleFilled;
	});

	var InfoCircleFilled_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _InfoCircleFilled = interopRequireDefault(InfoCircleFilled_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var InfoCircleFilled = function InfoCircleFilled(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _InfoCircleFilled.default
	  }));
	};

	InfoCircleFilled.displayName = 'InfoCircleFilled';

	var _default = React.forwardRef(InfoCircleFilled);

	exports.default = _default;
	});

	var InfoCircleFilled = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _InfoCircleFilled = _interopRequireDefault(InfoCircleFilled_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _InfoCircleFilled;
	  exports.default = _default;
	  module.exports = _default;
	});

	var InfoCircleFilled$1 = /*@__PURE__*/getDefaultExportFromCjs(InfoCircleFilled);

	var defaultDuration = 3;
	var defaultTop;
	var messageInstance;
	var key$2 = 1;
	var prefixCls = 'ant-message';
	var transitionName = 'move-up';
	var getContainer;
	var maxCount;
	var rtl = false;

	function getMessageInstance(callback) {
	  if (messageInstance) {
	    callback(messageInstance);
	    return;
	  }

	  Notification.newInstance({
	    prefixCls: prefixCls,
	    transitionName: transitionName,
	    style: {
	      top: defaultTop
	    },
	    getContainer: getContainer,
	    maxCount: maxCount
	  }, function (instance) {
	    if (messageInstance) {
	      callback(messageInstance);
	      return;
	    }

	    messageInstance = instance;
	    callback(instance);
	  });
	}

	var iconMap = {
	  info: InfoCircleFilled$1,
	  success: CheckCircleFilled$1,
	  error: CloseCircleFilled$1,
	  warning: ExclamationCircleFilled$1,
	  loading: LoadingOutlined$1
	};

	function notice(args) {
	  var _classNames;

	  var duration = args.duration !== undefined ? args.duration : defaultDuration;
	  var IconComponent = iconMap[args.type];
	  var messageClass = classnames("".concat(prefixCls, "-custom-content"), (_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-").concat(args.type), args.type), defineProperty$3(_classNames, "".concat(prefixCls, "-rtl"), rtl === true), _classNames));
	  var target = args.key || key$2++;
	  var closePromise = new Promise(function (resolve) {
	    var callback = function callback() {
	      if (typeof args.onClose === 'function') {
	        args.onClose();
	      }

	      return resolve(true);
	    };

	    getMessageInstance(function (instance) {
	      instance.notice({
	        key: target,
	        duration: duration,
	        style: args.style || {},
	        className: args.className,
	        content: /*#__PURE__*/react.createElement("div", {
	          className: messageClass
	        }, args.icon || IconComponent && /*#__PURE__*/react.createElement(IconComponent, null), /*#__PURE__*/react.createElement("span", null, args.content)),
	        onClose: callback
	      });
	    });
	  });

	  var result = function result() {
	    if (messageInstance) {
	      messageInstance.removeNotice(target);
	    }
	  };

	  result.then = function (filled, rejected) {
	    return closePromise.then(filled, rejected);
	  };

	  result.promise = closePromise;
	  return result;
	}

	function isArgsProps(content) {
	  return Object.prototype.toString.call(content) === '[object Object]' && !!content.content;
	}

	var api = {
	  open: notice,
	  config: function config(options) {
	    if (options.top !== undefined) {
	      defaultTop = options.top;
	      messageInstance = null; // delete messageInstance for new defaultTop
	    }

	    if (options.duration !== undefined) {
	      defaultDuration = options.duration;
	    }

	    if (options.prefixCls !== undefined) {
	      prefixCls = options.prefixCls;
	    }

	    if (options.getContainer !== undefined) {
	      getContainer = options.getContainer;
	    }

	    if (options.transitionName !== undefined) {
	      transitionName = options.transitionName;
	      messageInstance = null; // delete messageInstance for new transitionName
	    }

	    if (options.maxCount !== undefined) {
	      maxCount = options.maxCount;
	      messageInstance = null;
	    }

	    if (options.rtl !== undefined) {
	      rtl = options.rtl;
	    }
	  },
	  destroy: function destroy() {
	    if (messageInstance) {
	      messageInstance.destroy();
	      messageInstance = null;
	    }
	  }
	};
	['success', 'info', 'warning', 'error', 'loading'].forEach(function (type) {
	  api[type] = function (content, duration, onClose) {
	    if (isArgsProps(content)) {
	      return api.open(_extends_1(_extends_1({}, content), {
	        type: type
	      }));
	    }

	    if (typeof duration === 'function') {
	      onClose = duration;
	      duration = undefined;
	    }

	    return api.open({
	      content: content,
	      duration: duration,
	      type: type,
	      onClose: onClose
	    });
	  };
	});
	api.warn = api.warning;

	var CloseOutlined_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var CloseOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z" } }] }, "name": "close", "theme": "outlined" };
	exports.default = CloseOutlined;
	});

	var CloseOutlined_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _CloseOutlined = interopRequireDefault(CloseOutlined_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var CloseOutlined = function CloseOutlined(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _CloseOutlined.default
	  }));
	};

	CloseOutlined.displayName = 'CloseOutlined';

	var _default = React.forwardRef(CloseOutlined);

	exports.default = _default;
	});

	var CloseOutlined = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _CloseOutlined = _interopRequireDefault(CloseOutlined_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _CloseOutlined;
	  exports.default = _default;
	  module.exports = _default;
	});

	var CloseOutlined$1 = /*@__PURE__*/getDefaultExportFromCjs(CloseOutlined);

	var CheckCircleOutlined_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var CheckCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z" } }, { "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }] }, "name": "check-circle", "theme": "outlined" };
	exports.default = CheckCircleOutlined;
	});

	var CheckCircleOutlined_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _CheckCircleOutlined = interopRequireDefault(CheckCircleOutlined_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var CheckCircleOutlined = function CheckCircleOutlined(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _CheckCircleOutlined.default
	  }));
	};

	CheckCircleOutlined.displayName = 'CheckCircleOutlined';

	var _default = React.forwardRef(CheckCircleOutlined);

	exports.default = _default;
	});

	var CheckCircleOutlined = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _CheckCircleOutlined = _interopRequireDefault(CheckCircleOutlined_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _CheckCircleOutlined;
	  exports.default = _default;
	  module.exports = _default;
	});

	var CheckCircleOutlined$1 = /*@__PURE__*/getDefaultExportFromCjs(CheckCircleOutlined);

	var CloseCircleOutlined_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var CloseCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z" } }, { "tag": "path", "attrs": { "d": "M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }] }, "name": "close-circle", "theme": "outlined" };
	exports.default = CloseCircleOutlined;
	});

	var CloseCircleOutlined_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _CloseCircleOutlined = interopRequireDefault(CloseCircleOutlined_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var CloseCircleOutlined = function CloseCircleOutlined(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _CloseCircleOutlined.default
	  }));
	};

	CloseCircleOutlined.displayName = 'CloseCircleOutlined';

	var _default = React.forwardRef(CloseCircleOutlined);

	exports.default = _default;
	});

	var CloseCircleOutlined = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _CloseCircleOutlined = _interopRequireDefault(CloseCircleOutlined_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _CloseCircleOutlined;
	  exports.default = _default;
	  module.exports = _default;
	});

	var CloseCircleOutlined$1 = /*@__PURE__*/getDefaultExportFromCjs(CloseCircleOutlined);

	var ExclamationCircleOutlined_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var ExclamationCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z" } }] }, "name": "exclamation-circle", "theme": "outlined" };
	exports.default = ExclamationCircleOutlined;
	});

	var ExclamationCircleOutlined_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _ExclamationCircleOutlined = interopRequireDefault(ExclamationCircleOutlined_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var ExclamationCircleOutlined = function ExclamationCircleOutlined(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _ExclamationCircleOutlined.default
	  }));
	};

	ExclamationCircleOutlined.displayName = 'ExclamationCircleOutlined';

	var _default = React.forwardRef(ExclamationCircleOutlined);

	exports.default = _default;
	});

	var ExclamationCircleOutlined = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _ExclamationCircleOutlined = _interopRequireDefault(ExclamationCircleOutlined_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _ExclamationCircleOutlined;
	  exports.default = _default;
	  module.exports = _default;
	});

	var ExclamationCircleOutlined$1 = /*@__PURE__*/getDefaultExportFromCjs(ExclamationCircleOutlined);

	var InfoCircleOutlined_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var InfoCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z" } }] }, "name": "info-circle", "theme": "outlined" };
	exports.default = InfoCircleOutlined;
	});

	var InfoCircleOutlined_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _InfoCircleOutlined = interopRequireDefault(InfoCircleOutlined_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var InfoCircleOutlined = function InfoCircleOutlined(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _InfoCircleOutlined.default
	  }));
	};

	InfoCircleOutlined.displayName = 'InfoCircleOutlined';

	var _default = React.forwardRef(InfoCircleOutlined);

	exports.default = _default;
	});

	var InfoCircleOutlined = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _InfoCircleOutlined = _interopRequireDefault(InfoCircleOutlined_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _InfoCircleOutlined;
	  exports.default = _default;
	  module.exports = _default;
	});

	var InfoCircleOutlined$1 = /*@__PURE__*/getDefaultExportFromCjs(InfoCircleOutlined);

	function _arrayWithoutHoles$2(arr) {
	  if (Array.isArray(arr)) return arrayLikeToArray(arr);
	}

	var arrayWithoutHoles = _arrayWithoutHoles$2;

	function _iterableToArray$2(iter) {
	  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
	}

	var iterableToArray = _iterableToArray$2;

	function _nonIterableSpread$2() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	var nonIterableSpread = _nonIterableSpread$2;

	function _toConsumableArray$2(arr) {
	  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
	}

	var toConsumableArray = _toConsumableArray$2;

	function addEventListenerWrap(target, eventType, cb, option) {
	  /* eslint camelcase: 2 */
	  var callback = reactDom.unstable_batchedUpdates ? function run(e) {
	    reactDom.unstable_batchedUpdates(cb, e);
	  } : cb;

	  if (target.addEventListener) {
	    target.addEventListener(eventType, callback, option);
	  }

	  return {
	    remove: function remove() {
	      if (target.removeEventListener) {
	        target.removeEventListener(eventType, callback);
	      }
	    }
	  };
	}

	function _isNativeReflectConstruct$6() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _createSuper$5(Derived) {
	  var hasNativeReflectConstruct = _isNativeReflectConstruct$6();
	  return function _createSuperInternal() {
	    var Super = _getPrototypeOf(Derived),
	        result;

	    if (hasNativeReflectConstruct) {
	      var NewTarget = _getPrototypeOf(this).constructor;
	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn$6(this, result);
	  };
	}

	/**
	 * @ignore
	 * some key-codes definition and utils from closure-library
	 * @author yiminghe@gmail.com
	 */
	var KeyCode = {
	  /**
	   * MAC_ENTER
	   */
	  MAC_ENTER: 3,

	  /**
	   * BACKSPACE
	   */
	  BACKSPACE: 8,

	  /**
	   * TAB
	   */
	  TAB: 9,

	  /**
	   * NUMLOCK on FF/Safari Mac
	   */
	  NUM_CENTER: 12,

	  /**
	   * ENTER
	   */
	  ENTER: 13,

	  /**
	   * SHIFT
	   */
	  SHIFT: 16,

	  /**
	   * CTRL
	   */
	  CTRL: 17,

	  /**
	   * ALT
	   */
	  ALT: 18,

	  /**
	   * PAUSE
	   */
	  PAUSE: 19,

	  /**
	   * CAPS_LOCK
	   */
	  CAPS_LOCK: 20,

	  /**
	   * ESC
	   */
	  ESC: 27,

	  /**
	   * SPACE
	   */
	  SPACE: 32,

	  /**
	   * PAGE_UP
	   */
	  PAGE_UP: 33,

	  /**
	   * PAGE_DOWN
	   */
	  PAGE_DOWN: 34,

	  /**
	   * END
	   */
	  END: 35,

	  /**
	   * HOME
	   */
	  HOME: 36,

	  /**
	   * LEFT
	   */
	  LEFT: 37,

	  /**
	   * UP
	   */
	  UP: 38,

	  /**
	   * RIGHT
	   */
	  RIGHT: 39,

	  /**
	   * DOWN
	   */
	  DOWN: 40,

	  /**
	   * PRINT_SCREEN
	   */
	  PRINT_SCREEN: 44,

	  /**
	   * INSERT
	   */
	  INSERT: 45,

	  /**
	   * DELETE
	   */
	  DELETE: 46,

	  /**
	   * ZERO
	   */
	  ZERO: 48,

	  /**
	   * ONE
	   */
	  ONE: 49,

	  /**
	   * TWO
	   */
	  TWO: 50,

	  /**
	   * THREE
	   */
	  THREE: 51,

	  /**
	   * FOUR
	   */
	  FOUR: 52,

	  /**
	   * FIVE
	   */
	  FIVE: 53,

	  /**
	   * SIX
	   */
	  SIX: 54,

	  /**
	   * SEVEN
	   */
	  SEVEN: 55,

	  /**
	   * EIGHT
	   */
	  EIGHT: 56,

	  /**
	   * NINE
	   */
	  NINE: 57,

	  /**
	   * QUESTION_MARK
	   */
	  QUESTION_MARK: 63,

	  /**
	   * A
	   */
	  A: 65,

	  /**
	   * B
	   */
	  B: 66,

	  /**
	   * C
	   */
	  C: 67,

	  /**
	   * D
	   */
	  D: 68,

	  /**
	   * E
	   */
	  E: 69,

	  /**
	   * F
	   */
	  F: 70,

	  /**
	   * G
	   */
	  G: 71,

	  /**
	   * H
	   */
	  H: 72,

	  /**
	   * I
	   */
	  I: 73,

	  /**
	   * J
	   */
	  J: 74,

	  /**
	   * K
	   */
	  K: 75,

	  /**
	   * L
	   */
	  L: 76,

	  /**
	   * M
	   */
	  M: 77,

	  /**
	   * N
	   */
	  N: 78,

	  /**
	   * O
	   */
	  O: 79,

	  /**
	   * P
	   */
	  P: 80,

	  /**
	   * Q
	   */
	  Q: 81,

	  /**
	   * R
	   */
	  R: 82,

	  /**
	   * S
	   */
	  S: 83,

	  /**
	   * T
	   */
	  T: 84,

	  /**
	   * U
	   */
	  U: 85,

	  /**
	   * V
	   */
	  V: 86,

	  /**
	   * W
	   */
	  W: 87,

	  /**
	   * X
	   */
	  X: 88,

	  /**
	   * Y
	   */
	  Y: 89,

	  /**
	   * Z
	   */
	  Z: 90,

	  /**
	   * META
	   */
	  META: 91,

	  /**
	   * WIN_KEY_RIGHT
	   */
	  WIN_KEY_RIGHT: 92,

	  /**
	   * CONTEXT_MENU
	   */
	  CONTEXT_MENU: 93,

	  /**
	   * NUM_ZERO
	   */
	  NUM_ZERO: 96,

	  /**
	   * NUM_ONE
	   */
	  NUM_ONE: 97,

	  /**
	   * NUM_TWO
	   */
	  NUM_TWO: 98,

	  /**
	   * NUM_THREE
	   */
	  NUM_THREE: 99,

	  /**
	   * NUM_FOUR
	   */
	  NUM_FOUR: 100,

	  /**
	   * NUM_FIVE
	   */
	  NUM_FIVE: 101,

	  /**
	   * NUM_SIX
	   */
	  NUM_SIX: 102,

	  /**
	   * NUM_SEVEN
	   */
	  NUM_SEVEN: 103,

	  /**
	   * NUM_EIGHT
	   */
	  NUM_EIGHT: 104,

	  /**
	   * NUM_NINE
	   */
	  NUM_NINE: 105,

	  /**
	   * NUM_MULTIPLY
	   */
	  NUM_MULTIPLY: 106,

	  /**
	   * NUM_PLUS
	   */
	  NUM_PLUS: 107,

	  /**
	   * NUM_MINUS
	   */
	  NUM_MINUS: 109,

	  /**
	   * NUM_PERIOD
	   */
	  NUM_PERIOD: 110,

	  /**
	   * NUM_DIVISION
	   */
	  NUM_DIVISION: 111,

	  /**
	   * F1
	   */
	  F1: 112,

	  /**
	   * F2
	   */
	  F2: 113,

	  /**
	   * F3
	   */
	  F3: 114,

	  /**
	   * F4
	   */
	  F4: 115,

	  /**
	   * F5
	   */
	  F5: 116,

	  /**
	   * F6
	   */
	  F6: 117,

	  /**
	   * F7
	   */
	  F7: 118,

	  /**
	   * F8
	   */
	  F8: 119,

	  /**
	   * F9
	   */
	  F9: 120,

	  /**
	   * F10
	   */
	  F10: 121,

	  /**
	   * F11
	   */
	  F11: 122,

	  /**
	   * F12
	   */
	  F12: 123,

	  /**
	   * NUMLOCK
	   */
	  NUMLOCK: 144,

	  /**
	   * SEMICOLON
	   */
	  SEMICOLON: 186,

	  /**
	   * DASH
	   */
	  DASH: 189,

	  /**
	   * EQUALS
	   */
	  EQUALS: 187,

	  /**
	   * COMMA
	   */
	  COMMA: 188,

	  /**
	   * PERIOD
	   */
	  PERIOD: 190,

	  /**
	   * SLASH
	   */
	  SLASH: 191,

	  /**
	   * APOSTROPHE
	   */
	  APOSTROPHE: 192,

	  /**
	   * SINGLE_QUOTE
	   */
	  SINGLE_QUOTE: 222,

	  /**
	   * OPEN_SQUARE_BRACKET
	   */
	  OPEN_SQUARE_BRACKET: 219,

	  /**
	   * BACKSLASH
	   */
	  BACKSLASH: 220,

	  /**
	   * CLOSE_SQUARE_BRACKET
	   */
	  CLOSE_SQUARE_BRACKET: 221,

	  /**
	   * WIN_KEY
	   */
	  WIN_KEY: 224,

	  /**
	   * MAC_FF_META
	   */
	  MAC_FF_META: 224,

	  /**
	   * WIN_IME
	   */
	  WIN_IME: 229,
	  // ======================== Function ========================

	  /**
	   * whether text and modified key is entered at the same time.
	   */
	  isTextModifyingKeyEvent: function isTextModifyingKeyEvent(e) {
	    var keyCode = e.keyCode;

	    if (e.altKey && !e.ctrlKey || e.metaKey || // Function keys don't generate text
	    keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
	      return false;
	    } // The following keys are quite harmless, even in combination with
	    // CTRL, ALT or SHIFT.


	    switch (keyCode) {
	      case KeyCode.ALT:
	      case KeyCode.CAPS_LOCK:
	      case KeyCode.CONTEXT_MENU:
	      case KeyCode.CTRL:
	      case KeyCode.DOWN:
	      case KeyCode.END:
	      case KeyCode.ESC:
	      case KeyCode.HOME:
	      case KeyCode.INSERT:
	      case KeyCode.LEFT:
	      case KeyCode.MAC_FF_META:
	      case KeyCode.META:
	      case KeyCode.NUMLOCK:
	      case KeyCode.NUM_CENTER:
	      case KeyCode.PAGE_DOWN:
	      case KeyCode.PAGE_UP:
	      case KeyCode.PAUSE:
	      case KeyCode.PRINT_SCREEN:
	      case KeyCode.RIGHT:
	      case KeyCode.SHIFT:
	      case KeyCode.UP:
	      case KeyCode.WIN_KEY:
	      case KeyCode.WIN_KEY_RIGHT:
	        return false;

	      default:
	        return true;
	    }
	  },

	  /**
	   * whether character is entered.
	   */
	  isCharacterKey: function isCharacterKey(keyCode) {
	    if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
	      return true;
	    }

	    if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
	      return true;
	    }

	    if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
	      return true;
	    } // Safari sends zero key code for non-latin characters.


	    if (window.navigator.userAgent.indexOf('WebKit') !== -1 && keyCode === 0) {
	      return true;
	    }

	    switch (keyCode) {
	      case KeyCode.SPACE:
	      case KeyCode.QUESTION_MARK:
	      case KeyCode.NUM_PLUS:
	      case KeyCode.NUM_MINUS:
	      case KeyCode.NUM_PERIOD:
	      case KeyCode.NUM_DIVISION:
	      case KeyCode.SEMICOLON:
	      case KeyCode.DASH:
	      case KeyCode.EQUALS:
	      case KeyCode.COMMA:
	      case KeyCode.PERIOD:
	      case KeyCode.SLASH:
	      case KeyCode.APOSTROPHE:
	      case KeyCode.SINGLE_QUOTE:
	      case KeyCode.OPEN_SQUARE_BRACKET:
	      case KeyCode.BACKSLASH:
	      case KeyCode.CLOSE_SQUARE_BRACKET:
	        return true;

	      default:
	        return false;
	    }
	  }
	};

	function useMemo(getValue, condition, shouldUpdate) {
	  var cacheRef = react.useRef({});

	  if (!('value' in cacheRef.current) || shouldUpdate(cacheRef.current.condition, condition)) {
	    cacheRef.current.value = getValue();
	    cacheRef.current.condition = condition;
	  }

	  return cacheRef.current.value;
	}

	function ownKeys$c(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2$2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$c(Object(source), true).forEach(function (key) {
	        _defineProperty$2(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$c(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	var canUseDOM$1 = !!(typeof window !== 'undefined' && window.document && window.document.createElement); // ================= Transition =================
	// Event wrapper. Copy from react source code

	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes["Webkit".concat(styleProp)] = "webkit".concat(eventName);
	  prefixes["Moz".concat(styleProp)] = "moz".concat(eventName);
	  prefixes["ms".concat(styleProp)] = "MS".concat(eventName);
	  prefixes["O".concat(styleProp)] = "o".concat(eventName.toLowerCase());
	  return prefixes;
	}

	function getVendorPrefixes(domSupport, win) {
	  var prefixes = {
	    animationend: makePrefixMap('Animation', 'AnimationEnd'),
	    transitionend: makePrefixMap('Transition', 'TransitionEnd')
	  };

	  if (domSupport) {
	    if (!('AnimationEvent' in win)) {
	      delete prefixes.animationend.animation;
	    }

	    if (!('TransitionEvent' in win)) {
	      delete prefixes.transitionend.transition;
	    }
	  }

	  return prefixes;
	}
	var vendorPrefixes = getVendorPrefixes(canUseDOM$1, typeof window !== 'undefined' ? window : {});
	var style$1 = {};

	if (canUseDOM$1) {
	  var _document$createEleme = document.createElement('div');

	  style$1 = _document$createEleme.style;
	}

	var prefixedEventNames = {};
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  if (prefixMap) {
	    var stylePropList = Object.keys(prefixMap);
	    var len = stylePropList.length;

	    for (var i = 0; i < len; i += 1) {
	      var styleProp = stylePropList[i];

	      if (Object.prototype.hasOwnProperty.call(prefixMap, styleProp) && styleProp in style$1) {
	        prefixedEventNames[eventName] = prefixMap[styleProp];
	        return prefixedEventNames[eventName];
	      }
	    }
	  }

	  return '';
	}
	var animationEndName = getVendorPrefixedEventName('animationend');
	var transitionEndName = getVendorPrefixedEventName('transitionend');
	var supportTransition = !!(animationEndName && transitionEndName);
	function getTransitionName(transitionName, transitionType) {
	  if (!transitionName) return null;

	  if (_typeof(transitionName) === 'object') {
	    var type = transitionType.replace(/-\w/g, function (match) {
	      return match[1].toUpperCase();
	    });
	    return transitionName[type];
	  }

	  return "".concat(transitionName, "-").concat(transitionType);
	}

	var STATUS_NONE = 'none';
	var STATUS_APPEAR = 'appear';
	var STATUS_ENTER = 'enter';
	var STATUS_LEAVE = 'leave';
	/**
	 * `transitionSupport` is used for none transition test case.
	 * Default we use browser transition event support check.
	 */

	function genCSSMotion(config) {
	  var transitionSupport = config;
	  var forwardRef = !!react.forwardRef;

	  if (_typeof(config) === 'object') {
	    transitionSupport = config.transitionSupport;
	    forwardRef = 'forwardRef' in config ? config.forwardRef : forwardRef;
	  }

	  function isSupportTransition(props) {
	    return !!(props.motionName && transitionSupport);
	  }

	  var CSSMotion = /*#__PURE__*/function (_React$Component) {
	    _inherits$6(CSSMotion, _React$Component);

	    var _super = _createSuper$5(CSSMotion);

	    function CSSMotion() {
	      var _this;

	      _classCallCheck$6(this, CSSMotion);

	      _this = _super.apply(this, arguments);
	      _this.$cacheEle = null;
	      _this.node = null;
	      _this.raf = null;
	      _this.destroyed = false;
	      _this.deadlineId = null;
	      _this.state = {
	        status: STATUS_NONE,
	        statusActive: false,
	        newStatus: false,
	        statusStyle: null
	      };

	      _this.onDomUpdate = function () {
	        var _this$state = _this.state,
	            status = _this$state.status,
	            newStatus = _this$state.newStatus;
	        var _this$props = _this.props,
	            onAppearStart = _this$props.onAppearStart,
	            onEnterStart = _this$props.onEnterStart,
	            onLeaveStart = _this$props.onLeaveStart,
	            onAppearActive = _this$props.onAppearActive,
	            onEnterActive = _this$props.onEnterActive,
	            onLeaveActive = _this$props.onLeaveActive,
	            motionAppear = _this$props.motionAppear,
	            motionEnter = _this$props.motionEnter,
	            motionLeave = _this$props.motionLeave;

	        if (!isSupportTransition(_this.props)) {
	          return;
	        } // Event injection


	        var $ele = _this.getElement();

	        if (_this.$cacheEle !== $ele) {
	          _this.removeEventListener(_this.$cacheEle);

	          _this.addEventListener($ele);

	          _this.$cacheEle = $ele;
	        } // Init status


	        if (newStatus && status === STATUS_APPEAR && motionAppear) {
	          _this.updateStatus(onAppearStart, null, null, function () {
	            _this.updateActiveStatus(onAppearActive, STATUS_APPEAR);
	          });
	        } else if (newStatus && status === STATUS_ENTER && motionEnter) {
	          _this.updateStatus(onEnterStart, null, null, function () {
	            _this.updateActiveStatus(onEnterActive, STATUS_ENTER);
	          });
	        } else if (newStatus && status === STATUS_LEAVE && motionLeave) {
	          _this.updateStatus(onLeaveStart, null, null, function () {
	            _this.updateActiveStatus(onLeaveActive, STATUS_LEAVE);
	          });
	        }
	      };

	      _this.onMotionEnd = function (event) {
	        if (event && !event.deadline && event.target !== _this.getElement()) {
	          // event exists
	          // not initiated by deadline
	          // transitionend not fired by inner elements
	          return;
	        }

	        var _this$state2 = _this.state,
	            status = _this$state2.status,
	            statusActive = _this$state2.statusActive;
	        var _this$props2 = _this.props,
	            onAppearEnd = _this$props2.onAppearEnd,
	            onEnterEnd = _this$props2.onEnterEnd,
	            onLeaveEnd = _this$props2.onLeaveEnd;

	        if (status === STATUS_APPEAR && statusActive) {
	          _this.updateStatus(onAppearEnd, {
	            status: STATUS_NONE
	          }, event);
	        } else if (status === STATUS_ENTER && statusActive) {
	          _this.updateStatus(onEnterEnd, {
	            status: STATUS_NONE
	          }, event);
	        } else if (status === STATUS_LEAVE && statusActive) {
	          _this.updateStatus(onLeaveEnd, {
	            status: STATUS_NONE
	          }, event);
	        }
	      };

	      _this.setNodeRef = function (node) {
	        var internalRef = _this.props.internalRef;
	        _this.node = node;
	        fillRef(internalRef, node);
	      };

	      _this.getElement = function () {
	        try {
	          return findDOMNode(_this.node || _assertThisInitialized(_this));
	        } catch (e) {
	          /**
	           * Fallback to cache element.
	           * This is only happen when `motionDeadline` trigger but element removed.
	           */
	          return _this.$cacheEle;
	        }
	      };

	      _this.addEventListener = function ($ele) {
	        if (!$ele) return;
	        $ele.addEventListener(transitionEndName, _this.onMotionEnd);
	        $ele.addEventListener(animationEndName, _this.onMotionEnd);
	      };

	      _this.removeEventListener = function ($ele) {
	        if (!$ele) return;
	        $ele.removeEventListener(transitionEndName, _this.onMotionEnd);
	        $ele.removeEventListener(animationEndName, _this.onMotionEnd);
	      };

	      _this.updateStatus = function (styleFunc, additionalState, event, callback) {
	        var statusStyle = styleFunc ? styleFunc(_this.getElement(), event) : null;
	        if (statusStyle === false || _this.destroyed) return;
	        var nextStep;

	        if (callback) {
	          nextStep = function nextStep() {
	            _this.nextFrame(callback);
	          };
	        }

	        _this.setState(_objectSpread2$2({
	          statusStyle: _typeof(statusStyle) === 'object' ? statusStyle : null,
	          newStatus: false
	        }, additionalState), nextStep); // Trigger before next frame & after `componentDidMount`

	      };

	      _this.updateActiveStatus = function (styleFunc, currentStatus) {
	        // `setState` use `postMessage` to trigger at the end of frame.
	        // Let's use requestAnimationFrame to update new state in next frame.
	        _this.nextFrame(function () {
	          var status = _this.state.status;
	          if (status !== currentStatus) return;
	          var motionDeadline = _this.props.motionDeadline;

	          _this.updateStatus(styleFunc, {
	            statusActive: true
	          });

	          if (motionDeadline > 0) {
	            _this.deadlineId = setTimeout(function () {
	              _this.onMotionEnd({
	                deadline: true
	              });
	            }, motionDeadline);
	          }
	        });
	      };

	      _this.nextFrame = function (func) {
	        _this.cancelNextFrame();

	        _this.raf = raf_1(func);
	      };

	      _this.cancelNextFrame = function () {
	        if (_this.raf) {
	          raf_1.cancel(_this.raf);
	          _this.raf = null;
	        }
	      };

	      return _this;
	    }

	    _createClass$1(CSSMotion, [{
	      key: "componentDidMount",
	      value: function componentDidMount() {
	        this.onDomUpdate();
	      }
	    }, {
	      key: "componentDidUpdate",
	      value: function componentDidUpdate() {
	        this.onDomUpdate();
	      }
	    }, {
	      key: "componentWillUnmount",
	      value: function componentWillUnmount() {
	        this.destroyed = true;
	        this.removeEventListener(this.$cacheEle);
	        this.cancelNextFrame();
	        clearTimeout(this.deadlineId);
	      }
	    }, {
	      key: "render",
	      value: function render() {
	        var _classNames;

	        var _this$state3 = this.state,
	            status = _this$state3.status,
	            statusActive = _this$state3.statusActive,
	            statusStyle = _this$state3.statusStyle;
	        var _this$props3 = this.props,
	            children = _this$props3.children,
	            motionName = _this$props3.motionName,
	            visible = _this$props3.visible,
	            removeOnLeave = _this$props3.removeOnLeave,
	            leavedClassName = _this$props3.leavedClassName,
	            eventProps = _this$props3.eventProps;
	        if (!children) return null;

	        if (status === STATUS_NONE || !isSupportTransition(this.props)) {
	          if (visible) {
	            return children(_objectSpread2$2({}, eventProps), this.setNodeRef);
	          }

	          if (!removeOnLeave) {
	            return children(_objectSpread2$2(_objectSpread2$2({}, eventProps), {}, {
	              className: leavedClassName
	            }), this.setNodeRef);
	          }

	          return null;
	        }

	        return children(_objectSpread2$2(_objectSpread2$2({}, eventProps), {}, {
	          className: classnames(getTransitionName(motionName, status), (_classNames = {}, _defineProperty$2(_classNames, getTransitionName(motionName, "".concat(status, "-active")), statusActive), _defineProperty$2(_classNames, motionName, typeof motionName === 'string'), _classNames)),
	          style: statusStyle
	        }), this.setNodeRef);
	      }
	    }], [{
	      key: "getDerivedStateFromProps",
	      value: function getDerivedStateFromProps(props, _ref) {
	        var prevProps = _ref.prevProps,
	            prevStatus = _ref.status;
	        if (!isSupportTransition(props)) return {};
	        var visible = props.visible,
	            motionAppear = props.motionAppear,
	            motionEnter = props.motionEnter,
	            motionLeave = props.motionLeave,
	            motionLeaveImmediately = props.motionLeaveImmediately;
	        var newState = {
	          prevProps: props
	        }; // Clean up status if prop set to false

	        if (prevStatus === STATUS_APPEAR && !motionAppear || prevStatus === STATUS_ENTER && !motionEnter || prevStatus === STATUS_LEAVE && !motionLeave) {
	          newState.status = STATUS_NONE;
	          newState.statusActive = false;
	          newState.newStatus = false;
	        } // Appear


	        if (!prevProps && visible && motionAppear) {
	          newState.status = STATUS_APPEAR;
	          newState.statusActive = false;
	          newState.newStatus = true;
	        } // Enter


	        if (prevProps && !prevProps.visible && visible && motionEnter) {
	          newState.status = STATUS_ENTER;
	          newState.statusActive = false;
	          newState.newStatus = true;
	        } // Leave


	        if (prevProps && prevProps.visible && !visible && motionLeave || !prevProps && motionLeaveImmediately && !visible && motionLeave) {
	          newState.status = STATUS_LEAVE;
	          newState.statusActive = false;
	          newState.newStatus = true;
	        }

	        return newState;
	      }
	    }]);

	    return CSSMotion;
	  }(react.Component);

	  CSSMotion.defaultProps = {
	    visible: true,
	    motionEnter: true,
	    motionAppear: true,
	    motionLeave: true,
	    removeOnLeave: true
	  };

	  if (!forwardRef) {
	    return CSSMotion;
	  }

	  return react.forwardRef(function (props, ref) {
	    return react.createElement(CSSMotion, Object.assign({
	      internalRef: ref
	    }, props));
	  });
	}
	var CSSMotion = genCSSMotion(supportTransition);

	var STATUS_ADD = 'add';
	var STATUS_KEEP = 'keep';
	var STATUS_REMOVE = 'remove';
	var STATUS_REMOVED = 'removed';
	function wrapKeyToObject(key) {
	  var keyObj;

	  if (key && _typeof(key) === 'object' && 'key' in key) {
	    keyObj = key;
	  } else {
	    keyObj = {
	      key: key
	    };
	  }

	  return _objectSpread2$2(_objectSpread2$2({}, keyObj), {}, {
	    key: String(keyObj.key)
	  });
	}
	function parseKeys() {
	  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  return keys.map(wrapKeyToObject);
	}
	function diffKeys() {
	  var prevKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  var currentKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	  var list = [];
	  var currentIndex = 0;
	  var currentLen = currentKeys.length;
	  var prevKeyObjects = parseKeys(prevKeys);
	  var currentKeyObjects = parseKeys(currentKeys); // Check prev keys to insert or keep

	  prevKeyObjects.forEach(function (keyObj) {
	    var hit = false;

	    for (var i = currentIndex; i < currentLen; i += 1) {
	      var currentKeyObj = currentKeyObjects[i];

	      if (currentKeyObj.key === keyObj.key) {
	        // New added keys should add before current key
	        if (currentIndex < i) {
	          list = list.concat(currentKeyObjects.slice(currentIndex, i).map(function (obj) {
	            return _objectSpread2$2(_objectSpread2$2({}, obj), {}, {
	              status: STATUS_ADD
	            });
	          }));
	          currentIndex = i;
	        }

	        list.push(_objectSpread2$2(_objectSpread2$2({}, currentKeyObj), {}, {
	          status: STATUS_KEEP
	        }));
	        currentIndex += 1;
	        hit = true;
	        break;
	      }
	    } // If not hit, it means key is removed


	    if (!hit) {
	      list.push(_objectSpread2$2(_objectSpread2$2({}, keyObj), {}, {
	        status: STATUS_REMOVE
	      }));
	    }
	  }); // Add rest to the list

	  if (currentIndex < currentLen) {
	    list = list.concat(currentKeyObjects.slice(currentIndex).map(function (obj) {
	      return _objectSpread2$2(_objectSpread2$2({}, obj), {}, {
	        status: STATUS_ADD
	      });
	    }));
	  }
	  /**
	   * Merge same key when it remove and add again:
	   *    [1 - add, 2 - keep, 1 - remove] -> [1 - keep, 2 - keep]
	   */


	  var keys = {};
	  list.forEach(function (_ref) {
	    var key = _ref.key;
	    keys[key] = (keys[key] || 0) + 1;
	  });
	  var duplicatedKeys = Object.keys(keys).filter(function (key) {
	    return keys[key] > 1;
	  });
	  duplicatedKeys.forEach(function (matchKey) {
	    // Remove `STATUS_REMOVE` node.
	    list = list.filter(function (_ref2) {
	      var key = _ref2.key,
	          status = _ref2.status;
	      return key !== matchKey || status !== STATUS_REMOVE;
	    }); // Update `STATUS_ADD` to `STATUS_KEEP`

	    list.forEach(function (node) {
	      if (node.key === matchKey) {
	        // eslint-disable-next-line no-param-reassign
	        node.status = STATUS_KEEP;
	      }
	    });
	  });
	  return list;
	}

	var MOTION_PROP_NAMES = ['eventProps', 'visible', 'children', 'motionName', 'motionAppear', 'motionEnter', 'motionLeave', 'motionLeaveImmediately', 'motionDeadline', 'removeOnLeave', 'leavedClassName', 'onAppearStart', 'onAppearActive', 'onAppearEnd', 'onEnterStart', 'onEnterActive', 'onEnterEnd', 'onLeaveStart', 'onLeaveActive', 'onLeaveEnd'];
	function genCSSMotionList(transitionSupport) {
	  var CSSMotion$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CSSMotion;

	  var CSSMotionList = /*#__PURE__*/function (_React$Component) {
	    _inherits$6(CSSMotionList, _React$Component);

	    var _super = _createSuper$5(CSSMotionList);

	    function CSSMotionList() {
	      var _this;

	      _classCallCheck$6(this, CSSMotionList);

	      _this = _super.apply(this, arguments);
	      _this.state = {
	        keyEntities: []
	      };

	      _this.removeKey = function (removeKey) {
	        _this.setState(function (_ref) {
	          var keyEntities = _ref.keyEntities;
	          return {
	            keyEntities: keyEntities.map(function (entity) {
	              if (entity.key !== removeKey) return entity;
	              return _objectSpread2$2(_objectSpread2$2({}, entity), {}, {
	                status: STATUS_REMOVED
	              });
	            })
	          };
	        });
	      };

	      return _this;
	    }

	    _createClass$1(CSSMotionList, [{
	      key: "render",
	      value: function render() {
	        var _this2 = this;

	        var keyEntities = this.state.keyEntities;

	        var _this$props = this.props,
	            component = _this$props.component,
	            children = _this$props.children,
	            restProps = _objectWithoutProperties$1(_this$props, ["component", "children"]);

	        var Component = component || react.Fragment;
	        var motionProps = {};
	        MOTION_PROP_NAMES.forEach(function (prop) {
	          motionProps[prop] = restProps[prop];
	          delete restProps[prop];
	        });
	        delete restProps.keys;
	        return react.createElement(Component, Object.assign({}, restProps), keyEntities.map(function (_ref2) {
	          var status = _ref2.status,
	              eventProps = _objectWithoutProperties$1(_ref2, ["status"]);

	          var visible = status === STATUS_ADD || status === STATUS_KEEP;
	          return react.createElement(CSSMotion$1, Object.assign({}, motionProps, {
	            key: eventProps.key,
	            visible: visible,
	            eventProps: eventProps,
	            onLeaveEnd: function onLeaveEnd() {
	              if (motionProps.onLeaveEnd) {
	                motionProps.onLeaveEnd.apply(motionProps, arguments);
	              }

	              _this2.removeKey(eventProps.key);
	            }
	          }), children);
	        }));
	      }
	    }], [{
	      key: "getDerivedStateFromProps",
	      value: function getDerivedStateFromProps(_ref3, _ref4) {
	        var keys = _ref3.keys;
	        var keyEntities = _ref4.keyEntities;
	        var parsedKeyObjects = parseKeys(keys); // Always as keep when motion not support

	        if (!transitionSupport) {
	          return {
	            keyEntities: parsedKeyObjects.map(function (obj) {
	              return _objectSpread2$2(_objectSpread2$2({}, obj), {}, {
	                status: STATUS_KEEP
	              });
	            })
	          };
	        }

	        var mixedKeyEntities = diffKeys(keyEntities, parsedKeyObjects);
	        var keyEntitiesLen = keyEntities.length;
	        return {
	          keyEntities: mixedKeyEntities.filter(function (entity) {
	            // IE 9 not support Array.prototype.find
	            var prevEntity = null;

	            for (var i = 0; i < keyEntitiesLen; i += 1) {
	              var currentEntity = keyEntities[i];

	              if (currentEntity.key === entity.key) {
	                prevEntity = currentEntity;
	                break;
	              }
	            } // Remove if already mark as removed


	            if (prevEntity && prevEntity.status === STATUS_REMOVED && entity.status === STATUS_REMOVE) {
	              return false;
	            }

	            return true;
	          })
	        };
	      }
	    }]);

	    return CSSMotionList;
	  }(react.Component);

	  CSSMotionList.defaultProps = {
	    component: 'div'
	  };
	  return CSSMotionList;
	}
	genCSSMotionList(supportTransition);

	function contains(root, n) {
	  var node = n;

	  while (node) {
	    if (node === root) {
	      return true;
	    }

	    node = node.parentNode;
	  }

	  return false;
	}

	function _typeof$3(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }

	function _classCallCheck$9(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$2(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$4(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$2(Constructor.prototype, protoProps); if (staticProps) _defineProperties$2(Constructor, staticProps); return Constructor; }

	function _inherits$9(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$2(subClass, superClass); }

	function _setPrototypeOf$2(o, p) { _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$2(o, p); }

	function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = _getPrototypeOf$2(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$2(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$9(this, result); }; }

	function _possibleConstructorReturn$9(self, call) { if (call && (_typeof$3(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$2(self); }

	function _assertThisInitialized$2(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function _getPrototypeOf$2(o) { _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$2(o); }

	var Portal = /*#__PURE__*/function (_React$Component) {
	  _inherits$9(Portal, _React$Component);

	  var _super = _createSuper$6(Portal);

	  function Portal() {
	    _classCallCheck$9(this, Portal);

	    return _super.apply(this, arguments);
	  }

	  _createClass$4(Portal, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.createContainer();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var didUpdate = this.props.didUpdate;

	      if (didUpdate) {
	        didUpdate(prevProps);
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.removeContainer();
	    }
	  }, {
	    key: "createContainer",
	    value: function createContainer() {
	      this._container = this.props.getContainer();
	      this.forceUpdate();
	    }
	  }, {
	    key: "removeContainer",
	    value: function removeContainer() {
	      if (this._container) {
	        this._container.parentNode.removeChild(this._container);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      if (this._container) {
	        return reactDom.createPortal(this.props.children, this._container);
	      }

	      return null;
	    }
	  }]);

	  return Portal;
	}(react.Component);

	function isPointsEq(a1, a2, isAlignPoint) {
	  if (isAlignPoint) {
	    return a1[0] === a2[0];
	  }

	  return a1[0] === a2[0] && a1[1] === a2[1];
	}

	function getAlignFromPlacement(builtinPlacements, placementStr, align) {
	  var baseAlign = builtinPlacements[placementStr] || {};
	  return _objectSpread2$2(_objectSpread2$2({}, baseAlign), align);
	}
	function getAlignPopupClassName(builtinPlacements, prefixCls, align, isAlignPoint) {
	  var points = align.points;
	  var placements = Object.keys(builtinPlacements);

	  for (var i = 0; i < placements.length; i += 1) {
	    var placement = placements[i];

	    if (isPointsEq(builtinPlacements[placement].points, points, isAlignPoint)) {
	      return "".concat(prefixCls, "-placement-").concat(placement);
	    }
	  }

	  return '';
	}

	function _typeof$4(obj) {
	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof$4 = function (obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof$4 = function (obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof$4(obj);
	}

	function _defineProperty$5(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function ownKeys$d(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2$3(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys$d(source, true).forEach(function (key) {
	        _defineProperty$5(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys$d(source).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	var vendorPrefix;
	var jsCssMap = {
	  Webkit: '-webkit-',
	  Moz: '-moz-',
	  // IE did it wrong again ...
	  ms: '-ms-',
	  O: '-o-'
	};

	function getVendorPrefix() {
	  if (vendorPrefix !== undefined) {
	    return vendorPrefix;
	  }

	  vendorPrefix = '';
	  var style = document.createElement('p').style;
	  var testProp = 'Transform';

	  for (var key in jsCssMap) {
	    if (key + testProp in style) {
	      vendorPrefix = key;
	    }
	  }

	  return vendorPrefix;
	}

	function getTransitionName$1() {
	  return getVendorPrefix() ? "".concat(getVendorPrefix(), "TransitionProperty") : 'transitionProperty';
	}

	function getTransformName() {
	  return getVendorPrefix() ? "".concat(getVendorPrefix(), "Transform") : 'transform';
	}
	function setTransitionProperty(node, value) {
	  var name = getTransitionName$1();

	  if (name) {
	    node.style[name] = value;

	    if (name !== 'transitionProperty') {
	      node.style.transitionProperty = value;
	    }
	  }
	}

	function setTransform(node, value) {
	  var name = getTransformName();

	  if (name) {
	    node.style[name] = value;

	    if (name !== 'transform') {
	      node.style.transform = value;
	    }
	  }
	}

	function getTransitionProperty(node) {
	  return node.style.transitionProperty || node.style[getTransitionName$1()];
	}
	function getTransformXY(node) {
	  var style = window.getComputedStyle(node, null);
	  var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());

	  if (transform && transform !== 'none') {
	    var matrix = transform.replace(/[^0-9\-.,]/g, '').split(',');
	    return {
	      x: parseFloat(matrix[12] || matrix[4], 0),
	      y: parseFloat(matrix[13] || matrix[5], 0)
	    };
	  }

	  return {
	    x: 0,
	    y: 0
	  };
	}
	var matrix2d = /matrix\((.*)\)/;
	var matrix3d = /matrix3d\((.*)\)/;
	function setTransformXY(node, xy) {
	  var style = window.getComputedStyle(node, null);
	  var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());

	  if (transform && transform !== 'none') {
	    var arr;
	    var match2d = transform.match(matrix2d);

	    if (match2d) {
	      match2d = match2d[1];
	      arr = match2d.split(',').map(function (item) {
	        return parseFloat(item, 10);
	      });
	      arr[4] = xy.x;
	      arr[5] = xy.y;
	      setTransform(node, "matrix(".concat(arr.join(','), ")"));
	    } else {
	      var match3d = transform.match(matrix3d)[1];
	      arr = match3d.split(',').map(function (item) {
	        return parseFloat(item, 10);
	      });
	      arr[12] = xy.x;
	      arr[13] = xy.y;
	      setTransform(node, "matrix3d(".concat(arr.join(','), ")"));
	    }
	  } else {
	    setTransform(node, "translateX(".concat(xy.x, "px) translateY(").concat(xy.y, "px) translateZ(0)"));
	  }
	}

	var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
	var getComputedStyleX; // https://stackoverflow.com/a/3485654/3040605

	function forceRelayout(elem) {
	  var originalStyle = elem.style.display;
	  elem.style.display = 'none';
	  elem.offsetHeight; // eslint-disable-line

	  elem.style.display = originalStyle;
	}

	function css(el, name, v) {
	  var value = v;

	  if (_typeof$4(name) === 'object') {
	    for (var i in name) {
	      if (name.hasOwnProperty(i)) {
	        css(el, i, name[i]);
	      }
	    }

	    return undefined;
	  }

	  if (typeof value !== 'undefined') {
	    if (typeof value === 'number') {
	      value = "".concat(value, "px");
	    }

	    el.style[name] = value;
	    return undefined;
	  }

	  return getComputedStyleX(el, name);
	}

	function getClientPosition(elem) {
	  var box;
	  var x;
	  var y;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement; // æ ¹æ® GBS ææ°æ°æ®ï¼A-Grade Browsers é½å·²æ¯æ getBoundingClientRect æ¹æ³ï¼ä¸ç¨åèèä¼ ç»çå®ç°æ¹å¼

	  box = elem.getBoundingClientRect(); // æ³¨ï¼jQuery è¿èèåå» docElem.clientLeft/clientTop
	  // ä½æµè¯åç°ï¼è¿æ ·åèä¼å¯¼è´å½ html å body æè¾¹è·/è¾¹æ¡æ ·å¼æ¶ï¼è·åçå¼ä¸æ­£ç¡®
	  // æ­¤å¤ï¼ie6 ä¼å¿½ç¥ html ç margin å¼ï¼å¹¸è¿å°æ¯æ²¡æè°ä¼å»è®¾ç½® html ç margin

	  x = box.left;
	  y = box.top; // In IE, most of the time, 2 extra pixels are added to the top and left
	  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
	  // IE6 standards mode, this border can be overridden by setting the
	  // document element's border to zero -- thus, we cannot rely on the
	  // offset always being 2 pixels.
	  // In quirks mode, the offset can be determined by querying the body's
	  // clientLeft/clientTop, but in standards mode, it is found by querying
	  // the document element's clientLeft/clientTop.  Since we already called
	  // getClientBoundingRect we have already forced a reflow, so it is not
	  // too expensive just to query them all.
	  // ie ä¸åºè¯¥åå»çªå£çè¾¹æ¡å§ï¼æ¯ç«é»è®¤ absolute é½æ¯ç¸å¯¹çªå£å®ä½ç
	  // çªå£è¾¹æ¡æ åæ¯è®¾ documentElement ,quirks æ¶è®¾ç½® body
	  // æå¥½ç¦æ­¢å¨ body å html ä¸è¾¹æ¡ ï¼ä½ ie < 9 html é»è®¤æ 2px ï¼åå»
	  // ä½æ¯é ie ä¸å¯è½è®¾ç½®çªå£è¾¹æ¡ï¼body html ä¹ä¸æ¯çªå£ ,ie å¯ä»¥éè¿ html,body è®¾ç½®
	  // æ å ie ä¸ docElem.clientTop å°±æ¯ border-top
	  // ie7 html å³çªå£è¾¹æ¡æ¹åä¸äºãæ°¸è¿ä¸º 2
	  // ä½æ å firefox/chrome/ie9 ä¸ docElem.clientTop æ¯çªå£è¾¹æ¡ï¼å³ä½¿è®¾äº border-top ä¹ä¸º 0

	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;
	  return {
	    left: x,
	    top: y
	  };
	}

	function getScroll(w, top) {
	  var ret = w["page".concat(top ? 'Y' : 'X', "Offset")];
	  var method = "scroll".concat(top ? 'Top' : 'Left');

	  if (typeof ret !== 'number') {
	    var d = w.document; // ie6,7,8 standard mode

	    ret = d.documentElement[method];

	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }

	  return ret;
	}

	function getScrollLeft(w) {
	  return getScroll(w);
	}

	function getScrollTop(w) {
	  return getScroll(w, true);
	}

	function getOffset(el) {
	  var pos = getClientPosition(el);
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScrollLeft(w);
	  pos.top += getScrollTop(w);
	  return pos;
	}
	/**
	 * A crude way of determining if an object is a window
	 * @member util
	 */


	function isWindow(obj) {
	  // must use == for ie8

	  /* eslint eqeqeq:0 */
	  return obj !== null && obj !== undefined && obj == obj.window;
	}

	function getDocument(node) {
	  if (isWindow(node)) {
	    return node.document;
	  }

	  if (node.nodeType === 9) {
	    return node;
	  }

	  return node.ownerDocument;
	}

	function _getComputedStyle(elem, name, cs) {
	  var computedStyle = cs;
	  var val = '';
	  var d = getDocument(elem);
	  computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null); // https://github.com/kissyteam/kissy/issues/61

	  if (computedStyle) {
	    val = computedStyle.getPropertyValue(name) || computedStyle[name];
	  }

	  return val;
	}

	var _RE_NUM_NO_PX = new RegExp("^(".concat(RE_NUM, ")(?!px)[a-z%]+$"), 'i');

	var RE_POS = /^(top|right|bottom|left)$/;
	var CURRENT_STYLE = 'currentStyle';
	var RUNTIME_STYLE = 'runtimeStyle';
	var LEFT = 'left';
	var PX = 'px';

	function _getComputedStyleIE(elem, name) {
	  // currentStyle maybe null
	  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
	  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name]; // å½ width/height è®¾ç½®ä¸ºç¾åæ¯æ¶ï¼éè¿ pixelLeft æ¹å¼è½¬æ¢ç width/height å¼
	  // ä¸å¼å§å°±å¤çäº! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook è§£å³@2011-08-19
	  // å¨ ie ä¸ä¸å¯¹ï¼éè¦ç´æ¥ç¨ offset æ¹å¼
	  // borderWidth ç­å¼ä¹æé®é¢ï¼ä½èèå° borderWidth è®¾ä¸ºç¾åæ¯çæ¦çå¾å°ï¼è¿éå°±ä¸èèäº
	  // From the awesome hack by Dean Edwards
	  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	  // If we're not dealing with a regular pixel number
	  // but a number that has a weird ending, we need to convert it to pixels
	  // exclude left right for relativity

	  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
	    // Remember the original values
	    var style = elem.style;
	    var left = style[LEFT];
	    var rsLeft = elem[RUNTIME_STYLE][LEFT]; // prevent flashing of content

	    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT]; // Put in the new values to get a computed value out

	    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
	    ret = style.pixelLeft + PX; // Revert the changed values

	    style[LEFT] = left;
	    elem[RUNTIME_STYLE][LEFT] = rsLeft;
	  }

	  return ret === '' ? 'auto' : ret;
	}

	if (typeof window !== 'undefined') {
	  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
	}

	function getOffsetDirection(dir, option) {
	  if (dir === 'left') {
	    return option.useCssRight ? 'right' : dir;
	  }

	  return option.useCssBottom ? 'bottom' : dir;
	}

	function oppositeOffsetDirection(dir) {
	  if (dir === 'left') {
	    return 'right';
	  } else if (dir === 'right') {
	    return 'left';
	  } else if (dir === 'top') {
	    return 'bottom';
	  } else if (dir === 'bottom') {
	    return 'top';
	  }
	} // è®¾ç½® elem ç¸å¯¹ elem.ownerDocument çåæ 


	function setLeftTop(elem, offset, option) {
	  // set position first, in-case top/left are set even on static elem
	  if (css(elem, 'position') === 'static') {
	    elem.style.position = 'relative';
	  }

	  var presetH = -999;
	  var presetV = -999;
	  var horizontalProperty = getOffsetDirection('left', option);
	  var verticalProperty = getOffsetDirection('top', option);
	  var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
	  var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);

	  if (horizontalProperty !== 'left') {
	    presetH = 999;
	  }

	  if (verticalProperty !== 'top') {
	    presetV = 999;
	  }

	  var originalTransition = '';
	  var originalOffset = getOffset(elem);

	  if ('left' in offset || 'top' in offset) {
	    originalTransition = getTransitionProperty(elem) || '';
	    setTransitionProperty(elem, 'none');
	  }

	  if ('left' in offset) {
	    elem.style[oppositeHorizontalProperty] = '';
	    elem.style[horizontalProperty] = "".concat(presetH, "px");
	  }

	  if ('top' in offset) {
	    elem.style[oppositeVerticalProperty] = '';
	    elem.style[verticalProperty] = "".concat(presetV, "px");
	  } // force relayout


	  forceRelayout(elem);
	  var old = getOffset(elem);
	  var originalStyle = {};

	  for (var key in offset) {
	    if (offset.hasOwnProperty(key)) {
	      var dir = getOffsetDirection(key, option);
	      var preset = key === 'left' ? presetH : presetV;
	      var off = originalOffset[key] - old[key];

	      if (dir === key) {
	        originalStyle[dir] = preset + off;
	      } else {
	        originalStyle[dir] = preset - off;
	      }
	    }
	  }

	  css(elem, originalStyle); // force relayout

	  forceRelayout(elem);

	  if ('left' in offset || 'top' in offset) {
	    setTransitionProperty(elem, originalTransition);
	  }

	  var ret = {};

	  for (var _key in offset) {
	    if (offset.hasOwnProperty(_key)) {
	      var _dir = getOffsetDirection(_key, option);

	      var _off = offset[_key] - originalOffset[_key];

	      if (_key === _dir) {
	        ret[_dir] = originalStyle[_dir] + _off;
	      } else {
	        ret[_dir] = originalStyle[_dir] - _off;
	      }
	    }
	  }

	  css(elem, ret);
	}

	function setTransform$1(elem, offset) {
	  var originalOffset = getOffset(elem);
	  var originalXY = getTransformXY(elem);
	  var resultXY = {
	    x: originalXY.x,
	    y: originalXY.y
	  };

	  if ('left' in offset) {
	    resultXY.x = originalXY.x + offset.left - originalOffset.left;
	  }

	  if ('top' in offset) {
	    resultXY.y = originalXY.y + offset.top - originalOffset.top;
	  }

	  setTransformXY(elem, resultXY);
	}

	function setOffset(elem, offset, option) {
	  if (option.ignoreShake) {
	    var oriOffset = getOffset(elem);
	    var oLeft = oriOffset.left.toFixed(0);
	    var oTop = oriOffset.top.toFixed(0);
	    var tLeft = offset.left.toFixed(0);
	    var tTop = offset.top.toFixed(0);

	    if (oLeft === tLeft && oTop === tTop) {
	      return;
	    }
	  }

	  if (option.useCssRight || option.useCssBottom) {
	    setLeftTop(elem, offset, option);
	  } else if (option.useCssTransform && getTransformName() in document.body.style) {
	    setTransform$1(elem, offset);
	  } else {
	    setLeftTop(elem, offset, option);
	  }
	}

	function each$1(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(arr[i]);
	  }
	}

	function isBorderBoxFn(elem) {
	  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
	}

	var BOX_MODELS = ['margin', 'border', 'padding'];
	var CONTENT_INDEX = -1;
	var PADDING_INDEX = 2;
	var BORDER_INDEX = 1;
	var MARGIN_INDEX = 0;

	function swap(elem, options, callback) {
	  var old = {};
	  var style = elem.style;
	  var name; // Remember the old values, and insert the new ones

	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      old[name] = style[name];
	      style[name] = options[name];
	    }
	  }

	  callback.call(elem); // Revert the old values

	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      style[name] = old[name];
	    }
	  }
	}

	function getPBMWidth(elem, props, which) {
	  var value = 0;
	  var prop;
	  var j;
	  var i;

	  for (j = 0; j < props.length; j++) {
	    prop = props[j];

	    if (prop) {
	      for (i = 0; i < which.length; i++) {
	        var cssProp = void 0;

	        if (prop === 'border') {
	          cssProp = "".concat(prop).concat(which[i], "Width");
	        } else {
	          cssProp = prop + which[i];
	        }

	        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
	      }
	    }
	  }

	  return value;
	}

	var domUtils = {
	  getParent: function getParent(element) {
	    var parent = element;

	    do {
	      if (parent.nodeType === 11 && parent.host) {
	        parent = parent.host;
	      } else {
	        parent = parent.parentNode;
	      }
	    } while (parent && parent.nodeType !== 1 && parent.nodeType !== 9);

	    return parent;
	  }
	};
	each$1(['Width', 'Height'], function (name) {
	  domUtils["doc".concat(name)] = function (refWin) {
	    var d = refWin.document;
	    return Math.max( // firefox chrome documentElement.scrollHeight< body.scrollHeight
	    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
	    d.documentElement["scroll".concat(name)], // quirks : documentElement.scrollHeight æå¤§ç­äºå¯è§çªå£å¤ä¸ç¹ï¼
	    d.body["scroll".concat(name)], domUtils["viewport".concat(name)](d));
	  };

	  domUtils["viewport".concat(name)] = function (win) {
	    // pc browser includes scrollbar in window.innerWidth
	    var prop = "client".concat(name);
	    var doc = win.document;
	    var body = doc.body;
	    var documentElement = doc.documentElement;
	    var documentElementProp = documentElement[prop]; // æ åæ¨¡å¼å documentElement
	    // backcompat å body

	    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
	  };
	});
	/*
	 å¾å°åç´ çå¤§å°ä¿¡æ¯
	 @param elem
	 @param name
	 @param {String} [extra]  'padding' : (css width) + padding
	 'border' : (css width) + padding + border
	 'margin' : (css width) + padding + border + margin
	 */

	function getWH(elem, name, ex) {
	  var extra = ex;

	  if (isWindow(elem)) {
	    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
	  } else if (elem.nodeType === 9) {
	    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
	  }

	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	  var borderBoxValue = name === 'width' ? elem.getBoundingClientRect().width : elem.getBoundingClientRect().height;
	  var computedStyle = getComputedStyleX(elem);
	  var isBorderBox = isBorderBoxFn(elem);
	  var cssBoxValue = 0;

	  if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {
	    borderBoxValue = undefined; // Fall back to computed then un computed css if necessary

	    cssBoxValue = getComputedStyleX(elem, name);

	    if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) {
	      cssBoxValue = elem.style[name] || 0;
	    } // Normalize '', auto, and prepare for extra


	    cssBoxValue = parseFloat(cssBoxValue) || 0;
	  }

	  if (extra === undefined) {
	    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
	  }

	  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
	  var val = borderBoxValue || cssBoxValue;

	  if (extra === CONTENT_INDEX) {
	    if (borderBoxValueOrIsBorderBox) {
	      return val - getPBMWidth(elem, ['border', 'padding'], which);
	    }

	    return cssBoxValue;
	  } else if (borderBoxValueOrIsBorderBox) {
	    if (extra === BORDER_INDEX) {
	      return val;
	    }

	    return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which) : getPBMWidth(elem, ['margin'], which));
	  }

	  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which);
	}

	var cssShow = {
	  position: 'absolute',
	  visibility: 'hidden',
	  display: 'block'
	}; // fix #119 : https://github.com/kissyteam/kissy/issues/119

	function getWHIgnoreDisplay() {
	  for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
	    args[_key2] = arguments[_key2];
	  }

	  var val;
	  var elem = args[0]; // in case elem is window
	  // elem.offsetWidth === undefined

	  if (elem.offsetWidth !== 0) {
	    val = getWH.apply(undefined, args);
	  } else {
	    swap(elem, cssShow, function () {
	      val = getWH.apply(undefined, args);
	    });
	  }

	  return val;
	}

	each$1(['width', 'height'], function (name) {
	  var first = name.charAt(0).toUpperCase() + name.slice(1);

	  domUtils["outer".concat(first)] = function (el, includeMargin) {
	    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
	  };

	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

	  domUtils[name] = function (elem, v) {
	    var val = v;

	    if (val !== undefined) {
	      if (elem) {
	        var computedStyle = getComputedStyleX(elem);
	        var isBorderBox = isBorderBoxFn(elem);

	        if (isBorderBox) {
	          val += getPBMWidth(elem, ['padding', 'border'], which);
	        }

	        return css(elem, name, val);
	      }

	      return undefined;
	    }

	    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
	  };
	});

	function mix(to, from) {
	  for (var i in from) {
	    if (from.hasOwnProperty(i)) {
	      to[i] = from[i];
	    }
	  }

	  return to;
	}

	var utils$1 = {
	  getWindow: function getWindow(node) {
	    if (node && node.document && node.setTimeout) {
	      return node;
	    }

	    var doc = node.ownerDocument || node;
	    return doc.defaultView || doc.parentWindow;
	  },
	  getDocument: getDocument,
	  offset: function offset(el, value, option) {
	    if (typeof value !== 'undefined') {
	      setOffset(el, value, option || {});
	    } else {
	      return getOffset(el);
	    }
	  },
	  isWindow: isWindow,
	  each: each$1,
	  css: css,
	  clone: function clone(obj) {
	    var i;
	    var ret = {};

	    for (i in obj) {
	      if (obj.hasOwnProperty(i)) {
	        ret[i] = obj[i];
	      }
	    }

	    var overflow = obj.overflow;

	    if (overflow) {
	      for (i in obj) {
	        if (obj.hasOwnProperty(i)) {
	          ret.overflow[i] = obj.overflow[i];
	        }
	      }
	    }

	    return ret;
	  },
	  mix: mix,
	  getWindowScrollLeft: function getWindowScrollLeft(w) {
	    return getScrollLeft(w);
	  },
	  getWindowScrollTop: function getWindowScrollTop(w) {
	    return getScrollTop(w);
	  },
	  merge: function merge() {
	    var ret = {};

	    for (var i = 0; i < arguments.length; i++) {
	      utils$1.mix(ret, i < 0 || arguments.length <= i ? undefined : arguments[i]);
	    }

	    return ret;
	  },
	  viewportWidth: 0,
	  viewportHeight: 0
	};
	mix(utils$1, domUtils);

	/**
	 * å¾å°ä¼å¯¼è´åç´ æ¾ç¤ºä¸å¨çç¥ååç´ 
	 */

	var getParent = utils$1.getParent;

	function getOffsetParent(element) {
	  if (utils$1.isWindow(element) || element.nodeType === 9) {
	    return null;
	  } // ie è¿ä¸ªä¹ä¸æ¯å®å¨å¯è¡

	  /*
	   <div style="width: 50px;height: 100px;overflow: hidden">
	   <div style="width: 50px;height: 100px;position: relative;" id="d6">
	   åç´  6 é« 100px å®½ 50px<br/>
	   </div>
	   </div>
	   */
	  // element.offsetParent does the right thing in ie7 and below. Return parent with layout!
	  //  In other browsers it only includes elements with position absolute, relative or
	  // fixed, not elements with overflow set to auto or scroll.
	  //        if (UA.ie && ieMode < 8) {
	  //            return element.offsetParent;
	  //        }
	  // ç»ä¸ç offsetParent æ¹æ³


	  var doc = utils$1.getDocument(element);
	  var body = doc.body;
	  var parent;
	  var positionStyle = utils$1.css(element, 'position');
	  var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';

	  if (!skipStatic) {
	    return element.nodeName.toLowerCase() === 'html' ? null : getParent(element);
	  }

	  for (parent = getParent(element); parent && parent !== body && parent.nodeType !== 9; parent = getParent(parent)) {
	    positionStyle = utils$1.css(parent, 'position');

	    if (positionStyle !== 'static') {
	      return parent;
	    }
	  }

	  return null;
	}

	var getParent$1 = utils$1.getParent;
	function isAncestorFixed(element) {
	  if (utils$1.isWindow(element) || element.nodeType === 9) {
	    return false;
	  }

	  var doc = utils$1.getDocument(element);
	  var body = doc.body;
	  var parent = null;

	  for (parent = getParent$1(element); parent && parent !== body; parent = getParent$1(parent)) {
	    var positionStyle = utils$1.css(parent, 'position');

	    if (positionStyle === 'fixed') {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * è·å¾åç´ çæ¾ç¤ºé¨åçåºå
	 */

	function getVisibleRectForElement(element, alwaysByViewport) {
	  var visibleRect = {
	    left: 0,
	    right: Infinity,
	    top: 0,
	    bottom: Infinity
	  };
	  var el = getOffsetParent(element);
	  var doc = utils$1.getDocument(element);
	  var win = doc.defaultView || doc.parentWindow;
	  var body = doc.body;
	  var documentElement = doc.documentElement; // Determine the size of the visible rect by climbing the dom accounting for
	  // all scrollable containers.

	  while (el) {
	    // clientWidth is zero for inline block elements in ie.
	    if ((navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) && // body may have overflow set on it, yet we still get the entire
	    // viewport. In some browsers, el.offsetParent may be
	    // document.documentElement, so check for that too.
	    el !== body && el !== documentElement && utils$1.css(el, 'overflow') !== 'visible') {
	      var pos = utils$1.offset(el); // add border

	      pos.left += el.clientLeft;
	      pos.top += el.clientTop;
	      visibleRect.top = Math.max(visibleRect.top, pos.top);
	      visibleRect.right = Math.min(visibleRect.right, // consider area without scrollBar
	      pos.left + el.clientWidth);
	      visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
	      visibleRect.left = Math.max(visibleRect.left, pos.left);
	    } else if (el === body || el === documentElement) {
	      break;
	    }

	    el = getOffsetParent(el);
	  } // Set element position to fixed
	  // make sure absolute element itself don't affect it's visible area
	  // https://github.com/ant-design/ant-design/issues/7601


	  var originalPosition = null;

	  if (!utils$1.isWindow(element) && element.nodeType !== 9) {
	    originalPosition = element.style.position;
	    var position = utils$1.css(element, 'position');

	    if (position === 'absolute') {
	      element.style.position = 'fixed';
	    }
	  }

	  var scrollX = utils$1.getWindowScrollLeft(win);
	  var scrollY = utils$1.getWindowScrollTop(win);
	  var viewportWidth = utils$1.viewportWidth(win);
	  var viewportHeight = utils$1.viewportHeight(win);
	  var documentWidth = documentElement.scrollWidth;
	  var documentHeight = documentElement.scrollHeight; // scrollXXX on html is sync with body which means overflow: hidden on body gets wrong scrollXXX.
	  // We should cut this ourself.

	  var bodyStyle = window.getComputedStyle(body);

	  if (bodyStyle.overflowX === 'hidden') {
	    documentWidth = win.innerWidth;
	  }

	  if (bodyStyle.overflowY === 'hidden') {
	    documentHeight = win.innerHeight;
	  } // Reset element position after calculate the visible area


	  if (element.style) {
	    element.style.position = originalPosition;
	  }

	  if (alwaysByViewport || isAncestorFixed(element)) {
	    // Clip by viewport's size.
	    visibleRect.left = Math.max(visibleRect.left, scrollX);
	    visibleRect.top = Math.max(visibleRect.top, scrollY);
	    visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);
	    visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);
	  } else {
	    // Clip by document's size.
	    var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);
	    visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);
	    var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);
	    visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);
	  }

	  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
	}

	function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
	  var pos = utils$1.clone(elFuturePos);
	  var size = {
	    width: elRegion.width,
	    height: elRegion.height
	  };

	  if (overflow.adjustX && pos.left < visibleRect.left) {
	    pos.left = visibleRect.left;
	  } // Left edge inside and right edge outside viewport, try to resize it.


	  if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
	    size.width -= pos.left + size.width - visibleRect.right;
	  } // Right edge outside viewport, try to move it.


	  if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
	    // ä¿è¯å·¦è¾¹çåå¯è§åºåå·¦è¾¹çå¯¹é½
	    pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
	  } // Top edge outside viewport, try to move it.


	  if (overflow.adjustY && pos.top < visibleRect.top) {
	    pos.top = visibleRect.top;
	  } // Top edge inside and bottom edge outside viewport, try to resize it.


	  if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
	    size.height -= pos.top + size.height - visibleRect.bottom;
	  } // Bottom edge outside viewport, try to move it.


	  if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
	    // ä¿è¯ä¸è¾¹çåå¯è§åºåä¸è¾¹çå¯¹é½
	    pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
	  }

	  return utils$1.mix(pos, size);
	}

	function getRegion(node) {
	  var offset;
	  var w;
	  var h;

	  if (!utils$1.isWindow(node) && node.nodeType !== 9) {
	    offset = utils$1.offset(node);
	    w = utils$1.outerWidth(node);
	    h = utils$1.outerHeight(node);
	  } else {
	    var win = utils$1.getWindow(node);
	    offset = {
	      left: utils$1.getWindowScrollLeft(win),
	      top: utils$1.getWindowScrollTop(win)
	    };
	    w = utils$1.viewportWidth(win);
	    h = utils$1.viewportHeight(win);
	  }

	  offset.width = w;
	  offset.height = h;
	  return offset;
	}

	/**
	 * è·å node ä¸ç align å¯¹é½ç¹ ç¸å¯¹äºé¡µé¢çåæ 
	 */
	function getAlignOffset(region, align) {
	  var V = align.charAt(0);
	  var H = align.charAt(1);
	  var w = region.width;
	  var h = region.height;
	  var x = region.left;
	  var y = region.top;

	  if (V === 'c') {
	    y += h / 2;
	  } else if (V === 'b') {
	    y += h;
	  }

	  if (H === 'c') {
	    x += w / 2;
	  } else if (H === 'r') {
	    x += w;
	  }

	  return {
	    left: x,
	    top: y
	  };
	}

	function getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {
	  var p1 = getAlignOffset(refNodeRegion, points[1]);
	  var p2 = getAlignOffset(elRegion, points[0]);
	  var diff = [p2.left - p1.left, p2.top - p1.top];
	  return {
	    left: Math.round(elRegion.left - diff[0] + offset[0] - targetOffset[0]),
	    top: Math.round(elRegion.top - diff[1] + offset[1] - targetOffset[1])
	  };
	}

	/**
	 * align dom node flexibly
	 * @author yiminghe@gmail.com
	 */

	function isFailX(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
	}

	function isFailY(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
	}

	function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
	}

	function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
	}

	function flip(points, reg, map) {
	  var ret = [];
	  utils$1.each(points, function (p) {
	    ret.push(p.replace(reg, function (m) {
	      return map[m];
	    }));
	  });
	  return ret;
	}

	function flipOffset(offset, index) {
	  offset[index] = -offset[index];
	  return offset;
	}

	function convertOffset(str, offsetLen) {
	  var n;

	  if (/%$/.test(str)) {
	    n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
	  } else {
	    n = parseInt(str, 10);
	  }

	  return n || 0;
	}

	function normalizeOffset(offset, el) {
	  offset[0] = convertOffset(offset[0], el.width);
	  offset[1] = convertOffset(offset[1], el.height);
	}
	/**
	 * @param el
	 * @param tgtRegion åç§èç¹æå çåºå: { left, top, width, height }
	 * @param align
	 */


	function doAlign(el, tgtRegion, align, isTgtRegionVisible) {
	  var points = align.points;
	  var offset = align.offset || [0, 0];
	  var targetOffset = align.targetOffset || [0, 0];
	  var overflow = align.overflow;
	  var source = align.source || el;
	  offset = [].concat(offset);
	  targetOffset = [].concat(targetOffset);
	  overflow = overflow || {};
	  var newOverflowCfg = {};
	  var fail = 0;
	  var alwaysByViewport = !!(overflow && overflow.alwaysByViewport); // å½åèç¹å¯ä»¥è¢«æ¾ç½®çæ¾ç¤ºåºå

	  var visibleRect = getVisibleRectForElement(source, alwaysByViewport); // å½åèç¹æå çåºå, left/top/width/height

	  var elRegion = getRegion(source); // å° offset è½¬æ¢ææ°å¼ï¼æ¯æç¾åæ¯

	  normalizeOffset(offset, elRegion);
	  normalizeOffset(targetOffset, tgtRegion); // å½åèç¹å°è¦è¢«æ¾ç½®çä½ç½®

	  var elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset); // å½åèç¹å°è¦æå¤çåºå

	  var newElRegion = utils$1.merge(elRegion, elFuturePos); // å¦æå¯è§åºåä¸è½å®å¨æ¾ç½®å½åèç¹æ¶åè®¸è°æ´

	  if (visibleRect && (overflow.adjustX || overflow.adjustY) && isTgtRegionVisible) {
	    if (overflow.adjustX) {
	      // å¦ææ¨ªåä¸è½æ¾ä¸
	      if (isFailX(elFuturePos, elRegion, visibleRect)) {
	        // å¯¹é½ä½ç½®åä¸
	        var newPoints = flip(points, /[lr]/gi, {
	          l: 'r',
	          r: 'l'
	        }); // åç§»éä¹åä¸

	        var newOffset = flipOffset(offset, 0);
	        var newTargetOffset = flipOffset(targetOffset, 0);
	        var newElFuturePos = getElFuturePos(elRegion, tgtRegion, newPoints, newOffset, newTargetOffset);

	        if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
	          fail = 1;
	          points = newPoints;
	          offset = newOffset;
	          targetOffset = newTargetOffset;
	        }
	      }
	    }

	    if (overflow.adjustY) {
	      // å¦æçºµåä¸è½æ¾ä¸
	      if (isFailY(elFuturePos, elRegion, visibleRect)) {
	        // å¯¹é½ä½ç½®åä¸
	        var _newPoints = flip(points, /[tb]/gi, {
	          t: 'b',
	          b: 't'
	        }); // åç§»éä¹åä¸


	        var _newOffset = flipOffset(offset, 1);

	        var _newTargetOffset = flipOffset(targetOffset, 1);

	        var _newElFuturePos = getElFuturePos(elRegion, tgtRegion, _newPoints, _newOffset, _newTargetOffset);

	        if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
	          fail = 1;
	          points = _newPoints;
	          offset = _newOffset;
	          targetOffset = _newTargetOffset;
	        }
	      }
	    } // å¦æå¤±è´¥ï¼éæ°è®¡ç®å½åèç¹å°è¦è¢«æ¾ç½®çä½ç½®


	    if (fail) {
	      elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset);
	      utils$1.mix(newElRegion, elFuturePos);
	    }

	    var isStillFailX = isFailX(elFuturePos, elRegion, visibleRect);
	    var isStillFailY = isFailY(elFuturePos, elRegion, visibleRect); // æ£æ¥åä¸åçä½ç½®æ¯å¦å¯ä»¥æ¾ä¸äºï¼å¦æä»ç¶æ¾ä¸ä¸ï¼
	    // 1. å¤åä¿®æ¹è¿çå®ä½åæ°

	    if (isStillFailX || isStillFailY) {
	      var _newPoints2 = points; // éç½®å¯¹åºé¨åçç¿»è½¬é»è¾

	      if (isStillFailX) {
	        _newPoints2 = flip(points, /[lr]/gi, {
	          l: 'r',
	          r: 'l'
	        });
	      }

	      if (isStillFailY) {
	        _newPoints2 = flip(points, /[tb]/gi, {
	          t: 'b',
	          b: 't'
	        });
	      }

	      points = _newPoints2;
	      offset = align.offset || [0, 0];
	      targetOffset = align.targetOffset || [0, 0];
	    } // 2. åªææå®äºå¯ä»¥è°æ´å½åæ¹åæè°æ´


	    newOverflowCfg.adjustX = overflow.adjustX && isStillFailX;
	    newOverflowCfg.adjustY = overflow.adjustY && isStillFailY; // ç¡®å®è¦è°æ´ï¼çè³å¯è½ä¼è°æ´é«åº¦å®½åº¦

	    if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
	      newElRegion = adjustForViewport(elFuturePos, elRegion, visibleRect, newOverflowCfg);
	    }
	  } // need judge to in case set fixed with in css on height auto element


	  if (newElRegion.width !== elRegion.width) {
	    utils$1.css(source, 'width', utils$1.width(source) + newElRegion.width - elRegion.width);
	  }

	  if (newElRegion.height !== elRegion.height) {
	    utils$1.css(source, 'height', utils$1.height(source) + newElRegion.height - elRegion.height);
	  } // https://github.com/kissyteam/kissy/issues/190
	  // ç¸å¯¹äºå±å¹ä½ç½®æ²¡åï¼è left/top åäº
	  // ä¾å¦ <div 'relative'><el absolute></div>


	  utils$1.offset(source, {
	    left: newElRegion.left,
	    top: newElRegion.top
	  }, {
	    useCssRight: align.useCssRight,
	    useCssBottom: align.useCssBottom,
	    useCssTransform: align.useCssTransform,
	    ignoreShake: align.ignoreShake
	  });
	  return {
	    points: points,
	    offset: offset,
	    targetOffset: targetOffset,
	    overflow: newOverflowCfg
	  };
	}
	/**
	 *  2012-04-26 yiminghe@gmail.com
	 *   - ä¼åæºè½å¯¹é½ç®æ³
	 *   - æç¨ resizeXX
	 *
	 *  2011-07-13 yiminghe@gmail.com note:
	 *   - å¢å æºè½å¯¹é½ï¼ä»¥åå¤§å°è°æ´éé¡¹
	 **/

	function isOutOfVisibleRect(target, alwaysByViewport) {
	  var visibleRect = getVisibleRectForElement(target, alwaysByViewport);
	  var targetRegion = getRegion(target);
	  return !visibleRect || targetRegion.left + targetRegion.width <= visibleRect.left || targetRegion.top + targetRegion.height <= visibleRect.top || targetRegion.left >= visibleRect.right || targetRegion.top >= visibleRect.bottom;
	}

	function alignElement(el, refNode, align) {
	  var target = align.target || refNode;
	  var refNodeRegion = getRegion(target);
	  var isTargetNotOutOfVisible = !isOutOfVisibleRect(target, align.overflow && align.overflow.alwaysByViewport);
	  return doAlign(el, refNodeRegion, align, isTargetNotOutOfVisible);
	}

	alignElement.__getOffsetParent = getOffsetParent;
	alignElement.__getVisibleRectForElement = getVisibleRectForElement;

	/**
	 * `tgtPoint`: { pageX, pageY } or { clientX, clientY }.
	 * If client position provided, will internal convert to page position.
	 */

	function alignPoint(el, tgtPoint, align) {
	  var pageX;
	  var pageY;
	  var doc = utils$1.getDocument(el);
	  var win = doc.defaultView || doc.parentWindow;
	  var scrollX = utils$1.getWindowScrollLeft(win);
	  var scrollY = utils$1.getWindowScrollTop(win);
	  var viewportWidth = utils$1.viewportWidth(win);
	  var viewportHeight = utils$1.viewportHeight(win);

	  if ('pageX' in tgtPoint) {
	    pageX = tgtPoint.pageX;
	  } else {
	    pageX = scrollX + tgtPoint.clientX;
	  }

	  if ('pageY' in tgtPoint) {
	    pageY = tgtPoint.pageY;
	  } else {
	    pageY = scrollY + tgtPoint.clientY;
	  }

	  var tgtRegion = {
	    left: pageX,
	    top: pageY,
	    width: 0,
	    height: 0
	  };
	  var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight; // Provide default target point

	  var points = [align.points[0], 'cc'];
	  return doAlign(el, tgtRegion, _objectSpread2$3({}, align, {
	    points: points
	  }), pointInView);
	}

	function isSamePoint(prev, next) {
	  if (prev === next) return true;
	  if (!prev || !next) return false;

	  if ('pageX' in next && 'pageY' in next) {
	    return prev.pageX === next.pageX && prev.pageY === next.pageY;
	  }

	  if ('clientX' in next && 'clientY' in next) {
	    return prev.clientX === next.clientX && prev.clientY === next.clientY;
	  }

	  return false;
	}
	function restoreFocus(activeElement, container) {
	  // Focus back if is in the container
	  if (activeElement !== document.activeElement && contains(container, activeElement) && typeof activeElement.focus === 'function') {
	    activeElement.focus();
	  }
	}
	function monitorResize(element, callback) {
	  var prevWidth = null;
	  var prevHeight = null;

	  function onResize(_ref) {
	    var _ref2 = _slicedToArray(_ref, 1),
	        target = _ref2[0].target;

	    var _target$getBoundingCl = target.getBoundingClientRect(),
	        width = _target$getBoundingCl.width,
	        height = _target$getBoundingCl.height;

	    var fixedWidth = Math.floor(width);
	    var fixedHeight = Math.floor(height);

	    if (prevWidth !== fixedWidth || prevHeight !== fixedHeight) {
	      callback({
	        width: fixedWidth,
	        height: fixedHeight
	      });
	    }

	    prevWidth = fixedWidth;
	    prevHeight = fixedHeight;
	  }

	  var resizeObserver = new index(onResize);

	  if (element) {
	    resizeObserver.observe(element);
	  }

	  return function () {
	    resizeObserver.disconnect();
	  };
	}

	var useBuffer = (function (callback, buffer) {
	  var calledRef = react.useRef(false);
	  var timeoutRef = react.useRef(null);

	  function cancelTrigger() {
	    window.clearTimeout(timeoutRef.current);
	  }

	  function trigger(force) {
	    if (!calledRef.current || force === true) {
	      if (callback() === false) {
	        // Not delay since callback cancelled self
	        return;
	      }

	      calledRef.current = true;
	      cancelTrigger();
	      timeoutRef.current = window.setTimeout(function () {
	        calledRef.current = false;
	      }, buffer);
	    } else {
	      cancelTrigger();
	      timeoutRef.current = window.setTimeout(function () {
	        calledRef.current = false;
	        trigger();
	      }, buffer);
	    }
	  }

	  return [trigger, function () {
	    calledRef.current = false;
	    cancelTrigger();
	  }];
	});

	function getElement(func) {
	  if (typeof func !== 'function') return null;
	  return func();
	}

	function getPoint(point) {
	  if (_typeof(point) !== 'object' || !point) return null;
	  return point;
	}

	var Align = function Align(_ref, ref) {
	  var children = _ref.children,
	      disabled = _ref.disabled,
	      target = _ref.target,
	      align = _ref.align,
	      onAlign = _ref.onAlign,
	      monitorWindowResize = _ref.monitorWindowResize,
	      _ref$monitorBufferTim = _ref.monitorBufferTime,
	      monitorBufferTime = _ref$monitorBufferTim === void 0 ? 0 : _ref$monitorBufferTim;
	  var cacheRef = react.useRef({});
	  var nodeRef = react.useRef();
	  var childNode = react.Children.only(children); // ===================== Align ======================
	  // We save the props here to avoid closure makes props ood

	  var forceAlignPropsRef = react.useRef({});
	  forceAlignPropsRef.current.disabled = disabled;
	  forceAlignPropsRef.current.target = target;
	  forceAlignPropsRef.current.onAlign = onAlign;

	  var _useBuffer = useBuffer(function () {
	    var _forceAlignPropsRef$c = forceAlignPropsRef.current,
	        latestDisabled = _forceAlignPropsRef$c.disabled,
	        latestTarget = _forceAlignPropsRef$c.target;

	    if (!latestDisabled && latestTarget) {
	      var source = nodeRef.current;
	      var result;
	      var element = getElement(latestTarget);
	      var point = getPoint(latestTarget);
	      cacheRef.current.element = element;
	      cacheRef.current.point = point; // IE lose focus after element realign
	      // We should record activeElement and restore later

	      var _document = document,
	          activeElement = _document.activeElement;

	      if (element) {
	        result = alignElement(source, element, align);
	      } else if (point) {
	        result = alignPoint(source, point, align);
	      }

	      restoreFocus(activeElement, source);

	      if (onAlign) {
	        onAlign(source, result);
	      }

	      return true;
	    }

	    return false;
	  }, monitorBufferTime),
	      _useBuffer2 = _slicedToArray(_useBuffer, 2),
	      _forceAlign = _useBuffer2[0],
	      cancelForceAlign = _useBuffer2[1]; // ===================== Effect =====================
	  // Listen for target updated


	  var resizeMonitor = react.useRef({
	    cancel: function cancel() {}
	  }); // Listen for source updated

	  var sourceResizeMonitor = react.useRef({
	    cancel: function cancel() {}
	  });
	  react.useEffect(function () {
	    var element = getElement(target);
	    var point = getPoint(target);

	    if (nodeRef.current !== sourceResizeMonitor.current.element) {
	      sourceResizeMonitor.current.cancel();
	      sourceResizeMonitor.current.element = nodeRef.current;
	      sourceResizeMonitor.current.cancel = monitorResize(nodeRef.current, _forceAlign);
	    }

	    if (cacheRef.current.element !== element || !isSamePoint(cacheRef.current.point, point)) {
	      _forceAlign(); // Add resize observer


	      if (resizeMonitor.current.element !== element) {
	        resizeMonitor.current.cancel();
	        resizeMonitor.current.element = element;
	        resizeMonitor.current.cancel = monitorResize(element, _forceAlign);
	      }
	    }
	  }); // Listen for disabled change

	  react.useEffect(function () {
	    if (!disabled) {
	      _forceAlign();
	    } else {
	      cancelForceAlign();
	    }
	  }, [disabled]); // Listen for window resize

	  var winResizeRef = react.useRef(null);
	  react.useEffect(function () {
	    if (monitorWindowResize) {
	      if (!winResizeRef.current) {
	        winResizeRef.current = addEventListenerWrap(window, 'resize', _forceAlign);
	      }
	    } else if (winResizeRef.current) {
	      winResizeRef.current.remove();
	      winResizeRef.current = null;
	    }
	  }, [monitorWindowResize]); // Clear all if unmount

	  react.useEffect(function () {
	    return function () {
	      resizeMonitor.current.cancel();
	      sourceResizeMonitor.current.cancel();
	      if (winResizeRef.current) winResizeRef.current.remove();
	      cancelForceAlign();
	    };
	  }, []); // ====================== Ref =======================

	  react.useImperativeHandle(ref, function () {
	    return {
	      forceAlign: function forceAlign() {
	        return _forceAlign(true);
	      }
	    };
	  }); // ===================== Render =====================

	  if (react.isValidElement(childNode)) {
	    childNode = react.cloneElement(childNode, {
	      ref: composeRef(childNode.ref, nodeRef)
	    });
	  }

	  return childNode;
	};

	var RefAlign = react.forwardRef(Align);
	RefAlign.displayName = 'Align';

	// export this package's api

	var canUseDOM$2 = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	// ================= Transition =================
	// Event wrapper. Copy from react source code
	function makePrefixMap$1(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	function getVendorPrefixes$1(domSupport, win) {
	  var prefixes = {
	    animationend: makePrefixMap$1('Animation', 'AnimationEnd'),
	    transitionend: makePrefixMap$1('Transition', 'TransitionEnd')
	  };

	  if (domSupport) {
	    if (!('AnimationEvent' in win)) {
	      delete prefixes.animationend.animation;
	    }

	    if (!('TransitionEvent' in win)) {
	      delete prefixes.transitionend.transition;
	    }
	  }

	  return prefixes;
	}

	var vendorPrefixes$1 = getVendorPrefixes$1(canUseDOM$2, typeof window !== 'undefined' ? window : {});

	var style$2 = {};

	if (canUseDOM$2) {
	  style$2 = document.createElement('div').style;
	}

	var prefixedEventNames$1 = {};

	function getVendorPrefixedEventName$1(eventName) {
	  if (prefixedEventNames$1[eventName]) {
	    return prefixedEventNames$1[eventName];
	  }

	  var prefixMap = vendorPrefixes$1[eventName];

	  if (prefixMap) {
	    var stylePropList = Object.keys(prefixMap);
	    var len = stylePropList.length;
	    for (var i = 0; i < len; i += 1) {
	      var styleProp = stylePropList[i];
	      if (Object.prototype.hasOwnProperty.call(prefixMap, styleProp) && styleProp in style$2) {
	        prefixedEventNames$1[eventName] = prefixMap[styleProp];
	        return prefixedEventNames$1[eventName];
	      }
	    }
	  }

	  return '';
	}

	var animationEndName$1 = getVendorPrefixedEventName$1('animationend');
	var transitionEndName$1 = getVendorPrefixedEventName$1('transitionend');
	var supportTransition$1 = !!(animationEndName$1 && transitionEndName$1);

	function getTransitionName$2(transitionName, transitionType) {
	  if (!transitionName) return null;

	  if (typeof transitionName === 'object') {
	    var type = transitionType.replace(/-\w/g, function (match) {
	      return match[1].toUpperCase();
	    });
	    return transitionName[type];
	  }

	  return transitionName + '-' + transitionType;
	}

	var _extends$7 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass$5 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _defineProperty$6(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$a(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$a(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$a(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var STATUS_NONE$1 = 'none';
	var STATUS_APPEAR$1 = 'appear';
	var STATUS_ENTER$1 = 'enter';
	var STATUS_LEAVE$1 = 'leave';

	/**
	 * `transitionSupport` is used for none transition test case.
	 * Default we use browser transition event support check.
	 */
	function genCSSMotion$1(config) {
	  var transitionSupport = config;
	  var forwardRef = !!react.forwardRef;

	  if (typeof config === 'object') {
	    transitionSupport = config.transitionSupport;
	    forwardRef = 'forwardRef' in config ? config.forwardRef : forwardRef;
	  }

	  function isSupportTransition(props) {
	    return !!(props.motionName && transitionSupport);
	  }

	  var CSSMotion = function (_React$Component) {
	    _inherits$a(CSSMotion, _React$Component);

	    function CSSMotion() {
	      _classCallCheck$a(this, CSSMotion);

	      var _this = _possibleConstructorReturn$a(this, (CSSMotion.__proto__ || Object.getPrototypeOf(CSSMotion)).call(this));

	      _this.onDomUpdate = function () {
	        var _this$state = _this.state,
	            status = _this$state.status,
	            newStatus = _this$state.newStatus;
	        var _this$props = _this.props,
	            onAppearStart = _this$props.onAppearStart,
	            onEnterStart = _this$props.onEnterStart,
	            onLeaveStart = _this$props.onLeaveStart,
	            onAppearActive = _this$props.onAppearActive,
	            onEnterActive = _this$props.onEnterActive,
	            onLeaveActive = _this$props.onLeaveActive,
	            motionAppear = _this$props.motionAppear,
	            motionEnter = _this$props.motionEnter,
	            motionLeave = _this$props.motionLeave;


	        if (!isSupportTransition(_this.props)) {
	          return;
	        }

	        // Event injection
	        var $ele = _this.getElement();
	        if (_this.$cacheEle !== $ele) {
	          _this.removeEventListener(_this.$cacheEle);
	          _this.addEventListener($ele);
	          _this.$cacheEle = $ele;
	        }

	        // Init status
	        if (newStatus && status === STATUS_APPEAR$1 && motionAppear) {
	          _this.updateStatus(onAppearStart, null, null, function () {
	            _this.updateActiveStatus(onAppearActive, STATUS_APPEAR$1);
	          });
	        } else if (newStatus && status === STATUS_ENTER$1 && motionEnter) {
	          _this.updateStatus(onEnterStart, null, null, function () {
	            _this.updateActiveStatus(onEnterActive, STATUS_ENTER$1);
	          });
	        } else if (newStatus && status === STATUS_LEAVE$1 && motionLeave) {
	          _this.updateStatus(onLeaveStart, null, null, function () {
	            _this.updateActiveStatus(onLeaveActive, STATUS_LEAVE$1);
	          });
	        }
	      };

	      _this.onMotionEnd = function (event) {
	        var _this$state2 = _this.state,
	            status = _this$state2.status,
	            statusActive = _this$state2.statusActive;
	        var _this$props2 = _this.props,
	            onAppearEnd = _this$props2.onAppearEnd,
	            onEnterEnd = _this$props2.onEnterEnd,
	            onLeaveEnd = _this$props2.onLeaveEnd;

	        if (status === STATUS_APPEAR$1 && statusActive) {
	          _this.updateStatus(onAppearEnd, { status: STATUS_NONE$1 }, event);
	        } else if (status === STATUS_ENTER$1 && statusActive) {
	          _this.updateStatus(onEnterEnd, { status: STATUS_NONE$1 }, event);
	        } else if (status === STATUS_LEAVE$1 && statusActive) {
	          _this.updateStatus(onLeaveEnd, { status: STATUS_NONE$1 }, event);
	        }
	      };

	      _this.setNodeRef = function (node) {
	        var internalRef = _this.props.internalRef;

	        _this.node = node;

	        if (typeof internalRef === 'function') {
	          internalRef(node);
	        } else if (internalRef && 'current' in internalRef) {
	          internalRef.current = node;
	        }
	      };

	      _this.getElement = function () {
	        try {
	          return findDOMNode(_this.node || _this);
	        } catch (e) {
	          /**
	           * Fallback to cache element.
	           * This is only happen when `motionDeadline` trigger but element removed.
	           */
	          return _this.$cacheEle;
	        }
	      };

	      _this.addEventListener = function ($ele) {
	        if (!$ele) return;

	        $ele.addEventListener(transitionEndName$1, _this.onMotionEnd);
	        $ele.addEventListener(animationEndName$1, _this.onMotionEnd);
	      };

	      _this.removeEventListener = function ($ele) {
	        if (!$ele) return;

	        $ele.removeEventListener(transitionEndName$1, _this.onMotionEnd);
	        $ele.removeEventListener(animationEndName$1, _this.onMotionEnd);
	      };

	      _this.updateStatus = function (styleFunc, additionalState, event, callback) {
	        var statusStyle = styleFunc ? styleFunc(_this.getElement(), event) : null;

	        if (statusStyle === false || _this._destroyed) return;

	        var nextStep = void 0;
	        if (callback) {
	          nextStep = function nextStep() {
	            _this.nextFrame(callback);
	          };
	        }

	        _this.setState(_extends$7({
	          statusStyle: typeof statusStyle === 'object' ? statusStyle : null,
	          newStatus: false
	        }, additionalState), nextStep); // Trigger before next frame & after `componentDidMount`
	      };

	      _this.updateActiveStatus = function (styleFunc, currentStatus) {
	        // `setState` use `postMessage` to trigger at the end of frame.
	        // Let's use requestAnimationFrame to update new state in next frame.
	        _this.nextFrame(function () {
	          var status = _this.state.status;

	          if (status !== currentStatus) return;

	          var motionDeadline = _this.props.motionDeadline;


	          _this.updateStatus(styleFunc, { statusActive: true });

	          if (motionDeadline > 0) {
	            setTimeout(function () {
	              _this.onMotionEnd({
	                deadline: true
	              });
	            }, motionDeadline);
	          }
	        });
	      };

	      _this.nextFrame = function (func) {
	        _this.cancelNextFrame();
	        _this.raf = raf_1(func);
	      };

	      _this.cancelNextFrame = function () {
	        if (_this.raf) {
	          raf_1.cancel(_this.raf);
	          _this.raf = null;
	        }
	      };

	      _this.state = {
	        status: STATUS_NONE$1,
	        statusActive: false,
	        newStatus: false,
	        statusStyle: null
	      };
	      _this.$cacheEle = null;
	      _this.node = null;
	      _this.raf = null;
	      return _this;
	    }

	    _createClass$5(CSSMotion, [{
	      key: 'componentDidMount',
	      value: function componentDidMount() {
	        this.onDomUpdate();
	      }
	    }, {
	      key: 'componentDidUpdate',
	      value: function componentDidUpdate() {
	        this.onDomUpdate();
	      }
	    }, {
	      key: 'componentWillUnmount',
	      value: function componentWillUnmount() {
	        this._destroyed = true;
	        this.removeEventListener(this.$cacheEle);
	        this.cancelNextFrame();
	      }
	    }, {
	      key: 'render',
	      value: function render() {
	        var _classNames;

	        var _state = this.state,
	            status = _state.status,
	            statusActive = _state.statusActive,
	            statusStyle = _state.statusStyle;
	        var _props = this.props,
	            children = _props.children,
	            motionName = _props.motionName,
	            visible = _props.visible,
	            removeOnLeave = _props.removeOnLeave,
	            leavedClassName = _props.leavedClassName,
	            eventProps = _props.eventProps;


	        if (!children) return null;

	        if (status === STATUS_NONE$1 || !isSupportTransition(this.props)) {
	          if (visible) {
	            return children(_extends$7({}, eventProps), this.setNodeRef);
	          } else if (!removeOnLeave) {
	            return children(_extends$7({}, eventProps, { className: leavedClassName }), this.setNodeRef);
	          }

	          return null;
	        }

	        return children(_extends$7({}, eventProps, {
	          className: classnames((_classNames = {}, _defineProperty$6(_classNames, getTransitionName$2(motionName, status), status !== STATUS_NONE$1), _defineProperty$6(_classNames, getTransitionName$2(motionName, status + '-active'), status !== STATUS_NONE$1 && statusActive), _defineProperty$6(_classNames, motionName, typeof motionName === 'string'), _classNames)),
	          style: statusStyle
	        }), this.setNodeRef);
	      }
	    }], [{
	      key: 'getDerivedStateFromProps',
	      value: function getDerivedStateFromProps(props, _ref) {
	        var prevProps = _ref.prevProps,
	            prevStatus = _ref.status;

	        if (!isSupportTransition(props)) return {};

	        var visible = props.visible,
	            motionAppear = props.motionAppear,
	            motionEnter = props.motionEnter,
	            motionLeave = props.motionLeave,
	            motionLeaveImmediately = props.motionLeaveImmediately;

	        var newState = {
	          prevProps: props
	        };

	        // Clean up status if prop set to false
	        if (prevStatus === STATUS_APPEAR$1 && !motionAppear || prevStatus === STATUS_ENTER$1 && !motionEnter || prevStatus === STATUS_LEAVE$1 && !motionLeave) {
	          newState.status = STATUS_NONE$1;
	          newState.statusActive = false;
	          newState.newStatus = false;
	        }

	        // Appear
	        if (!prevProps && visible && motionAppear) {
	          newState.status = STATUS_APPEAR$1;
	          newState.statusActive = false;
	          newState.newStatus = true;
	        }

	        // Enter
	        if (prevProps && !prevProps.visible && visible && motionEnter) {
	          newState.status = STATUS_ENTER$1;
	          newState.statusActive = false;
	          newState.newStatus = true;
	        }

	        // Leave
	        if (prevProps && prevProps.visible && !visible && motionLeave || !prevProps && motionLeaveImmediately && !visible && motionLeave) {
	          newState.status = STATUS_LEAVE$1;
	          newState.statusActive = false;
	          newState.newStatus = true;
	        }

	        return newState;
	      }
	    }]);

	    return CSSMotion;
	  }(react.Component);

	  CSSMotion.defaultProps = {
	    visible: true,
	    motionEnter: true,
	    motionAppear: true,
	    motionLeave: true,
	    removeOnLeave: true
	  };


	  if (!forwardRef) {
	    return CSSMotion;
	  }

	  return react.forwardRef(function (props, ref) {
	    return react.createElement(CSSMotion, _extends$7({ internalRef: ref }, props));
	  });
	}

	var CSSMotion$1 = genCSSMotion$1(supportTransition$1);

	var PopupInner = function PopupInner(props, ref) {
	  var prefixCls = props.prefixCls,
	      className = props.className,
	      style = props.style,
	      children = props.children,
	      onMouseEnter = props.onMouseEnter,
	      onMouseLeave = props.onMouseLeave,
	      onMouseDown = props.onMouseDown,
	      onTouchStart = props.onTouchStart;
	  var childNode = children;

	  if (react.Children.count(children) > 1) {
	    childNode = react.createElement("div", {
	      className: "".concat(prefixCls, "-content")
	    }, children);
	  }

	  return react.createElement("div", {
	    ref: ref,
	    className: className,
	    onMouseEnter: onMouseEnter,
	    onMouseLeave: onMouseLeave,
	    onMouseDown: onMouseDown,
	    onTouchStart: onTouchStart,
	    style: style
	  }, childNode);
	};

	var RefPopupInner = react.forwardRef(PopupInner);
	RefPopupInner.displayName = 'PopupInner';

	function getMotion(_ref) {
	  var prefixCls = _ref.prefixCls,
	      motion = _ref.motion,
	      animation = _ref.animation,
	      transitionName = _ref.transitionName;

	  if (motion) {
	    return motion;
	  }

	  if (animation) {
	    return {
	      motionName: "".concat(prefixCls, "-").concat(animation)
	    };
	  }

	  if (transitionName) {
	    return {
	      motionName: transitionName
	    };
	  }

	  return null;
	}

	var CSSMotion$2 = CSSMotion$1;

	function supportMotion(motion) {
	  return motion && motion.motionName;
	}

	var Popup = /*#__PURE__*/function (_Component) {
	  _inherits$6(Popup, _Component);

	  var _super = _createSuper$5(Popup);

	  function Popup() {
	    var _this;

	    _classCallCheck$6(this, Popup);

	    _this = _super.apply(this, arguments);
	    _this.state = {
	      targetWidth: undefined,
	      targetHeight: undefined,
	      status: null,
	      prevVisible: null,
	      alignClassName: null,
	      inMotion: false
	    };
	    _this.popupRef = react.createRef();
	    _this.alignRef = react.createRef();
	    _this.nextFrameState = null;
	    _this.nextFrameId = null;

	    _this.onAlign = function (popupDomNode, align) {
	      var status = _this.state.status;
	      var _this$props = _this.props,
	          getClassNameFromAlign = _this$props.getClassNameFromAlign,
	          onAlign = _this$props.onAlign;
	      var alignClassName = getClassNameFromAlign(align);

	      if (status === 'align') {
	        _this.setState({
	          alignClassName: alignClassName,
	          status: 'aligned'
	        }, function () {
	          _this.alignRef.current.forceAlign();
	        });
	      } else if (status === 'aligned') {
	        _this.setState({
	          alignClassName: alignClassName,
	          status: 'afterAlign'
	        });

	        onAlign(popupDomNode, align);
	      } else {
	        _this.setState({
	          alignClassName: alignClassName
	        });
	      }
	    };

	    _this.onMotionEnd = function () {
	      var visible = _this.props.visible;

	      _this.setState({
	        status: visible ? 'AfterMotion' : 'stable',
	        inMotion: false
	      });
	    };

	    _this.setStateOnNextFrame = function (state) {
	      _this.cancelFrameState();

	      _this.nextFrameState = _objectSpread2$2(_objectSpread2$2({}, _this.nextFrameState), state);
	      _this.nextFrameId = raf_1(function () {
	        var submitState = _objectSpread2$2({}, _this.nextFrameState);

	        _this.nextFrameState = null;

	        _this.setState(submitState);
	      });
	    };

	    _this.getMotion = function () {
	      return _objectSpread2$2({}, getMotion(_this.props));
	    }; // `target` on `rc-align` can accept as a function to get the bind element or a point.
	    // ref: https://www.npmjs.com/package/rc-align


	    _this.getAlignTarget = function () {
	      var _this$props2 = _this.props,
	          point = _this$props2.point,
	          getRootDomNode = _this$props2.getRootDomNode;

	      if (point) {
	        return point;
	      }

	      return getRootDomNode;
	    };

	    _this.cancelFrameState = function () {
	      raf_1.cancel(_this.nextFrameId);
	    };

	    _this.renderPopupElement = function () {
	      var _this$state = _this.state,
	          status = _this$state.status,
	          targetHeight = _this$state.targetHeight,
	          targetWidth = _this$state.targetWidth,
	          alignClassName = _this$state.alignClassName;
	      var _this$props3 = _this.props,
	          prefixCls = _this$props3.prefixCls,
	          className = _this$props3.className,
	          style = _this$props3.style,
	          stretch = _this$props3.stretch,
	          visible = _this$props3.visible,
	          align = _this$props3.align,
	          destroyPopupOnHide = _this$props3.destroyPopupOnHide,
	          onMouseEnter = _this$props3.onMouseEnter,
	          onMouseLeave = _this$props3.onMouseLeave,
	          onMouseDown = _this$props3.onMouseDown,
	          onTouchStart = _this$props3.onTouchStart,
	          children = _this$props3.children;
	      var mergedClassName = classnames(prefixCls, className, alignClassName);
	      var hiddenClassName = "".concat(prefixCls, "-hidden"); // ================== Style ==================

	      var sizeStyle = {};

	      if (stretch) {
	        // Stretch with target
	        if (stretch.indexOf('height') !== -1) {
	          sizeStyle.height = targetHeight;
	        } else if (stretch.indexOf('minHeight') !== -1) {
	          sizeStyle.minHeight = targetHeight;
	        }

	        if (stretch.indexOf('width') !== -1) {
	          sizeStyle.width = targetWidth;
	        } else if (stretch.indexOf('minWidth') !== -1) {
	          sizeStyle.minWidth = targetWidth;
	        }
	      }

	      var mergedStyle = _objectSpread2$2(_objectSpread2$2(_objectSpread2$2(_objectSpread2$2({}, sizeStyle), _this.getZIndexStyle()), style), {}, {
	        opacity: status === 'stable' || !visible ? undefined : 0
	      }); // ================= Motions =================


	      var mergedMotion = _this.getMotion();

	      var mergedMotionVisible = visible;

	      if (visible && status !== 'beforeMotion' && status !== 'motion' && status !== 'stable') {
	        mergedMotion.motionAppear = false;
	        mergedMotion.motionEnter = false;
	        mergedMotion.motionLeave = false;
	      }

	      if (status === 'afterAlign' || status === 'beforeMotion') {
	        mergedMotionVisible = false;
	      } // Update trigger to tell if is in motion


	      ['onEnterStart', 'onAppearStart', 'onLeaveStart'].forEach(function (event) {
	        var originFunc = mergedMotion === null || mergedMotion === void 0 ? void 0 : mergedMotion[event];

	        mergedMotion[event] = function () {
	          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	          }

	          originFunc === null || originFunc === void 0 ? void 0 : originFunc.apply(void 0, args);

	          _this.setState({
	            inMotion: true
	          });
	        };
	      }); // ================== Align ==================

	      var mergedAlignDisabled = !visible || status !== 'align' && status !== 'aligned' && status !== 'stable'; // ================== Popup ==================

	      var mergedPopupVisible = true;

	      if (status === 'stable') {
	        mergedPopupVisible = visible;
	      } // Only remove popup since mask may still need animation


	      if (destroyPopupOnHide && !mergedPopupVisible) {
	        return null;
	      }

	      return react.createElement(CSSMotion$2, Object.assign({
	        visible: mergedMotionVisible
	      }, mergedMotion, {
	        removeOnLeave: false,
	        onEnterEnd: _this.onMotionEnd,
	        onLeaveEnd: _this.onMotionEnd,
	        leavedClassName: hiddenClassName
	      }), function (_ref, motionRef) {
	        var motionStyle = _ref.style,
	            motionClassName = _ref.className;
	        return react.createElement(RefAlign, {
	          target: _this.getAlignTarget(),
	          key: "popup",
	          ref: _this.alignRef,
	          monitorWindowResize: true,
	          disabled: mergedAlignDisabled,
	          align: align,
	          onAlign: _this.onAlign
	        }, react.createElement(RefPopupInner, {
	          prefixCls: prefixCls,
	          className: classnames(mergedClassName, motionClassName),
	          ref: composeRef(motionRef, _this.popupRef),
	          onMouseEnter: onMouseEnter,
	          onMouseLeave: onMouseLeave,
	          onMouseDown: onMouseDown,
	          onTouchStart: onTouchStart,
	          style: _objectSpread2$2(_objectSpread2$2({}, mergedStyle), motionStyle)
	        }, children));
	      });
	    };

	    _this.renderMaskElement = function () {
	      var _this$props4 = _this.props,
	          mask = _this$props4.mask,
	          maskMotion = _this$props4.maskMotion,
	          maskTransitionName = _this$props4.maskTransitionName,
	          maskAnimation = _this$props4.maskAnimation,
	          prefixCls = _this$props4.prefixCls,
	          visible = _this$props4.visible;

	      if (!mask) {
	        return null;
	      }

	      var motion = {};

	      if (maskMotion && maskMotion.motionName) {
	        motion = _objectSpread2$2({
	          motionAppear: true
	        }, getMotion({
	          motion: maskMotion,
	          prefixCls: prefixCls,
	          transitionName: maskTransitionName,
	          animation: maskAnimation
	        }));
	      }

	      return react.createElement(CSSMotion$2, Object.assign({}, motion, {
	        visible: visible,
	        removeOnLeave: true
	      }), function (_ref2) {
	        var className = _ref2.className;
	        return react.createElement("div", {
	          style: _this.getZIndexStyle(),
	          key: "mask",
	          className: classnames("".concat(prefixCls, "-mask"), className)
	        });
	      });
	    };

	    return _this;
	  }

	  _createClass$1(Popup, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.componentDidUpdate();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      var status = this.state.status;
	      var _this$props5 = this.props,
	          getRootDomNode = _this$props5.getRootDomNode,
	          visible = _this$props5.visible,
	          stretch = _this$props5.stretch; // If there is a pending state update, cancel it, a new one will be set if necessary

	      this.cancelFrameState();

	      if (visible && status !== 'stable') {
	        switch (status) {
	          case null:
	            {
	              this.setStateOnNextFrame({
	                status: stretch ? 'measure' : 'align'
	              });
	              break;
	            }

	          case 'afterAlign':
	            {
	              this.setStateOnNextFrame({
	                status: supportMotion(this.getMotion()) ? 'beforeMotion' : 'stable'
	              });
	              break;
	            }

	          case 'AfterMotion':
	            {
	              this.setStateOnNextFrame({
	                status: 'stable'
	              });
	              break;
	            }

	          default:
	            {
	              // Go to next status
	              var queue = ['measure', 'align', null, 'beforeMotion', 'motion'];
	              var index = queue.indexOf(status);
	              var nextStatus = queue[index + 1];

	              if (index !== -1 && nextStatus) {
	                this.setStateOnNextFrame({
	                  status: nextStatus
	                });
	              }
	            }
	        }
	      } // Measure stretch size


	      if (status === 'measure') {
	        var $ele = getRootDomNode();

	        if ($ele) {
	          this.setStateOnNextFrame({
	            targetHeight: $ele.offsetHeight,
	            targetWidth: $ele.offsetWidth
	          });
	        }
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.cancelFrameState();
	    }
	  }, {
	    key: "getZIndexStyle",
	    value: function getZIndexStyle() {
	      var zIndex = this.props.zIndex;
	      return {
	        zIndex: zIndex
	      };
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return react.createElement("div", null, this.renderMaskElement(), this.renderPopupElement());
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(_ref3, _ref4) {
	      var visible = _ref3.visible,
	          props = _objectWithoutProperties$1(_ref3, ["visible"]);

	      var prevVisible = _ref4.prevVisible,
	          status = _ref4.status,
	          inMotion = _ref4.inMotion;
	      var newState = {
	        prevVisible: visible,
	        status: status
	      };
	      var mergedMotion = getMotion(props);

	      if (prevVisible === null && visible === false) {
	        // Init render should always be stable
	        newState.status = 'stable';
	        newState.inMotion = false;
	      } else if (visible !== prevVisible) {
	        newState.inMotion = false;

	        if (visible || supportMotion(mergedMotion) && inMotion) {
	          newState.status = null;
	        } else {
	          newState.status = 'stable';
	        }

	        if (visible) {
	          newState.alignClassName = null;
	        }
	      }

	      return newState;
	    }
	  }]);

	  return Popup;
	}(react.Component);
	/* eslint-enable */

	var TriggerContext = react.createContext(null);

	function noop$2() {}

	function returnEmptyString() {
	  return '';
	}

	function returnDocument() {
	  return window.document;
	}

	var ALL_HANDLERS = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur', 'onContextMenu'];
	/**
	 * Internal usage. Do not use in your code since this will be removed.
	 */

	function generateTrigger(PortalComponent) {
	  var Trigger = /*#__PURE__*/function (_React$Component) {
	    _inherits$6(Trigger, _React$Component);

	    var _super = _createSuper$5(Trigger);

	    function Trigger(props) {
	      var _this;

	      _classCallCheck$6(this, Trigger);

	      _this = _super.call(this, props);
	      _this.popupRef = react.createRef();
	      _this.triggerRef = react.createRef();

	      _this.onMouseEnter = function (e) {
	        var mouseEnterDelay = _this.props.mouseEnterDelay;

	        _this.fireEvents('onMouseEnter', e);

	        _this.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e);
	      };

	      _this.onMouseMove = function (e) {
	        _this.fireEvents('onMouseMove', e);

	        _this.setPoint(e);
	      };

	      _this.onMouseLeave = function (e) {
	        _this.fireEvents('onMouseLeave', e);

	        _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
	      };

	      _this.onPopupMouseEnter = function () {
	        _this.clearDelayTimer();
	      };

	      _this.onPopupMouseLeave = function (e) {
	        // https://github.com/react-component/trigger/pull/13
	        // react bug?
	        if (e.relatedTarget && !e.relatedTarget.setTimeout && _this.popupRef.current && _this.popupRef.current.popupRef.current && contains(_this.popupRef.current.popupRef.current, e.relatedTarget)) {
	          return;
	        }

	        _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
	      };

	      _this.onFocus = function (e) {
	        _this.fireEvents('onFocus', e); // incase focusin and focusout


	        _this.clearDelayTimer();

	        if (_this.isFocusToShow()) {
	          _this.focusTime = Date.now();

	          _this.delaySetPopupVisible(true, _this.props.focusDelay);
	        }
	      };

	      _this.onMouseDown = function (e) {
	        _this.fireEvents('onMouseDown', e);

	        _this.preClickTime = Date.now();
	      };

	      _this.onTouchStart = function (e) {
	        _this.fireEvents('onTouchStart', e);

	        _this.preTouchTime = Date.now();
	      };

	      _this.onBlur = function (e) {
	        _this.fireEvents('onBlur', e);

	        _this.clearDelayTimer();

	        if (_this.isBlurToHide()) {
	          _this.delaySetPopupVisible(false, _this.props.blurDelay);
	        }
	      };

	      _this.onContextMenu = function (e) {
	        e.preventDefault();

	        _this.fireEvents('onContextMenu', e);

	        _this.setPopupVisible(true, e);
	      };

	      _this.onContextMenuClose = function () {
	        if (_this.isContextMenuToShow()) {
	          _this.close();
	        }
	      };

	      _this.onClick = function (event) {
	        _this.fireEvents('onClick', event); // focus will trigger click


	        if (_this.focusTime) {
	          var preTime;

	          if (_this.preClickTime && _this.preTouchTime) {
	            preTime = Math.min(_this.preClickTime, _this.preTouchTime);
	          } else if (_this.preClickTime) {
	            preTime = _this.preClickTime;
	          } else if (_this.preTouchTime) {
	            preTime = _this.preTouchTime;
	          }

	          if (Math.abs(preTime - _this.focusTime) < 20) {
	            return;
	          }

	          _this.focusTime = 0;
	        }

	        _this.preClickTime = 0;
	        _this.preTouchTime = 0; // Only prevent default when all the action is click.
	        // https://github.com/ant-design/ant-design/issues/17043
	        // https://github.com/ant-design/ant-design/issues/17291

	        if (_this.isClickToShow() && (_this.isClickToHide() || _this.isBlurToHide()) && event && event.preventDefault) {
	          event.preventDefault();
	        }

	        var nextVisible = !_this.state.popupVisible;

	        if (_this.isClickToHide() && !nextVisible || nextVisible && _this.isClickToShow()) {
	          _this.setPopupVisible(!_this.state.popupVisible, event);
	        }
	      };

	      _this.onPopupMouseDown = function () {
	        _this.hasPopupMouseDown = true;
	        clearTimeout(_this.mouseDownTimeout);
	        _this.mouseDownTimeout = window.setTimeout(function () {
	          _this.hasPopupMouseDown = false;
	        }, 0);

	        if (_this.context) {
	          var _this$context;

	          (_this$context = _this.context).onPopupMouseDown.apply(_this$context, arguments);
	        }
	      };

	      _this.onDocumentClick = function (event) {
	        if (_this.props.mask && !_this.props.maskClosable) {
	          return;
	        }

	        var target = event.target;

	        var root = _this.getRootDomNode();

	        var popupNode = _this.getPopupDomNode();

	        if (!contains(root, target) && !contains(popupNode, target) && !_this.hasPopupMouseDown) {
	          _this.close();
	        }
	      };

	      _this.getRootDomNode = function () {
	        var getTriggerDOMNode = _this.props.getTriggerDOMNode;

	        if (getTriggerDOMNode) {
	          return getTriggerDOMNode(_this.triggerRef.current);
	        }

	        try {
	          var domNode = findDOMNode(_this.triggerRef.current);

	          if (domNode) {
	            return domNode;
	          }
	        } catch (err) {// Do nothing
	        }

	        return reactDom.findDOMNode(_assertThisInitialized(_this));
	      };

	      _this.getPopupClassNameFromAlign = function (align) {
	        var className = [];
	        var _this$props = _this.props,
	            popupPlacement = _this$props.popupPlacement,
	            builtinPlacements = _this$props.builtinPlacements,
	            prefixCls = _this$props.prefixCls,
	            alignPoint = _this$props.alignPoint,
	            getPopupClassNameFromAlign = _this$props.getPopupClassNameFromAlign;

	        if (popupPlacement && builtinPlacements) {
	          className.push(getAlignPopupClassName(builtinPlacements, prefixCls, align, alignPoint));
	        }

	        if (getPopupClassNameFromAlign) {
	          className.push(getPopupClassNameFromAlign(align));
	        }

	        return className.join(' ');
	      };

	      _this.getComponent = function () {
	        var _this$props2 = _this.props,
	            prefixCls = _this$props2.prefixCls,
	            destroyPopupOnHide = _this$props2.destroyPopupOnHide,
	            popupClassName = _this$props2.popupClassName,
	            onPopupAlign = _this$props2.onPopupAlign,
	            popupMotion = _this$props2.popupMotion,
	            popupAnimation = _this$props2.popupAnimation,
	            popupTransitionName = _this$props2.popupTransitionName,
	            popupStyle = _this$props2.popupStyle,
	            mask = _this$props2.mask,
	            maskAnimation = _this$props2.maskAnimation,
	            maskTransitionName = _this$props2.maskTransitionName,
	            maskMotion = _this$props2.maskMotion,
	            zIndex = _this$props2.zIndex,
	            popup = _this$props2.popup,
	            stretch = _this$props2.stretch,
	            alignPoint = _this$props2.alignPoint;
	        var _this$state = _this.state,
	            popupVisible = _this$state.popupVisible,
	            point = _this$state.point;

	        var align = _this.getPopupAlign();

	        var mouseProps = {};

	        if (_this.isMouseEnterToShow()) {
	          mouseProps.onMouseEnter = _this.onPopupMouseEnter;
	        }

	        if (_this.isMouseLeaveToHide()) {
	          mouseProps.onMouseLeave = _this.onPopupMouseLeave;
	        }

	        mouseProps.onMouseDown = _this.onPopupMouseDown;
	        mouseProps.onTouchStart = _this.onPopupMouseDown;
	        return react.createElement(Popup, Object.assign({
	          prefixCls: prefixCls,
	          destroyPopupOnHide: destroyPopupOnHide,
	          visible: popupVisible,
	          point: alignPoint && point,
	          className: popupClassName,
	          align: align,
	          onAlign: onPopupAlign,
	          animation: popupAnimation,
	          getClassNameFromAlign: _this.getPopupClassNameFromAlign
	        }, mouseProps, {
	          stretch: stretch,
	          getRootDomNode: _this.getRootDomNode,
	          style: popupStyle,
	          mask: mask,
	          zIndex: zIndex,
	          transitionName: popupTransitionName,
	          maskAnimation: maskAnimation,
	          maskTransitionName: maskTransitionName,
	          maskMotion: maskMotion,
	          ref: _this.popupRef,
	          motion: popupMotion
	        }), typeof popup === 'function' ? popup() : popup);
	      };

	      _this.getContainer = function () {
	        var _assertThisInitialize = _assertThisInitialized(_this),
	            props = _assertThisInitialize.props;

	        var popupContainer = document.createElement('div'); // Make sure default popup container will never cause scrollbar appearing
	        // https://github.com/react-component/trigger/issues/41

	        popupContainer.style.position = 'absolute';
	        popupContainer.style.top = '0';
	        popupContainer.style.left = '0';
	        popupContainer.style.width = '100%';
	        var mountNode = props.getPopupContainer ? props.getPopupContainer(_this.getRootDomNode()) : props.getDocument().body;
	        mountNode.appendChild(popupContainer);
	        return popupContainer;
	      };

	      _this.setPoint = function (point) {
	        var alignPoint = _this.props.alignPoint;
	        if (!alignPoint || !point) return;

	        _this.setState({
	          point: {
	            pageX: point.pageX,
	            pageY: point.pageY
	          }
	        });
	      };

	      _this.handlePortalUpdate = function () {
	        if (_this.state.prevPopupVisible !== _this.state.popupVisible) {
	          _this.props.afterPopupVisibleChange(_this.state.popupVisible);
	        }
	      };

	      var popupVisible;

	      if ('popupVisible' in props) {
	        popupVisible = !!props.popupVisible;
	      } else {
	        popupVisible = !!props.defaultPopupVisible;
	      }

	      _this.state = {
	        prevPopupVisible: popupVisible,
	        popupVisible: popupVisible
	      };
	      ALL_HANDLERS.forEach(function (h) {
	        _this["fire".concat(h)] = function (e) {
	          _this.fireEvents(h, e);
	        };
	      });
	      return _this;
	    }

	    _createClass$1(Trigger, [{
	      key: "componentDidMount",
	      value: function componentDidMount() {
	        this.componentDidUpdate();
	      }
	    }, {
	      key: "componentDidUpdate",
	      value: function componentDidUpdate() {
	        var props = this.props;
	        var state = this.state; // We must listen to `mousedown` or `touchstart`, edge case:
	        // https://github.com/ant-design/ant-design/issues/5804
	        // https://github.com/react-component/calendar/issues/250
	        // https://github.com/react-component/trigger/issues/50

	        if (state.popupVisible) {
	          var currentDocument;

	          if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow())) {
	            currentDocument = props.getDocument();
	            this.clickOutsideHandler = addEventListenerWrap(currentDocument, 'mousedown', this.onDocumentClick);
	          } // always hide on mobile


	          if (!this.touchOutsideHandler) {
	            currentDocument = currentDocument || props.getDocument();
	            this.touchOutsideHandler = addEventListenerWrap(currentDocument, 'touchstart', this.onDocumentClick);
	          } // close popup when trigger type contains 'onContextMenu' and document is scrolling.


	          if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {
	            currentDocument = currentDocument || props.getDocument();
	            this.contextMenuOutsideHandler1 = addEventListenerWrap(currentDocument, 'scroll', this.onContextMenuClose);
	          } // close popup when trigger type contains 'onContextMenu' and window is blur.


	          if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) {
	            this.contextMenuOutsideHandler2 = addEventListenerWrap(window, 'blur', this.onContextMenuClose);
	          }

	          return;
	        }

	        this.clearOutsideHandler();
	      }
	    }, {
	      key: "componentWillUnmount",
	      value: function componentWillUnmount() {
	        this.clearDelayTimer();
	        this.clearOutsideHandler();
	        clearTimeout(this.mouseDownTimeout);
	      }
	    }, {
	      key: "getPopupDomNode",
	      value: function getPopupDomNode() {
	        // for test
	        if (this.popupRef.current && this.popupRef.current.popupRef.current) {
	          return this.popupRef.current.popupRef.current;
	        }

	        return null;
	      }
	    }, {
	      key: "getPopupAlign",
	      value: function getPopupAlign() {
	        var props = this.props;
	        var popupPlacement = props.popupPlacement,
	            popupAlign = props.popupAlign,
	            builtinPlacements = props.builtinPlacements;

	        if (popupPlacement && builtinPlacements) {
	          return getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);
	        }

	        return popupAlign;
	      }
	      /**
	       * @param popupVisible    Show or not the popup element
	       * @param event           SyntheticEvent, used for `pointAlign`
	       */

	    }, {
	      key: "setPopupVisible",
	      value: function setPopupVisible(popupVisible, event) {
	        var alignPoint = this.props.alignPoint;
	        var prevPopupVisible = this.state.popupVisible;
	        this.clearDelayTimer();

	        if (prevPopupVisible !== popupVisible) {
	          if (!('popupVisible' in this.props)) {
	            this.setState({
	              popupVisible: popupVisible,
	              prevPopupVisible: prevPopupVisible
	            });
	          }

	          this.props.onPopupVisibleChange(popupVisible);
	        } // Always record the point position since mouseEnterDelay will delay the show


	        if (alignPoint && event) {
	          this.setPoint(event);
	        }
	      }
	    }, {
	      key: "delaySetPopupVisible",
	      value: function delaySetPopupVisible(visible, delayS, event) {
	        var _this2 = this;

	        var delay = delayS * 1000;
	        this.clearDelayTimer();

	        if (delay) {
	          var point = event ? {
	            pageX: event.pageX,
	            pageY: event.pageY
	          } : null;
	          this.delayTimer = window.setTimeout(function () {
	            _this2.setPopupVisible(visible, point);

	            _this2.clearDelayTimer();
	          }, delay);
	        } else {
	          this.setPopupVisible(visible, event);
	        }
	      }
	    }, {
	      key: "clearDelayTimer",
	      value: function clearDelayTimer() {
	        if (this.delayTimer) {
	          clearTimeout(this.delayTimer);
	          this.delayTimer = null;
	        }
	      }
	    }, {
	      key: "clearOutsideHandler",
	      value: function clearOutsideHandler() {
	        if (this.clickOutsideHandler) {
	          this.clickOutsideHandler.remove();
	          this.clickOutsideHandler = null;
	        }

	        if (this.contextMenuOutsideHandler1) {
	          this.contextMenuOutsideHandler1.remove();
	          this.contextMenuOutsideHandler1 = null;
	        }

	        if (this.contextMenuOutsideHandler2) {
	          this.contextMenuOutsideHandler2.remove();
	          this.contextMenuOutsideHandler2 = null;
	        }

	        if (this.touchOutsideHandler) {
	          this.touchOutsideHandler.remove();
	          this.touchOutsideHandler = null;
	        }
	      }
	    }, {
	      key: "createTwoChains",
	      value: function createTwoChains(event) {
	        var childPros = this.props.children.props;
	        var props = this.props;

	        if (childPros[event] && props[event]) {
	          return this["fire".concat(event)];
	        }

	        return childPros[event] || props[event];
	      }
	    }, {
	      key: "isClickToShow",
	      value: function isClickToShow() {
	        var _this$props3 = this.props,
	            action = _this$props3.action,
	            showAction = _this$props3.showAction;
	        return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
	      }
	    }, {
	      key: "isContextMenuToShow",
	      value: function isContextMenuToShow() {
	        var _this$props4 = this.props,
	            action = _this$props4.action,
	            showAction = _this$props4.showAction;
	        return action.indexOf('contextMenu') !== -1 || showAction.indexOf('contextMenu') !== -1;
	      }
	    }, {
	      key: "isClickToHide",
	      value: function isClickToHide() {
	        var _this$props5 = this.props,
	            action = _this$props5.action,
	            hideAction = _this$props5.hideAction;
	        return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
	      }
	    }, {
	      key: "isMouseEnterToShow",
	      value: function isMouseEnterToShow() {
	        var _this$props6 = this.props,
	            action = _this$props6.action,
	            showAction = _this$props6.showAction;
	        return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
	      }
	    }, {
	      key: "isMouseLeaveToHide",
	      value: function isMouseLeaveToHide() {
	        var _this$props7 = this.props,
	            action = _this$props7.action,
	            hideAction = _this$props7.hideAction;
	        return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
	      }
	    }, {
	      key: "isFocusToShow",
	      value: function isFocusToShow() {
	        var _this$props8 = this.props,
	            action = _this$props8.action,
	            showAction = _this$props8.showAction;
	        return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
	      }
	    }, {
	      key: "isBlurToHide",
	      value: function isBlurToHide() {
	        var _this$props9 = this.props,
	            action = _this$props9.action,
	            hideAction = _this$props9.hideAction;
	        return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
	      }
	    }, {
	      key: "forcePopupAlign",
	      value: function forcePopupAlign() {
	        if (this.state.popupVisible && this.popupRef.current && this.popupRef.current.alignRef.current) {
	          this.popupRef.current.alignRef.current.forceAlign();
	        }
	      }
	    }, {
	      key: "fireEvents",
	      value: function fireEvents(type, e) {
	        var childCallback = this.props.children.props[type];

	        if (childCallback) {
	          childCallback(e);
	        }

	        var callback = this.props[type];

	        if (callback) {
	          callback(e);
	        }
	      }
	    }, {
	      key: "close",
	      value: function close() {
	        this.setPopupVisible(false);
	      }
	    }, {
	      key: "render",
	      value: function render() {
	        var popupVisible = this.state.popupVisible;
	        var _this$props10 = this.props,
	            children = _this$props10.children,
	            forceRender = _this$props10.forceRender,
	            alignPoint = _this$props10.alignPoint,
	            className = _this$props10.className,
	            autoDestroy = _this$props10.autoDestroy;
	        var child = react.Children.only(children);
	        var newChildProps = {
	          key: 'trigger'
	        };

	        if (this.isContextMenuToShow()) {
	          newChildProps.onContextMenu = this.onContextMenu;
	        } else {
	          newChildProps.onContextMenu = this.createTwoChains('onContextMenu');
	        }

	        if (this.isClickToHide() || this.isClickToShow()) {
	          newChildProps.onClick = this.onClick;
	          newChildProps.onMouseDown = this.onMouseDown;
	          newChildProps.onTouchStart = this.onTouchStart;
	        } else {
	          newChildProps.onClick = this.createTwoChains('onClick');
	          newChildProps.onMouseDown = this.createTwoChains('onMouseDown');
	          newChildProps.onTouchStart = this.createTwoChains('onTouchStart');
	        }

	        if (this.isMouseEnterToShow()) {
	          newChildProps.onMouseEnter = this.onMouseEnter;

	          if (alignPoint) {
	            newChildProps.onMouseMove = this.onMouseMove;
	          }
	        } else {
	          newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');
	        }

	        if (this.isMouseLeaveToHide()) {
	          newChildProps.onMouseLeave = this.onMouseLeave;
	        } else {
	          newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');
	        }

	        if (this.isFocusToShow() || this.isBlurToHide()) {
	          newChildProps.onFocus = this.onFocus;
	          newChildProps.onBlur = this.onBlur;
	        } else {
	          newChildProps.onFocus = this.createTwoChains('onFocus');
	          newChildProps.onBlur = this.createTwoChains('onBlur');
	        }

	        var childrenClassName = classnames(child && child.props && child.props.className, className);

	        if (childrenClassName) {
	          newChildProps.className = childrenClassName;
	        }

	        var cloneProps = _objectSpread2$2({}, newChildProps);

	        if (supportRef(child)) {
	          cloneProps.ref = composeRef(this.triggerRef, child.ref);
	        }

	        var trigger = react.cloneElement(child, cloneProps);
	        var portal; // prevent unmounting after it's rendered

	        if (popupVisible || this.popupRef.current || forceRender) {
	          portal = react.createElement(PortalComponent, {
	            key: "portal",
	            getContainer: this.getContainer,
	            didUpdate: this.handlePortalUpdate
	          }, this.getComponent());
	        }

	        if (!popupVisible && autoDestroy) {
	          portal = null;
	        }

	        return react.createElement(TriggerContext.Provider, {
	          value: {
	            onPopupMouseDown: this.onPopupMouseDown
	          }
	        }, trigger, portal);
	      }
	    }], [{
	      key: "getDerivedStateFromProps",
	      value: function getDerivedStateFromProps(_ref, prevState) {
	        var popupVisible = _ref.popupVisible;
	        var newState = {};

	        if (popupVisible !== undefined && prevState.popupVisible !== popupVisible) {
	          newState.popupVisible = popupVisible;
	          newState.prevPopupVisible = prevState.popupVisible;
	        }

	        return newState;
	      }
	    }]);

	    return Trigger;
	  }(react.Component);

	  Trigger.contextType = TriggerContext;
	  Trigger.defaultProps = {
	    prefixCls: 'rc-trigger-popup',
	    getPopupClassNameFromAlign: returnEmptyString,
	    getDocument: returnDocument,
	    onPopupVisibleChange: noop$2,
	    afterPopupVisibleChange: noop$2,
	    onPopupAlign: noop$2,
	    popupClassName: '',
	    mouseEnterDelay: 0,
	    mouseLeaveDelay: 0.1,
	    focusDelay: 0,
	    blurDelay: 0.15,
	    popupStyle: {},
	    destroyPopupOnHide: false,
	    popupAlign: {},
	    defaultPopupVisible: false,
	    mask: false,
	    maskClosable: true,
	    action: [],
	    showAction: [],
	    hideAction: [],
	    autoDestroy: false
	  };
	  return Trigger;
	}
	var Trigger = generateTrigger(Portal);

	var SearchOutlined_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var SearchOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z" } }] }, "name": "search", "theme": "outlined" };
	exports.default = SearchOutlined;
	});

	var SearchOutlined_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _SearchOutlined = interopRequireDefault(SearchOutlined_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var SearchOutlined = function SearchOutlined(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _SearchOutlined.default
	  }));
	};

	SearchOutlined.displayName = 'SearchOutlined';

	var _default = React.forwardRef(SearchOutlined);

	exports.default = _default;
	});

	var SearchOutlined = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _SearchOutlined = _interopRequireDefault(SearchOutlined_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _SearchOutlined;
	  exports.default = _default;
	  module.exports = _default;
	});

	var SearchOutlined$1 = /*@__PURE__*/getDefaultExportFromCjs(SearchOutlined);

	var isValidElement = react.isValidElement;
	function replaceElement(element, replacement, props) {
	  if (!isValidElement(element)) return replacement;
	  return /*#__PURE__*/react.cloneElement(element, typeof props === 'function' ? props() : props);
	}
	function cloneElement(element, props) {
	  return replaceElement(element, element, props);
	}

	// https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead
	var tuple = function tuple() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return args;
	};

	var PresetStatusColorTypes = tuple('success', 'processing', 'error', 'default', 'warning'); // eslint-disable-next-line import/prefer-default-export

	var PresetColorTypes = tuple('pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime');

	var UnreachableException = function UnreachableException(value) {
	  classCallCheck(this, UnreachableException);

	  return new Error("unreachable case: ".concat(JSON.stringify(value)));
	};

	var __rest$1 = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};

	var ButtonGroup = function ButtonGroup(props) {
	  return /*#__PURE__*/react.createElement(ConfigConsumer, null, function (_ref) {
	    var _classNames;

	    var getPrefixCls = _ref.getPrefixCls,
	        direction = _ref.direction;

	    var customizePrefixCls = props.prefixCls,
	        size = props.size,
	        className = props.className,
	        others = __rest$1(props, ["prefixCls", "size", "className"]);

	    var prefixCls = getPrefixCls('btn-group', customizePrefixCls); // large => lg
	    // small => sm

	    var sizeCls = '';

	    switch (size) {
	      case 'large':
	        sizeCls = 'lg';
	        break;

	      case 'small':
	        sizeCls = 'sm';
	        break;

	      case 'middle':
	      case undefined:
	        break;

	      default:
	        // eslint-disable-next-line no-console
	        console.warn(new UnreachableException(size));
	    }

	    var classes = classnames(prefixCls, (_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), defineProperty$3(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
	    return /*#__PURE__*/react.createElement("div", _extends_1({}, others, {
	      className: classes
	    }));
	  });
	};

	var id$3 = 0;
	var ids = {}; // Support call raf with delay specified frame

	function wrapperRaf(callback) {
	  var delayFrames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	  var myId = id$3++;
	  var restFrames = delayFrames;

	  function internalCallback() {
	    restFrames -= 1;

	    if (restFrames <= 0) {
	      callback();
	      delete ids[myId];
	    } else {
	      ids[myId] = raf_1(internalCallback);
	    }
	  }

	  ids[myId] = raf_1(internalCallback);
	  return myId;
	}

	wrapperRaf.cancel = function cancel(pid) {
	  if (pid === undefined) return;
	  raf_1.cancel(ids[pid]);
	  delete ids[pid];
	};

	wrapperRaf.ids = ids; // export this for test usage

	var styleForPesudo; // Where el is the DOM element you'd like to test for visibility

	function isHidden(element) {

	  return !element || element.offsetParent === null;
	}

	function isNotGrey(color) {
	  // eslint-disable-next-line no-useless-escape
	  var match = (color || '').match(/rgba?\((\d*), (\d*), (\d*)(, [\d.]*)?\)/);

	  if (match && match[1] && match[2] && match[3]) {
	    return !(match[1] === match[2] && match[2] === match[3]);
	  }

	  return true;
	}

	var Wave = /*#__PURE__*/function (_React$Component) {
	  inherits(Wave, _React$Component);

	  var _super = createSuper(Wave);

	  function Wave() {
	    var _this;

	    classCallCheck(this, Wave);

	    _this = _super.apply(this, arguments);
	    _this.animationStart = false;
	    _this.destroyed = false;

	    _this.onClick = function (node, waveColor) {
	      if (!node || isHidden(node) || node.className.indexOf('-leave') >= 0) {
	        return;
	      }

	      var insertExtraNode = _this.props.insertExtraNode;
	      _this.extraNode = document.createElement('div');

	      var _assertThisInitialize = assertThisInitialized(_this),
	          extraNode = _assertThisInitialize.extraNode;

	      var getPrefixCls = _this.context.getPrefixCls;
	      extraNode.className = "".concat(getPrefixCls(''), "-click-animating-node");

	      var attributeName = _this.getAttributeName();

	      node.setAttribute(attributeName, 'true'); // Not white or transparnt or grey

	      styleForPesudo = styleForPesudo || document.createElement('style');

	      if (waveColor && waveColor !== '#ffffff' && waveColor !== 'rgb(255, 255, 255)' && isNotGrey(waveColor) && !/rgba\((?:\d*, ){3}0\)/.test(waveColor) && // any transparent rgba color
	      waveColor !== 'transparent') {
	        // Add nonce if CSP exist
	        if (_this.csp && _this.csp.nonce) {
	          styleForPesudo.nonce = _this.csp.nonce;
	        }

	        extraNode.style.borderColor = waveColor;
	        styleForPesudo.innerHTML = "\n      [".concat(getPrefixCls(''), "-click-animating-without-extra-node='true']::after, .").concat(getPrefixCls(''), "-click-animating-node {\n        --antd-wave-shadow-color: ").concat(waveColor, ";\n      }");

	        if (!document.body.contains(styleForPesudo)) {
	          document.body.appendChild(styleForPesudo);
	        }
	      }

	      if (insertExtraNode) {
	        node.appendChild(extraNode);
	      }

	      TransitionEvents.addStartEventListener(node, _this.onTransitionStart);
	      TransitionEvents.addEndEventListener(node, _this.onTransitionEnd);
	    };

	    _this.onTransitionStart = function (e) {
	      if (_this.destroyed) {
	        return;
	      }

	      var node = reactDom.findDOMNode(assertThisInitialized(_this));

	      if (!e || e.target !== node || _this.animationStart) {
	        return;
	      }

	      _this.resetEffect(node);
	    };

	    _this.onTransitionEnd = function (e) {
	      if (!e || e.animationName !== 'fadeEffect') {
	        return;
	      }

	      _this.resetEffect(e.target);
	    };

	    _this.bindAnimationEvent = function (node) {
	      if (!node || !node.getAttribute || node.getAttribute('disabled') || node.className.indexOf('disabled') >= 0) {
	        return;
	      }

	      var onClick = function onClick(e) {
	        // Fix radio button click twice
	        if (e.target.tagName === 'INPUT' || isHidden(e.target)) {
	          return;
	        }

	        _this.resetEffect(node); // Get wave color from target


	        var waveColor = getComputedStyle(node).getPropertyValue('border-top-color') || // Firefox Compatible
	        getComputedStyle(node).getPropertyValue('border-color') || getComputedStyle(node).getPropertyValue('background-color');
	        _this.clickWaveTimeoutId = window.setTimeout(function () {
	          return _this.onClick(node, waveColor);
	        }, 0);
	        wrapperRaf.cancel(_this.animationStartId);
	        _this.animationStart = true; // Render to trigger transition event cost 3 frames. Let's delay 10 frames to reset this.

	        _this.animationStartId = wrapperRaf(function () {
	          _this.animationStart = false;
	        }, 10);
	      };

	      node.addEventListener('click', onClick, true);
	      return {
	        cancel: function cancel() {
	          node.removeEventListener('click', onClick, true);
	        }
	      };
	    };

	    _this.renderWave = function (_ref) {
	      var csp = _ref.csp;
	      var children = _this.props.children;
	      _this.csp = csp;
	      return children;
	    };

	    return _this;
	  }

	  createClass(Wave, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var node = reactDom.findDOMNode(this);

	      if (!node || node.nodeType !== 1) {
	        return;
	      }

	      this.instance = this.bindAnimationEvent(node);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      if (this.instance) {
	        this.instance.cancel();
	      }

	      if (this.clickWaveTimeoutId) {
	        clearTimeout(this.clickWaveTimeoutId);
	      }

	      this.destroyed = true;
	    }
	  }, {
	    key: "getAttributeName",
	    value: function getAttributeName() {
	      var getPrefixCls = this.context.getPrefixCls;
	      var insertExtraNode = this.props.insertExtraNode;
	      return insertExtraNode ? "".concat(getPrefixCls(''), "-click-animating") : "".concat(getPrefixCls(''), "-click-animating-without-extra-node");
	    }
	  }, {
	    key: "resetEffect",
	    value: function resetEffect(node) {
	      if (!node || node === this.extraNode || !(node instanceof Element)) {
	        return;
	      }

	      var insertExtraNode = this.props.insertExtraNode;
	      var attributeName = this.getAttributeName();
	      node.setAttribute(attributeName, 'false'); // edge has bug on `removeAttribute` #14466

	      if (styleForPesudo) {
	        styleForPesudo.innerHTML = '';
	      }

	      if (insertExtraNode && this.extraNode && node.contains(this.extraNode)) {
	        node.removeChild(this.extraNode);
	      }

	      TransitionEvents.removeStartEventListener(node, this.onTransitionStart);
	      TransitionEvents.removeEndEventListener(node, this.onTransitionEnd);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return /*#__PURE__*/react.createElement(ConfigConsumer, null, this.renderWave);
	    }
	  }]);

	  return Wave;
	}(react.Component);
	Wave.contextType = ConfigContext;

	var getCollapsedWidth = function getCollapsedWidth() {
	  return {
	    width: 0,
	    opacity: 0,
	    transform: 'scale(0)'
	  };
	};

	var getRealWidth = function getRealWidth(node) {
	  return {
	    width: node.scrollWidth,
	    opacity: 1,
	    transform: 'scale(1)'
	  };
	};

	function LoadingIcon(_ref) {
	  var prefixCls = _ref.prefixCls,
	      loading = _ref.loading,
	      existIcon = _ref.existIcon;
	  var visible = !!loading;

	  if (existIcon) {
	    return /*#__PURE__*/react.createElement("span", {
	      className: "".concat(prefixCls, "-loading-icon")
	    }, /*#__PURE__*/react.createElement(LoadingOutlined$1, null));
	  }

	  return /*#__PURE__*/react.createElement(CSSMotion$1, {
	    visible: visible // We do not really use this motionName
	    ,
	    motionName: "".concat(prefixCls, "-loading-icon-motion"),
	    removeOnLeave: true,
	    onAppearStart: getCollapsedWidth,
	    onAppearActive: getRealWidth,
	    onEnterStart: getCollapsedWidth,
	    onEnterActive: getRealWidth,
	    onLeaveStart: getRealWidth,
	    onLeaveActive: getCollapsedWidth
	  }, function (_ref2, ref) {
	    var className = _ref2.className,
	        style = _ref2.style;
	    return /*#__PURE__*/react.createElement("span", {
	      className: "".concat(prefixCls, "-loading-icon"),
	      style: style,
	      ref: ref
	    }, /*#__PURE__*/react.createElement(LoadingOutlined$1, {
	      className: classnames(className)
	    }));
	  });
	}

	var __rest$2 = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};
	var rxTwoCNChar = /^[\u4e00-\u9fa5]{2}$/;
	var isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);

	function isString(str) {
	  return typeof str === 'string';
	}

	function isUnborderedButtonType(type) {
	  return type === 'text' || type === 'link';
	} // Insert one space between two chinese characters automatically.


	function insertSpace(child, needInserted) {
	  // Check the child if is undefined or null.
	  if (child == null) {
	    return;
	  }

	  var SPACE = needInserted ? ' ' : ''; // strictNullChecks oops.

	  if (typeof child !== 'string' && typeof child !== 'number' && isString(child.type) && isTwoCNChar(child.props.children)) {
	    return cloneElement(child, {
	      children: child.props.children.split('').join(SPACE)
	    });
	  }

	  if (typeof child === 'string') {
	    if (isTwoCNChar(child)) {
	      child = child.split('').join(SPACE);
	    }

	    return /*#__PURE__*/react.createElement("span", null, child);
	  }

	  return child;
	}

	function spaceChildren(children, needInserted) {
	  var isPrevChildPure = false;
	  var childList = [];
	  react.Children.forEach(children, function (child) {
	    var type = _typeof_1(child);

	    var isCurrentChildPure = type === 'string' || type === 'number';

	    if (isPrevChildPure && isCurrentChildPure) {
	      var lastIndex = childList.length - 1;
	      var lastChild = childList[lastIndex];
	      childList[lastIndex] = "".concat(lastChild).concat(child);
	    } else {
	      childList.push(child);
	    }

	    isPrevChildPure = isCurrentChildPure;
	  }); // Pass to React.Children.map to auto fill key

	  return react.Children.map(childList, function (child) {
	    return insertSpace(child, needInserted);
	  });
	}

	var ButtonTypes = tuple('default', 'primary', 'ghost', 'dashed', 'link', 'text');
	var ButtonShapes = tuple('circle', 'circle-outline', 'round');
	var ButtonHTMLTypes = tuple('submit', 'button', 'reset');
	function convertLegacyProps(type) {
	  if (type === 'danger') {
	    return {
	      danger: true
	    };
	  }

	  return {
	    type: type
	  };
	}

	var InternalButton = function InternalButton(props, ref) {
	  var _classNames;

	  var loading = props.loading,
	      customizePrefixCls = props.prefixCls,
	      type = props.type,
	      danger = props.danger,
	      shape = props.shape,
	      customizeSize = props.size,
	      className = props.className,
	      children = props.children,
	      icon = props.icon,
	      ghost = props.ghost,
	      block = props.block,
	      rest = __rest$2(props, ["loading", "prefixCls", "type", "danger", "shape", "size", "className", "children", "icon", "ghost", "block"]);

	  var size = react.useContext(SizeContext);

	  var _React$useState = react.useState(!!loading),
	      _React$useState2 = slicedToArray(_React$useState, 2),
	      innerLoading = _React$useState2[0],
	      setLoading = _React$useState2[1];

	  var _React$useState3 = react.useState(false),
	      _React$useState4 = slicedToArray(_React$useState3, 2),
	      hasTwoCNChar = _React$useState4[0],
	      setHasTwoCNChar = _React$useState4[1];

	  var _React$useContext = react.useContext(ConfigContext),
	      getPrefixCls = _React$useContext.getPrefixCls,
	      autoInsertSpaceInButton = _React$useContext.autoInsertSpaceInButton,
	      direction = _React$useContext.direction;

	  var buttonRef = ref || /*#__PURE__*/react.createRef();
	  var delayTimeoutRef = react.useRef();

	  var isNeedInserted = function isNeedInserted() {
	    return react.Children.count(children) === 1 && !icon && !isUnborderedButtonType(type);
	  };

	  var fixTwoCNChar = function fixTwoCNChar() {
	    // Fix for HOC usage like <FormatMessage />
	    if (!buttonRef || !buttonRef.current || autoInsertSpaceInButton === false) {
	      return;
	    }

	    var buttonText = buttonRef.current.textContent;

	    if (isNeedInserted() && isTwoCNChar(buttonText)) {
	      if (!hasTwoCNChar) {
	        setHasTwoCNChar(true);
	      }
	    } else if (hasTwoCNChar) {
	      setHasTwoCNChar(false);
	    }
	  }; // =============== Update Loading ===============


	  var loadingOrDelay;

	  if (_typeof_1(loading) === 'object' && loading.delay) {
	    loadingOrDelay = loading.delay || true;
	  } else {
	    loadingOrDelay = !!loading;
	  }

	  react.useEffect(function () {
	    clearTimeout(delayTimeoutRef.current);

	    if (typeof loadingOrDelay === 'number') {
	      delayTimeoutRef.current = window.setTimeout(function () {
	        setLoading(loadingOrDelay);
	      }, loadingOrDelay);
	    } else {
	      setLoading(loadingOrDelay);
	    }
	  }, [loadingOrDelay]);
	  react.useEffect(function () {
	    fixTwoCNChar();
	  }, [buttonRef]);

	  var handleClick = function handleClick(e) {
	    var onClick = props.onClick;

	    if (innerLoading) {
	      return;
	    }

	    if (onClick) {
	      onClick(e);
	    }
	  };

	  devWarning(!(typeof icon === 'string' && icon.length > 2), 'Button', "`icon` is using ReactNode instead of string naming in v4. Please check `".concat(icon, "` at https://ant.design/components/icon"));
	  devWarning(!(ghost && isUnborderedButtonType(type)), 'Button', "`link` or `text` button can't be a `ghost` button.");
	  var prefixCls = getPrefixCls('btn', customizePrefixCls);
	  var autoInsertSpace = autoInsertSpaceInButton !== false; // large => lg
	  // small => sm

	  var sizeCls = '';

	  switch (customizeSize || size) {
	    case 'large':
	      sizeCls = 'lg';
	      break;

	    case 'small':
	      sizeCls = 'sm';
	      break;
	  }

	  var iconType = innerLoading ? 'loading' : icon;
	  var classes = classnames(prefixCls, className, (_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-").concat(type), type), defineProperty$3(_classNames, "".concat(prefixCls, "-").concat(shape), shape), defineProperty$3(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), defineProperty$3(_classNames, "".concat(prefixCls, "-icon-only"), !children && children !== 0 && iconType), defineProperty$3(_classNames, "".concat(prefixCls, "-background-ghost"), ghost && !isUnborderedButtonType(type)), defineProperty$3(_classNames, "".concat(prefixCls, "-loading"), innerLoading), defineProperty$3(_classNames, "".concat(prefixCls, "-two-chinese-chars"), hasTwoCNChar && autoInsertSpace), defineProperty$3(_classNames, "".concat(prefixCls, "-block"), block), defineProperty$3(_classNames, "".concat(prefixCls, "-dangerous"), !!danger), defineProperty$3(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames));
	  var iconNode = icon && !innerLoading ? icon : /*#__PURE__*/react.createElement(LoadingIcon, {
	    existIcon: !!icon,
	    prefixCls: prefixCls,
	    loading: !!innerLoading
	  });
	  var kids = children || children === 0 ? spaceChildren(children, isNeedInserted() && autoInsertSpace) : null;
	  var linkButtonRestProps = omit(rest, ['htmlType', 'loading']);

	  if (linkButtonRestProps.href !== undefined) {
	    return /*#__PURE__*/react.createElement("a", _extends_1({}, linkButtonRestProps, {
	      className: classes,
	      onClick: handleClick,
	      ref: buttonRef
	    }), iconNode, kids);
	  } // React does not recognize the `htmlType` prop on a DOM element. Here we pick it out of `rest`.


	  var _a = rest,
	      htmlType = _a.htmlType,
	      otherProps = __rest$2(_a, ["htmlType"]);

	  var buttonNode = /*#__PURE__*/react.createElement("button", _extends_1({}, omit(otherProps, ['loading']), {
	    type: htmlType,
	    className: classes,
	    onClick: handleClick,
	    ref: buttonRef
	  }), iconNode, kids);

	  if (isUnborderedButtonType(type)) {
	    return buttonNode;
	  }

	  return /*#__PURE__*/react.createElement(Wave, null, buttonNode);
	};

	var Button = /*#__PURE__*/react.forwardRef(InternalButton);
	Button.displayName = 'Button';
	Button.defaultProps = {
	  loading: false,
	  ghost: false,
	  block: false,
	  htmlType: 'button'
	};
	Button.Group = ButtonGroup;
	Button.__ANT_BUTTON = true;

	var __extends = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var MiniStoreContext = react.createContext(null);
	var Provider$1 = /** @class */ (function (_super) {
	    __extends(Provider, _super);
	    function Provider() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Provider.prototype.render = function () {
	        return (react.createElement(MiniStoreContext.Provider, { value: this.props.store }, this.props.children));
	    };
	    return Provider;
	}(react.Component));

	//

	var shallowequal = function shallowEqual(objA, objB, compare, compareContext) {
	  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

	  if (ret !== void 0) {
	    return !!ret;
	  }

	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

	  // Test for A's keys different from B.
	  for (var idx = 0; idx < keysA.length; idx++) {
	    var key = keysA[idx];

	    if (!bHasOwnProperty(key)) {
	      return false;
	    }

	    var valueA = objA[key];
	    var valueB = objB[key];

	    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

	    if (ret === false || (ret === void 0 && valueA !== valueB)) {
	      return false;
	    }
	  }

	  return true;
	};

	var __extends$1 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __assign = (undefined && undefined.__assign) || function () {
	    __assign = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	function getDisplayName(WrappedComponent) {
	    return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}
	var defaultMapStateToProps = function () { return ({}); };
	function connect$1(mapStateToProps, options) {
	    if (options === void 0) { options = {}; }
	    var shouldSubscribe = !!mapStateToProps;
	    var finalMapStateToProps = mapStateToProps || defaultMapStateToProps;
	    return function wrapWithConnect(WrappedComponent) {
	        var Connect = /** @class */ (function (_super) {
	            __extends$1(Connect, _super);
	            function Connect(props, context) {
	                var _this = _super.call(this, props, context) || this;
	                _this.unsubscribe = null;
	                _this.handleChange = function () {
	                    if (!_this.unsubscribe) {
	                        return;
	                    }
	                    var nextState = finalMapStateToProps(_this.store.getState(), _this.props);
	                    _this.setState({ subscribed: nextState });
	                };
	                _this.store = _this.context;
	                _this.state = {
	                    subscribed: finalMapStateToProps(_this.store.getState(), props),
	                    store: _this.store,
	                    props: props,
	                };
	                return _this;
	            }
	            Connect.getDerivedStateFromProps = function (props, prevState) {
	                // using ownProps
	                if (mapStateToProps && mapStateToProps.length === 2 && props !== prevState.props) {
	                    return {
	                        subscribed: finalMapStateToProps(prevState.store.getState(), props),
	                        props: props,
	                    };
	                }
	                return { props: props };
	            };
	            Connect.prototype.componentDidMount = function () {
	                this.trySubscribe();
	            };
	            Connect.prototype.componentWillUnmount = function () {
	                this.tryUnsubscribe();
	            };
	            Connect.prototype.shouldComponentUpdate = function (nextProps, nextState) {
	                return (!shallowequal(this.props, nextProps) ||
	                    !shallowequal(this.state.subscribed, nextState.subscribed));
	            };
	            Connect.prototype.trySubscribe = function () {
	                if (shouldSubscribe) {
	                    this.unsubscribe = this.store.subscribe(this.handleChange);
	                    this.handleChange();
	                }
	            };
	            Connect.prototype.tryUnsubscribe = function () {
	                if (this.unsubscribe) {
	                    this.unsubscribe();
	                    this.unsubscribe = null;
	                }
	            };
	            Connect.prototype.render = function () {
	                var props = __assign(__assign(__assign({}, this.props), this.state.subscribed), { store: this.store });
	                return react.createElement(WrappedComponent, __assign({}, props, { ref: this.props.miniStoreForwardedRef }));
	            };
	            Connect.displayName = "Connect(" + getDisplayName(WrappedComponent) + ")";
	            Connect.contextType = MiniStoreContext;
	            return Connect;
	        }(react.Component));
	        if (options.forwardRef) {
	            var forwarded = react.forwardRef(function (props, ref) {
	                return react.createElement(Connect, __assign({}, props, { miniStoreForwardedRef: ref }));
	            });
	            return hoistNonReactStatics_cjs$1(forwarded, WrappedComponent);
	        }
	        return hoistNonReactStatics_cjs$1(Connect, WrappedComponent);
	    };
	}

	var __assign$1 = (undefined && undefined.__assign) || function () {
	    __assign$1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1.apply(this, arguments);
	};
	function create(initialState) {
	    var state = initialState;
	    var listeners = [];
	    function setState(partial) {
	        state = __assign$1(__assign$1({}, state), partial);
	        for (var i = 0; i < listeners.length; i++) {
	            listeners[i]();
	        }
	    }
	    function getState() {
	        return state;
	    }
	    function subscribe(listener) {
	        listeners.push(listener);
	        return function unsubscribe() {
	            var index = listeners.indexOf(listener);
	            listeners.splice(index, 1);
	        };
	    }
	    return {
	        setState: setState,
	        getState: getState,
	        subscribe: subscribe,
	    };
	}

	// MIT License from https://github.com/kaimallea/isMobile
	var applePhone = /iPhone/i;
	var appleIpod = /iPod/i;
	var appleTablet = /iPad/i;
	var androidPhone = /\bAndroid(?:.+)Mobile\b/i; // Match 'Android' AND 'Mobile'

	var androidTablet = /Android/i;
	var amazonPhone = /\bAndroid(?:.+)SD4930UR\b/i;
	var amazonTablet = /\bAndroid(?:.+)(?:KF[A-Z]{2,4})\b/i;
	var windowsPhone = /Windows Phone/i;
	var windowsTablet = /\bWindows(?:.+)ARM\b/i; // Match 'Windows' AND 'ARM'

	var otherBlackberry = /BlackBerry/i;
	var otherBlackberry10 = /BB10/i;
	var otherOpera = /Opera Mini/i;
	var otherChrome = /\b(CriOS|Chrome)(?:.+)Mobile/i;
	var otherFirefox = /Mobile(?:.+)Firefox\b/i; // Match 'Mobile' AND 'Firefox'

	function match$1(regex, userAgent) {
	  return regex.test(userAgent);
	}

	function isMobile(userAgent) {
	  var ua = userAgent || (typeof navigator !== 'undefined' ? navigator.userAgent : ''); // Facebook mobile app's integrated browser adds a bunch of strings that
	  // match everything. Strip it out if it exists.

	  var tmp = ua.split('[FBAN');

	  if (typeof tmp[1] !== 'undefined') {
	    var _tmp = tmp;

	    var _tmp2 = _slicedToArray(_tmp, 1);

	    ua = _tmp2[0];
	  } // Twitter mobile app's integrated browser on iPad adds a "Twitter for
	  // iPhone" string. Same probably happens on other tablet platforms.
	  // This will confuse detection so strip it out if it exists.


	  tmp = ua.split('Twitter');

	  if (typeof tmp[1] !== 'undefined') {
	    var _tmp3 = tmp;

	    var _tmp4 = _slicedToArray(_tmp3, 1);

	    ua = _tmp4[0];
	  }

	  var result = {
	    apple: {
	      phone: match$1(applePhone, ua) && !match$1(windowsPhone, ua),
	      ipod: match$1(appleIpod, ua),
	      tablet: !match$1(applePhone, ua) && match$1(appleTablet, ua) && !match$1(windowsPhone, ua),
	      device: (match$1(applePhone, ua) || match$1(appleIpod, ua) || match$1(appleTablet, ua)) && !match$1(windowsPhone, ua)
	    },
	    amazon: {
	      phone: match$1(amazonPhone, ua),
	      tablet: !match$1(amazonPhone, ua) && match$1(amazonTablet, ua),
	      device: match$1(amazonPhone, ua) || match$1(amazonTablet, ua)
	    },
	    android: {
	      phone: !match$1(windowsPhone, ua) && match$1(amazonPhone, ua) || !match$1(windowsPhone, ua) && match$1(androidPhone, ua),
	      tablet: !match$1(windowsPhone, ua) && !match$1(amazonPhone, ua) && !match$1(androidPhone, ua) && (match$1(amazonTablet, ua) || match$1(androidTablet, ua)),
	      device: !match$1(windowsPhone, ua) && (match$1(amazonPhone, ua) || match$1(amazonTablet, ua) || match$1(androidPhone, ua) || match$1(androidTablet, ua)) || match$1(/\bokhttp\b/i, ua)
	    },
	    windows: {
	      phone: match$1(windowsPhone, ua),
	      tablet: match$1(windowsTablet, ua),
	      device: match$1(windowsPhone, ua) || match$1(windowsTablet, ua)
	    },
	    other: {
	      blackberry: match$1(otherBlackberry, ua),
	      blackberry10: match$1(otherBlackberry10, ua),
	      opera: match$1(otherOpera, ua),
	      firefox: match$1(otherFirefox, ua),
	      chrome: match$1(otherChrome, ua),
	      device: match$1(otherBlackberry, ua) || match$1(otherBlackberry10, ua) || match$1(otherOpera, ua) || match$1(otherFirefox, ua) || match$1(otherChrome, ua)
	    },
	    // Additional
	    any: null,
	    phone: null,
	    tablet: null
	  };
	  result.any = result.apple.device || result.android.device || result.windows.device || result.other.device; // excludes 'other' devices and ipods, targeting touchscreen phones

	  result.phone = result.apple.phone || result.android.phone || result.windows.phone;
	  result.tablet = result.apple.tablet || result.android.tablet || result.windows.tablet;
	  return result;
	}

	var defaultResult = _objectSpread2$2(_objectSpread2$2({}, isMobile()), {}, {
	  isMobile: isMobile
	});

	function noop$3() {}
	function getKeyFromChildrenIndex(child, menuEventKey, index) {
	  var prefix = menuEventKey || '';
	  return child.key || "".concat(prefix, "item_").concat(index);
	}
	function getMenuIdFromSubMenuEventKey(eventKey) {
	  return "".concat(eventKey, "-menu-");
	}
	function loopMenuItem(children, cb) {
	  var index = -1;
	  react.Children.forEach(children, function (c) {
	    index += 1;

	    if (c && c.type && c.type.isMenuItemGroup) {
	      react.Children.forEach(c.props.children, function (c2) {
	        index += 1;
	        cb(c2, index);
	      });
	    } else {
	      cb(c, index);
	    }
	  });
	}
	function loopMenuItemRecursively(children, keys, ret) {
	  /* istanbul ignore if */
	  if (!children || ret.find) {
	    return;
	  }

	  react.Children.forEach(children, function (c) {
	    if (c) {
	      var construct = c.type;

	      if (!construct || !(construct.isSubMenu || construct.isMenuItem || construct.isMenuItemGroup)) {
	        return;
	      }

	      if (keys.indexOf(c.key) !== -1) {
	        ret.find = true;
	      } else if (c.props.children) {
	        loopMenuItemRecursively(c.props.children, keys, ret);
	      }
	    }
	  });
	}
	var menuAllProps = ['defaultSelectedKeys', 'selectedKeys', 'defaultOpenKeys', 'openKeys', 'mode', 'getPopupContainer', 'onSelect', 'onDeselect', 'onDestroy', 'openTransitionName', 'openAnimation', 'subMenuOpenDelay', 'subMenuCloseDelay', 'forceSubMenuRender', 'triggerSubMenuAction', 'level', 'selectable', 'multiple', 'onOpenChange', 'visible', 'focusable', 'defaultActiveFirst', 'prefixCls', 'inlineIndent', 'parentMenu', 'title', 'rootPrefixCls', 'eventKey', 'active', 'onItemHover', 'onTitleMouseEnter', 'onTitleMouseLeave', 'onTitleClick', 'popupAlign', 'popupOffset', 'isOpen', 'renderMenuItem', 'manualRef', 'subMenuKey', 'disabled', 'index', 'isSelected', 'store', 'activeKey', 'builtinPlacements', 'overflowedIndicator', 'motion', // the following keys found need to be removed from test regression
	'attribute', 'value', 'popupClassName', 'inlineCollapsed', 'menu', 'theme', 'itemIcon', 'expandIcon']; // ref: https://github.com/ant-design/ant-design/issues/14007
	// ref: https://bugs.chromium.org/p/chromium/issues/detail?id=360889
	// getBoundingClientRect return the full precision value, which is
	// not the same behavior as on chrome. Set the precision to 6 to
	// unify their behavior

	var getWidth = function getWidth(elem) {
	  var width = elem && typeof elem.getBoundingClientRect === 'function' && elem.getBoundingClientRect().width;

	  if (width) {
	    width = +width.toFixed(6);
	  }

	  return width || 0;
	};
	var setStyle = function setStyle(elem, styleProperty, value) {
	  if (elem && _typeof(elem.style) === 'object') {
	    elem.style[styleProperty] = value;
	  }
	};
	var isMobileDevice = function isMobileDevice() {
	  return defaultResult.any;
	};

	function isPointsEq$1(a1, a2, isAlignPoint) {
	  if (isAlignPoint) {
	    return a1[0] === a2[0];
	  }

	  return a1[0] === a2[0] && a1[1] === a2[1];
	}

	function getAlignFromPlacement$1(builtinPlacements, placementStr, align) {
	  var baseAlign = builtinPlacements[placementStr] || {};
	  return _objectSpread2$2(_objectSpread2$2({}, baseAlign), align);
	}
	function getAlignPopupClassName$1(builtinPlacements, prefixCls, align, isAlignPoint) {
	  var points = align.points;
	  var placements = Object.keys(builtinPlacements);

	  for (var i = 0; i < placements.length; i += 1) {
	    var placement = placements[i];

	    if (isPointsEq$1(builtinPlacements[placement].points, points, isAlignPoint)) {
	      return "".concat(prefixCls, "-placement-").concat(placement);
	    }
	  }

	  return '';
	}

	var PopupInner$1 = function PopupInner(props, ref) {
	  var prefixCls = props.prefixCls,
	      className = props.className,
	      style = props.style,
	      children = props.children,
	      onMouseEnter = props.onMouseEnter,
	      onMouseLeave = props.onMouseLeave,
	      onMouseDown = props.onMouseDown,
	      onTouchStart = props.onTouchStart;
	  var childNode = children;

	  if (react.Children.count(children) > 1) {
	    childNode = react.createElement("div", {
	      className: "".concat(prefixCls, "-content")
	    }, children);
	  }

	  return react.createElement("div", {
	    ref: ref,
	    className: className,
	    onMouseEnter: onMouseEnter,
	    onMouseLeave: onMouseLeave,
	    onMouseDown: onMouseDown,
	    onTouchStart: onTouchStart,
	    style: style
	  }, childNode);
	};

	var RefPopupInner$1 = react.forwardRef(PopupInner$1);
	RefPopupInner$1.displayName = 'PopupInner';

	function getMotion$1(_ref) {
	  var prefixCls = _ref.prefixCls,
	      motion = _ref.motion,
	      animation = _ref.animation,
	      transitionName = _ref.transitionName;

	  if (motion) {
	    return motion;
	  }

	  if (animation) {
	    return {
	      motionName: "".concat(prefixCls, "-").concat(animation)
	    };
	  }

	  if (transitionName) {
	    return {
	      motionName: transitionName
	    };
	  }

	  return null;
	}

	function supportMotion$1(motion) {
	  return motion && motion.motionName;
	}

	var Popup$1 = /*#__PURE__*/function (_Component) {
	  _inherits$6(Popup, _Component);

	  var _super = _createSuper$5(Popup);

	  function Popup() {
	    var _this;

	    _classCallCheck$6(this, Popup);

	    _this = _super.apply(this, arguments);
	    _this.state = {
	      targetWidth: undefined,
	      targetHeight: undefined,
	      status: null,
	      prevVisible: null,
	      alignClassName: null,
	      inMotion: false
	    };
	    _this.popupRef = react.createRef();
	    _this.alignRef = react.createRef();
	    _this.nextFrameState = null;
	    _this.nextFrameId = null;

	    _this.onAlign = function (popupDomNode, align) {
	      var status = _this.state.status;
	      var _this$props = _this.props,
	          getClassNameFromAlign = _this$props.getClassNameFromAlign,
	          onAlign = _this$props.onAlign;
	      var alignClassName = getClassNameFromAlign(align);

	      if (status === 'align') {
	        _this.setState({
	          alignClassName: alignClassName,
	          status: 'aligned'
	        }, function () {
	          _this.alignRef.current.forceAlign();
	        });
	      } else if (status === 'aligned') {
	        _this.setState({
	          alignClassName: alignClassName,
	          status: 'afterAlign'
	        });

	        onAlign(popupDomNode, align);
	      } else {
	        _this.setState({
	          alignClassName: alignClassName
	        });
	      }
	    };

	    _this.onMotionEnd = function () {
	      var visible = _this.props.visible;

	      _this.setState({
	        status: visible ? 'AfterMotion' : 'stable',
	        inMotion: false
	      });
	    };

	    _this.setStateOnNextFrame = function (state) {
	      _this.cancelFrameState();

	      _this.nextFrameState = _objectSpread2$2(_objectSpread2$2({}, _this.nextFrameState), state);
	      _this.nextFrameId = raf_1(function () {
	        var submitState = _objectSpread2$2({}, _this.nextFrameState);

	        _this.nextFrameState = null;

	        _this.setState(submitState);
	      });
	    };

	    _this.getMotion = function () {
	      return _objectSpread2$2({}, getMotion$1(_this.props));
	    }; // `target` on `rc-align` can accept as a function to get the bind element or a point.
	    // ref: https://www.npmjs.com/package/rc-align


	    _this.getAlignTarget = function () {
	      var _this$props2 = _this.props,
	          point = _this$props2.point,
	          getRootDomNode = _this$props2.getRootDomNode;

	      if (point) {
	        return point;
	      }

	      return getRootDomNode;
	    };

	    _this.cancelFrameState = function () {
	      raf_1.cancel(_this.nextFrameId);
	    };

	    _this.renderPopupElement = function () {
	      var _this$state = _this.state,
	          status = _this$state.status,
	          targetHeight = _this$state.targetHeight,
	          targetWidth = _this$state.targetWidth,
	          alignClassName = _this$state.alignClassName;
	      var _this$props3 = _this.props,
	          prefixCls = _this$props3.prefixCls,
	          className = _this$props3.className,
	          style = _this$props3.style,
	          stretch = _this$props3.stretch,
	          visible = _this$props3.visible,
	          align = _this$props3.align,
	          destroyPopupOnHide = _this$props3.destroyPopupOnHide,
	          onMouseEnter = _this$props3.onMouseEnter,
	          onMouseLeave = _this$props3.onMouseLeave,
	          onMouseDown = _this$props3.onMouseDown,
	          onTouchStart = _this$props3.onTouchStart,
	          children = _this$props3.children;
	      var mergedClassName = classnames(prefixCls, className, alignClassName);
	      var hiddenClassName = "".concat(prefixCls, "-hidden"); // ================== Style ==================

	      var sizeStyle = {};

	      if (stretch) {
	        // Stretch with target
	        if (stretch.indexOf('height') !== -1) {
	          sizeStyle.height = targetHeight;
	        } else if (stretch.indexOf('minHeight') !== -1) {
	          sizeStyle.minHeight = targetHeight;
	        }

	        if (stretch.indexOf('width') !== -1) {
	          sizeStyle.width = targetWidth;
	        } else if (stretch.indexOf('minWidth') !== -1) {
	          sizeStyle.minWidth = targetWidth;
	        }
	      }

	      var mergedStyle = _objectSpread2$2(_objectSpread2$2(_objectSpread2$2(_objectSpread2$2({}, sizeStyle), _this.getZIndexStyle()), style), {}, {
	        opacity: status === 'stable' || !visible ? undefined : 0
	      }); // ================= Motions =================


	      var mergedMotion = _this.getMotion();

	      var mergedMotionVisible = visible;

	      if (visible && status !== 'beforeMotion' && status !== 'motion' && status !== 'stable') {
	        mergedMotion.motionAppear = false;
	        mergedMotion.motionEnter = false;
	        mergedMotion.motionLeave = false;
	      }

	      if (status === 'afterAlign' || status === 'beforeMotion') {
	        mergedMotionVisible = false;
	      } // Update trigger to tell if is in motion


	      ['onEnterStart', 'onAppearStart', 'onLeaveStart'].forEach(function (event) {
	        var originFunc = mergedMotion === null || mergedMotion === void 0 ? void 0 : mergedMotion[event];

	        mergedMotion[event] = function () {
	          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	          }

	          originFunc === null || originFunc === void 0 ? void 0 : originFunc.apply(void 0, args);

	          _this.setState({
	            inMotion: true
	          });
	        };
	      }); // ================== Align ==================

	      var mergedAlignDisabled = !visible || status !== 'align' && status !== 'aligned' && status !== 'stable'; // ================== Popup ==================

	      var mergedPopupVisible = true;

	      if (status === 'stable') {
	        mergedPopupVisible = visible;
	      } // Only remove popup since mask may still need animation


	      if (destroyPopupOnHide && !mergedPopupVisible) {
	        return null;
	      }

	      return react.createElement(CSSMotion, Object.assign({
	        visible: mergedMotionVisible
	      }, mergedMotion, {
	        removeOnLeave: false,
	        onEnterEnd: _this.onMotionEnd,
	        onLeaveEnd: _this.onMotionEnd,
	        leavedClassName: hiddenClassName
	      }), function (_ref, motionRef) {
	        var motionStyle = _ref.style,
	            motionClassName = _ref.className;
	        return react.createElement(RefAlign, {
	          target: _this.getAlignTarget(),
	          key: "popup",
	          ref: _this.alignRef,
	          monitorWindowResize: true,
	          disabled: mergedAlignDisabled,
	          align: align,
	          onAlign: _this.onAlign
	        }, react.createElement(RefPopupInner$1, {
	          prefixCls: prefixCls,
	          className: classnames(mergedClassName, motionClassName),
	          ref: composeRef(motionRef, _this.popupRef),
	          onMouseEnter: onMouseEnter,
	          onMouseLeave: onMouseLeave,
	          onMouseDown: onMouseDown,
	          onTouchStart: onTouchStart,
	          style: _objectSpread2$2(_objectSpread2$2({}, mergedStyle), motionStyle)
	        }, children));
	      });
	    };

	    _this.renderMaskElement = function () {
	      var _this$props4 = _this.props,
	          mask = _this$props4.mask,
	          maskMotion = _this$props4.maskMotion,
	          maskTransitionName = _this$props4.maskTransitionName,
	          maskAnimation = _this$props4.maskAnimation,
	          prefixCls = _this$props4.prefixCls,
	          visible = _this$props4.visible;

	      if (!mask) {
	        return null;
	      }

	      var motion = {};

	      if (maskMotion && maskMotion.motionName) {
	        motion = _objectSpread2$2({
	          motionAppear: true
	        }, getMotion$1({
	          motion: maskMotion,
	          prefixCls: prefixCls,
	          transitionName: maskTransitionName,
	          animation: maskAnimation
	        }));
	      }

	      return react.createElement(CSSMotion, Object.assign({}, motion, {
	        visible: visible,
	        removeOnLeave: true
	      }), function (_ref2) {
	        var className = _ref2.className;
	        return react.createElement("div", {
	          style: _this.getZIndexStyle(),
	          key: "mask",
	          className: classnames("".concat(prefixCls, "-mask"), className)
	        });
	      });
	    };

	    return _this;
	  }

	  _createClass$1(Popup, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.componentDidUpdate();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      var status = this.state.status;
	      var _this$props5 = this.props,
	          getRootDomNode = _this$props5.getRootDomNode,
	          visible = _this$props5.visible,
	          stretch = _this$props5.stretch; // If there is a pending state update, cancel it, a new one will be set if necessary

	      this.cancelFrameState();

	      if (visible && status !== 'stable') {
	        switch (status) {
	          case null:
	            {
	              this.setStateOnNextFrame({
	                status: stretch ? 'measure' : 'align'
	              });
	              break;
	            }

	          case 'afterAlign':
	            {
	              this.setStateOnNextFrame({
	                status: supportMotion$1(this.getMotion()) ? 'beforeMotion' : 'stable'
	              });
	              break;
	            }

	          case 'AfterMotion':
	            {
	              this.setStateOnNextFrame({
	                status: 'stable'
	              });
	              break;
	            }

	          default:
	            {
	              // Go to next status
	              var queue = ['measure', 'align', null, 'beforeMotion', 'motion'];
	              var index = queue.indexOf(status);
	              var nextStatus = queue[index + 1];

	              if (index !== -1 && nextStatus) {
	                this.setStateOnNextFrame({
	                  status: nextStatus
	                });
	              }
	            }
	        }
	      } // Measure stretch size


	      if (status === 'measure') {
	        var $ele = getRootDomNode();

	        if ($ele) {
	          this.setStateOnNextFrame({
	            targetHeight: $ele.offsetHeight,
	            targetWidth: $ele.offsetWidth
	          });
	        }
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.cancelFrameState();
	    }
	  }, {
	    key: "getZIndexStyle",
	    value: function getZIndexStyle() {
	      var zIndex = this.props.zIndex;
	      return {
	        zIndex: zIndex
	      };
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return react.createElement("div", null, this.renderMaskElement(), this.renderPopupElement());
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(_ref3, _ref4) {
	      var visible = _ref3.visible,
	          props = _objectWithoutProperties$1(_ref3, ["visible"]);

	      var prevVisible = _ref4.prevVisible,
	          status = _ref4.status,
	          inMotion = _ref4.inMotion;
	      var newState = {
	        prevVisible: visible,
	        status: status
	      };
	      var mergedMotion = getMotion$1(props);

	      if (prevVisible === null && visible === false) {
	        // Init render should always be stable
	        newState.status = 'stable';
	        newState.inMotion = false;
	      } else if (visible !== prevVisible) {
	        newState.inMotion = false;

	        if (visible || supportMotion$1(mergedMotion) && inMotion) {
	          newState.status = null;
	        } else {
	          newState.status = 'stable';
	        }

	        if (visible) {
	          newState.alignClassName = null;
	        }
	      }

	      return newState;
	    }
	  }]);

	  return Popup;
	}(react.Component);
	/* eslint-enable */

	var TriggerContext$1 = react.createContext(null);

	function noop$4() {}

	function returnEmptyString$1() {
	  return '';
	}

	function returnDocument$1() {
	  return window.document;
	}

	var ALL_HANDLERS$1 = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur', 'onContextMenu'];
	/**
	 * Internal usage. Do not use in your code since this will be removed.
	 */

	function generateTrigger$1(PortalComponent) {
	  var Trigger = /*#__PURE__*/function (_React$Component) {
	    _inherits$6(Trigger, _React$Component);

	    var _super = _createSuper$5(Trigger);

	    function Trigger(props) {
	      var _this;

	      _classCallCheck$6(this, Trigger);

	      _this = _super.call(this, props);
	      _this.popupRef = react.createRef();
	      _this.triggerRef = react.createRef();

	      _this.onMouseEnter = function (e) {
	        var mouseEnterDelay = _this.props.mouseEnterDelay;

	        _this.fireEvents('onMouseEnter', e);

	        _this.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e);
	      };

	      _this.onMouseMove = function (e) {
	        _this.fireEvents('onMouseMove', e);

	        _this.setPoint(e);
	      };

	      _this.onMouseLeave = function (e) {
	        _this.fireEvents('onMouseLeave', e);

	        _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
	      };

	      _this.onPopupMouseEnter = function () {
	        _this.clearDelayTimer();
	      };

	      _this.onPopupMouseLeave = function (e) {
	        // https://github.com/react-component/trigger/pull/13
	        // react bug?
	        if (e.relatedTarget && !e.relatedTarget.setTimeout && _this.popupRef.current && _this.popupRef.current.popupRef.current && contains(_this.popupRef.current.popupRef.current, e.relatedTarget)) {
	          return;
	        }

	        _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
	      };

	      _this.onFocus = function (e) {
	        _this.fireEvents('onFocus', e); // incase focusin and focusout


	        _this.clearDelayTimer();

	        if (_this.isFocusToShow()) {
	          _this.focusTime = Date.now();

	          _this.delaySetPopupVisible(true, _this.props.focusDelay);
	        }
	      };

	      _this.onMouseDown = function (e) {
	        _this.fireEvents('onMouseDown', e);

	        _this.preClickTime = Date.now();
	      };

	      _this.onTouchStart = function (e) {
	        _this.fireEvents('onTouchStart', e);

	        _this.preTouchTime = Date.now();
	      };

	      _this.onBlur = function (e) {
	        _this.fireEvents('onBlur', e);

	        _this.clearDelayTimer();

	        if (_this.isBlurToHide()) {
	          _this.delaySetPopupVisible(false, _this.props.blurDelay);
	        }
	      };

	      _this.onContextMenu = function (e) {
	        e.preventDefault();

	        _this.fireEvents('onContextMenu', e);

	        _this.setPopupVisible(true, e);
	      };

	      _this.onContextMenuClose = function () {
	        if (_this.isContextMenuToShow()) {
	          _this.close();
	        }
	      };

	      _this.onClick = function (event) {
	        _this.fireEvents('onClick', event); // focus will trigger click


	        if (_this.focusTime) {
	          var preTime;

	          if (_this.preClickTime && _this.preTouchTime) {
	            preTime = Math.min(_this.preClickTime, _this.preTouchTime);
	          } else if (_this.preClickTime) {
	            preTime = _this.preClickTime;
	          } else if (_this.preTouchTime) {
	            preTime = _this.preTouchTime;
	          }

	          if (Math.abs(preTime - _this.focusTime) < 20) {
	            return;
	          }

	          _this.focusTime = 0;
	        }

	        _this.preClickTime = 0;
	        _this.preTouchTime = 0; // Only prevent default when all the action is click.
	        // https://github.com/ant-design/ant-design/issues/17043
	        // https://github.com/ant-design/ant-design/issues/17291

	        if (_this.isClickToShow() && (_this.isClickToHide() || _this.isBlurToHide()) && event && event.preventDefault) {
	          event.preventDefault();
	        }

	        var nextVisible = !_this.state.popupVisible;

	        if (_this.isClickToHide() && !nextVisible || nextVisible && _this.isClickToShow()) {
	          _this.setPopupVisible(!_this.state.popupVisible, event);
	        }
	      };

	      _this.onPopupMouseDown = function () {
	        _this.hasPopupMouseDown = true;
	        clearTimeout(_this.mouseDownTimeout);
	        _this.mouseDownTimeout = window.setTimeout(function () {
	          _this.hasPopupMouseDown = false;
	        }, 0);

	        if (_this.context) {
	          var _this$context;

	          (_this$context = _this.context).onPopupMouseDown.apply(_this$context, arguments);
	        }
	      };

	      _this.onDocumentClick = function (event) {
	        if (_this.props.mask && !_this.props.maskClosable) {
	          return;
	        }

	        var target = event.target;

	        var root = _this.getRootDomNode();

	        var popupNode = _this.getPopupDomNode();

	        if (!contains(root, target) && !contains(popupNode, target) && !_this.hasPopupMouseDown) {
	          _this.close();
	        }
	      };

	      _this.getRootDomNode = function () {
	        var getTriggerDOMNode = _this.props.getTriggerDOMNode;

	        if (getTriggerDOMNode) {
	          return getTriggerDOMNode(_this.triggerRef.current);
	        }

	        try {
	          var domNode = findDOMNode(_this.triggerRef.current);

	          if (domNode) {
	            return domNode;
	          }
	        } catch (err) {// Do nothing
	        }

	        return reactDom.findDOMNode(_assertThisInitialized(_this));
	      };

	      _this.getPopupClassNameFromAlign = function (align) {
	        var className = [];
	        var _this$props = _this.props,
	            popupPlacement = _this$props.popupPlacement,
	            builtinPlacements = _this$props.builtinPlacements,
	            prefixCls = _this$props.prefixCls,
	            alignPoint = _this$props.alignPoint,
	            getPopupClassNameFromAlign = _this$props.getPopupClassNameFromAlign;

	        if (popupPlacement && builtinPlacements) {
	          className.push(getAlignPopupClassName$1(builtinPlacements, prefixCls, align, alignPoint));
	        }

	        if (getPopupClassNameFromAlign) {
	          className.push(getPopupClassNameFromAlign(align));
	        }

	        return className.join(' ');
	      };

	      _this.getComponent = function () {
	        var _this$props2 = _this.props,
	            prefixCls = _this$props2.prefixCls,
	            destroyPopupOnHide = _this$props2.destroyPopupOnHide,
	            popupClassName = _this$props2.popupClassName,
	            onPopupAlign = _this$props2.onPopupAlign,
	            popupMotion = _this$props2.popupMotion,
	            popupAnimation = _this$props2.popupAnimation,
	            popupTransitionName = _this$props2.popupTransitionName,
	            popupStyle = _this$props2.popupStyle,
	            mask = _this$props2.mask,
	            maskAnimation = _this$props2.maskAnimation,
	            maskTransitionName = _this$props2.maskTransitionName,
	            maskMotion = _this$props2.maskMotion,
	            zIndex = _this$props2.zIndex,
	            popup = _this$props2.popup,
	            stretch = _this$props2.stretch,
	            alignPoint = _this$props2.alignPoint;
	        var _this$state = _this.state,
	            popupVisible = _this$state.popupVisible,
	            point = _this$state.point;

	        var align = _this.getPopupAlign();

	        var mouseProps = {};

	        if (_this.isMouseEnterToShow()) {
	          mouseProps.onMouseEnter = _this.onPopupMouseEnter;
	        }

	        if (_this.isMouseLeaveToHide()) {
	          mouseProps.onMouseLeave = _this.onPopupMouseLeave;
	        }

	        mouseProps.onMouseDown = _this.onPopupMouseDown;
	        mouseProps.onTouchStart = _this.onPopupMouseDown;
	        return react.createElement(Popup$1, Object.assign({
	          prefixCls: prefixCls,
	          destroyPopupOnHide: destroyPopupOnHide,
	          visible: popupVisible,
	          point: alignPoint && point,
	          className: popupClassName,
	          align: align,
	          onAlign: onPopupAlign,
	          animation: popupAnimation,
	          getClassNameFromAlign: _this.getPopupClassNameFromAlign
	        }, mouseProps, {
	          stretch: stretch,
	          getRootDomNode: _this.getRootDomNode,
	          style: popupStyle,
	          mask: mask,
	          zIndex: zIndex,
	          transitionName: popupTransitionName,
	          maskAnimation: maskAnimation,
	          maskTransitionName: maskTransitionName,
	          maskMotion: maskMotion,
	          ref: _this.popupRef,
	          motion: popupMotion
	        }), typeof popup === 'function' ? popup() : popup);
	      };

	      _this.getContainer = function () {
	        var _assertThisInitialize = _assertThisInitialized(_this),
	            props = _assertThisInitialize.props;

	        var popupContainer = document.createElement('div'); // Make sure default popup container will never cause scrollbar appearing
	        // https://github.com/react-component/trigger/issues/41

	        popupContainer.style.position = 'absolute';
	        popupContainer.style.top = '0';
	        popupContainer.style.left = '0';
	        popupContainer.style.width = '100%';
	        var mountNode = props.getPopupContainer ? props.getPopupContainer(_this.getRootDomNode()) : props.getDocument().body;
	        mountNode.appendChild(popupContainer);
	        return popupContainer;
	      };

	      _this.setPoint = function (point) {
	        var alignPoint = _this.props.alignPoint;
	        if (!alignPoint || !point) return;

	        _this.setState({
	          point: {
	            pageX: point.pageX,
	            pageY: point.pageY
	          }
	        });
	      };

	      _this.handlePortalUpdate = function () {
	        if (_this.state.prevPopupVisible !== _this.state.popupVisible) {
	          _this.props.afterPopupVisibleChange(_this.state.popupVisible);
	        }
	      };

	      var popupVisible;

	      if ('popupVisible' in props) {
	        popupVisible = !!props.popupVisible;
	      } else {
	        popupVisible = !!props.defaultPopupVisible;
	      }

	      _this.state = {
	        prevPopupVisible: popupVisible,
	        popupVisible: popupVisible
	      };
	      ALL_HANDLERS$1.forEach(function (h) {
	        _this["fire".concat(h)] = function (e) {
	          _this.fireEvents(h, e);
	        };
	      });
	      return _this;
	    }

	    _createClass$1(Trigger, [{
	      key: "componentDidMount",
	      value: function componentDidMount() {
	        this.componentDidUpdate();
	      }
	    }, {
	      key: "componentDidUpdate",
	      value: function componentDidUpdate() {
	        var props = this.props;
	        var state = this.state; // We must listen to `mousedown` or `touchstart`, edge case:
	        // https://github.com/ant-design/ant-design/issues/5804
	        // https://github.com/react-component/calendar/issues/250
	        // https://github.com/react-component/trigger/issues/50

	        if (state.popupVisible) {
	          var currentDocument;

	          if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow())) {
	            currentDocument = props.getDocument();
	            this.clickOutsideHandler = addEventListenerWrap(currentDocument, 'mousedown', this.onDocumentClick);
	          } // always hide on mobile


	          if (!this.touchOutsideHandler) {
	            currentDocument = currentDocument || props.getDocument();
	            this.touchOutsideHandler = addEventListenerWrap(currentDocument, 'touchstart', this.onDocumentClick);
	          } // close popup when trigger type contains 'onContextMenu' and document is scrolling.


	          if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {
	            currentDocument = currentDocument || props.getDocument();
	            this.contextMenuOutsideHandler1 = addEventListenerWrap(currentDocument, 'scroll', this.onContextMenuClose);
	          } // close popup when trigger type contains 'onContextMenu' and window is blur.


	          if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) {
	            this.contextMenuOutsideHandler2 = addEventListenerWrap(window, 'blur', this.onContextMenuClose);
	          }

	          return;
	        }

	        this.clearOutsideHandler();
	      }
	    }, {
	      key: "componentWillUnmount",
	      value: function componentWillUnmount() {
	        this.clearDelayTimer();
	        this.clearOutsideHandler();
	        clearTimeout(this.mouseDownTimeout);
	      }
	    }, {
	      key: "getPopupDomNode",
	      value: function getPopupDomNode() {
	        // for test
	        if (this.popupRef.current && this.popupRef.current.popupRef.current) {
	          return this.popupRef.current.popupRef.current;
	        }

	        return null;
	      }
	    }, {
	      key: "getPopupAlign",
	      value: function getPopupAlign() {
	        var props = this.props;
	        var popupPlacement = props.popupPlacement,
	            popupAlign = props.popupAlign,
	            builtinPlacements = props.builtinPlacements;

	        if (popupPlacement && builtinPlacements) {
	          return getAlignFromPlacement$1(builtinPlacements, popupPlacement, popupAlign);
	        }

	        return popupAlign;
	      }
	      /**
	       * @param popupVisible    Show or not the popup element
	       * @param event           SyntheticEvent, used for `pointAlign`
	       */

	    }, {
	      key: "setPopupVisible",
	      value: function setPopupVisible(popupVisible, event) {
	        var alignPoint = this.props.alignPoint;
	        var prevPopupVisible = this.state.popupVisible;
	        this.clearDelayTimer();

	        if (prevPopupVisible !== popupVisible) {
	          if (!('popupVisible' in this.props)) {
	            this.setState({
	              popupVisible: popupVisible,
	              prevPopupVisible: prevPopupVisible
	            });
	          }

	          this.props.onPopupVisibleChange(popupVisible);
	        } // Always record the point position since mouseEnterDelay will delay the show


	        if (alignPoint && event) {
	          this.setPoint(event);
	        }
	      }
	    }, {
	      key: "delaySetPopupVisible",
	      value: function delaySetPopupVisible(visible, delayS, event) {
	        var _this2 = this;

	        var delay = delayS * 1000;
	        this.clearDelayTimer();

	        if (delay) {
	          var point = event ? {
	            pageX: event.pageX,
	            pageY: event.pageY
	          } : null;
	          this.delayTimer = window.setTimeout(function () {
	            _this2.setPopupVisible(visible, point);

	            _this2.clearDelayTimer();
	          }, delay);
	        } else {
	          this.setPopupVisible(visible, event);
	        }
	      }
	    }, {
	      key: "clearDelayTimer",
	      value: function clearDelayTimer() {
	        if (this.delayTimer) {
	          clearTimeout(this.delayTimer);
	          this.delayTimer = null;
	        }
	      }
	    }, {
	      key: "clearOutsideHandler",
	      value: function clearOutsideHandler() {
	        if (this.clickOutsideHandler) {
	          this.clickOutsideHandler.remove();
	          this.clickOutsideHandler = null;
	        }

	        if (this.contextMenuOutsideHandler1) {
	          this.contextMenuOutsideHandler1.remove();
	          this.contextMenuOutsideHandler1 = null;
	        }

	        if (this.contextMenuOutsideHandler2) {
	          this.contextMenuOutsideHandler2.remove();
	          this.contextMenuOutsideHandler2 = null;
	        }

	        if (this.touchOutsideHandler) {
	          this.touchOutsideHandler.remove();
	          this.touchOutsideHandler = null;
	        }
	      }
	    }, {
	      key: "createTwoChains",
	      value: function createTwoChains(event) {
	        var childPros = this.props.children.props;
	        var props = this.props;

	        if (childPros[event] && props[event]) {
	          return this["fire".concat(event)];
	        }

	        return childPros[event] || props[event];
	      }
	    }, {
	      key: "isClickToShow",
	      value: function isClickToShow() {
	        var _this$props3 = this.props,
	            action = _this$props3.action,
	            showAction = _this$props3.showAction;
	        return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
	      }
	    }, {
	      key: "isContextMenuToShow",
	      value: function isContextMenuToShow() {
	        var _this$props4 = this.props,
	            action = _this$props4.action,
	            showAction = _this$props4.showAction;
	        return action.indexOf('contextMenu') !== -1 || showAction.indexOf('contextMenu') !== -1;
	      }
	    }, {
	      key: "isClickToHide",
	      value: function isClickToHide() {
	        var _this$props5 = this.props,
	            action = _this$props5.action,
	            hideAction = _this$props5.hideAction;
	        return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
	      }
	    }, {
	      key: "isMouseEnterToShow",
	      value: function isMouseEnterToShow() {
	        var _this$props6 = this.props,
	            action = _this$props6.action,
	            showAction = _this$props6.showAction;
	        return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
	      }
	    }, {
	      key: "isMouseLeaveToHide",
	      value: function isMouseLeaveToHide() {
	        var _this$props7 = this.props,
	            action = _this$props7.action,
	            hideAction = _this$props7.hideAction;
	        return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
	      }
	    }, {
	      key: "isFocusToShow",
	      value: function isFocusToShow() {
	        var _this$props8 = this.props,
	            action = _this$props8.action,
	            showAction = _this$props8.showAction;
	        return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
	      }
	    }, {
	      key: "isBlurToHide",
	      value: function isBlurToHide() {
	        var _this$props9 = this.props,
	            action = _this$props9.action,
	            hideAction = _this$props9.hideAction;
	        return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
	      }
	    }, {
	      key: "forcePopupAlign",
	      value: function forcePopupAlign() {
	        if (this.state.popupVisible && this.popupRef.current && this.popupRef.current.alignRef.current) {
	          this.popupRef.current.alignRef.current.forceAlign();
	        }
	      }
	    }, {
	      key: "fireEvents",
	      value: function fireEvents(type, e) {
	        var childCallback = this.props.children.props[type];

	        if (childCallback) {
	          childCallback(e);
	        }

	        var callback = this.props[type];

	        if (callback) {
	          callback(e);
	        }
	      }
	    }, {
	      key: "close",
	      value: function close() {
	        this.setPopupVisible(false);
	      }
	    }, {
	      key: "render",
	      value: function render() {
	        var popupVisible = this.state.popupVisible;
	        var _this$props10 = this.props,
	            children = _this$props10.children,
	            forceRender = _this$props10.forceRender,
	            alignPoint = _this$props10.alignPoint,
	            className = _this$props10.className,
	            autoDestroy = _this$props10.autoDestroy;
	        var child = react.Children.only(children);
	        var newChildProps = {
	          key: 'trigger'
	        };

	        if (this.isContextMenuToShow()) {
	          newChildProps.onContextMenu = this.onContextMenu;
	        } else {
	          newChildProps.onContextMenu = this.createTwoChains('onContextMenu');
	        }

	        if (this.isClickToHide() || this.isClickToShow()) {
	          newChildProps.onClick = this.onClick;
	          newChildProps.onMouseDown = this.onMouseDown;
	          newChildProps.onTouchStart = this.onTouchStart;
	        } else {
	          newChildProps.onClick = this.createTwoChains('onClick');
	          newChildProps.onMouseDown = this.createTwoChains('onMouseDown');
	          newChildProps.onTouchStart = this.createTwoChains('onTouchStart');
	        }

	        if (this.isMouseEnterToShow()) {
	          newChildProps.onMouseEnter = this.onMouseEnter;

	          if (alignPoint) {
	            newChildProps.onMouseMove = this.onMouseMove;
	          }
	        } else {
	          newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');
	        }

	        if (this.isMouseLeaveToHide()) {
	          newChildProps.onMouseLeave = this.onMouseLeave;
	        } else {
	          newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');
	        }

	        if (this.isFocusToShow() || this.isBlurToHide()) {
	          newChildProps.onFocus = this.onFocus;
	          newChildProps.onBlur = this.onBlur;
	        } else {
	          newChildProps.onFocus = this.createTwoChains('onFocus');
	          newChildProps.onBlur = this.createTwoChains('onBlur');
	        }

	        var childrenClassName = classnames(child && child.props && child.props.className, className);

	        if (childrenClassName) {
	          newChildProps.className = childrenClassName;
	        }

	        var cloneProps = _objectSpread2$2({}, newChildProps);

	        if (supportRef(child)) {
	          cloneProps.ref = composeRef(this.triggerRef, child.ref);
	        }

	        var trigger = react.cloneElement(child, cloneProps);
	        var portal; // prevent unmounting after it's rendered

	        if (popupVisible || this.popupRef.current || forceRender) {
	          portal = react.createElement(PortalComponent, {
	            key: "portal",
	            getContainer: this.getContainer,
	            didUpdate: this.handlePortalUpdate
	          }, this.getComponent());
	        }

	        if (!popupVisible && autoDestroy) {
	          portal = null;
	        }

	        return react.createElement(TriggerContext$1.Provider, {
	          value: {
	            onPopupMouseDown: this.onPopupMouseDown
	          }
	        }, trigger, portal);
	      }
	    }], [{
	      key: "getDerivedStateFromProps",
	      value: function getDerivedStateFromProps(_ref, prevState) {
	        var popupVisible = _ref.popupVisible;
	        var newState = {};

	        if (popupVisible !== undefined && prevState.popupVisible !== popupVisible) {
	          newState.popupVisible = popupVisible;
	          newState.prevPopupVisible = prevState.popupVisible;
	        }

	        return newState;
	      }
	    }]);

	    return Trigger;
	  }(react.Component);

	  Trigger.contextType = TriggerContext$1;
	  Trigger.defaultProps = {
	    prefixCls: 'rc-trigger-popup',
	    getPopupClassNameFromAlign: returnEmptyString$1,
	    getDocument: returnDocument$1,
	    onPopupVisibleChange: noop$4,
	    afterPopupVisibleChange: noop$4,
	    onPopupAlign: noop$4,
	    popupClassName: '',
	    mouseEnterDelay: 0,
	    mouseLeaveDelay: 0.1,
	    focusDelay: 0,
	    blurDelay: 0.15,
	    popupStyle: {},
	    destroyPopupOnHide: false,
	    popupAlign: {},
	    defaultPopupVisible: false,
	    mask: false,
	    maskClosable: true,
	    action: [],
	    showAction: [],
	    hideAction: [],
	    autoDestroy: false
	  };
	  return Trigger;
	}
	var Trigger$1 = generateTrigger$1(Portal);

	var autoAdjustOverflow = {
	  adjustX: 1,
	  adjustY: 1
	};
	var placements = {
	  topLeft: {
	    points: ['bl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -7]
	  },
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 7]
	  },
	  leftTop: {
	    points: ['tr', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [-4, 0]
	  },
	  rightTop: {
	    points: ['tl', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [4, 0]
	  }
	};
	var placementsRtl = {
	  topLeft: {
	    points: ['bl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -7]
	  },
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 7]
	  },
	  rightTop: {
	    points: ['tr', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [-4, 0]
	  },
	  leftTop: {
	    points: ['tl', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [4, 0]
	  }
	};

	var guid = 0;
	var popupPlacementMap = {
	  horizontal: 'bottomLeft',
	  vertical: 'rightTop',
	  'vertical-left': 'rightTop',
	  'vertical-right': 'leftTop'
	};

	var updateDefaultActiveFirst = function updateDefaultActiveFirst(store, eventKey, defaultActiveFirst) {
	  var menuId = getMenuIdFromSubMenuEventKey(eventKey);
	  var state = store.getState();
	  store.setState({
	    defaultActiveFirst: _objectSpread2$2(_objectSpread2$2({}, state.defaultActiveFirst), {}, _defineProperty$2({}, menuId, defaultActiveFirst))
	  });
	};

	var SubMenu = /*#__PURE__*/function (_React$Component) {
	  _inherits$6(SubMenu, _React$Component);

	  var _super = _createSuper$5(SubMenu);

	  function SubMenu(props) {
	    var _this;

	    _classCallCheck$6(this, SubMenu);

	    _this = _super.call(this, props);

	    _this.onDestroy = function (key) {
	      _this.props.onDestroy(key);
	    };
	    /**
	     * note:
	     *  This legacy code that `onKeyDown` is called by parent instead of dom self.
	     *  which need return code to check if this event is handled
	     */


	    _this.onKeyDown = function (e) {
	      var keyCode = e.keyCode;
	      var menu = _this.menuInstance;
	      var _this$props = _this.props,
	          isOpen = _this$props.isOpen,
	          store = _this$props.store;

	      if (keyCode === KeyCode.ENTER) {
	        _this.onTitleClick(e);

	        updateDefaultActiveFirst(store, _this.props.eventKey, true);
	        return true;
	      }

	      if (keyCode === KeyCode.RIGHT) {
	        if (isOpen) {
	          menu.onKeyDown(e);
	        } else {
	          _this.triggerOpenChange(true); // need to update current menu's defaultActiveFirst value


	          updateDefaultActiveFirst(store, _this.props.eventKey, true);
	        }

	        return true;
	      }

	      if (keyCode === KeyCode.LEFT) {
	        var handled;

	        if (isOpen) {
	          handled = menu.onKeyDown(e);
	        } else {
	          return undefined;
	        }

	        if (!handled) {
	          _this.triggerOpenChange(false);

	          handled = true;
	        }

	        return handled;
	      }

	      if (isOpen && (keyCode === KeyCode.UP || keyCode === KeyCode.DOWN)) {
	        return menu.onKeyDown(e);
	      }

	      return undefined;
	    };

	    _this.onOpenChange = function (e) {
	      _this.props.onOpenChange(e);
	    };

	    _this.onPopupVisibleChange = function (visible) {
	      _this.triggerOpenChange(visible, visible ? 'mouseenter' : 'mouseleave');
	    };

	    _this.onMouseEnter = function (e) {
	      var _this$props2 = _this.props,
	          key = _this$props2.eventKey,
	          onMouseEnter = _this$props2.onMouseEnter,
	          store = _this$props2.store;
	      updateDefaultActiveFirst(store, _this.props.eventKey, false);
	      onMouseEnter({
	        key: key,
	        domEvent: e
	      });
	    };

	    _this.onMouseLeave = function (e) {
	      var _this$props3 = _this.props,
	          parentMenu = _this$props3.parentMenu,
	          eventKey = _this$props3.eventKey,
	          onMouseLeave = _this$props3.onMouseLeave;
	      parentMenu.subMenuInstance = _assertThisInitialized(_this);
	      onMouseLeave({
	        key: eventKey,
	        domEvent: e
	      });
	    };

	    _this.onTitleMouseEnter = function (domEvent) {
	      var _this$props4 = _this.props,
	          key = _this$props4.eventKey,
	          onItemHover = _this$props4.onItemHover,
	          onTitleMouseEnter = _this$props4.onTitleMouseEnter;
	      onItemHover({
	        key: key,
	        hover: true
	      });
	      onTitleMouseEnter({
	        key: key,
	        domEvent: domEvent
	      });
	    };

	    _this.onTitleMouseLeave = function (e) {
	      var _this$props5 = _this.props,
	          parentMenu = _this$props5.parentMenu,
	          eventKey = _this$props5.eventKey,
	          onItemHover = _this$props5.onItemHover,
	          onTitleMouseLeave = _this$props5.onTitleMouseLeave;
	      parentMenu.subMenuInstance = _assertThisInitialized(_this);
	      onItemHover({
	        key: eventKey,
	        hover: false
	      });
	      onTitleMouseLeave({
	        key: eventKey,
	        domEvent: e
	      });
	    };

	    _this.onTitleClick = function (e) {
	      var _assertThisInitialize = _assertThisInitialized(_this),
	          props = _assertThisInitialize.props;

	      props.onTitleClick({
	        key: props.eventKey,
	        domEvent: e
	      });

	      if (props.triggerSubMenuAction === 'hover') {
	        return;
	      }

	      _this.triggerOpenChange(!props.isOpen, 'click');

	      updateDefaultActiveFirst(props.store, _this.props.eventKey, false);
	    };

	    _this.onSubMenuClick = function (info) {
	      // in the case of overflowed submenu
	      // onClick is not copied over
	      if (typeof _this.props.onClick === 'function') {
	        _this.props.onClick(_this.addKeyPath(info));
	      }
	    };

	    _this.onSelect = function (info) {
	      _this.props.onSelect(info);
	    };

	    _this.onDeselect = function (info) {
	      _this.props.onDeselect(info);
	    };

	    _this.getPrefixCls = function () {
	      return "".concat(_this.props.rootPrefixCls, "-submenu");
	    };

	    _this.getActiveClassName = function () {
	      return "".concat(_this.getPrefixCls(), "-active");
	    };

	    _this.getDisabledClassName = function () {
	      return "".concat(_this.getPrefixCls(), "-disabled");
	    };

	    _this.getSelectedClassName = function () {
	      return "".concat(_this.getPrefixCls(), "-selected");
	    };

	    _this.getOpenClassName = function () {
	      return "".concat(_this.props.rootPrefixCls, "-submenu-open");
	    };

	    _this.saveMenuInstance = function (c) {
	      // children menu instance
	      _this.menuInstance = c;
	    };

	    _this.addKeyPath = function (info) {
	      return _objectSpread2$2(_objectSpread2$2({}, info), {}, {
	        keyPath: (info.keyPath || []).concat(_this.props.eventKey)
	      });
	    };

	    _this.triggerOpenChange = function (open, type) {
	      var key = _this.props.eventKey;

	      var openChange = function openChange() {
	        _this.onOpenChange({
	          key: key,
	          item: _assertThisInitialized(_this),
	          trigger: type,
	          open: open
	        });
	      };

	      if (type === 'mouseenter') {
	        // make sure mouseenter happen after other menu item's mouseleave
	        _this.mouseenterTimeout = setTimeout(function () {
	          openChange();
	        }, 0);
	      } else {
	        openChange();
	      }
	    };

	    _this.isChildrenSelected = function () {
	      var ret = {
	        find: false
	      };
	      loopMenuItemRecursively(_this.props.children, _this.props.selectedKeys, ret);
	      return ret.find;
	    };

	    _this.isOpen = function () {
	      return _this.props.openKeys.indexOf(_this.props.eventKey) !== -1;
	    };

	    _this.adjustWidth = function () {
	      /* istanbul ignore if */
	      if (!_this.subMenuTitle || !_this.menuInstance) {
	        return;
	      }

	      var popupMenu = reactDom.findDOMNode(_this.menuInstance);

	      if (popupMenu.offsetWidth >= _this.subMenuTitle.offsetWidth) {
	        return;
	      }
	      /* istanbul ignore next */


	      popupMenu.style.minWidth = "".concat(_this.subMenuTitle.offsetWidth, "px");
	    };

	    _this.saveSubMenuTitle = function (subMenuTitle) {
	      _this.subMenuTitle = subMenuTitle;
	    };

	    _this.getBaseProps = function () {
	      var _assertThisInitialize2 = _assertThisInitialized(_this),
	          props = _assertThisInitialize2.props;

	      return {
	        mode: props.mode === 'horizontal' ? 'vertical' : props.mode,
	        visible: _this.props.isOpen,
	        level: props.level + 1,
	        inlineIndent: props.inlineIndent,
	        focusable: false,
	        onClick: _this.onSubMenuClick,
	        onSelect: _this.onSelect,
	        onDeselect: _this.onDeselect,
	        onDestroy: _this.onDestroy,
	        selectedKeys: props.selectedKeys,
	        eventKey: "".concat(props.eventKey, "-menu-"),
	        openKeys: props.openKeys,
	        motion: props.motion,
	        onOpenChange: _this.onOpenChange,
	        subMenuOpenDelay: props.subMenuOpenDelay,
	        parentMenu: _assertThisInitialized(_this),
	        subMenuCloseDelay: props.subMenuCloseDelay,
	        forceSubMenuRender: props.forceSubMenuRender,
	        triggerSubMenuAction: props.triggerSubMenuAction,
	        builtinPlacements: props.builtinPlacements,
	        defaultActiveFirst: props.store.getState().defaultActiveFirst[getMenuIdFromSubMenuEventKey(props.eventKey)],
	        multiple: props.multiple,
	        prefixCls: props.rootPrefixCls,
	        id: _this.internalMenuId,
	        manualRef: _this.saveMenuInstance,
	        itemIcon: props.itemIcon,
	        expandIcon: props.expandIcon,
	        direction: props.direction
	      };
	    };

	    _this.getMotion = function (mode, visible) {
	      var _assertThisInitialize3 = _assertThisInitialized(_this),
	          haveRendered = _assertThisInitialize3.haveRendered;

	      var _this$props6 = _this.props,
	          motion = _this$props6.motion,
	          rootPrefixCls = _this$props6.rootPrefixCls; // don't show transition on first rendering (no animation for opened menu)
	      // show appear transition if it's not visible (not sure why)
	      // show appear transition if it's not inline mode

	      var mergedMotion = _objectSpread2$2(_objectSpread2$2({}, motion), {}, {
	        leavedClassName: "".concat(rootPrefixCls, "-hidden"),
	        removeOnLeave: false,
	        motionAppear: haveRendered || !visible || mode !== 'inline'
	      });

	      return mergedMotion;
	    };

	    var store = props.store,
	        eventKey = props.eventKey;

	    var _store$getState = store.getState(),
	        defaultActiveFirst = _store$getState.defaultActiveFirst;

	    _this.isRootMenu = false;
	    var value = false;

	    if (defaultActiveFirst) {
	      value = defaultActiveFirst[eventKey];
	    }

	    updateDefaultActiveFirst(store, eventKey, value);
	    return _this;
	  }

	  _createClass$1(SubMenu, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.componentDidUpdate();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      var _this2 = this;

	      var _this$props7 = this.props,
	          mode = _this$props7.mode,
	          parentMenu = _this$props7.parentMenu,
	          manualRef = _this$props7.manualRef; // invoke customized ref to expose component to mixin

	      if (manualRef) {
	        manualRef(this);
	      }

	      if (mode !== 'horizontal' || !parentMenu.isRootMenu || !this.props.isOpen) {
	        return;
	      }

	      this.minWidthTimeout = setTimeout(function () {
	        return _this2.adjustWidth();
	      }, 0);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      var _this$props8 = this.props,
	          onDestroy = _this$props8.onDestroy,
	          eventKey = _this$props8.eventKey;

	      if (onDestroy) {
	        onDestroy(eventKey);
	      }
	      /* istanbul ignore if */


	      if (this.minWidthTimeout) {
	        clearTimeout(this.minWidthTimeout);
	      }
	      /* istanbul ignore if */


	      if (this.mouseenterTimeout) {
	        clearTimeout(this.mouseenterTimeout);
	      }
	    }
	  }, {
	    key: "renderChildren",
	    value: function renderChildren(children) {
	      var _this3 = this;

	      var baseProps = this.getBaseProps(); // [Legacy] getMotion must be called before `haveRendered`

	      var mergedMotion = this.getMotion(baseProps.mode, baseProps.visible);
	      this.haveRendered = true;
	      this.haveOpened = this.haveOpened || baseProps.visible || baseProps.forceSubMenuRender; // never rendered not planning to, don't render

	      if (!this.haveOpened) {
	        return react.createElement("div", null);
	      }

	      var direction = baseProps.direction;
	      return react.createElement(CSSMotion, Object.assign({
	        visible: baseProps.visible
	      }, mergedMotion), function (_ref) {
	        var className = _ref.className,
	            style = _ref.style;
	        var mergedClassName = classnames("".concat(baseProps.prefixCls, "-sub"), className, _defineProperty$2({}, "".concat(baseProps.prefixCls, "-rtl"), direction === 'rtl'));
	        return react.createElement(connected$1, Object.assign({}, baseProps, {
	          id: _this3.internalMenuId,
	          className: mergedClassName,
	          style: style
	        }), children);
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _classNames2;

	      var props = _objectSpread2$2({}, this.props);

	      var isOpen = props.isOpen;
	      var prefixCls = this.getPrefixCls();
	      var isInlineMode = props.mode === 'inline';
	      var className = classnames(prefixCls, "".concat(prefixCls, "-").concat(props.mode), (_classNames2 = {}, _defineProperty$2(_classNames2, props.className, !!props.className), _defineProperty$2(_classNames2, this.getOpenClassName(), isOpen), _defineProperty$2(_classNames2, this.getActiveClassName(), props.active || isOpen && !isInlineMode), _defineProperty$2(_classNames2, this.getDisabledClassName(), props.disabled), _defineProperty$2(_classNames2, this.getSelectedClassName(), this.isChildrenSelected()), _classNames2));

	      if (!this.internalMenuId) {
	        if (props.eventKey) {
	          this.internalMenuId = "".concat(props.eventKey, "$Menu");
	        } else {
	          guid += 1;
	          this.internalMenuId = "$__$".concat(guid, "$Menu");
	        }
	      }

	      var mouseEvents = {};
	      var titleClickEvents = {};
	      var titleMouseEvents = {};

	      if (!props.disabled) {
	        mouseEvents = {
	          onMouseLeave: this.onMouseLeave,
	          onMouseEnter: this.onMouseEnter
	        }; // only works in title, not outer li

	        titleClickEvents = {
	          onClick: this.onTitleClick
	        };
	        titleMouseEvents = {
	          onMouseEnter: this.onTitleMouseEnter,
	          onMouseLeave: this.onTitleMouseLeave
	        };
	      }

	      var style = {};
	      var direction = props.direction;

	      if (isInlineMode) {
	        if (direction === 'rtl') {
	          style.paddingRight = props.inlineIndent * props.level;
	        } else {
	          style.paddingLeft = props.inlineIndent * props.level;
	        }
	      }

	      var ariaOwns = {}; // only set aria-owns when menu is open
	      // otherwise it would be an invalid aria-owns value
	      // since corresponding node cannot be found

	      if (this.props.isOpen) {
	        ariaOwns = {
	          'aria-owns': this.internalMenuId
	        };
	      } // expand custom icon should NOT be displayed in menu with horizontal mode.


	      var icon = null;

	      if (props.mode !== 'horizontal') {
	        icon = this.props.expandIcon; // ReactNode

	        if (typeof this.props.expandIcon === 'function') {
	          icon = react.createElement(this.props.expandIcon, _objectSpread2$2({}, this.props));
	        }
	      }

	      var title = react.createElement("div", Object.assign({
	        ref: this.saveSubMenuTitle,
	        style: style,
	        className: "".concat(prefixCls, "-title"),
	        role: "button"
	      }, titleMouseEvents, titleClickEvents, {
	        "aria-expanded": isOpen
	      }, ariaOwns, {
	        "aria-haspopup": "true",
	        title: typeof props.title === 'string' ? props.title : undefined
	      }), props.title, icon || react.createElement("i", {
	        className: "".concat(prefixCls, "-arrow")
	      }));
	      var children = this.renderChildren(props.children);
	      var getPopupContainer = props.parentMenu.isRootMenu ? props.parentMenu.props.getPopupContainer : function (triggerNode) {
	        return triggerNode.parentNode;
	      };
	      var popupPlacement = popupPlacementMap[props.mode];
	      var popupAlign = props.popupOffset ? {
	        offset: props.popupOffset
	      } : {};
	      var popupClassName = props.mode === 'inline' ? '' : props.popupClassName;
	      popupClassName += direction === 'rtl' ? " ".concat(prefixCls, "-rtl") : '';
	      var disabled = props.disabled,
	          triggerSubMenuAction = props.triggerSubMenuAction,
	          subMenuOpenDelay = props.subMenuOpenDelay,
	          forceSubMenuRender = props.forceSubMenuRender,
	          subMenuCloseDelay = props.subMenuCloseDelay,
	          builtinPlacements = props.builtinPlacements;
	      menuAllProps.forEach(function (key) {
	        return delete props[key];
	      }); // Set onClick to null, to ignore propagated onClick event

	      delete props.onClick;
	      var placement = direction === 'rtl' ? Object.assign({}, placementsRtl, builtinPlacements) : Object.assign({}, placements, builtinPlacements);
	      delete props.direction;
	      return react.createElement("li", Object.assign({}, props, mouseEvents, {
	        className: className,
	        role: "menuitem"
	      }), isInlineMode && title, isInlineMode && children, !isInlineMode && react.createElement(Trigger$1, {
	        prefixCls: prefixCls,
	        popupClassName: classnames("".concat(prefixCls, "-popup"), popupClassName),
	        getPopupContainer: getPopupContainer,
	        builtinPlacements: placement,
	        popupPlacement: popupPlacement,
	        popupVisible: isOpen,
	        popupAlign: popupAlign,
	        popup: children,
	        action: disabled ? [] : [triggerSubMenuAction],
	        mouseEnterDelay: subMenuOpenDelay,
	        mouseLeaveDelay: subMenuCloseDelay,
	        onPopupVisibleChange: this.onPopupVisibleChange,
	        forceRender: forceSubMenuRender
	      }, title));
	    }
	  }]);

	  return SubMenu;
	}(react.Component);
	SubMenu.defaultProps = {
	  onMouseEnter: noop$3,
	  onMouseLeave: noop$3,
	  onTitleMouseEnter: noop$3,
	  onTitleMouseLeave: noop$3,
	  onTitleClick: noop$3,
	  manualRef: noop$3,
	  mode: 'vertical',
	  title: ''
	};
	var connected = connect$1(function (_ref2, _ref3) {
	  var openKeys = _ref2.openKeys,
	      activeKey = _ref2.activeKey,
	      selectedKeys = _ref2.selectedKeys;
	  var eventKey = _ref3.eventKey,
	      subMenuKey = _ref3.subMenuKey;
	  return {
	    isOpen: openKeys.indexOf(eventKey) > -1,
	    active: activeKey[subMenuKey] === eventKey,
	    selectedKeys: selectedKeys
	  };
	})(SubMenu);
	connected.isSubMenu = true;

	var MENUITEM_OVERFLOWED_CLASSNAME = 'menuitem-overflowed';
	var FLOAT_PRECISION_ADJUST = 0.5;

	var DOMWrap = /*#__PURE__*/function (_React$Component) {
	  _inherits$6(DOMWrap, _React$Component);

	  var _super = _createSuper$5(DOMWrap);

	  function DOMWrap() {
	    var _this;

	    _classCallCheck$6(this, DOMWrap);

	    _this = _super.apply(this, arguments);
	    _this.resizeObserver = null;
	    _this.mutationObserver = null; // original scroll size of the list

	    _this.originalTotalWidth = 0; // copy of overflowed items

	    _this.overflowedItems = []; // cache item of the original items (so we can track the size and order)

	    _this.menuItemSizes = [];
	    _this.cancelFrameId = null;
	    _this.state = {
	      lastVisibleIndex: undefined
	    }; // get all valid menuItem nodes

	    _this.getMenuItemNodes = function () {
	      var prefixCls = _this.props.prefixCls;
	      var ul = reactDom.findDOMNode(_assertThisInitialized(_this));

	      if (!ul) {
	        return [];
	      } // filter out all overflowed indicator placeholder


	      return [].slice.call(ul.children).filter(function (node) {
	        return node.className.split(' ').indexOf("".concat(prefixCls, "-overflowed-submenu")) < 0;
	      });
	    };

	    _this.getOverflowedSubMenuItem = function (keyPrefix, overflowedItems, renderPlaceholder) {
	      var _this$props = _this.props,
	          overflowedIndicator = _this$props.overflowedIndicator,
	          level = _this$props.level,
	          mode = _this$props.mode,
	          prefixCls = _this$props.prefixCls,
	          theme = _this$props.theme;

	      if (level !== 1 || mode !== 'horizontal') {
	        return null;
	      } // put all the overflowed item inside a submenu
	      // with a title of overflow indicator ('...')


	      var copy = _this.props.children[0];

	      var _copy$props = copy.props,
	          throwAway = _copy$props.children,
	          title = _copy$props.title,
	          propStyle = _copy$props.style,
	          rest = _objectWithoutProperties$1(_copy$props, ["children", "title", "style"]);

	      var style = _objectSpread2$2({}, propStyle);

	      var key = "".concat(keyPrefix, "-overflowed-indicator");
	      var eventKey = "".concat(keyPrefix, "-overflowed-indicator");

	      if (overflowedItems.length === 0 && renderPlaceholder !== true) {
	        style = _objectSpread2$2(_objectSpread2$2({}, style), {}, {
	          display: 'none'
	        });
	      } else if (renderPlaceholder) {
	        style = _objectSpread2$2(_objectSpread2$2({}, style), {}, {
	          visibility: 'hidden',
	          // prevent from taking normal dom space
	          position: 'absolute'
	        });
	        key = "".concat(key, "-placeholder");
	        eventKey = "".concat(eventKey, "-placeholder");
	      }

	      var popupClassName = theme ? "".concat(prefixCls, "-").concat(theme) : '';
	      var props = {};
	      menuAllProps.forEach(function (k) {
	        if (rest[k] !== undefined) {
	          props[k] = rest[k];
	        }
	      });
	      return react.createElement(connected, Object.assign({
	        title: overflowedIndicator,
	        className: "".concat(prefixCls, "-overflowed-submenu"),
	        popupClassName: popupClassName
	      }, props, {
	        key: key,
	        eventKey: eventKey,
	        disabled: false,
	        style: style
	      }), overflowedItems);
	    }; // memorize rendered menuSize


	    _this.setChildrenWidthAndResize = function () {
	      if (_this.props.mode !== 'horizontal') {
	        return;
	      }

	      var ul = reactDom.findDOMNode(_assertThisInitialized(_this));

	      if (!ul) {
	        return;
	      }

	      var ulChildrenNodes = ul.children;

	      if (!ulChildrenNodes || ulChildrenNodes.length === 0) {
	        return;
	      }

	      var lastOverflowedIndicatorPlaceholder = ul.children[ulChildrenNodes.length - 1]; // need last overflowed indicator for calculating length;

	      setStyle(lastOverflowedIndicatorPlaceholder, 'display', 'inline-block');

	      var menuItemNodes = _this.getMenuItemNodes(); // reset display attribute for all hidden elements caused by overflow to calculate updated width
	      // and then reset to original state after width calculation


	      var overflowedItems = menuItemNodes.filter(function (c) {
	        return c.className.split(' ').indexOf(MENUITEM_OVERFLOWED_CLASSNAME) >= 0;
	      });
	      overflowedItems.forEach(function (c) {
	        setStyle(c, 'display', 'inline-block');
	      });
	      _this.menuItemSizes = menuItemNodes.map(function (c) {
	        return getWidth(c);
	      });
	      overflowedItems.forEach(function (c) {
	        setStyle(c, 'display', 'none');
	      });
	      _this.overflowedIndicatorWidth = getWidth(ul.children[ul.children.length - 1]);
	      _this.originalTotalWidth = _this.menuItemSizes.reduce(function (acc, cur) {
	        return acc + cur;
	      }, 0);

	      _this.handleResize(); // prevent the overflowed indicator from taking space;


	      setStyle(lastOverflowedIndicatorPlaceholder, 'display', 'none');
	    };

	    _this.handleResize = function () {
	      if (_this.props.mode !== 'horizontal') {
	        return;
	      }

	      var ul = reactDom.findDOMNode(_assertThisInitialized(_this));

	      if (!ul) {
	        return;
	      }

	      var width = getWidth(ul);
	      _this.overflowedItems = [];
	      var currentSumWidth = 0; // index for last visible child in horizontal mode

	      var lastVisibleIndex; // float number comparison could be problematic
	      // e.g. 0.1 + 0.2 > 0.3 =====> true
	      // thus using FLOAT_PRECISION_ADJUST as buffer to help the situation

	      if (_this.originalTotalWidth > width + FLOAT_PRECISION_ADJUST) {
	        lastVisibleIndex = -1;

	        _this.menuItemSizes.forEach(function (liWidth) {
	          currentSumWidth += liWidth;

	          if (currentSumWidth + _this.overflowedIndicatorWidth <= width) {
	            lastVisibleIndex += 1;
	          }
	        });
	      }

	      _this.setState({
	        lastVisibleIndex: lastVisibleIndex
	      });
	    };

	    return _this;
	  }

	  _createClass$1(DOMWrap, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var _this2 = this;

	      this.setChildrenWidthAndResize();

	      if (this.props.level === 1 && this.props.mode === 'horizontal') {
	        var menuUl = reactDom.findDOMNode(this);

	        if (!menuUl) {
	          return;
	        }

	        this.resizeObserver = new index(function (entries) {
	          entries.forEach(function () {
	            var cancelFrameId = _this2.cancelFrameId;
	            cancelAnimationFrame(cancelFrameId);
	            _this2.cancelFrameId = requestAnimationFrame(_this2.setChildrenWidthAndResize);
	          });
	        });
	        [].slice.call(menuUl.children).concat(menuUl).forEach(function (el) {
	          _this2.resizeObserver.observe(el);
	        });

	        if (typeof MutationObserver !== 'undefined') {
	          this.mutationObserver = new MutationObserver(function () {
	            _this2.resizeObserver.disconnect();

	            [].slice.call(menuUl.children).concat(menuUl).forEach(function (el) {
	              _this2.resizeObserver.observe(el);
	            });

	            _this2.setChildrenWidthAndResize();
	          });
	          this.mutationObserver.observe(menuUl, {
	            attributes: false,
	            childList: true,
	            subTree: false
	          });
	        }
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      if (this.resizeObserver) {
	        this.resizeObserver.disconnect();
	      }

	      if (this.mutationObserver) {
	        this.mutationObserver.disconnect();
	      }

	      cancelAnimationFrame(this.cancelFrameId);
	    }
	  }, {
	    key: "renderChildren",
	    value: function renderChildren(children) {
	      var _this3 = this;

	      // need to take care of overflowed items in horizontal mode
	      var lastVisibleIndex = this.state.lastVisibleIndex;
	      return (children || []).reduce(function (acc, childNode, index) {
	        var item = childNode;

	        if (_this3.props.mode === 'horizontal') {
	          var overflowed = _this3.getOverflowedSubMenuItem(childNode.props.eventKey, []);

	          if (lastVisibleIndex !== undefined && _this3.props.className.indexOf("".concat(_this3.props.prefixCls, "-root")) !== -1) {
	            if (index > lastVisibleIndex) {
	              item = react.cloneElement(childNode, // è¿éä¿®æ¹ eventKey æ¯ä¸ºäºé²æ­¢éèç¶æä¸è¿ä¼è§¦å openkeys äºä»¶
	              {
	                style: {
	                  display: 'none'
	                },
	                eventKey: "".concat(childNode.props.eventKey, "-hidden"),

	                /**
	                 * Legacy code. Here `className` never used:
	                 * https://github.com/react-component/menu/commit/4cd6b49fce9d116726f4ea00dda85325d6f26500#diff-e2fa48f75c2dd2318295cde428556a76R240
	                 */
	                className: "".concat(MENUITEM_OVERFLOWED_CLASSNAME)
	              });
	            }

	            if (index === lastVisibleIndex + 1) {
	              _this3.overflowedItems = children.slice(lastVisibleIndex + 1).map(function (c) {
	                return react.cloneElement(c, // children[index].key will become '.$key' in clone by default,
	                // we have to overwrite with the correct key explicitly
	                {
	                  key: c.props.eventKey,
	                  mode: 'vertical-left'
	                });
	              });
	              overflowed = _this3.getOverflowedSubMenuItem(childNode.props.eventKey, _this3.overflowedItems);
	            }
	          }

	          var ret = [].concat(_toConsumableArray(acc), [overflowed, item]);

	          if (index === children.length - 1) {
	            // need a placeholder for calculating overflowed indicator width
	            ret.push(_this3.getOverflowedSubMenuItem(childNode.props.eventKey, [], true));
	          }

	          return ret;
	        }

	        return [].concat(_toConsumableArray(acc), [item]);
	      }, []);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          visible = _this$props2.visible,
	          prefixCls = _this$props2.prefixCls,
	          overflowedIndicator = _this$props2.overflowedIndicator,
	          mode = _this$props2.mode,
	          level = _this$props2.level,
	          tag = _this$props2.tag,
	          children = _this$props2.children,
	          theme = _this$props2.theme,
	          rest = _objectWithoutProperties$1(_this$props2, ["visible", "prefixCls", "overflowedIndicator", "mode", "level", "tag", "children", "theme"]);

	      var Tag = tag;
	      return react.createElement(Tag, Object.assign({}, rest), this.renderChildren(children));
	    }
	  }]);

	  return DOMWrap;
	}(react.Component);

	DOMWrap.defaultProps = {
	  tag: 'div',
	  className: ''
	};

	function allDisabled(arr) {
	  if (!arr.length) {
	    return true;
	  }

	  return arr.every(function (c) {
	    return !!c.props.disabled;
	  });
	}

	function updateActiveKey(store, menuId, activeKey) {
	  var state = store.getState();
	  store.setState({
	    activeKey: _objectSpread2$2(_objectSpread2$2({}, state.activeKey), {}, _defineProperty$2({}, menuId, activeKey))
	  });
	}

	function getEventKey(props) {
	  // when eventKey not available ,it's menu and return menu id '0-menu-'
	  return props.eventKey || '0-menu-';
	}

	function getActiveKey(props, originalActiveKey) {
	  var activeKey = originalActiveKey;
	  var children = props.children,
	      eventKey = props.eventKey;

	  if (activeKey) {
	    var found;
	    loopMenuItem(children, function (c, i) {
	      if (c && c.props && !c.props.disabled && activeKey === getKeyFromChildrenIndex(c, eventKey, i)) {
	        found = true;
	      }
	    });

	    if (found) {
	      return activeKey;
	    }
	  }

	  activeKey = null;

	  if (props.defaultActiveFirst) {
	    loopMenuItem(children, function (c, i) {
	      if (!activeKey && c && !c.props.disabled) {
	        activeKey = getKeyFromChildrenIndex(c, eventKey, i);
	      }
	    });
	    return activeKey;
	  }

	  return activeKey;
	}
	function saveRef(c) {
	  if (c) {
	    var index = this.instanceArray.indexOf(c);

	    if (index !== -1) {
	      // update component if it's already inside instanceArray
	      this.instanceArray[index] = c;
	    } else {
	      // add component if it's not in instanceArray yet;
	      this.instanceArray.push(c);
	    }
	  }
	}
	var SubPopupMenu = /*#__PURE__*/function (_React$Component) {
	  _inherits$6(SubPopupMenu, _React$Component);

	  var _super = _createSuper$5(SubPopupMenu);

	  function SubPopupMenu(props) {
	    var _this;

	    _classCallCheck$6(this, SubPopupMenu);

	    _this = _super.call(this, props);
	    /**
	     * all keyboard events callbacks run from here at first
	     *
	     * note:
	     *  This legacy code that `onKeyDown` is called by parent instead of dom self.
	     *  which need return code to check if this event is handled
	     */

	    _this.onKeyDown = function (e, callback) {
	      var keyCode = e.keyCode;
	      var handled;

	      _this.getFlatInstanceArray().forEach(function (obj) {
	        if (obj && obj.props.active && obj.onKeyDown) {
	          handled = obj.onKeyDown(e);
	        }
	      });

	      if (handled) {
	        return 1;
	      }

	      var activeItem = null;

	      if (keyCode === KeyCode.UP || keyCode === KeyCode.DOWN) {
	        activeItem = _this.step(keyCode === KeyCode.UP ? -1 : 1);
	      }

	      if (activeItem) {
	        e.preventDefault();
	        updateActiveKey(_this.props.store, getEventKey(_this.props), activeItem.props.eventKey);

	        if (typeof callback === 'function') {
	          callback(activeItem);
	        }

	        return 1;
	      }

	      return undefined;
	    };

	    _this.onItemHover = function (e) {
	      var key = e.key,
	          hover = e.hover;
	      updateActiveKey(_this.props.store, getEventKey(_this.props), hover ? key : null);
	    };

	    _this.onDeselect = function (selectInfo) {
	      _this.props.onDeselect(selectInfo);
	    };

	    _this.onSelect = function (selectInfo) {
	      _this.props.onSelect(selectInfo);
	    };

	    _this.onClick = function (e) {
	      _this.props.onClick(e);
	    };

	    _this.onOpenChange = function (e) {
	      _this.props.onOpenChange(e);
	    };

	    _this.onDestroy = function (key) {
	      /* istanbul ignore next */
	      _this.props.onDestroy(key);
	    };

	    _this.getFlatInstanceArray = function () {
	      return _this.instanceArray;
	    };

	    _this.step = function (direction) {
	      var children = _this.getFlatInstanceArray();

	      var activeKey = _this.props.store.getState().activeKey[getEventKey(_this.props)];

	      var len = children.length;

	      if (!len) {
	        return null;
	      }

	      if (direction < 0) {
	        children = children.concat().reverse();
	      } // find current activeIndex


	      var activeIndex = -1;
	      children.every(function (c, ci) {
	        if (c && c.props.eventKey === activeKey) {
	          activeIndex = ci;
	          return false;
	        }

	        return true;
	      });

	      if (!_this.props.defaultActiveFirst && activeIndex !== -1 && allDisabled(children.slice(activeIndex, len - 1))) {
	        return undefined;
	      }

	      var start = (activeIndex + 1) % len;
	      var i = start;

	      do {
	        var child = children[i];

	        if (!child || child.props.disabled) {
	          i = (i + 1) % len;
	        } else {
	          return child;
	        }
	      } while (i !== start);

	      return null;
	    };

	    _this.renderCommonMenuItem = function (child, i, extraProps) {
	      var state = _this.props.store.getState();

	      var _assertThisInitialize = _assertThisInitialized(_this),
	          props = _assertThisInitialize.props;

	      var key = getKeyFromChildrenIndex(child, props.eventKey, i);
	      var childProps = child.props; // https://github.com/ant-design/ant-design/issues/11517#issuecomment-477403055

	      if (!childProps || typeof child.type === 'string') {
	        return child;
	      }

	      var isActive = key === state.activeKey;

	      var newChildProps = _objectSpread2$2(_objectSpread2$2({
	        mode: childProps.mode || props.mode,
	        level: props.level,
	        inlineIndent: props.inlineIndent,
	        renderMenuItem: _this.renderMenuItem,
	        rootPrefixCls: props.prefixCls,
	        index: i,
	        parentMenu: props.parentMenu,
	        // customized ref function, need to be invoked manually in child's componentDidMount
	        manualRef: childProps.disabled ? undefined : createChainedFunction(child.ref, saveRef.bind(_assertThisInitialized(_this))),
	        eventKey: key,
	        active: !childProps.disabled && isActive,
	        multiple: props.multiple,
	        onClick: function onClick(e) {
	          (childProps.onClick || noop$3)(e);

	          _this.onClick(e);
	        },
	        onItemHover: _this.onItemHover,
	        motion: props.motion,
	        subMenuOpenDelay: props.subMenuOpenDelay,
	        subMenuCloseDelay: props.subMenuCloseDelay,
	        forceSubMenuRender: props.forceSubMenuRender,
	        onOpenChange: _this.onOpenChange,
	        onDeselect: _this.onDeselect,
	        onSelect: _this.onSelect,
	        builtinPlacements: props.builtinPlacements,
	        itemIcon: childProps.itemIcon || _this.props.itemIcon,
	        expandIcon: childProps.expandIcon || _this.props.expandIcon
	      }, extraProps), {}, {
	        direction: props.direction
	      }); // ref: https://github.com/ant-design/ant-design/issues/13943


	      if (props.mode === 'inline' || isMobileDevice()) {
	        newChildProps.triggerSubMenuAction = 'click';
	      }

	      return react.cloneElement(child, newChildProps);
	    };

	    _this.renderMenuItem = function (c, i, subMenuKey) {
	      /* istanbul ignore if */
	      if (!c) {
	        return null;
	      }

	      var state = _this.props.store.getState();

	      var extraProps = {
	        openKeys: state.openKeys,
	        selectedKeys: state.selectedKeys,
	        triggerSubMenuAction: _this.props.triggerSubMenuAction,
	        subMenuKey: subMenuKey
	      };
	      return _this.renderCommonMenuItem(c, i, extraProps);
	    };

	    props.store.setState({
	      activeKey: _objectSpread2$2(_objectSpread2$2({}, props.store.getState().activeKey), {}, _defineProperty$2({}, props.eventKey, getActiveKey(props, props.activeKey)))
	    });
	    _this.instanceArray = [];
	    return _this;
	  }

	  _createClass$1(SubPopupMenu, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      // invoke customized ref to expose component to mixin
	      if (this.props.manualRef) {
	        this.props.manualRef(this);
	      }
	    }
	  }, {
	    key: "shouldComponentUpdate",
	    value: function shouldComponentUpdate(nextProps) {
	      return this.props.visible || nextProps.visible || this.props.className !== nextProps.className || !shallowequal(this.props.style, nextProps.style);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var props = this.props;
	      var originalActiveKey = 'activeKey' in props ? props.activeKey : props.store.getState().activeKey[getEventKey(props)];
	      var activeKey = getActiveKey(props, originalActiveKey);

	      if (activeKey !== originalActiveKey) {
	        updateActiveKey(props.store, getEventKey(props), activeKey);
	      } else if ('activeKey' in prevProps) {
	        // If prev activeKey is not same as current activeKey,
	        // we should set it.
	        var prevActiveKey = getActiveKey(prevProps, prevProps.activeKey);

	        if (activeKey !== prevActiveKey) {
	          updateActiveKey(props.store, getEventKey(props), activeKey);
	        }
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var props = _extends({}, this.props);

	      this.instanceArray = [];
	      var className = classnames(props.prefixCls, props.className, "".concat(props.prefixCls, "-").concat(props.mode));
	      var domProps = {
	        className: className,
	        // role could be 'select' and by default set to menu
	        role: props.role || 'menu'
	      };

	      if (props.id) {
	        domProps.id = props.id;
	      }

	      if (props.focusable) {
	        domProps.tabIndex = 0;
	        domProps.onKeyDown = this.onKeyDown;
	      }

	      var prefixCls = props.prefixCls,
	          eventKey = props.eventKey,
	          visible = props.visible,
	          level = props.level,
	          mode = props.mode,
	          overflowedIndicator = props.overflowedIndicator,
	          theme = props.theme;
	      menuAllProps.forEach(function (key) {
	        return delete props[key];
	      }); // Otherwise, the propagated click event will trigger another onClick

	      delete props.onClick;
	      return react.createElement(DOMWrap, Object.assign({}, props, {
	        prefixCls: prefixCls,
	        mode: mode,
	        tag: "ul",
	        level: level,
	        theme: theme,
	        visible: visible,
	        overflowedIndicator: overflowedIndicator
	      }, domProps), react.Children.map(props.children, function (c, i) {
	        return _this2.renderMenuItem(c, i, eventKey || '0-menu-');
	      }));
	    }
	  }]);

	  return SubPopupMenu;
	}(react.Component);
	SubPopupMenu.defaultProps = {
	  prefixCls: 'rc-menu',
	  className: '',
	  mode: 'vertical',
	  level: 1,
	  inlineIndent: 24,
	  visible: true,
	  focusable: true,
	  style: {},
	  manualRef: noop$3
	};
	var connected$1 = connect$1()(SubPopupMenu);

	function getMotion$2(_ref, _ref2, menuMode) {
	  var prefixCls = _ref.prefixCls,
	      motion = _ref.motion,
	      _ref$defaultMotions = _ref.defaultMotions,
	      defaultMotions = _ref$defaultMotions === void 0 ? {} : _ref$defaultMotions,
	      openAnimation = _ref.openAnimation,
	      openTransitionName = _ref.openTransitionName;
	  var switchingModeFromInline = _ref2.switchingModeFromInline;

	  if (motion) {
	    return motion;
	  }

	  if (_typeof(openAnimation) === 'object' && openAnimation) {
	    warningOnce(false, 'Object type of `openAnimation` is removed. Please use `motion` instead.');
	  } else if (typeof openAnimation === 'string') {
	    return {
	      motionName: "".concat(prefixCls, "-open-").concat(openAnimation)
	    };
	  }

	  if (openTransitionName) {
	    return {
	      motionName: openTransitionName
	    };
	  } // Default logic


	  var defaultMotion = defaultMotions[menuMode];

	  if (defaultMotion) {
	    return defaultMotion;
	  } // When mode switch from inline
	  // submenu should hide without animation


	  return switchingModeFromInline ? null : defaultMotions.other;
	}

	var Menu = /*#__PURE__*/function (_React$Component) {
	  _inherits$6(Menu, _React$Component);

	  var _super = _createSuper$5(Menu);

	  function Menu(props) {
	    var _this;

	    _classCallCheck$6(this, Menu);

	    _this = _super.call(this, props);
	    _this.inlineOpenKeys = [];

	    _this.onSelect = function (selectInfo) {
	      var _assertThisInitialize = _assertThisInitialized(_this),
	          props = _assertThisInitialize.props;

	      if (props.selectable) {
	        // root menu
	        var _this$store$getState = _this.store.getState(),
	            _selectedKeys = _this$store$getState.selectedKeys;

	        var selectedKey = selectInfo.key;

	        if (props.multiple) {
	          _selectedKeys = _selectedKeys.concat([selectedKey]);
	        } else {
	          _selectedKeys = [selectedKey];
	        }

	        if (!('selectedKeys' in props)) {
	          _this.store.setState({
	            selectedKeys: _selectedKeys
	          });
	        }

	        props.onSelect(_objectSpread2$2(_objectSpread2$2({}, selectInfo), {}, {
	          selectedKeys: _selectedKeys
	        }));
	      }
	    };

	    _this.onClick = function (e) {
	      var mode = _this.getRealMenuMode();

	      var _assertThisInitialize2 = _assertThisInitialized(_this),
	          store = _assertThisInitialize2.store,
	          onOpenChange = _assertThisInitialize2.props.onOpenChange;

	      if (mode !== 'inline' && !('openKeys' in _this.props)) {
	        // closing vertical popup submenu after click it
	        store.setState({
	          openKeys: []
	        });
	        onOpenChange([]);
	      }

	      _this.props.onClick(e);
	    }; // onKeyDown needs to be exposed as a instance method
	    // e.g., in rc-select, we need to navigate menu item while
	    // current active item is rc-select input box rather than the menu itself


	    _this.onKeyDown = function (e, callback) {
	      _this.innerMenu.getWrappedInstance().onKeyDown(e, callback);
	    };

	    _this.onOpenChange = function (event) {
	      var _assertThisInitialize3 = _assertThisInitialized(_this),
	          props = _assertThisInitialize3.props;

	      var openKeys = _this.store.getState().openKeys.concat();

	      var changed = false;

	      var processSingle = function processSingle(e) {
	        var oneChanged = false;

	        if (e.open) {
	          oneChanged = openKeys.indexOf(e.key) === -1;

	          if (oneChanged) {
	            openKeys.push(e.key);
	          }
	        } else {
	          var index = openKeys.indexOf(e.key);
	          oneChanged = index !== -1;

	          if (oneChanged) {
	            openKeys.splice(index, 1);
	          }
	        }

	        changed = changed || oneChanged;
	      };

	      if (Array.isArray(event)) {
	        // batch change call
	        event.forEach(processSingle);
	      } else {
	        processSingle(event);
	      }

	      if (changed) {
	        if (!('openKeys' in _this.props)) {
	          _this.store.setState({
	            openKeys: openKeys
	          });
	        }

	        props.onOpenChange(openKeys);
	      }
	    };

	    _this.onDeselect = function (selectInfo) {
	      var _assertThisInitialize4 = _assertThisInitialized(_this),
	          props = _assertThisInitialize4.props;

	      if (props.selectable) {
	        var _selectedKeys2 = _this.store.getState().selectedKeys.concat();

	        var selectedKey = selectInfo.key;

	        var index = _selectedKeys2.indexOf(selectedKey);

	        if (index !== -1) {
	          _selectedKeys2.splice(index, 1);
	        }

	        if (!('selectedKeys' in props)) {
	          _this.store.setState({
	            selectedKeys: _selectedKeys2
	          });
	        }

	        props.onDeselect(_objectSpread2$2(_objectSpread2$2({}, selectInfo), {}, {
	          selectedKeys: _selectedKeys2
	        }));
	      }
	    }; // Restore vertical mode when menu is collapsed responsively when mounted
	    // https://github.com/ant-design/ant-design/issues/13104
	    // TODO: not a perfect solution,
	    // looking a new way to avoid setting switchingModeFromInline in this situation


	    _this.onMouseEnter = function (e) {
	      _this.restoreModeVerticalFromInline();

	      var onMouseEnter = _this.props.onMouseEnter;

	      if (onMouseEnter) {
	        onMouseEnter(e);
	      }
	    };

	    _this.onTransitionEnd = function (e) {
	      // when inlineCollapsed menu width animation finished
	      // https://github.com/ant-design/ant-design/issues/12864
	      var widthCollapsed = e.propertyName === 'width' && e.target === e.currentTarget; // Fix SVGElement e.target.className.indexOf is not a function
	      // https://github.com/ant-design/ant-design/issues/15699

	      var className = e.target.className; // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal,
	      // unless during an animation.

	      var classNameValue = Object.prototype.toString.call(className) === '[object SVGAnimatedString]' ? className.animVal : className; // Fix for <Menu style={{ width: '100%' }} />,
	      // the width transition won't trigger when menu is collapsed
	      // https://github.com/ant-design/ant-design-pro/issues/2783

	      var iconScaled = e.propertyName === 'font-size' && classNameValue.indexOf('anticon') >= 0;

	      if (widthCollapsed || iconScaled) {
	        _this.restoreModeVerticalFromInline();
	      }
	    };

	    _this.setInnerMenu = function (node) {
	      _this.innerMenu = node;
	    };

	    _this.isRootMenu = true;
	    var selectedKeys = props.defaultSelectedKeys;
	    var openKeys = props.defaultOpenKeys;

	    if ('selectedKeys' in props) {
	      selectedKeys = props.selectedKeys || [];
	    }

	    if ('openKeys' in props) {
	      openKeys = props.openKeys || [];
	    }

	    _this.store = create({
	      selectedKeys: selectedKeys,
	      openKeys: openKeys,
	      activeKey: {
	        '0-menu-': getActiveKey(props, props.activeKey)
	      }
	    });
	    _this.state = {
	      switchingModeFromInline: false
	    };
	    return _this;
	  }

	  _createClass$1(Menu, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.updateMiniStore();
	      this.updateMenuDisplay();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      this.updateOpentKeysWhenSwitchMode(prevProps);
	      this.updateMiniStore();
	      var _this$props = this.props,
	          siderCollapsed = _this$props.siderCollapsed,
	          inlineCollapsed = _this$props.inlineCollapsed,
	          onOpenChange = _this$props.onOpenChange;

	      if (!prevProps.inlineCollapsed && inlineCollapsed || !prevProps.siderCollapsed && siderCollapsed) {
	        onOpenChange([]);
	      }

	      this.updateMenuDisplay();
	    }
	  }, {
	    key: "updateOpentKeysWhenSwitchMode",
	    value: function updateOpentKeysWhenSwitchMode(prevProps) {
	      var nextProps = this.props,
	          store = this.store,
	          inlineOpenKeys = this.inlineOpenKeys;
	      var prevState = store.getState();
	      var newState = {};

	      if (prevProps.mode === 'inline' && nextProps.mode !== 'inline') {
	        this.setState({
	          switchingModeFromInline: true
	        });
	      }

	      if (!('openKeys' in nextProps)) {
	        // [Legacy] Old code will return after `openKeys` changed.
	        // Not sure the reason, we should keep this logic still.
	        if (nextProps.inlineCollapsed && !prevProps.inlineCollapsed || nextProps.siderCollapsed && !prevProps.siderCollapsed) {
	          this.setState({
	            switchingModeFromInline: true
	          });
	          this.inlineOpenKeys = prevState.openKeys.concat();
	          newState.openKeys = [];
	        }

	        if (!nextProps.inlineCollapsed && prevProps.inlineCollapsed || !nextProps.siderCollapsed && prevProps.siderCollapsed) {
	          newState.openKeys = inlineOpenKeys;
	          this.inlineOpenKeys = [];
	        }
	      }

	      if (Object.keys(newState).length) {
	        store.setState(newState);
	      }
	    }
	  }, {
	    key: "updateMenuDisplay",
	    value: function updateMenuDisplay() {
	      var collapsedWidth = this.props.collapsedWidth,
	          store = this.store,
	          prevOpenKeys = this.prevOpenKeys; // https://github.com/ant-design/ant-design/issues/8587

	      var hideMenu = this.getInlineCollapsed() && (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px');

	      if (hideMenu) {
	        this.prevOpenKeys = store.getState().openKeys.concat();
	        this.store.setState({
	          openKeys: []
	        });
	      } else if (prevOpenKeys) {
	        this.store.setState({
	          openKeys: prevOpenKeys
	        });
	        this.prevOpenKeys = null;
	      }
	    }
	  }, {
	    key: "getRealMenuMode",
	    value: function getRealMenuMode() {
	      var mode = this.props.mode;
	      var switchingModeFromInline = this.state.switchingModeFromInline;
	      var inlineCollapsed = this.getInlineCollapsed();

	      if (switchingModeFromInline && inlineCollapsed) {
	        return 'inline';
	      }

	      return inlineCollapsed ? 'vertical' : mode;
	    }
	  }, {
	    key: "getInlineCollapsed",
	    value: function getInlineCollapsed() {
	      var _this$props2 = this.props,
	          inlineCollapsed = _this$props2.inlineCollapsed,
	          siderCollapsed = _this$props2.siderCollapsed;

	      if (siderCollapsed !== undefined) {
	        return siderCollapsed;
	      }

	      return inlineCollapsed;
	    }
	  }, {
	    key: "restoreModeVerticalFromInline",
	    value: function restoreModeVerticalFromInline() {
	      var switchingModeFromInline = this.state.switchingModeFromInline;

	      if (switchingModeFromInline) {
	        this.setState({
	          switchingModeFromInline: false
	        });
	      }
	    }
	  }, {
	    key: "updateMiniStore",
	    value: function updateMiniStore() {
	      if ('selectedKeys' in this.props) {
	        this.store.setState({
	          selectedKeys: this.props.selectedKeys || []
	        });
	      }

	      if ('openKeys' in this.props) {
	        this.store.setState({
	          openKeys: this.props.openKeys || []
	        });
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var props = _objectSpread2$2({}, omit(this.props, ['collapsedWidth', 'siderCollapsed', 'defaultMotions']));

	      var mode = this.getRealMenuMode();
	      props.className += " ".concat(props.prefixCls, "-root");

	      if (props.direction === 'rtl') {
	        props.className += " ".concat(props.prefixCls, "-rtl");
	      }

	      props = _objectSpread2$2(_objectSpread2$2({}, props), {}, {
	        mode: mode,
	        onClick: this.onClick,
	        onOpenChange: this.onOpenChange,
	        onDeselect: this.onDeselect,
	        onSelect: this.onSelect,
	        onMouseEnter: this.onMouseEnter,
	        onTransitionEnd: this.onTransitionEnd,
	        parentMenu: this,
	        motion: getMotion$2(this.props, this.state, mode)
	      });
	      delete props.openAnimation;
	      delete props.openTransitionName;
	      return react.createElement(Provider$1, {
	        store: this.store
	      }, react.createElement(connected$1, Object.assign({}, props, {
	        ref: this.setInnerMenu
	      }), this.props.children));
	    }
	  }]);

	  return Menu;
	}(react.Component);

	Menu.defaultProps = {
	  selectable: true,
	  onClick: noop$3,
	  onSelect: noop$3,
	  onOpenChange: noop$3,
	  onDeselect: noop$3,
	  defaultSelectedKeys: [],
	  defaultOpenKeys: [],
	  subMenuOpenDelay: 0.1,
	  subMenuCloseDelay: 0.1,
	  triggerSubMenuAction: 'hover',
	  prefixCls: 'rc-menu',
	  className: '',
	  mode: 'vertical',
	  style: {},
	  builtinPlacements: {},
	  overflowedIndicator: react.createElement("span", null, "\xB7\xB7\xB7")
	};

	var MenuItem = /*#__PURE__*/function (_React$Component) {
	  _inherits$6(MenuItem, _React$Component);

	  var _super = _createSuper$5(MenuItem);

	  function MenuItem() {
	    var _this;

	    _classCallCheck$6(this, MenuItem);

	    _this = _super.apply(this, arguments);

	    _this.onKeyDown = function (e) {
	      var keyCode = e.keyCode;

	      if (keyCode === KeyCode.ENTER) {
	        _this.onClick(e);

	        return true;
	      }

	      return undefined;
	    };

	    _this.onMouseLeave = function (e) {
	      var _this$props = _this.props,
	          eventKey = _this$props.eventKey,
	          onItemHover = _this$props.onItemHover,
	          onMouseLeave = _this$props.onMouseLeave;
	      onItemHover({
	        key: eventKey,
	        hover: false
	      });
	      onMouseLeave({
	        key: eventKey,
	        domEvent: e
	      });
	    };

	    _this.onMouseEnter = function (e) {
	      var _this$props2 = _this.props,
	          eventKey = _this$props2.eventKey,
	          onItemHover = _this$props2.onItemHover,
	          onMouseEnter = _this$props2.onMouseEnter;
	      onItemHover({
	        key: eventKey,
	        hover: true
	      });
	      onMouseEnter({
	        key: eventKey,
	        domEvent: e
	      });
	    };

	    _this.onClick = function (e) {
	      var _this$props3 = _this.props,
	          eventKey = _this$props3.eventKey,
	          multiple = _this$props3.multiple,
	          onClick = _this$props3.onClick,
	          onSelect = _this$props3.onSelect,
	          onDeselect = _this$props3.onDeselect,
	          isSelected = _this$props3.isSelected;
	      var info = {
	        key: eventKey,
	        keyPath: [eventKey],
	        item: _assertThisInitialized(_this),
	        domEvent: e
	      };
	      onClick(info);

	      if (multiple) {
	        if (isSelected) {
	          onDeselect(info);
	        } else {
	          onSelect(info);
	        }
	      } else if (!isSelected) {
	        onSelect(info);
	      }
	    };

	    _this.saveNode = function (node) {
	      _this.node = node;
	    };

	    return _this;
	  }

	  _createClass$1(MenuItem, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      // invoke customized ref to expose component to mixin
	      this.callRef();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      this.callRef();
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      var props = this.props;

	      if (props.onDestroy) {
	        props.onDestroy(props.eventKey);
	      }
	    }
	  }, {
	    key: "getPrefixCls",
	    value: function getPrefixCls() {
	      return "".concat(this.props.rootPrefixCls, "-item");
	    }
	  }, {
	    key: "getActiveClassName",
	    value: function getActiveClassName() {
	      return "".concat(this.getPrefixCls(), "-active");
	    }
	  }, {
	    key: "getSelectedClassName",
	    value: function getSelectedClassName() {
	      return "".concat(this.getPrefixCls(), "-selected");
	    }
	  }, {
	    key: "getDisabledClassName",
	    value: function getDisabledClassName() {
	      return "".concat(this.getPrefixCls(), "-disabled");
	    }
	  }, {
	    key: "callRef",
	    value: function callRef() {
	      if (this.props.manualRef) {
	        this.props.manualRef(this);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _classNames;

	      var props = _objectSpread2$2({}, this.props);

	      var className = classnames(this.getPrefixCls(), props.className, (_classNames = {}, _defineProperty$2(_classNames, this.getActiveClassName(), !props.disabled && props.active), _defineProperty$2(_classNames, this.getSelectedClassName(), props.isSelected), _defineProperty$2(_classNames, this.getDisabledClassName(), props.disabled), _classNames));

	      var attrs = _objectSpread2$2(_objectSpread2$2({}, props.attribute), {}, {
	        title: typeof props.title === 'string' ? props.title : undefined,
	        className: className,
	        // set to menuitem by default
	        role: props.role || 'menuitem',
	        'aria-disabled': props.disabled
	      });

	      if (props.role === 'option') {
	        // overwrite to option
	        attrs = _objectSpread2$2(_objectSpread2$2({}, attrs), {}, {
	          role: 'option',
	          'aria-selected': props.isSelected
	        });
	      } else if (props.role === null || props.role === 'none') {
	        // sometimes we want to specify role inside <li/> element
	        // <li><a role='menuitem'>Link</a></li> would be a good example
	        // in this case the role on <li/> should be "none" to
	        // remove the implied listitem role.
	        // https://www.w3.org/TR/wai-aria-practices-1.1/examples/menubar/menubar-1/menubar-1.html
	        attrs.role = 'none';
	      } // In case that onClick/onMouseLeave/onMouseEnter is passed down from owner


	      var mouseEvent = {
	        onClick: props.disabled ? null : this.onClick,
	        onMouseLeave: props.disabled ? null : this.onMouseLeave,
	        onMouseEnter: props.disabled ? null : this.onMouseEnter
	      };

	      var style = _objectSpread2$2({}, props.style);

	      if (props.mode === 'inline') {
	        if (props.direction === 'rtl') {
	          style.paddingRight = props.inlineIndent * props.level;
	        } else {
	          style.paddingLeft = props.inlineIndent * props.level;
	        }
	      }

	      menuAllProps.forEach(function (key) {
	        return delete props[key];
	      });
	      delete props.direction;
	      var icon = this.props.itemIcon;

	      if (typeof this.props.itemIcon === 'function') {
	        // TODO: This is a bug which should fixed after TS refactor
	        icon = react.createElement(this.props.itemIcon, this.props);
	      }

	      return react.createElement("li", Object.assign({}, omit(props, ['onClick', 'onMouseEnter', 'onMouseLeave', 'onSelect']), attrs, mouseEvent, {
	        style: style,
	        ref: this.saveNode
	      }), props.children, icon);
	    }
	  }]);

	  return MenuItem;
	}(react.Component);
	MenuItem.isMenuItem = true;
	MenuItem.defaultProps = {
	  onSelect: noop$3,
	  onMouseEnter: noop$3,
	  onMouseLeave: noop$3,
	  manualRef: noop$3
	};
	var connected$2 = connect$1(function (_ref, _ref2) {
	  var activeKey = _ref.activeKey,
	      selectedKeys = _ref.selectedKeys;
	  var eventKey = _ref2.eventKey,
	      subMenuKey = _ref2.subMenuKey;
	  return {
	    active: activeKey[subMenuKey] === eventKey,
	    isSelected: selectedKeys.indexOf(eventKey) !== -1
	  };
	})(MenuItem);

	var MenuItemGroup = /*#__PURE__*/function (_React$Component) {
	  _inherits$6(MenuItemGroup, _React$Component);

	  var _super = _createSuper$5(MenuItemGroup);

	  function MenuItemGroup() {
	    var _this;

	    _classCallCheck$6(this, MenuItemGroup);

	    _this = _super.apply(this, arguments);

	    _this.renderInnerMenuItem = function (item) {
	      var _this$props = _this.props,
	          renderMenuItem = _this$props.renderMenuItem,
	          index = _this$props.index;
	      return renderMenuItem(item, index, _this.props.subMenuKey);
	    };

	    return _this;
	  }

	  _createClass$1(MenuItemGroup, [{
	    key: "render",
	    value: function render() {
	      var props = _extends({}, this.props);

	      var _props$className = props.className,
	          className = _props$className === void 0 ? '' : _props$className,
	          rootPrefixCls = props.rootPrefixCls;
	      var titleClassName = "".concat(rootPrefixCls, "-item-group-title");
	      var listClassName = "".concat(rootPrefixCls, "-item-group-list");
	      var title = props.title,
	          children = props.children;
	      menuAllProps.forEach(function (key) {
	        return delete props[key];
	      }); // Set onClick to null, to ignore propagated onClick event

	      delete props.onClick;
	      delete props.direction;
	      return react.createElement("li", Object.assign({}, props, {
	        className: "".concat(className, " ").concat(rootPrefixCls, "-item-group")
	      }), react.createElement("div", {
	        className: titleClassName,
	        title: typeof title === 'string' ? title : undefined
	      }, title), react.createElement("ul", {
	        className: listClassName
	      }, react.Children.map(children, this.renderInnerMenuItem)));
	    }
	  }]);

	  return MenuItemGroup;
	}(react.Component);

	MenuItemGroup.isMenuItemGroup = true;
	MenuItemGroup.defaultProps = {
	  disabled: true
	};

	var Divider = function Divider(_ref) {
	  var className = _ref.className,
	      rootPrefixCls = _ref.rootPrefixCls,
	      style = _ref.style;
	  return react.createElement("li", {
	    className: "".concat(className, " ").concat(rootPrefixCls, "-item-divider"),
	    style: style
	  });
	};

	Divider.defaultProps = {
	  // To fix keyboard UX.
	  disabled: true,
	  className: '',
	  style: {}
	};

	var MenuContext = /*#__PURE__*/react.createContext({
	  inlineCollapsed: false
	});

	var SubMenu$1 = /*#__PURE__*/function (_React$Component) {
	  inherits(SubMenu, _React$Component);

	  var _super = createSuper(SubMenu);

	  function SubMenu() {
	    var _this;

	    classCallCheck(this, SubMenu);

	    _this = _super.apply(this, arguments);

	    _this.onKeyDown = function (e) {
	      _this.subMenu.onKeyDown(e);
	    };

	    _this.saveSubMenu = function (subMenu) {
	      _this.subMenu = subMenu;
	    };

	    return _this;
	  }

	  createClass(SubMenu, [{
	    key: "renderTitle",
	    value: function renderTitle(inlineCollapsed) {
	      var _this$props = this.props,
	          icon = _this$props.icon,
	          title = _this$props.title,
	          level = _this$props.level,
	          rootPrefixCls = _this$props.rootPrefixCls;

	      if (!icon) {
	        return inlineCollapsed && level === 1 && title && typeof title === 'string' ? /*#__PURE__*/react.createElement("div", {
	          className: "".concat(rootPrefixCls, "-inline-collapsed-noicon")
	        }, title.charAt(0)) : title;
	      } // inline-collapsed.md demo ä¾èµ span æ¥éèæå­,æ icon å±æ§ï¼ååé¨åè£¹ä¸ä¸ª span
	      // ref: https://github.com/ant-design/ant-design/pull/23456


	      var titleIsSpan = isValidElement(title) && title.type === 'span';
	      return /*#__PURE__*/react.createElement(react.Fragment, null, icon, titleIsSpan ? title : /*#__PURE__*/react.createElement("span", null, title));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props2 = this.props,
	          rootPrefixCls = _this$props2.rootPrefixCls,
	          popupClassName = _this$props2.popupClassName;
	      return /*#__PURE__*/react.createElement(MenuContext.Consumer, null, function (_ref) {
	        var inlineCollapsed = _ref.inlineCollapsed,
	            antdMenuTheme = _ref.antdMenuTheme;
	        return /*#__PURE__*/react.createElement(connected, _extends_1({}, omit(_this2.props, ['icon']), {
	          title: _this2.renderTitle(inlineCollapsed),
	          ref: _this2.saveSubMenu,
	          popupClassName: classnames(rootPrefixCls, "".concat(rootPrefixCls, "-").concat(antdMenuTheme), popupClassName)
	        }));
	      });
	    }
	  }]);

	  return SubMenu;
	}(react.Component);

	SubMenu$1.contextType = MenuContext; // fix issue:https://github.com/ant-design/ant-design/issues/8666

	SubMenu$1.isSubMenu = 1;

	var autoAdjustOverflow$1 = {
	  adjustX: 1,
	  adjustY: 1
	};
	var targetOffset = [0, 0];
	var placements$1 = {
	  left: {
	    points: ['cr', 'cl'],
	    overflow: autoAdjustOverflow$1,
	    offset: [-4, 0],
	    targetOffset: targetOffset
	  },
	  right: {
	    points: ['cl', 'cr'],
	    overflow: autoAdjustOverflow$1,
	    offset: [4, 0],
	    targetOffset: targetOffset
	  },
	  top: {
	    points: ['bc', 'tc'],
	    overflow: autoAdjustOverflow$1,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  bottom: {
	    points: ['tc', 'bc'],
	    overflow: autoAdjustOverflow$1,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  topLeft: {
	    points: ['bl', 'tl'],
	    overflow: autoAdjustOverflow$1,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  leftTop: {
	    points: ['tr', 'tl'],
	    overflow: autoAdjustOverflow$1,
	    offset: [-4, 0],
	    targetOffset: targetOffset
	  },
	  topRight: {
	    points: ['br', 'tr'],
	    overflow: autoAdjustOverflow$1,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  rightTop: {
	    points: ['tl', 'tr'],
	    overflow: autoAdjustOverflow$1,
	    offset: [4, 0],
	    targetOffset: targetOffset
	  },
	  bottomRight: {
	    points: ['tr', 'br'],
	    overflow: autoAdjustOverflow$1,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  rightBottom: {
	    points: ['bl', 'br'],
	    overflow: autoAdjustOverflow$1,
	    offset: [4, 0],
	    targetOffset: targetOffset
	  },
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    overflow: autoAdjustOverflow$1,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  leftBottom: {
	    points: ['br', 'bl'],
	    overflow: autoAdjustOverflow$1,
	    offset: [-4, 0],
	    targetOffset: targetOffset
	  }
	};

	var Content = function Content(props) {
	  var overlay = props.overlay,
	      prefixCls = props.prefixCls,
	      id = props.id,
	      overlayInnerStyle = props.overlayInnerStyle;
	  return react.createElement("div", {
	    className: "".concat(prefixCls, "-inner"),
	    id: id,
	    role: "tooltip",
	    style: overlayInnerStyle
	  }, typeof overlay === 'function' ? overlay() : overlay);
	};

	function _typeof$5(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$5 = function _typeof(obj) { return typeof obj; }; } else { _typeof$5 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$5(obj); }

	function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$e(Object(source), true).forEach(function (key) { _defineProperty$7(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$7(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties$3(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$2(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$2(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

	var Tooltip = function Tooltip(props, ref) {
	  var overlayClassName = props.overlayClassName,
	      _props$trigger = props.trigger,
	      trigger = _props$trigger === void 0 ? ['hover'] : _props$trigger,
	      _props$mouseEnterDela = props.mouseEnterDelay,
	      mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0 : _props$mouseEnterDela,
	      _props$mouseLeaveDela = props.mouseLeaveDelay,
	      mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela,
	      overlayStyle = props.overlayStyle,
	      _props$prefixCls = props.prefixCls,
	      prefixCls = _props$prefixCls === void 0 ? 'rc-tooltip' : _props$prefixCls,
	      children = props.children,
	      onVisibleChange = props.onVisibleChange,
	      afterVisibleChange = props.afterVisibleChange,
	      transitionName = props.transitionName,
	      animation = props.animation,
	      _props$placement = props.placement,
	      placement = _props$placement === void 0 ? 'right' : _props$placement,
	      _props$align = props.align,
	      align = _props$align === void 0 ? {} : _props$align,
	      _props$destroyTooltip = props.destroyTooltipOnHide,
	      destroyTooltipOnHide = _props$destroyTooltip === void 0 ? false : _props$destroyTooltip,
	      defaultVisible = props.defaultVisible,
	      getTooltipContainer = props.getTooltipContainer,
	      overlayInnerStyle = props.overlayInnerStyle,
	      restProps = _objectWithoutProperties$3(props, ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "prefixCls", "children", "onVisibleChange", "afterVisibleChange", "transitionName", "animation", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer", "overlayInnerStyle"]);

	  var domRef = react.useRef(null);
	  react.useImperativeHandle(ref, function () {
	    return domRef.current;
	  });

	  var extraProps = _objectSpread$a({}, restProps);

	  if ('visible' in props) {
	    extraProps.popupVisible = props.visible;
	  }

	  var getPopupElement = function getPopupElement() {
	    var _props$arrowContent = props.arrowContent,
	        arrowContent = _props$arrowContent === void 0 ? null : _props$arrowContent,
	        overlay = props.overlay,
	        id = props.id;
	    return [react.createElement("div", {
	      className: "".concat(prefixCls, "-arrow"),
	      key: "arrow"
	    }, arrowContent), react.createElement(Content, {
	      key: "content",
	      prefixCls: prefixCls,
	      id: id,
	      overlay: overlay,
	      overlayInnerStyle: overlayInnerStyle
	    })];
	  };

	  var destroyTooltip = false;
	  var autoDestroy = false;

	  if (typeof destroyTooltipOnHide === 'boolean') {
	    destroyTooltip = destroyTooltipOnHide;
	  } else if (destroyTooltipOnHide && _typeof$5(destroyTooltipOnHide) === 'object') {
	    var keepParent = destroyTooltipOnHide.keepParent;
	    destroyTooltip = keepParent === true;
	    autoDestroy = keepParent === false;
	  }

	  return react.createElement(Trigger, Object.assign({
	    popupClassName: overlayClassName,
	    prefixCls: prefixCls,
	    popup: getPopupElement,
	    action: trigger,
	    builtinPlacements: placements$1,
	    popupPlacement: placement,
	    ref: domRef,
	    popupAlign: align,
	    getPopupContainer: getTooltipContainer,
	    onPopupVisibleChange: onVisibleChange,
	    afterPopupVisibleChange: afterVisibleChange,
	    popupTransitionName: transitionName,
	    popupAnimation: animation,
	    defaultPopupVisible: defaultVisible,
	    destroyPopupOnHide: destroyTooltip,
	    autoDestroy: autoDestroy,
	    mouseLeaveDelay: mouseLeaveDelay,
	    popupStyle: overlayStyle,
	    mouseEnterDelay: mouseEnterDelay
	  }, extraProps), children);
	};

	var Tooltip$1 = react.forwardRef(Tooltip);

	var autoAdjustOverflowEnabled = {
	  adjustX: 1,
	  adjustY: 1
	};
	var autoAdjustOverflowDisabled = {
	  adjustX: 0,
	  adjustY: 0
	};
	var targetOffset$1 = [0, 0];
	function getOverflowOptions(autoAdjustOverflow) {
	  if (typeof autoAdjustOverflow === 'boolean') {
	    return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;
	  }

	  return _extends_1(_extends_1({}, autoAdjustOverflowDisabled), autoAdjustOverflow);
	}
	function getPlacements(config) {
	  var _config$arrowWidth = config.arrowWidth,
	      arrowWidth = _config$arrowWidth === void 0 ? 5 : _config$arrowWidth,
	      _config$horizontalArr = config.horizontalArrowShift,
	      horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr,
	      _config$verticalArrow = config.verticalArrowShift,
	      verticalArrowShift = _config$verticalArrow === void 0 ? 8 : _config$verticalArrow,
	      autoAdjustOverflow = config.autoAdjustOverflow;
	  var placementMap = {
	    left: {
	      points: ['cr', 'cl'],
	      offset: [-4, 0]
	    },
	    right: {
	      points: ['cl', 'cr'],
	      offset: [4, 0]
	    },
	    top: {
	      points: ['bc', 'tc'],
	      offset: [0, -4]
	    },
	    bottom: {
	      points: ['tc', 'bc'],
	      offset: [0, 4]
	    },
	    topLeft: {
	      points: ['bl', 'tc'],
	      offset: [-(horizontalArrowShift + arrowWidth), -4]
	    },
	    leftTop: {
	      points: ['tr', 'cl'],
	      offset: [-4, -(verticalArrowShift + arrowWidth)]
	    },
	    topRight: {
	      points: ['br', 'tc'],
	      offset: [horizontalArrowShift + arrowWidth, -4]
	    },
	    rightTop: {
	      points: ['tl', 'cr'],
	      offset: [4, -(verticalArrowShift + arrowWidth)]
	    },
	    bottomRight: {
	      points: ['tr', 'bc'],
	      offset: [horizontalArrowShift + arrowWidth, 4]
	    },
	    rightBottom: {
	      points: ['bl', 'cr'],
	      offset: [4, verticalArrowShift + arrowWidth]
	    },
	    bottomLeft: {
	      points: ['tl', 'bc'],
	      offset: [-(horizontalArrowShift + arrowWidth), 4]
	    },
	    leftBottom: {
	      points: ['br', 'cl'],
	      offset: [-4, verticalArrowShift + arrowWidth]
	    }
	  };
	  Object.keys(placementMap).forEach(function (key) {
	    placementMap[key] = config.arrowPointAtCenter ? _extends_1(_extends_1({}, placementMap[key]), {
	      overflow: getOverflowOptions(autoAdjustOverflow),
	      targetOffset: targetOffset$1
	    }) : _extends_1(_extends_1({}, placements$1[key]), {
	      overflow: getOverflowOptions(autoAdjustOverflow)
	    });
	    placementMap[key].ignoreShake = true;
	  });
	  return placementMap;
	}

	var splitObject = function splitObject(obj, keys) {
	  var picked = {};

	  var omitted = _extends_1({}, obj);

	  keys.forEach(function (key) {
	    if (obj && key in obj) {
	      picked[key] = obj[key];
	      delete omitted[key];
	    }
	  });
	  return {
	    picked: picked,
	    omitted: omitted
	  };
	};

	var PresetColorRegex = new RegExp("^(".concat(PresetColorTypes.join('|'), ")(-inverse)?$")); // Fix Tooltip won't hide at disabled button
	// mouse events don't trigger at disabled button in Chrome
	// https://github.com/react-component/tooltip/issues/18

	function getDisabledCompatibleChildren(element, prefixCls) {
	  var elementType = element.type;

	  if ((elementType.__ANT_BUTTON === true || elementType.__ANT_SWITCH === true || elementType.__ANT_CHECKBOX === true || element.type === 'button') && element.props.disabled) {
	    // Pick some layout related style properties up to span
	    // Prevent layout bugs like https://github.com/ant-design/ant-design/issues/5254
	    var _splitObject = splitObject(element.props.style, ['position', 'left', 'right', 'top', 'bottom', 'float', 'display', 'zIndex']),
	        picked = _splitObject.picked,
	        omitted = _splitObject.omitted;

	    var spanStyle = _extends_1(_extends_1({
	      display: 'inline-block'
	    }, picked), {
	      cursor: 'not-allowed',
	      width: element.props.block ? '100%' : null
	    });

	    var buttonStyle = _extends_1(_extends_1({}, omitted), {
	      pointerEvents: 'none'
	    });

	    var child = cloneElement(element, {
	      style: buttonStyle,
	      className: null
	    });
	    return /*#__PURE__*/react.createElement("span", {
	      style: spanStyle,
	      className: classnames(element.props.className, "".concat(prefixCls, "-disabled-compatible-wrapper"))
	    }, child);
	  }

	  return element;
	}

	var Tooltip$2 = /*#__PURE__*/react.forwardRef(function (props, ref) {
	  var _classNames2;

	  var _React$useContext = react.useContext(ConfigContext),
	      getContextPopupContainer = _React$useContext.getPopupContainer,
	      getPrefixCls = _React$useContext.getPrefixCls,
	      direction = _React$useContext.direction;

	  var _React$useState = react.useState(!!props.visible || !!props.defaultVisible),
	      _React$useState2 = slicedToArray(_React$useState, 2),
	      visible = _React$useState2[0],
	      setVisible = _React$useState2[1];

	  react.useEffect(function () {
	    if ('visible' in props) {
	      setVisible(props.visible);
	    }
	  }, [props.visible]);

	  var isNoTitle = function isNoTitle() {
	    var title = props.title,
	        overlay = props.overlay;
	    return !title && !overlay && title !== 0; // overlay for old version compatibility
	  };

	  var onVisibleChange = function onVisibleChange(vis) {
	    if (!('visible' in props)) {
	      setVisible(isNoTitle() ? false : vis);
	    }

	    if (props.onVisibleChange && !isNoTitle()) {
	      props.onVisibleChange(vis);
	    }
	  };

	  var getTooltipPlacements = function getTooltipPlacements() {
	    var builtinPlacements = props.builtinPlacements,
	        arrowPointAtCenter = props.arrowPointAtCenter,
	        autoAdjustOverflow = props.autoAdjustOverflow;
	    return builtinPlacements || getPlacements({
	      arrowPointAtCenter: arrowPointAtCenter,
	      autoAdjustOverflow: autoAdjustOverflow
	    });
	  }; // å¨æè®¾ç½®å¨ç»ç¹


	  var onPopupAlign = function onPopupAlign(domNode, align) {
	    var placements = getTooltipPlacements(); // å½åè¿åçä½ç½®

	    var placement = Object.keys(placements).filter(function (key) {
	      return placements[key].points[0] === align.points[0] && placements[key].points[1] === align.points[1];
	    })[0];

	    if (!placement) {
	      return;
	    } // æ ¹æ®å½ååæ è®¾ç½®å¨ç»ç¹


	    var rect = domNode.getBoundingClientRect();
	    var transformOrigin = {
	      top: '50%',
	      left: '50%'
	    };

	    if (placement.indexOf('top') >= 0 || placement.indexOf('Bottom') >= 0) {
	      transformOrigin.top = "".concat(rect.height - align.offset[1], "px");
	    } else if (placement.indexOf('Top') >= 0 || placement.indexOf('bottom') >= 0) {
	      transformOrigin.top = "".concat(-align.offset[1], "px");
	    }

	    if (placement.indexOf('left') >= 0 || placement.indexOf('Right') >= 0) {
	      transformOrigin.left = "".concat(rect.width - align.offset[0], "px");
	    } else if (placement.indexOf('right') >= 0 || placement.indexOf('Left') >= 0) {
	      transformOrigin.left = "".concat(-align.offset[0], "px");
	    }

	    domNode.style.transformOrigin = "".concat(transformOrigin.left, " ").concat(transformOrigin.top);
	  };

	  var getOverlay = function getOverlay() {
	    var title = props.title,
	        overlay = props.overlay;

	    if (title === 0) {
	      return title;
	    }

	    return overlay || title || '';
	  };

	  var customizePrefixCls = props.prefixCls,
	      openClassName = props.openClassName,
	      getPopupContainer = props.getPopupContainer,
	      getTooltipContainer = props.getTooltipContainer,
	      overlayClassName = props.overlayClassName,
	      color = props.color,
	      overlayInnerStyle = props.overlayInnerStyle;
	  var children = props.children;
	  var prefixCls = getPrefixCls('tooltip', customizePrefixCls);
	  var tempVisible = visible; // Hide tooltip when there is no title

	  if (!('visible' in props) && isNoTitle()) {
	    tempVisible = false;
	  }

	  var child = getDisabledCompatibleChildren(isValidElement(children) ? children : /*#__PURE__*/react.createElement("span", null, children), prefixCls);
	  var childProps = child.props;
	  var childCls = classnames(childProps.className, defineProperty$3({}, openClassName || "".concat(prefixCls, "-open"), true));
	  var customOverlayClassName = classnames(overlayClassName, (_classNames2 = {}, defineProperty$3(_classNames2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), defineProperty$3(_classNames2, "".concat(prefixCls, "-").concat(color), color && PresetColorRegex.test(color)), _classNames2));
	  var formattedOverlayInnerStyle;
	  var arrowContentStyle;

	  if (color && !PresetColorRegex.test(color)) {
	    formattedOverlayInnerStyle = _extends_1(_extends_1({}, overlayInnerStyle), {
	      background: color
	    });
	    arrowContentStyle = {
	      background: color
	    };
	  }

	  return /*#__PURE__*/react.createElement(Tooltip$1, _extends_1({}, props, {
	    prefixCls: prefixCls,
	    overlayClassName: customOverlayClassName,
	    getTooltipContainer: getPopupContainer || getTooltipContainer || getContextPopupContainer,
	    ref: ref,
	    builtinPlacements: getTooltipPlacements(),
	    overlay: getOverlay(),
	    visible: tempVisible,
	    onVisibleChange: onVisibleChange,
	    onPopupAlign: onPopupAlign,
	    overlayInnerStyle: formattedOverlayInnerStyle,
	    arrowContent: /*#__PURE__*/react.createElement("span", {
	      className: "".concat(prefixCls, "-arrow-content"),
	      style: arrowContentStyle
	    })
	  }), tempVisible ? cloneElement(child, {
	    className: childCls
	  }) : child);
	});
	Tooltip$2.displayName = 'Tooltip';
	Tooltip$2.defaultProps = {
	  placement: 'top',
	  transitionName: 'zoom-big-fast',
	  mouseEnterDelay: 0.1,
	  mouseLeaveDelay: 0.1,
	  arrowPointAtCenter: false,
	  autoAdjustOverflow: true
	};

	var __rest$3 = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};
	var SiderContext = /*#__PURE__*/react.createContext({});

	var __rest$4 = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};

	var MenuItem$1 = /*#__PURE__*/function (_React$Component) {
	  inherits(MenuItem, _React$Component);

	  var _super = createSuper(MenuItem);

	  function MenuItem() {
	    var _this;

	    classCallCheck(this, MenuItem);

	    _this = _super.apply(this, arguments);

	    _this.onKeyDown = function (e) {
	      _this.menuItem.onKeyDown(e);
	    };

	    _this.saveMenuItem = function (menuItem) {
	      _this.menuItem = menuItem;
	    };

	    _this.renderItem = function (_ref) {
	      var siderCollapsed = _ref.siderCollapsed;
	      var _this$props = _this.props,
	          level = _this$props.level,
	          className = _this$props.className,
	          children = _this$props.children,
	          rootPrefixCls = _this$props.rootPrefixCls;

	      var _a = _this.props,
	          title = _a.title,
	          icon = _a.icon,
	          danger = _a.danger,
	          rest = __rest$4(_a, ["title", "icon", "danger"]);

	      return /*#__PURE__*/react.createElement(MenuContext.Consumer, null, function (_ref2) {
	        var _classNames;

	        var inlineCollapsed = _ref2.inlineCollapsed,
	            direction = _ref2.direction;
	        var tooltipTitle = title;

	        if (typeof title === 'undefined') {
	          tooltipTitle = level === 1 ? children : '';
	        } else if (title === false) {
	          tooltipTitle = '';
	        }

	        var tooltipProps = {
	          title: tooltipTitle
	        };

	        if (!siderCollapsed && !inlineCollapsed) {
	          tooltipProps.title = null; // Reset `visible` to fix control mode tooltip display not correct
	          // ref: https://github.com/ant-design/ant-design/issues/16742

	          tooltipProps.visible = false;
	        }

	        var childrenLength = toArray(children).length;
	        return /*#__PURE__*/react.createElement(Tooltip$2, _extends_1({}, tooltipProps, {
	          placement: direction === 'rtl' ? 'left' : 'right',
	          overlayClassName: "".concat(rootPrefixCls, "-inline-collapsed-tooltip")
	        }), /*#__PURE__*/react.createElement(connected$2, _extends_1({}, rest, {
	          className: classnames(className, (_classNames = {}, defineProperty$3(_classNames, "".concat(rootPrefixCls, "-item-danger"), danger), defineProperty$3(_classNames, "".concat(rootPrefixCls, "-item-only-child"), (icon ? childrenLength + 1 : childrenLength) === 1), _classNames)),
	          title: title,
	          ref: _this.saveMenuItem
	        }), icon, _this.renderItemChildren(inlineCollapsed)));
	      });
	    };

	    return _this;
	  }

	  createClass(MenuItem, [{
	    key: "renderItemChildren",
	    value: function renderItemChildren(inlineCollapsed) {
	      var _this$props2 = this.props,
	          icon = _this$props2.icon,
	          children = _this$props2.children,
	          level = _this$props2.level,
	          rootPrefixCls = _this$props2.rootPrefixCls; // inline-collapsed.md demo ä¾èµ span æ¥éèæå­,æ icon å±æ§ï¼ååé¨åè£¹ä¸ä¸ª span
	      // ref: https://github.com/ant-design/ant-design/pull/23456

	      if (!icon || isValidElement(children) && children.type === 'span') {
	        if (children && inlineCollapsed && level === 1 && typeof children === 'string') {
	          return /*#__PURE__*/react.createElement("div", {
	            className: "".concat(rootPrefixCls, "-inline-collapsed-noicon")
	          }, children.charAt(0));
	        }

	        return children;
	      }

	      return /*#__PURE__*/react.createElement("span", null, children);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return /*#__PURE__*/react.createElement(SiderContext.Consumer, null, this.renderItem);
	    }
	  }]);

	  return MenuItem;
	}(react.Component);
	MenuItem$1.isMenuItem = true;

	// ================== Collapse Motion ==================
	var getCollapsedHeight = function getCollapsedHeight() {
	  return {
	    height: 0,
	    opacity: 0
	  };
	};

	var getRealHeight = function getRealHeight(node) {
	  return {
	    height: node.scrollHeight,
	    opacity: 1
	  };
	};

	var getCurrentHeight = function getCurrentHeight(node) {
	  return {
	    height: node.offsetHeight
	  };
	};

	function skipOpacityTransition(_, event) {
	  return event.propertyName === 'height';
	}

	var collapseMotion = {
	  motionName: 'ant-motion-collapse',
	  onAppearStart: getCollapsedHeight,
	  onEnterStart: getCollapsedHeight,
	  onAppearActive: getRealHeight,
	  onEnterActive: getRealHeight,
	  onLeaveStart: getCurrentHeight,
	  onLeaveActive: getCollapsedHeight,
	  onAppearEnd: skipOpacityTransition,
	  onEnterEnd: skipOpacityTransition,
	  onLeaveEnd: skipOpacityTransition,
	  motionDeadline: 500
	};

	var InternalMenu = /*#__PURE__*/function (_React$Component) {
	  inherits(InternalMenu, _React$Component);

	  var _super = createSuper(InternalMenu);

	  function InternalMenu(props) {
	    var _this;

	    classCallCheck(this, InternalMenu);

	    _this = _super.call(this, props);

	    _this.renderMenu = function (_ref) {
	      var getPopupContainer = _ref.getPopupContainer,
	          getPrefixCls = _ref.getPrefixCls,
	          direction = _ref.direction;
	      var _this$props = _this.props,
	          customizePrefixCls = _this$props.prefixCls,
	          className = _this$props.className,
	          theme = _this$props.theme;
	      var defaultMotions = {
	        horizontal: {
	          motionName: 'slide-up'
	        },
	        inline: collapseMotion,
	        other: {
	          motionName: 'zoom-big'
	        }
	      };
	      var prefixCls = getPrefixCls('menu', customizePrefixCls);
	      var menuClassName = classnames(className, "".concat(prefixCls, "-").concat(theme), defineProperty$3({}, "".concat(prefixCls, "-inline-collapsed"), _this.getInlineCollapsed()));
	      return /*#__PURE__*/react.createElement(MenuContext.Provider, {
	        value: {
	          inlineCollapsed: _this.getInlineCollapsed() || false,
	          antdMenuTheme: theme,
	          direction: direction
	        }
	      }, /*#__PURE__*/react.createElement(Menu, _extends_1({
	        getPopupContainer: getPopupContainer
	      }, _this.props, {
	        className: menuClassName,
	        prefixCls: prefixCls,
	        direction: direction,
	        defaultMotions: defaultMotions
	      })));
	    };

	    devWarning(!('inlineCollapsed' in props && props.mode !== 'inline'), 'Menu', '`inlineCollapsed` should only be used when `mode` is inline.');
	    devWarning(!(props.siderCollapsed !== undefined && 'inlineCollapsed' in props), 'Menu', '`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead.');
	    return _this;
	  }

	  createClass(InternalMenu, [{
	    key: "getInlineCollapsed",
	    value: function getInlineCollapsed() {
	      var _this$props2 = this.props,
	          inlineCollapsed = _this$props2.inlineCollapsed,
	          siderCollapsed = _this$props2.siderCollapsed;

	      if (siderCollapsed !== undefined) {
	        return siderCollapsed;
	      }

	      return inlineCollapsed;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return /*#__PURE__*/react.createElement(ConfigConsumer, null, this.renderMenu);
	    }
	  }]);

	  return InternalMenu;
	}(react.Component);

	InternalMenu.defaultProps = {
	  className: '',
	  theme: 'light',
	  focusable: false
	}; // We should keep this as ref-able

	var Menu$1 = /*#__PURE__*/function (_React$Component2) {
	  inherits(Menu, _React$Component2);

	  var _super2 = createSuper(Menu);

	  function Menu() {
	    classCallCheck(this, Menu);

	    return _super2.apply(this, arguments);
	  }

	  createClass(Menu, [{
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      return /*#__PURE__*/react.createElement(SiderContext.Consumer, null, function (context) {
	        return /*#__PURE__*/react.createElement(InternalMenu, _extends_1({}, _this2.props, context));
	      });
	    }
	  }]);

	  return Menu;
	}(react.Component);
	Menu$1.Divider = Divider;
	Menu$1.Item = MenuItem$1;
	Menu$1.SubMenu = SubMenu$1;
	Menu$1.ItemGroup = MenuItemGroup;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	var _freeGlobal = freeGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$2 = _freeGlobal || freeSelf || Function('return this')();

	var _root = root$2;

	/** Built-in value references. */
	var Symbol$1 = _root.Symbol;

	var _Symbol = Symbol$1;

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	var isArray_1 = isArray;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$3 = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty$3.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	var _getRawTag = getRawTag;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$1.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString$1.call(value);
	}

	var _objectToString = objectToString;

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag$1 && symToStringTag$1 in Object(value))
	    ? _getRawTag(value)
	    : _objectToString(value);
	}

	var _baseGetTag = baseGetTag;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	var isObjectLike_1 = isObjectLike;

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject$1(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	var isObject_1 = isObject$1;

	var RowContext = /*#__PURE__*/react.createContext({});

	var responsiveArray = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];
	var responsiveMap = {
	  xs: '(max-width: 575px)',
	  sm: '(min-width: 576px)',
	  md: '(min-width: 768px)',
	  lg: '(min-width: 992px)',
	  xl: '(min-width: 1200px)',
	  xxl: '(min-width: 1600px)'
	};
	var subscribers = new Map();
	var subUid = -1;
	var screens = {};
	var responsiveObserve = {
	  matchHandlers: {},
	  dispatch: function dispatch(pointMap) {
	    screens = pointMap;
	    subscribers.forEach(function (func) {
	      return func(screens);
	    });
	    return subscribers.size >= 1;
	  },
	  subscribe: function subscribe(func) {
	    if (!subscribers.size) this.register();
	    subUid += 1;
	    subscribers.set(subUid, func);
	    func(screens);
	    return subUid;
	  },
	  unsubscribe: function unsubscribe(token) {
	    subscribers["delete"](token);
	    if (!subscribers.size) this.unregister();
	  },
	  unregister: function unregister() {
	    var _this = this;

	    Object.keys(responsiveMap).forEach(function (screen) {
	      var matchMediaQuery = responsiveMap[screen];
	      var handler = _this.matchHandlers[matchMediaQuery];
	      handler === null || handler === void 0 ? void 0 : handler.mql.removeListener(handler === null || handler === void 0 ? void 0 : handler.listener);
	    });
	    subscribers.clear();
	  },
	  register: function register() {
	    var _this2 = this;

	    Object.keys(responsiveMap).forEach(function (screen) {
	      var matchMediaQuery = responsiveMap[screen];

	      var listener = function listener(_ref) {
	        var matches = _ref.matches;

	        _this2.dispatch(_extends_1(_extends_1({}, screens), defineProperty$3({}, screen, matches)));
	      };

	      var mql = window.matchMedia(matchMediaQuery);
	      mql.addListener(listener);
	      _this2.matchHandlers[matchMediaQuery] = {
	        mql: mql,
	        listener: listener
	      };
	      listener(mql);
	    });
	  }
	};

	var __rest$5 = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};
	var RowAligns = tuple('top', 'middle', 'bottom', 'stretch');
	var RowJustify = tuple('start', 'end', 'center', 'space-around', 'space-between');
	var Row = /*#__PURE__*/react.forwardRef(function (props, ref) {
	  var _React$useState = react.useState({
	    xs: true,
	    sm: true,
	    md: true,
	    lg: true,
	    xl: true,
	    xxl: true
	  }),
	      _React$useState2 = slicedToArray(_React$useState, 2),
	      screens = _React$useState2[0],
	      setScreens = _React$useState2[1];

	  var gutterRef = react.useRef();
	  gutterRef.current = props.gutter;
	  react.useEffect(function () {
	    var token = responsiveObserve.subscribe(function (screen) {
	      var currentGutter = gutterRef.current || 0;

	      if (!Array.isArray(currentGutter) && _typeof_1(currentGutter) === 'object' || Array.isArray(currentGutter) && (_typeof_1(currentGutter[0]) === 'object' || _typeof_1(currentGutter[1]) === 'object')) {
	        setScreens(screen);
	      }
	    });
	    return function () {
	      responsiveObserve.unsubscribe(token);
	    };
	  }, []);

	  var getGutter = function getGutter() {
	    var results = [0, 0];
	    var _props$gutter = props.gutter,
	        gutter = _props$gutter === void 0 ? 0 : _props$gutter;
	    var normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, 0];
	    normalizedGutter.forEach(function (g, index) {
	      if (_typeof_1(g) === 'object') {
	        for (var i = 0; i < responsiveArray.length; i++) {
	          var breakpoint = responsiveArray[i];

	          if (screens[breakpoint] && g[breakpoint] !== undefined) {
	            results[index] = g[breakpoint];
	            break;
	          }
	        }
	      } else {
	        results[index] = g || 0;
	      }
	    });
	    return results;
	  };

	  var renderRow = function renderRow(_ref) {
	    var _classNames;

	    var getPrefixCls = _ref.getPrefixCls,
	        direction = _ref.direction;

	    var customizePrefixCls = props.prefixCls,
	        justify = props.justify,
	        align = props.align,
	        className = props.className,
	        style = props.style,
	        children = props.children,
	        others = __rest$5(props, ["prefixCls", "justify", "align", "className", "style", "children"]);

	    var prefixCls = getPrefixCls('row', customizePrefixCls);
	    var gutter = getGutter();
	    var classes = classnames(prefixCls, (_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-").concat(justify), justify), defineProperty$3(_classNames, "".concat(prefixCls, "-").concat(align), align), defineProperty$3(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);

	    var rowStyle = _extends_1(_extends_1(_extends_1({}, gutter[0] > 0 ? {
	      marginLeft: gutter[0] / -2,
	      marginRight: gutter[0] / -2
	    } : {}), gutter[1] > 0 ? {
	      marginTop: gutter[1] / -2,
	      marginBottom: gutter[1] / 2
	    } : {}), style);

	    var otherProps = _extends_1({}, others);

	    delete otherProps.gutter;
	    return /*#__PURE__*/react.createElement(RowContext.Provider, {
	      value: {
	        gutter: gutter
	      }
	    }, /*#__PURE__*/react.createElement("div", _extends_1({}, otherProps, {
	      className: classes,
	      style: rowStyle,
	      ref: ref
	    }), children));
	  };

	  return /*#__PURE__*/react.createElement(ConfigConsumer, null, renderRow);
	});
	Row.displayName = 'Row';

	var __rest$6 = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};

	function parseFlex(flex) {
	  if (typeof flex === 'number') {
	    return "".concat(flex, " ").concat(flex, " auto");
	  }

	  if (/^\d+(\.\d+)?(px|em|rem|%)$/.test(flex)) {
	    return "0 0 ".concat(flex);
	  }

	  return flex;
	}

	var Col = /*#__PURE__*/react.forwardRef(function (props, ref) {
	  var renderCol = function renderCol(_ref) {
	    var _classNames;

	    var getPrefixCls = _ref.getPrefixCls,
	        direction = _ref.direction;

	    var customizePrefixCls = props.prefixCls,
	        span = props.span,
	        order = props.order,
	        offset = props.offset,
	        push = props.push,
	        pull = props.pull,
	        className = props.className,
	        children = props.children,
	        flex = props.flex,
	        style = props.style,
	        others = __rest$6(props, ["prefixCls", "span", "order", "offset", "push", "pull", "className", "children", "flex", "style"]);

	    var prefixCls = getPrefixCls('col', customizePrefixCls);
	    var sizeClassObj = {};
	    ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'].forEach(function (size) {
	      var _extends2;

	      var sizeProps = {};
	      var propSize = props[size];

	      if (typeof propSize === 'number') {
	        sizeProps.span = propSize;
	      } else if (_typeof_1(propSize) === 'object') {
	        sizeProps = propSize || {};
	      }

	      delete others[size];
	      sizeClassObj = _extends_1(_extends_1({}, sizeClassObj), (_extends2 = {}, defineProperty$3(_extends2, "".concat(prefixCls, "-").concat(size, "-").concat(sizeProps.span), sizeProps.span !== undefined), defineProperty$3(_extends2, "".concat(prefixCls, "-").concat(size, "-order-").concat(sizeProps.order), sizeProps.order || sizeProps.order === 0), defineProperty$3(_extends2, "".concat(prefixCls, "-").concat(size, "-offset-").concat(sizeProps.offset), sizeProps.offset || sizeProps.offset === 0), defineProperty$3(_extends2, "".concat(prefixCls, "-").concat(size, "-push-").concat(sizeProps.push), sizeProps.push || sizeProps.push === 0), defineProperty$3(_extends2, "".concat(prefixCls, "-").concat(size, "-pull-").concat(sizeProps.pull), sizeProps.pull || sizeProps.pull === 0), defineProperty$3(_extends2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _extends2));
	    });
	    var classes = classnames(prefixCls, (_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-").concat(span), span !== undefined), defineProperty$3(_classNames, "".concat(prefixCls, "-order-").concat(order), order), defineProperty$3(_classNames, "".concat(prefixCls, "-offset-").concat(offset), offset), defineProperty$3(_classNames, "".concat(prefixCls, "-push-").concat(push), push), defineProperty$3(_classNames, "".concat(prefixCls, "-pull-").concat(pull), pull), _classNames), className, sizeClassObj);
	    return /*#__PURE__*/react.createElement(RowContext.Consumer, null, function (_ref2) {
	      var gutter = _ref2.gutter;

	      var mergedStyle = _extends_1({}, style);

	      if (gutter) {
	        mergedStyle = _extends_1(_extends_1(_extends_1({}, gutter[0] > 0 ? {
	          paddingLeft: gutter[0] / 2,
	          paddingRight: gutter[0] / 2
	        } : {}), gutter[1] > 0 ? {
	          paddingTop: gutter[1] / 2,
	          paddingBottom: gutter[1] / 2
	        } : {}), mergedStyle);
	      }

	      if (flex) {
	        mergedStyle.flex = parseFlex(flex);
	      }

	      return /*#__PURE__*/react.createElement("div", _extends_1({}, others, {
	        style: mergedStyle,
	        className: classes,
	        ref: ref
	      }), children);
	    });
	  };

	  return /*#__PURE__*/react.createElement(ConfigConsumer, null, renderCol);
	});
	Col.displayName = 'Col';

	var ClearableInputType = tuple('text', 'input');
	function hasPrefixSuffix(props) {
	  return !!(props.prefix || props.suffix || props.allowClear);
	}

	var ClearableLabeledInput = /*#__PURE__*/function (_React$Component) {
	  inherits(ClearableLabeledInput, _React$Component);

	  var _super = createSuper(ClearableLabeledInput);

	  function ClearableLabeledInput() {
	    var _this;

	    classCallCheck(this, ClearableLabeledInput);

	    _this = _super.apply(this, arguments);
	    /** @private Do not use out of this class. We do not promise this is always keep. */

	    _this.containerRef = /*#__PURE__*/react.createRef();

	    _this.onInputMouseUp = function (e) {
	      var _a;

	      if ((_a = _this.containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target)) {
	        var triggerFocus = _this.props.triggerFocus;
	        triggerFocus();
	      }
	    };

	    return _this;
	  }

	  createClass(ClearableLabeledInput, [{
	    key: "renderClearIcon",
	    value: function renderClearIcon(prefixCls) {
	      var _this$props = this.props,
	          allowClear = _this$props.allowClear,
	          value = _this$props.value,
	          disabled = _this$props.disabled,
	          readOnly = _this$props.readOnly,
	          inputType = _this$props.inputType,
	          handleReset = _this$props.handleReset;

	      if (!allowClear) {
	        return null;
	      }

	      var needClear = !disabled && !readOnly && value;
	      var className = inputType === ClearableInputType[0] ? "".concat(prefixCls, "-textarea-clear-icon") : "".concat(prefixCls, "-clear-icon");
	      return /*#__PURE__*/react.createElement(CloseCircleFilled$1, {
	        onClick: handleReset,
	        className: classnames(className, defineProperty$3({}, "".concat(className, "-hidden"), !needClear)),
	        role: "button"
	      });
	    }
	  }, {
	    key: "renderSuffix",
	    value: function renderSuffix(prefixCls) {
	      var _this$props2 = this.props,
	          suffix = _this$props2.suffix,
	          allowClear = _this$props2.allowClear;

	      if (suffix || allowClear) {
	        return /*#__PURE__*/react.createElement("span", {
	          className: "".concat(prefixCls, "-suffix")
	        }, this.renderClearIcon(prefixCls), suffix);
	      }

	      return null;
	    }
	  }, {
	    key: "renderLabeledIcon",
	    value: function renderLabeledIcon(prefixCls, element) {
	      var _classNames2;

	      var _this$props3 = this.props,
	          focused = _this$props3.focused,
	          value = _this$props3.value,
	          prefix = _this$props3.prefix,
	          className = _this$props3.className,
	          size = _this$props3.size,
	          suffix = _this$props3.suffix,
	          disabled = _this$props3.disabled,
	          allowClear = _this$props3.allowClear,
	          direction = _this$props3.direction,
	          style = _this$props3.style,
	          readOnly = _this$props3.readOnly;
	      var suffixNode = this.renderSuffix(prefixCls);

	      if (!hasPrefixSuffix(this.props)) {
	        return cloneElement(element, {
	          value: value
	        });
	      }

	      var prefixNode = prefix ? /*#__PURE__*/react.createElement("span", {
	        className: "".concat(prefixCls, "-prefix")
	      }, prefix) : null;
	      var affixWrapperCls = classnames(className, "".concat(prefixCls, "-affix-wrapper"), (_classNames2 = {}, defineProperty$3(_classNames2, "".concat(prefixCls, "-affix-wrapper-focused"), focused), defineProperty$3(_classNames2, "".concat(prefixCls, "-affix-wrapper-disabled"), disabled), defineProperty$3(_classNames2, "".concat(prefixCls, "-affix-wrapper-sm"), size === 'small'), defineProperty$3(_classNames2, "".concat(prefixCls, "-affix-wrapper-lg"), size === 'large'), defineProperty$3(_classNames2, "".concat(prefixCls, "-affix-wrapper-input-with-clear-btn"), suffix && allowClear && value), defineProperty$3(_classNames2, "".concat(prefixCls, "-affix-wrapper-rtl"), direction === 'rtl'), defineProperty$3(_classNames2, "".concat(prefixCls, "-affix-wrapper-readonly"), readOnly), _classNames2));
	      return /*#__PURE__*/react.createElement("span", {
	        ref: this.containerRef,
	        className: affixWrapperCls,
	        style: style,
	        onMouseUp: this.onInputMouseUp
	      }, prefixNode, cloneElement(element, {
	        style: null,
	        value: value,
	        className: getInputClassName(prefixCls, size, disabled)
	      }), suffixNode);
	    }
	  }, {
	    key: "renderInputWithLabel",
	    value: function renderInputWithLabel(prefixCls, labeledElement) {
	      var _classNames3, _classNames4;

	      var _this$props4 = this.props,
	          addonBefore = _this$props4.addonBefore,
	          addonAfter = _this$props4.addonAfter,
	          style = _this$props4.style,
	          size = _this$props4.size,
	          className = _this$props4.className,
	          direction = _this$props4.direction; // Not wrap when there is not addons

	      if (!addonBefore && !addonAfter) {
	        return labeledElement;
	      }

	      var wrapperClassName = "".concat(prefixCls, "-group");
	      var addonClassName = "".concat(wrapperClassName, "-addon");
	      var addonBeforeNode = addonBefore ? /*#__PURE__*/react.createElement("span", {
	        className: addonClassName
	      }, addonBefore) : null;
	      var addonAfterNode = addonAfter ? /*#__PURE__*/react.createElement("span", {
	        className: addonClassName
	      }, addonAfter) : null;
	      var mergedWrapperClassName = classnames("".concat(prefixCls, "-wrapper"), (_classNames3 = {}, defineProperty$3(_classNames3, wrapperClassName, addonBefore || addonAfter), defineProperty$3(_classNames3, "".concat(wrapperClassName, "-rtl"), direction === 'rtl'), _classNames3));
	      var mergedGroupClassName = classnames(className, "".concat(prefixCls, "-group-wrapper"), (_classNames4 = {}, defineProperty$3(_classNames4, "".concat(prefixCls, "-group-wrapper-sm"), size === 'small'), defineProperty$3(_classNames4, "".concat(prefixCls, "-group-wrapper-lg"), size === 'large'), defineProperty$3(_classNames4, "".concat(prefixCls, "-group-wrapper-rtl"), direction === 'rtl'), _classNames4)); // Need another wrapper for changing display:table to display:inline-block
	      // and put style prop in wrapper

	      return /*#__PURE__*/react.createElement("span", {
	        className: mergedGroupClassName,
	        style: style
	      }, /*#__PURE__*/react.createElement("span", {
	        className: mergedWrapperClassName
	      }, addonBeforeNode, cloneElement(labeledElement, {
	        style: null
	      }), addonAfterNode));
	    }
	  }, {
	    key: "renderTextAreaWithClearIcon",
	    value: function renderTextAreaWithClearIcon(prefixCls, element) {
	      var _this$props5 = this.props,
	          value = _this$props5.value,
	          allowClear = _this$props5.allowClear,
	          className = _this$props5.className,
	          style = _this$props5.style,
	          direction = _this$props5.direction;

	      if (!allowClear) {
	        return cloneElement(element, {
	          value: value
	        });
	      }

	      var affixWrapperCls = classnames(className, "".concat(prefixCls, "-affix-wrapper"), defineProperty$3({}, "".concat(prefixCls, "-affix-wrapper-rtl"), direction === 'rtl'), "".concat(prefixCls, "-affix-wrapper-textarea-with-clear-btn"));
	      return /*#__PURE__*/react.createElement("span", {
	        className: affixWrapperCls,
	        style: style
	      }, cloneElement(element, {
	        style: null,
	        value: value
	      }), this.renderClearIcon(prefixCls));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props6 = this.props,
	          prefixCls = _this$props6.prefixCls,
	          inputType = _this$props6.inputType,
	          element = _this$props6.element;

	      if (inputType === ClearableInputType[0]) {
	        return this.renderTextAreaWithClearIcon(prefixCls, element);
	      }

	      return this.renderInputWithLabel(prefixCls, this.renderLabeledIcon(prefixCls, element));
	    }
	  }]);

	  return ClearableLabeledInput;
	}(react.Component);

	function fixControlledValue(value) {
	  if (typeof value === 'undefined' || value === null) {
	    return '';
	  }

	  return value;
	}
	function resolveOnChange(target, e, onChange) {
	  if (onChange) {
	    var event = e;

	    if (e.type === 'click') {
	      // click clear icon
	      event = Object.create(e);
	      event.target = target;
	      event.currentTarget = target;
	      var originalInputValue = target.value; // change target ref value cause e.target.value should be '' when clear input

	      target.value = '';
	      onChange(event); // reset target ref value

	      target.value = originalInputValue;
	      return;
	    }

	    onChange(event);
	  }
	}
	function getInputClassName(prefixCls, size, disabled, direction) {
	  var _classNames;

	  return classnames(prefixCls, (_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-sm"), size === 'small'), defineProperty$3(_classNames, "".concat(prefixCls, "-lg"), size === 'large'), defineProperty$3(_classNames, "".concat(prefixCls, "-disabled"), disabled), defineProperty$3(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames));
	}

	var Input = /*#__PURE__*/function (_React$Component) {
	  inherits(Input, _React$Component);

	  var _super = createSuper(Input);

	  function Input(props) {
	    var _this;

	    classCallCheck(this, Input);

	    _this = _super.call(this, props);
	    _this.direction = 'ltr';

	    _this.focus = function () {
	      _this.input.focus();
	    };

	    _this.saveClearableInput = function (input) {
	      _this.clearableInput = input;
	    };

	    _this.saveInput = function (input) {
	      _this.input = input;
	    };

	    _this.onFocus = function (e) {
	      var onFocus = _this.props.onFocus;

	      _this.setState({
	        focused: true
	      }, _this.clearPasswordValueAttribute);

	      if (onFocus) {
	        onFocus(e);
	      }
	    };

	    _this.onBlur = function (e) {
	      var onBlur = _this.props.onBlur;

	      _this.setState({
	        focused: false
	      }, _this.clearPasswordValueAttribute);

	      if (onBlur) {
	        onBlur(e);
	      }
	    };

	    _this.handleReset = function (e) {
	      _this.setValue('', function () {
	        _this.focus();
	      });

	      resolveOnChange(_this.input, e, _this.props.onChange);
	    };

	    _this.renderInput = function (prefixCls, size) {
	      var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      var _this$props = _this.props,
	          className = _this$props.className,
	          addonBefore = _this$props.addonBefore,
	          addonAfter = _this$props.addonAfter,
	          customizeSize = _this$props.size,
	          disabled = _this$props.disabled; // Fix https://fb.me/react-unknown-prop

	      var otherProps = omit(_this.props, ['prefixCls', 'onPressEnter', 'addonBefore', 'addonAfter', 'prefix', 'suffix', 'allowClear', // Input elements must be either controlled or uncontrolled,
	      // specify either the value prop, or the defaultValue prop, but not both.
	      'defaultValue', 'size', 'inputType']);
	      return /*#__PURE__*/react.createElement("input", _extends_1({
	        autoComplete: input.autoComplete
	      }, otherProps, {
	        onChange: _this.handleChange,
	        onFocus: _this.onFocus,
	        onBlur: _this.onBlur,
	        onKeyDown: _this.handleKeyDown,
	        className: classnames(getInputClassName(prefixCls, customizeSize || size, disabled, _this.direction), defineProperty$3({}, className, className && !addonBefore && !addonAfter)),
	        ref: _this.saveInput
	      }));
	    };

	    _this.clearPasswordValueAttribute = function () {
	      // https://github.com/ant-design/ant-design/issues/20541
	      _this.removePasswordTimeout = setTimeout(function () {
	        if (_this.input && _this.input.getAttribute('type') === 'password' && _this.input.hasAttribute('value')) {
	          _this.input.removeAttribute('value');
	        }
	      });
	    };

	    _this.handleChange = function (e) {
	      _this.setValue(e.target.value, _this.clearPasswordValueAttribute);

	      resolveOnChange(_this.input, e, _this.props.onChange);
	    };

	    _this.handleKeyDown = function (e) {
	      var _this$props2 = _this.props,
	          onPressEnter = _this$props2.onPressEnter,
	          onKeyDown = _this$props2.onKeyDown;

	      if (e.keyCode === 13 && onPressEnter) {
	        onPressEnter(e);
	      }

	      if (onKeyDown) {
	        onKeyDown(e);
	      }
	    };

	    _this.renderComponent = function (_ref) {
	      var getPrefixCls = _ref.getPrefixCls,
	          direction = _ref.direction,
	          input = _ref.input;
	      var _this$state = _this.state,
	          value = _this$state.value,
	          focused = _this$state.focused;
	      var customizePrefixCls = _this.props.prefixCls;
	      var prefixCls = getPrefixCls('input', customizePrefixCls);
	      _this.direction = direction;
	      return /*#__PURE__*/react.createElement(SizeContext.Consumer, null, function (size) {
	        return /*#__PURE__*/react.createElement(ClearableLabeledInput, _extends_1({
	          size: size
	        }, _this.props, {
	          prefixCls: prefixCls,
	          inputType: "input",
	          value: fixControlledValue(value),
	          element: _this.renderInput(prefixCls, size, input),
	          handleReset: _this.handleReset,
	          ref: _this.saveClearableInput,
	          direction: direction,
	          focused: focused,
	          triggerFocus: _this.focus
	        }));
	      });
	    };

	    var value = typeof props.value === 'undefined' ? props.defaultValue : props.value;
	    _this.state = {
	      value: value,
	      focused: false,
	      // eslint-disable-next-line react/no-unused-state
	      prevValue: props.value
	    };
	    return _this;
	  }

	  createClass(Input, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.clearPasswordValueAttribute();
	    } // Since polyfill `getSnapshotBeforeUpdate` need work with `componentDidUpdate`.
	    // We keep an empty function here.

	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {}
	  }, {
	    key: "getSnapshotBeforeUpdate",
	    value: function getSnapshotBeforeUpdate(prevProps) {
	      if (hasPrefixSuffix(prevProps) !== hasPrefixSuffix(this.props)) {
	        devWarning(this.input !== document.activeElement, 'Input', "When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ");
	      }

	      return null;
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      if (this.removePasswordTimeout) {
	        clearTimeout(this.removePasswordTimeout);
	      }
	    }
	  }, {
	    key: "blur",
	    value: function blur() {
	      this.input.blur();
	    }
	  }, {
	    key: "select",
	    value: function select() {
	      this.input.select();
	    }
	  }, {
	    key: "setValue",
	    value: function setValue(value, callback) {
	      if (this.props.value === undefined) {
	        this.setState({
	          value: value
	        }, callback);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return /*#__PURE__*/react.createElement(ConfigConsumer, null, this.renderComponent);
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(nextProps, _ref2) {
	      var prevValue = _ref2.prevValue;
	      var newState = {
	        prevValue: nextProps.value
	      };

	      if (nextProps.value !== undefined || prevValue !== nextProps.value) {
	        newState.value = nextProps.value;
	      }

	      return newState;
	    }
	  }]);

	  return Input;
	}(react.Component);

	Input.defaultProps = {
	  type: 'text'
	};

	var Group = function Group(props) {
	  return /*#__PURE__*/react.createElement(ConfigConsumer, null, function (_ref) {
	    var _classNames;

	    var getPrefixCls = _ref.getPrefixCls,
	        direction = _ref.direction;
	    var customizePrefixCls = props.prefixCls,
	        _props$className = props.className,
	        className = _props$className === void 0 ? '' : _props$className;
	    var prefixCls = getPrefixCls('input-group', customizePrefixCls);
	    var cls = classnames(prefixCls, (_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-lg"), props.size === 'large'), defineProperty$3(_classNames, "".concat(prefixCls, "-sm"), props.size === 'small'), defineProperty$3(_classNames, "".concat(prefixCls, "-compact"), props.compact), defineProperty$3(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
	    return /*#__PURE__*/react.createElement("span", {
	      className: cls,
	      style: props.style,
	      onMouseEnter: props.onMouseEnter,
	      onMouseLeave: props.onMouseLeave,
	      onFocus: props.onFocus,
	      onBlur: props.onBlur
	    }, props.children);
	  });
	};

	var __rest$7 = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};
	var Search = /*#__PURE__*/react.forwardRef(function (props, ref) {
	  var inputRef = react.useRef(null);

	  var onChange = function onChange(e) {
	    var customOnChange = props.onChange,
	        customOnSearch = props.onSearch;

	    if (e && e.target && e.type === 'click' && customOnSearch) {
	      customOnSearch(e.target.value, e);
	    }

	    if (customOnChange) {
	      customOnChange(e);
	    }
	  };

	  var onMouseDown = function onMouseDown(e) {
	    var _a;

	    if (document.activeElement === ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input)) {
	      e.preventDefault();
	    }
	  };

	  var onSearch = function onSearch(e) {
	    var _a;

	    var customOnSearch = props.onSearch,
	        loading = props.loading,
	        disabled = props.disabled;

	    if (loading || disabled) {
	      return;
	    }

	    if (customOnSearch) {
	      customOnSearch((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input.value, e);
	    }
	  };

	  var renderLoading = function renderLoading(prefixCls) {
	    var enterButton = props.enterButton,
	        customizeSize = props.size;

	    if (enterButton) {
	      return /*#__PURE__*/react.createElement(SizeContext.Consumer, {
	        key: "enterButton"
	      }, function (size) {
	        return /*#__PURE__*/react.createElement(Button, {
	          className: "".concat(prefixCls, "-button"),
	          type: "primary",
	          size: customizeSize || size
	        }, /*#__PURE__*/react.createElement(LoadingOutlined$1, null));
	      });
	    }

	    return /*#__PURE__*/react.createElement(LoadingOutlined$1, {
	      className: "".concat(prefixCls, "-icon"),
	      key: "loadingIcon"
	    });
	  };

	  var renderSuffix = function renderSuffix(prefixCls) {
	    var suffix = props.suffix,
	        enterButton = props.enterButton,
	        loading = props.loading;

	    if (loading && !enterButton) {
	      return [suffix, renderLoading(prefixCls)];
	    }

	    if (enterButton) return suffix;
	    var icon = /*#__PURE__*/react.createElement(SearchOutlined$1, {
	      className: "".concat(prefixCls, "-icon"),
	      key: "searchIcon",
	      onClick: onSearch
	    });

	    if (suffix) {
	      return [replaceElement(suffix, null, {
	        key: 'suffix'
	      }), icon];
	    }

	    return icon;
	  };

	  var renderAddonAfter = function renderAddonAfter(prefixCls, size) {
	    var enterButton = props.enterButton,
	        disabled = props.disabled,
	        addonAfter = props.addonAfter,
	        loading = props.loading;
	    var btnClassName = "".concat(prefixCls, "-button");

	    if (loading && enterButton) {
	      return [renderLoading(prefixCls), addonAfter];
	    }

	    if (!enterButton) return addonAfter;
	    var button;
	    var enterButtonAsElement = enterButton;
	    var isAntdButton = enterButtonAsElement.type && enterButtonAsElement.type.__ANT_BUTTON === true;

	    if (isAntdButton || enterButtonAsElement.type === 'button') {
	      button = cloneElement(enterButtonAsElement, _extends_1({
	        onMouseDown: onMouseDown,
	        onClick: onSearch,
	        key: 'enterButton'
	      }, isAntdButton ? {
	        className: btnClassName,
	        size: size
	      } : {}));
	    } else {
	      button = /*#__PURE__*/react.createElement(Button, {
	        className: btnClassName,
	        type: "primary",
	        size: size,
	        disabled: disabled,
	        key: "enterButton",
	        onMouseDown: onMouseDown,
	        onClick: onSearch
	      }, enterButton === true ? /*#__PURE__*/react.createElement(SearchOutlined$1, null) : enterButton);
	    }

	    if (addonAfter) {
	      return [button, replaceElement(addonAfter, null, {
	        key: 'addonAfter'
	      })];
	    }

	    return button;
	  };

	  var renderSearch = function renderSearch(_ref) {
	    var getPrefixCls = _ref.getPrefixCls,
	        direction = _ref.direction;

	    var customizePrefixCls = props.prefixCls,
	        customizeInputPrefixCls = props.inputPrefixCls,
	        enterButton = props.enterButton,
	        className = props.className,
	        customizeSize = props.size,
	        restProps = __rest$7(props, ["prefixCls", "inputPrefixCls", "enterButton", "className", "size"]);

	    delete restProps.onSearch;
	    delete restProps.loading;
	    var prefixCls = getPrefixCls('input-search', customizePrefixCls);
	    var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);

	    var getClassName = function getClassName(size) {
	      var inputClassName;

	      if (enterButton) {
	        var _classNames;

	        inputClassName = classnames(prefixCls, className, (_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), defineProperty$3(_classNames, "".concat(prefixCls, "-enter-button"), !!enterButton), defineProperty$3(_classNames, "".concat(prefixCls, "-").concat(size), !!size), _classNames));
	      } else {
	        inputClassName = classnames(prefixCls, className, defineProperty$3({}, "".concat(prefixCls, "-rtl"), direction === 'rtl'));
	      }

	      return inputClassName;
	    };

	    return /*#__PURE__*/react.createElement(SizeContext.Consumer, null, function (size) {
	      return /*#__PURE__*/react.createElement(Input, _extends_1({
	        ref: composeRef(inputRef, ref),
	        onPressEnter: onSearch
	      }, restProps, {
	        size: customizeSize || size,
	        prefixCls: inputPrefixCls,
	        addonAfter: renderAddonAfter(prefixCls, customizeSize || size),
	        suffix: renderSuffix(prefixCls),
	        onChange: onChange,
	        className: getClassName(customizeSize || size)
	      }));
	    });
	  };

	  return /*#__PURE__*/react.createElement(ConfigConsumer, null, renderSearch);
	});
	Search.defaultProps = {
	  enterButton: false
	};
	Search.displayName = 'Search';

	// Thanks to https://github.com/andreypopp/react-textarea-autosize/

	/**
	 * calculateNodeHeight(uiTextNode, useCache = false)
	 */
	var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
	var SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'font-variant', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing'];
	var computedStyleCache = {};
	var hiddenTextarea;
	function calculateNodeStyling(node) {
	  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	  var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');

	  if (useCache && computedStyleCache[nodeRef]) {
	    return computedStyleCache[nodeRef];
	  }

	  var style = window.getComputedStyle(node);
	  var boxSizing = style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing');
	  var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));
	  var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));
	  var sizingStyle = SIZING_STYLE.map(function (name) {
	    return "".concat(name, ":").concat(style.getPropertyValue(name));
	  }).join(';');
	  var nodeInfo = {
	    sizingStyle: sizingStyle,
	    paddingSize: paddingSize,
	    borderSize: borderSize,
	    boxSizing: boxSizing
	  };

	  if (useCache && nodeRef) {
	    computedStyleCache[nodeRef] = nodeInfo;
	  }

	  return nodeInfo;
	}
	function calculateNodeHeight(uiTextNode) {
	  var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	  var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	  var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	  if (!hiddenTextarea) {
	    hiddenTextarea = document.createElement('textarea');
	    hiddenTextarea.setAttribute('tab-index', '-1');
	    hiddenTextarea.setAttribute('aria-hidden', 'true');
	    document.body.appendChild(hiddenTextarea);
	  } // Fix wrap="off" issue
	  // https://github.com/ant-design/ant-design/issues/6577


	  if (uiTextNode.getAttribute('wrap')) {
	    hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));
	  } else {
	    hiddenTextarea.removeAttribute('wrap');
	  } // Copy all CSS properties that have an impact on the height of the content in
	  // the textbox


	  var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache),
	      paddingSize = _calculateNodeStyling.paddingSize,
	      borderSize = _calculateNodeStyling.borderSize,
	      boxSizing = _calculateNodeStyling.boxSizing,
	      sizingStyle = _calculateNodeStyling.sizingStyle; // Need to have the overflow attribute to hide the scrollbar otherwise
	  // text-lines will not calculated properly as the shadow will technically be
	  // narrower for content


	  hiddenTextarea.setAttribute('style', "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
	  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';
	  var minHeight = Number.MIN_SAFE_INTEGER;
	  var maxHeight = Number.MAX_SAFE_INTEGER;
	  var height = hiddenTextarea.scrollHeight;
	  var overflowY;

	  if (boxSizing === 'border-box') {
	    // border-box: add border, since height = content + padding + border
	    height += borderSize;
	  } else if (boxSizing === 'content-box') {
	    // remove padding, since height = content
	    height -= paddingSize;
	  }

	  if (minRows !== null || maxRows !== null) {
	    // measure height of a textarea with a single row
	    hiddenTextarea.value = ' ';
	    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;

	    if (minRows !== null) {
	      minHeight = singleRowHeight * minRows;

	      if (boxSizing === 'border-box') {
	        minHeight = minHeight + paddingSize + borderSize;
	      }

	      height = Math.max(minHeight, height);
	    }

	    if (maxRows !== null) {
	      maxHeight = singleRowHeight * maxRows;

	      if (boxSizing === 'border-box') {
	        maxHeight = maxHeight + paddingSize + borderSize;
	      }

	      overflowY = height > maxHeight ? '' : 'hidden';
	      height = Math.min(maxHeight, height);
	    }
	  }

	  return {
	    height: height,
	    minHeight: minHeight,
	    maxHeight: maxHeight,
	    overflowY: overflowY
	  };
	}

	function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$f(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$6(this, result); }; }

	function _isNativeReflectConstruct$8() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	var RESIZE_STATUS;

	(function (RESIZE_STATUS) {
	  RESIZE_STATUS[RESIZE_STATUS["NONE"] = 0] = "NONE";
	  RESIZE_STATUS[RESIZE_STATUS["RESIZING"] = 1] = "RESIZING";
	  RESIZE_STATUS[RESIZE_STATUS["RESIZED"] = 2] = "RESIZED";
	})(RESIZE_STATUS || (RESIZE_STATUS = {}));

	var ResizableTextArea = /*#__PURE__*/function (_React$Component) {
	  _inherits$6(ResizableTextArea, _React$Component);

	  var _super = _createSuper$7(ResizableTextArea);

	  function ResizableTextArea(props) {
	    var _this;

	    _classCallCheck$6(this, ResizableTextArea);

	    _this = _super.call(this, props);

	    _this.saveTextArea = function (textArea) {
	      _this.textArea = textArea;
	    };

	    _this.handleResize = function (size) {
	      var resizeStatus = _this.state.resizeStatus;
	      var _this$props = _this.props,
	          autoSize = _this$props.autoSize,
	          onResize = _this$props.onResize;

	      if (resizeStatus !== RESIZE_STATUS.NONE) {
	        return;
	      }

	      if (typeof onResize === 'function') {
	        onResize(size);
	      }

	      if (autoSize) {
	        _this.resizeOnNextFrame();
	      }
	    };

	    _this.resizeOnNextFrame = function () {
	      cancelAnimationFrame(_this.nextFrameActionId);
	      _this.nextFrameActionId = requestAnimationFrame(_this.resizeTextarea);
	    };

	    _this.resizeTextarea = function () {
	      var autoSize = _this.props.autoSize;

	      if (!autoSize || !_this.textArea) {
	        return;
	      }

	      var minRows = autoSize.minRows,
	          maxRows = autoSize.maxRows;
	      var textareaStyles = calculateNodeHeight(_this.textArea, false, minRows, maxRows);

	      _this.setState({
	        textareaStyles: textareaStyles,
	        resizeStatus: RESIZE_STATUS.RESIZING
	      }, function () {
	        cancelAnimationFrame(_this.resizeFrameId);
	        _this.resizeFrameId = requestAnimationFrame(function () {
	          _this.setState({
	            resizeStatus: RESIZE_STATUS.RESIZED
	          }, function () {
	            _this.resizeFrameId = requestAnimationFrame(function () {
	              _this.setState({
	                resizeStatus: RESIZE_STATUS.NONE
	              });

	              _this.fixFirefoxAutoScroll();
	            });
	          });
	        });
	      });
	    };

	    _this.renderTextArea = function () {
	      var _this$props2 = _this.props,
	          _this$props2$prefixCl = _this$props2.prefixCls,
	          prefixCls = _this$props2$prefixCl === void 0 ? 'rc-textarea' : _this$props2$prefixCl,
	          autoSize = _this$props2.autoSize,
	          onResize = _this$props2.onResize,
	          className = _this$props2.className,
	          disabled = _this$props2.disabled;
	      var _this$state = _this.state,
	          textareaStyles = _this$state.textareaStyles,
	          resizeStatus = _this$state.resizeStatus;
	      var otherProps = omit(_this.props, ['prefixCls', 'onPressEnter', 'autoSize', 'defaultValue', 'onResize']);
	      var cls = classnames(prefixCls, className, _defineProperty$2({}, "".concat(prefixCls, "-disabled"), disabled)); // Fix https://github.com/ant-design/ant-design/issues/6776
	      // Make sure it could be reset when using form.getFieldDecorator

	      if ('value' in otherProps) {
	        otherProps.value = otherProps.value || '';
	      }

	      var style = _objectSpread$b(_objectSpread$b(_objectSpread$b({}, _this.props.style), textareaStyles), resizeStatus === RESIZE_STATUS.RESIZING ? // React will warning when mix `overflow` & `overflowY`.
	      // We need to define this separately.
	      {
	        overflowX: 'hidden',
	        overflowY: 'hidden'
	      } : null);

	      return react.createElement(ReactResizeObserver, {
	        onResize: _this.handleResize,
	        disabled: !(autoSize || onResize)
	      }, react.createElement("textarea", Object.assign({}, otherProps, {
	        className: cls,
	        style: style,
	        ref: _this.saveTextArea
	      })));
	    };

	    _this.state = {
	      textareaStyles: {},
	      resizeStatus: RESIZE_STATUS.NONE
	    };
	    return _this;
	  }

	  _createClass$1(ResizableTextArea, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.resizeTextarea();
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      // Re-render with the new content then recalculate the height as required.
	      if (prevProps.value !== this.props.value) {
	        this.resizeTextarea();
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      cancelAnimationFrame(this.nextFrameActionId);
	      cancelAnimationFrame(this.resizeFrameId);
	    } // https://github.com/ant-design/ant-design/issues/21870

	  }, {
	    key: "fixFirefoxAutoScroll",
	    value: function fixFirefoxAutoScroll() {
	      try {
	        if (document.activeElement === this.textArea) {
	          var currentStart = this.textArea.selectionStart;
	          var currentEnd = this.textArea.selectionEnd;
	          this.textArea.setSelectionRange(currentStart, currentEnd);
	        }
	      } catch (e) {// Fix error in Chrome:
	        // Failed to read the 'selectionStart' property from 'HTMLInputElement'
	        // http://stackoverflow.com/q/21177489/3040605
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return this.renderTextArea();
	    }
	  }]);

	  return ResizableTextArea;
	}(react.Component);

	function _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$9(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$6(this, result); }; }

	function _isNativeReflectConstruct$9() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	var TextArea = /*#__PURE__*/function (_React$Component) {
	  _inherits$6(TextArea, _React$Component);

	  var _super = _createSuper$8(TextArea);

	  function TextArea(props) {
	    var _this;

	    _classCallCheck$6(this, TextArea);

	    _this = _super.call(this, props);

	    _this.focus = function () {
	      _this.resizableTextArea.textArea.focus();
	    };

	    _this.saveTextArea = function (resizableTextArea) {
	      _this.resizableTextArea = resizableTextArea;
	    };

	    _this.handleChange = function (e) {
	      var onChange = _this.props.onChange;

	      _this.setValue(e.target.value, function () {
	        _this.resizableTextArea.resizeTextarea();
	      });

	      if (onChange) {
	        onChange(e);
	      }
	    };

	    _this.handleKeyDown = function (e) {
	      var _this$props = _this.props,
	          onPressEnter = _this$props.onPressEnter,
	          onKeyDown = _this$props.onKeyDown;

	      if (e.keyCode === 13 && onPressEnter) {
	        onPressEnter(e);
	      }

	      if (onKeyDown) {
	        onKeyDown(e);
	      }
	    };

	    var value = typeof props.value === 'undefined' || props.value === null ? props.defaultValue : props.value;
	    _this.state = {
	      value: value
	    };
	    return _this;
	  }

	  _createClass$1(TextArea, [{
	    key: "setValue",
	    value: function setValue(value, callback) {
	      if (!('value' in this.props)) {
	        this.setState({
	          value: value
	        }, callback);
	      }
	    }
	  }, {
	    key: "blur",
	    value: function blur() {
	      this.resizableTextArea.textArea.blur();
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return react.createElement(ResizableTextArea, Object.assign({}, this.props, {
	        value: this.state.value,
	        onKeyDown: this.handleKeyDown,
	        onChange: this.handleChange,
	        ref: this.saveTextArea
	      }));
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(nextProps) {
	      if ('value' in nextProps) {
	        return {
	          value: nextProps.value
	        };
	      }

	      return null;
	    }
	  }]);

	  return TextArea;
	}(react.Component);

	var TextArea$1 = /*#__PURE__*/function (_React$Component) {
	  inherits(TextArea$1, _React$Component);

	  var _super = createSuper(TextArea$1);

	  function TextArea$1(props) {
	    var _this;

	    classCallCheck(this, TextArea$1);

	    _this = _super.call(this, props);

	    _this.focus = function () {
	      _this.resizableTextArea.textArea.focus();
	    };

	    _this.saveTextArea = function (textarea) {
	      _this.resizableTextArea = textarea === null || textarea === void 0 ? void 0 : textarea.resizableTextArea;
	    };

	    _this.saveClearableInput = function (clearableInput) {
	      _this.clearableInput = clearableInput;
	    };

	    _this.handleChange = function (e) {
	      _this.setValue(e.target.value);

	      resolveOnChange(_this.resizableTextArea.textArea, e, _this.props.onChange);
	    };

	    _this.handleReset = function (e) {
	      _this.setValue('', function () {
	        _this.focus();
	      });

	      resolveOnChange(_this.resizableTextArea.textArea, e, _this.props.onChange);
	    };

	    _this.renderTextArea = function (prefixCls) {
	      return /*#__PURE__*/react.createElement(TextArea, _extends_1({}, omit(_this.props, ['allowClear']), {
	        prefixCls: prefixCls,
	        onChange: _this.handleChange,
	        ref: _this.saveTextArea
	      }));
	    };

	    _this.renderComponent = function (_ref) {
	      var getPrefixCls = _ref.getPrefixCls,
	          direction = _ref.direction;
	      var value = _this.state.value;
	      var customizePrefixCls = _this.props.prefixCls;
	      var prefixCls = getPrefixCls('input', customizePrefixCls);
	      return /*#__PURE__*/react.createElement(ClearableLabeledInput, _extends_1({}, _this.props, {
	        prefixCls: prefixCls,
	        direction: direction,
	        inputType: "text",
	        value: fixControlledValue(value),
	        element: _this.renderTextArea(prefixCls),
	        handleReset: _this.handleReset,
	        ref: _this.saveClearableInput,
	        triggerFocus: _this.focus
	      }));
	    };

	    var value = typeof props.value === 'undefined' ? props.defaultValue : props.value;
	    _this.state = {
	      value: value
	    };
	    return _this;
	  }

	  createClass(TextArea$1, [{
	    key: "setValue",
	    value: function setValue(value, callback) {
	      if (!('value' in this.props)) {
	        this.setState({
	          value: value
	        }, callback);
	      }
	    }
	  }, {
	    key: "blur",
	    value: function blur() {
	      this.resizableTextArea.textArea.blur();
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return /*#__PURE__*/react.createElement(ConfigConsumer, null, this.renderComponent);
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(nextProps) {
	      if ('value' in nextProps) {
	        return {
	          value: nextProps.value
	        };
	      }

	      return null;
	    }
	  }]);

	  return TextArea$1;
	}(react.Component);

	var EyeOutlined_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var EyeOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z" } }] }, "name": "eye", "theme": "outlined" };
	exports.default = EyeOutlined;
	});

	var EyeOutlined_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _EyeOutlined = interopRequireDefault(EyeOutlined_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var EyeOutlined = function EyeOutlined(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _EyeOutlined.default
	  }));
	};

	EyeOutlined.displayName = 'EyeOutlined';

	var _default = React.forwardRef(EyeOutlined);

	exports.default = _default;
	});

	var EyeOutlined = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _EyeOutlined = _interopRequireDefault(EyeOutlined_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _EyeOutlined;
	  exports.default = _default;
	  module.exports = _default;
	});

	var EyeOutlined$1 = /*@__PURE__*/getDefaultExportFromCjs(EyeOutlined);

	var EyeInvisibleOutlined_1 = createCommonjsModule(function (module, exports) {
	// This icon file is generated automatically.
	Object.defineProperty(exports, "__esModule", { value: true });
	var EyeInvisibleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z" } }, { "tag": "path", "attrs": { "d": "M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z" } }] }, "name": "eye-invisible", "theme": "outlined" };
	exports.default = EyeInvisibleOutlined;
	});

	var EyeInvisibleOutlined_1$1 = createCommonjsModule(function (module, exports) {





	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var React = interopRequireWildcard(react);

	var _EyeInvisibleOutlined = interopRequireDefault(EyeInvisibleOutlined_1);

	var _AntdIcon = interopRequireDefault(AntdIcon);

	// GENERATE BY ./scripts/generate.ts
	// DON NOT EDIT IT MANUALLY
	var EyeInvisibleOutlined = function EyeInvisibleOutlined(props, ref) {
	  return React.createElement(_AntdIcon.default, Object.assign({}, props, {
	    ref: ref,
	    icon: _EyeInvisibleOutlined.default
	  }));
	};

	EyeInvisibleOutlined.displayName = 'EyeInvisibleOutlined';

	var _default = React.forwardRef(EyeInvisibleOutlined);

	exports.default = _default;
	});

	var EyeInvisibleOutlined = createCommonjsModule(function (module, exports) {
	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });
	  exports.default = void 0;
	  
	  var _EyeInvisibleOutlined = _interopRequireDefault(EyeInvisibleOutlined_1$1);
	  
	  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	  
	  var _default = _EyeInvisibleOutlined;
	  exports.default = _default;
	  module.exports = _default;
	});

	var EyeInvisibleOutlined$1 = /*@__PURE__*/getDefaultExportFromCjs(EyeInvisibleOutlined);

	var __rest$8 = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};
	var ActionMap = {
	  click: 'onClick',
	  hover: 'onMouseOver'
	};
	var Password = /*#__PURE__*/react.forwardRef(function (props, ref) {
	  var _useState = react.useState(false),
	      _useState2 = slicedToArray(_useState, 2),
	      visible = _useState2[0],
	      setVisible = _useState2[1];

	  var onVisibleChange = function onVisibleChange() {
	    var disabled = props.disabled;

	    if (disabled) {
	      return;
	    }

	    setVisible(!visible);
	  };

	  var getIcon = function getIcon(prefixCls) {
	    var _iconProps;

	    var action = props.action,
	        _props$iconRender = props.iconRender,
	        iconRender = _props$iconRender === void 0 ? function () {
	      return null;
	    } : _props$iconRender;
	    var iconTrigger = ActionMap[action] || '';
	    var icon = iconRender(visible);
	    var iconProps = (_iconProps = {}, defineProperty$3(_iconProps, iconTrigger, onVisibleChange), defineProperty$3(_iconProps, "className", "".concat(prefixCls, "-icon")), defineProperty$3(_iconProps, "key", 'passwordIcon'), defineProperty$3(_iconProps, "onMouseDown", function onMouseDown(e) {
	      // Prevent focused state lost
	      // https://github.com/ant-design/ant-design/issues/15173
	      e.preventDefault();
	    }), defineProperty$3(_iconProps, "onMouseUp", function onMouseUp(e) {
	      // Prevent caret position change
	      // https://github.com/ant-design/ant-design/issues/23524
	      e.preventDefault();
	    }), _iconProps);
	    return /*#__PURE__*/react.cloneElement( /*#__PURE__*/react.isValidElement(icon) ? icon : /*#__PURE__*/react.createElement("span", null, icon), iconProps);
	  };

	  var renderPassword = function renderPassword(_ref) {
	    var getPrefixCls = _ref.getPrefixCls;

	    var className = props.className,
	        customizePrefixCls = props.prefixCls,
	        customizeInputPrefixCls = props.inputPrefixCls,
	        size = props.size,
	        visibilityToggle = props.visibilityToggle,
	        restProps = __rest$8(props, ["className", "prefixCls", "inputPrefixCls", "size", "visibilityToggle"]);

	    var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);
	    var prefixCls = getPrefixCls('input-password', customizePrefixCls);
	    var suffixIcon = visibilityToggle && getIcon(prefixCls);
	    var inputClassName = classnames(prefixCls, className, defineProperty$3({}, "".concat(prefixCls, "-").concat(size), !!size));

	    var omittedProps = _extends_1(_extends_1({}, omit(restProps, ['suffix', 'iconRender'])), {
	      type: visible ? 'text' : 'password',
	      className: inputClassName,
	      prefixCls: inputPrefixCls,
	      suffix: suffixIcon
	    });

	    if (size) {
	      omittedProps.size = size;
	    }

	    return /*#__PURE__*/react.createElement(Input, _extends_1({
	      ref: ref
	    }, omittedProps));
	  };

	  return /*#__PURE__*/react.createElement(ConfigConsumer, null, renderPassword);
	});
	Password.defaultProps = {
	  action: 'click',
	  visibilityToggle: true,
	  iconRender: function iconRender(visible) {
	    return visible ? /*#__PURE__*/react.createElement(EyeOutlined$1, null) : /*#__PURE__*/react.createElement(EyeInvisibleOutlined$1, null);
	  }
	};
	Password.displayName = 'Password';

	Input.Group = Group;
	Input.Search = Search;
	Input.TextArea = TextArea$1;
	Input.Password = Password;

	var __rest$9 = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};

	var Divider$1 = function Divider(props) {
	  return /*#__PURE__*/react.createElement(ConfigConsumer, null, function (_ref) {
	    var _classNames;

	    var getPrefixCls = _ref.getPrefixCls,
	        direction = _ref.direction;

	    var customizePrefixCls = props.prefixCls,
	        _props$type = props.type,
	        type = _props$type === void 0 ? 'horizontal' : _props$type,
	        _props$orientation = props.orientation,
	        orientation = _props$orientation === void 0 ? 'center' : _props$orientation,
	        className = props.className,
	        children = props.children,
	        dashed = props.dashed,
	        plain = props.plain,
	        restProps = __rest$9(props, ["prefixCls", "type", "orientation", "className", "children", "dashed", "plain"]);

	    var prefixCls = getPrefixCls('divider', customizePrefixCls);
	    var orientationPrefix = orientation.length > 0 ? "-".concat(orientation) : orientation;
	    var hasChildren = !!children;
	    var classString = classnames(className, prefixCls, "".concat(prefixCls, "-").concat(type), (_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-with-text"), hasChildren), defineProperty$3(_classNames, "".concat(prefixCls, "-with-text").concat(orientationPrefix), hasChildren), defineProperty$3(_classNames, "".concat(prefixCls, "-dashed"), !!dashed), defineProperty$3(_classNames, "".concat(prefixCls, "-plain"), !!plain), defineProperty$3(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames));
	    return /*#__PURE__*/react.createElement("div", _extends_1({
	      className: classString
	    }, restProps, {
	      role: "separator"
	    }), children && /*#__PURE__*/react.createElement("span", {
	      className: "".concat(prefixCls, "-inner-text")
	    }, children));
	  });
	};

	function _typeof$6(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$6 = function _typeof(obj) { return typeof obj; }; } else { _typeof$6 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$6(obj); }

	function _classCallCheck$b(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$3(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$6(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$3(Constructor.prototype, protoProps); if (staticProps) _defineProperties$3(Constructor, staticProps); return Constructor; }

	function _inherits$b(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$3(subClass, superClass); }

	function _setPrototypeOf$3(o, p) { _setPrototypeOf$3 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$3(o, p); }

	function _createSuper$9(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$a(); return function _createSuperInternal() { var Super = _getPrototypeOf$3(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$3(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$b(this, result); }; }

	function _possibleConstructorReturn$b(self, call) { if (call && (_typeof$6(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$3(self); }

	function _assertThisInitialized$3(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _isNativeReflectConstruct$a() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function _getPrototypeOf$3(o) { _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$3(o); }

	var ContainerRender = /*#__PURE__*/function (_React$Component) {
	  _inherits$b(ContainerRender, _React$Component);

	  var _super = _createSuper$9(ContainerRender);

	  function ContainerRender() {
	    var _this;

	    _classCallCheck$b(this, ContainerRender);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _super.call.apply(_super, [this].concat(args));

	    _this.removeContainer = function () {
	      if (_this.container) {
	        reactDom.unmountComponentAtNode(_this.container);

	        _this.container.parentNode.removeChild(_this.container);

	        _this.container = null;
	      }
	    };

	    _this.renderComponent = function (props, ready) {
	      var _this$props = _this.props,
	          visible = _this$props.visible,
	          getComponent = _this$props.getComponent,
	          forceRender = _this$props.forceRender,
	          getContainer = _this$props.getContainer,
	          parent = _this$props.parent;

	      if (visible || parent._component || forceRender) {
	        if (!_this.container) {
	          _this.container = getContainer();
	        }

	        reactDom.unstable_renderSubtreeIntoContainer(parent, getComponent(props), _this.container, function callback() {
	          if (ready) {
	            ready.call(this);
	          }
	        });
	      }
	    };

	    return _this;
	  }

	  _createClass$6(ContainerRender, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      if (this.props.autoMount) {
	        this.renderComponent();
	      }
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      if (this.props.autoMount) {
	        this.renderComponent();
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      if (this.props.autoDestroy) {
	        this.removeContainer();
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return this.props.children({
	        renderComponent: this.renderComponent,
	        removeContainer: this.removeContainer
	      });
	    }
	  }]);

	  return ContainerRender;
	}(react.Component);

	ContainerRender.defaultProps = {
	  autoMount: true,
	  autoDestroy: true,
	  forceRender: false
	};

	var cached;
	function getScrollBarSize(fresh) {
	  if (typeof document === 'undefined') {
	    return 0;
	  }

	  if (fresh || cached === undefined) {
	    var inner = document.createElement('div');
	    inner.style.width = '100%';
	    inner.style.height = '200px';
	    var outer = document.createElement('div');
	    var outerStyle = outer.style;
	    outerStyle.position = 'absolute';
	    outerStyle.top = 0;
	    outerStyle.left = 0;
	    outerStyle.pointerEvents = 'none';
	    outerStyle.visibility = 'hidden';
	    outerStyle.width = '200px';
	    outerStyle.height = '150px';
	    outerStyle.overflow = 'hidden';
	    outer.appendChild(inner);
	    document.body.appendChild(outer);
	    var widthContained = inner.offsetWidth;
	    outer.style.overflow = 'scroll';
	    var widthScroll = inner.offsetWidth;

	    if (widthContained === widthScroll) {
	      widthScroll = outer.clientWidth;
	    }

	    document.body.removeChild(outer);
	    cached = widthContained - widthScroll;
	  }

	  return cached;
	}

	/**
	 * Easy to set element style, return previous style
	 * IE browser compatible(IE browser doesn't merge overflow style, need to set it separately)
	 * https://github.com/ant-design/ant-design/issues/19393
	 *
	 */
	function setStyle$1(style) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var _options$element = options.element,
	      element = _options$element === void 0 ? document.body : _options$element;
	  var oldStyle = {};
	  var styleKeys = Object.keys(style); // IE browser compatible

	  styleKeys.forEach(function (key) {
	    oldStyle[key] = element.style[key];
	  });
	  styleKeys.forEach(function (key) {
	    element.style[key] = style[key];
	  });
	  return oldStyle;
	}

	function isBodyOverflowing() {
	  return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth;
	}

	var cacheStyle = {};
	var switchScrollingEffect = (function (close) {
	  if (!isBodyOverflowing() && !close) {
	    return;
	  } // https://github.com/ant-design/ant-design/issues/19729


	  var scrollingEffectClassName = 'ant-scrolling-effect';
	  var scrollingEffectClassNameReg = new RegExp("".concat(scrollingEffectClassName), 'g');
	  var bodyClassName = document.body.className;

	  if (close) {
	    if (!scrollingEffectClassNameReg.test(bodyClassName)) return;
	    setStyle$1(cacheStyle);
	    cacheStyle = {};
	    document.body.className = bodyClassName.replace(scrollingEffectClassNameReg, '').trim();
	    return;
	  }

	  var scrollBarSize = getScrollBarSize();

	  if (scrollBarSize) {
	    cacheStyle = setStyle$1({
	      position: 'relative',
	      width: "calc(100% - ".concat(scrollBarSize, "px)")
	    });

	    if (!scrollingEffectClassNameReg.test(bodyClassName)) {
	      var addClassName = "".concat(bodyClassName, " ").concat(scrollingEffectClassName);
	      document.body.className = addClassName.trim();
	    }
	  }
	});

	function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$g(Object(source), true).forEach(function (key) { _defineProperty$8(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$8(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$c(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$4(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$7(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$4(Constructor.prototype, protoProps); if (staticProps) _defineProperties$4(Constructor, staticProps); return Constructor; }

	function _inherits$c(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$4(subClass, superClass); }

	function _setPrototypeOf$4(o, p) { _setPrototypeOf$4 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$4(o, p); }

	function _createSuper$a(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$b(); return function _createSuperInternal() { var Super = _getPrototypeOf$4(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$4(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$c(this, result); }; }

	function _possibleConstructorReturn$c(self, call) { if (call && (_typeof$7(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$4(self); }

	function _assertThisInitialized$4(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _isNativeReflectConstruct$b() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

	function _getPrototypeOf$4(o) { _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$4(o); }

	function _typeof$7(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$7 = function _typeof(obj) { return typeof obj; }; } else { _typeof$7 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$7(obj); }
	var openCount = 0;
	var windowIsUndefined = !(typeof window !== 'undefined' && window.document && window.document.createElement);
	var IS_REACT_16 = ('createPortal' in reactDom); // https://github.com/ant-design/ant-design/issues/19340
	// https://github.com/ant-design/ant-design/issues/19332

	var cacheOverflow = {};

	var getParent$2 = function getParent(getContainer) {
	  if (windowIsUndefined) {
	    return null;
	  }

	  if (getContainer) {
	    if (typeof getContainer === 'string') {
	      return document.querySelectorAll(getContainer)[0];
	    }

	    if (typeof getContainer === 'function') {
	      return getContainer();
	    }

	    if (_typeof$7(getContainer) === 'object' && getContainer instanceof window.HTMLElement) {
	      return getContainer;
	    }
	  }

	  return document.body;
	};

	var PortalWrapper = /*#__PURE__*/function (_React$Component) {
	  _inherits$c(PortalWrapper, _React$Component);

	  var _super = _createSuper$a(PortalWrapper);

	  function PortalWrapper(props) {
	    var _this;

	    _classCallCheck$c(this, PortalWrapper);

	    _this = _super.call(this, props);

	    _this.getContainer = function () {
	      if (windowIsUndefined) {
	        return null;
	      }

	      if (!_this.container) {
	        _this.container = document.createElement('div');
	        var parent = getParent$2(_this.props.getContainer);

	        if (parent) {
	          parent.appendChild(_this.container);
	        }
	      }

	      _this.setWrapperClassName();

	      return _this.container;
	    };

	    _this.setWrapperClassName = function () {
	      var wrapperClassName = _this.props.wrapperClassName;

	      if (_this.container && wrapperClassName && wrapperClassName !== _this.container.className) {
	        _this.container.className = wrapperClassName;
	      }
	    };

	    _this.savePortal = function (c) {
	      // Warning: don't rename _component
	      // https://github.com/react-component/util/pull/65#discussion_r352407916
	      _this._component = c;
	    };

	    _this.removeCurrentContainer = function (visible) {
	      _this.container = null;
	      _this._component = null;

	      if (!IS_REACT_16) {
	        if (visible) {
	          _this.renderComponent({
	            afterClose: _this.removeContainer,
	            onClose: function onClose() {},
	            visible: false
	          });
	        } else {
	          _this.removeContainer();
	        }
	      }
	    };

	    _this.switchScrollingEffect = function () {
	      if (openCount === 1 && !Object.keys(cacheOverflow).length) {
	        switchScrollingEffect(); // Must be set after switchScrollingEffect

	        cacheOverflow = setStyle$1({
	          overflow: 'hidden',
	          overflowX: 'hidden',
	          overflowY: 'hidden'
	        });
	      } else if (!openCount) {
	        setStyle$1(cacheOverflow);
	        cacheOverflow = {};
	        switchScrollingEffect(true);
	      }
	    };

	    var _visible = props.visible,
	        getContainer = props.getContainer;

	    if (!windowIsUndefined && getParent$2(getContainer) === document.body) {
	      openCount = _visible ? openCount + 1 : openCount;
	    }

	    _this.state = {
	      _self: _assertThisInitialized$4(_this)
	    };
	    return _this;
	  }

	  _createClass$7(PortalWrapper, [{
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      this.setWrapperClassName();
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      var _this$props = this.props,
	          visible = _this$props.visible,
	          getContainer = _this$props.getContainer;

	      if (!windowIsUndefined && getParent$2(getContainer) === document.body) {
	        // ç¦»å¼æ¶ä¸ä¼ renderï¼ å¯¼å°ç¦»å¼æ¶æ°å¼ä¸åï¼æ¹ç¨ func ãã
	        openCount = visible && openCount ? openCount - 1 : openCount;
	      }

	      this.removeCurrentContainer(visible);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;

	      var _this$props2 = this.props,
	          children = _this$props2.children,
	          forceRender = _this$props2.forceRender,
	          visible = _this$props2.visible;
	      var portal = null;
	      var childProps = {
	        getOpenCount: function getOpenCount() {
	          return openCount;
	        },
	        getContainer: this.getContainer,
	        switchScrollingEffect: this.switchScrollingEffect
	      }; // suppport react15

	      if (!IS_REACT_16) {
	        return /*#__PURE__*/react.createElement(ContainerRender, {
	          parent: this,
	          visible: visible,
	          autoDestroy: false,
	          getComponent: function getComponent() {
	            var extra = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	            return children(_objectSpread$c(_objectSpread$c(_objectSpread$c({}, extra), childProps), {}, {
	              ref: _this2.savePortal
	            }));
	          },
	          getContainer: this.getContainer,
	          forceRender: forceRender
	        }, function (_ref) {
	          var renderComponent = _ref.renderComponent,
	              removeContainer = _ref.removeContainer;
	          _this2.renderComponent = renderComponent;
	          _this2.removeContainer = removeContainer;
	          return null;
	        });
	      }

	      if (forceRender || visible || this._component) {
	        portal = /*#__PURE__*/react.createElement(Portal, {
	          getContainer: this.getContainer,
	          ref: this.savePortal
	        }, children(childProps));
	      }

	      return portal;
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(props, _ref2) {
	      var prevProps = _ref2.prevProps,
	          _self = _ref2._self;
	      var visible = props.visible,
	          getContainer = props.getContainer;

	      if (prevProps) {
	        var prevVisible = prevProps.visible,
	            prevGetContainer = prevProps.getContainer;

	        if (visible !== prevVisible && !windowIsUndefined && getParent$2(getContainer) === document.body) {
	          openCount = visible && !prevVisible ? openCount + 1 : openCount - 1;
	        }

	        var getContainerIsFunc = typeof getContainer === 'function' && typeof prevGetContainer === 'function';

	        if (getContainerIsFunc ? getContainer.toString() !== prevGetContainer.toString() : getContainer !== prevGetContainer) {
	          _self.removeCurrentContainer(false);
	        }
	      }

	      return {
	        prevProps: props
	      };
	    }
	  }]);

	  return PortalWrapper;
	}(react.Component);

	var FormContext$1 = /*#__PURE__*/react.createContext({
	  labelAlign: 'right',
	  vertical: false,
	  itemRef: function itemRef() {}
	});
	var FormItemContext = /*#__PURE__*/react.createContext({
	  updateItemErrors: function updateItemErrors() {}
	});
	var FormProvider$1 = function FormProvider$1(props) {
	  var providerProps = omit(props, ['prefixCls']);
	  return /*#__PURE__*/react.createElement(FormProvider, providerProps);
	};

	function isElement(el) {
	  return el != null && typeof el === 'object' && el.nodeType === 1;
	}

	function canOverflow(overflow, skipOverflowHiddenElements) {
	  if (skipOverflowHiddenElements && overflow === 'hidden') {
	    return false;
	  }

	  return overflow !== 'visible' && overflow !== 'clip';
	}

	function getFrameElement(el) {
	  if (!el.ownerDocument || !el.ownerDocument.defaultView) {
	    return null;
	  }

	  try {
	    return el.ownerDocument.defaultView.frameElement;
	  } catch (e) {
	    return null;
	  }
	}

	function isHiddenByFrame(el) {
	  var frame = getFrameElement(el);

	  if (!frame) {
	    return false;
	  }

	  return frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth;
	}

	function isScrollable(el, skipOverflowHiddenElements) {
	  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {
	    var style = getComputedStyle(el, null);
	    return canOverflow(style.overflowY, skipOverflowHiddenElements) || canOverflow(style.overflowX, skipOverflowHiddenElements) || isHiddenByFrame(el);
	  }

	  return false;
	}

	function alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {
	  if (elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd || elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd) {
	    return 0;
	  }

	  if (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize || elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize) {
	    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;
	  }

	  if (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize || elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize) {
	    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;
	  }

	  return 0;
	}

	var compute = (function (target, options) {
	  var scrollMode = options.scrollMode,
	      block = options.block,
	      inline = options.inline,
	      boundary = options.boundary,
	      skipOverflowHiddenElements = options.skipOverflowHiddenElements;
	  var checkBoundary = typeof boundary === 'function' ? boundary : function (node) {
	    return node !== boundary;
	  };

	  if (!isElement(target)) {
	    throw new TypeError('Invalid target');
	  }

	  var scrollingElement = document.scrollingElement || document.documentElement;
	  var frames = [];
	  var cursor = target;

	  while (isElement(cursor) && checkBoundary(cursor)) {
	    cursor = cursor.parentNode;

	    if (cursor === scrollingElement) {
	      frames.push(cursor);
	      break;
	    }

	    if (cursor === document.body && isScrollable(cursor) && !isScrollable(document.documentElement)) {
	      continue;
	    }

	    if (isScrollable(cursor, skipOverflowHiddenElements)) {
	      frames.push(cursor);
	    }
	  }

	  var viewportWidth = window.visualViewport ? visualViewport.width : innerWidth;
	  var viewportHeight = window.visualViewport ? visualViewport.height : innerHeight;
	  var viewportX = window.scrollX || pageXOffset;
	  var viewportY = window.scrollY || pageYOffset;

	  var _target$getBoundingCl = target.getBoundingClientRect(),
	      targetHeight = _target$getBoundingCl.height,
	      targetWidth = _target$getBoundingCl.width,
	      targetTop = _target$getBoundingCl.top,
	      targetRight = _target$getBoundingCl.right,
	      targetBottom = _target$getBoundingCl.bottom,
	      targetLeft = _target$getBoundingCl.left;

	  var targetBlock = block === 'start' || block === 'nearest' ? targetTop : block === 'end' ? targetBottom : targetTop + targetHeight / 2;
	  var targetInline = inline === 'center' ? targetLeft + targetWidth / 2 : inline === 'end' ? targetRight : targetLeft;
	  var computations = [];

	  for (var index = 0; index < frames.length; index++) {
	    var frame = frames[index];

	    var _frame$getBoundingCli = frame.getBoundingClientRect(),
	        height = _frame$getBoundingCli.height,
	        width = _frame$getBoundingCli.width,
	        top = _frame$getBoundingCli.top,
	        right = _frame$getBoundingCli.right,
	        bottom = _frame$getBoundingCli.bottom,
	        left = _frame$getBoundingCli.left;

	    if (scrollMode === 'if-needed' && targetTop >= 0 && targetLeft >= 0 && targetBottom <= viewportHeight && targetRight <= viewportWidth && targetTop >= top && targetBottom <= bottom && targetLeft >= left && targetRight <= right) {
	      return computations;
	    }

	    var frameStyle = getComputedStyle(frame);
	    var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);
	    var borderTop = parseInt(frameStyle.borderTopWidth, 10);
	    var borderRight = parseInt(frameStyle.borderRightWidth, 10);
	    var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);
	    var blockScroll = 0;
	    var inlineScroll = 0;
	    var scrollbarWidth = 'offsetWidth' in frame ? frame.offsetWidth - frame.clientWidth - borderLeft - borderRight : 0;
	    var scrollbarHeight = 'offsetHeight' in frame ? frame.offsetHeight - frame.clientHeight - borderTop - borderBottom : 0;

	    if (scrollingElement === frame) {
	      if (block === 'start') {
	        blockScroll = targetBlock;
	      } else if (block === 'end') {
	        blockScroll = targetBlock - viewportHeight;
	      } else if (block === 'nearest') {
	        blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);
	      } else {
	        blockScroll = targetBlock - viewportHeight / 2;
	      }

	      if (inline === 'start') {
	        inlineScroll = targetInline;
	      } else if (inline === 'center') {
	        inlineScroll = targetInline - viewportWidth / 2;
	      } else if (inline === 'end') {
	        inlineScroll = targetInline - viewportWidth;
	      } else {
	        inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);
	      }

	      blockScroll = Math.max(0, blockScroll + viewportY);
	      inlineScroll = Math.max(0, inlineScroll + viewportX);
	    } else {
	      if (block === 'start') {
	        blockScroll = targetBlock - top - borderTop;
	      } else if (block === 'end') {
	        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;
	      } else if (block === 'nearest') {
	        blockScroll = alignNearest(top, bottom, height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);
	      } else {
	        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2;
	      }

	      if (inline === 'start') {
	        inlineScroll = targetInline - left - borderLeft;
	      } else if (inline === 'center') {
	        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2;
	      } else if (inline === 'end') {
	        inlineScroll = targetInline - right + borderRight + scrollbarWidth;
	      } else {
	        inlineScroll = alignNearest(left, right, width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);
	      }

	      var scrollLeft = frame.scrollLeft,
	          scrollTop = frame.scrollTop;
	      blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, frame.scrollHeight - height + scrollbarHeight));
	      inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, frame.scrollWidth - width + scrollbarWidth));
	      targetBlock += scrollTop - blockScroll;
	      targetInline += scrollLeft - inlineScroll;
	    }

	    computations.push({
	      el: frame,
	      top: blockScroll,
	      left: inlineScroll
	    });
	  }

	  return computations;
	});

	function isOptionsObject(options) {
	  return options === Object(options) && Object.keys(options).length !== 0;
	}

	function defaultBehavior(actions, behavior) {
	  if (behavior === void 0) {
	    behavior = 'auto';
	  }

	  var canSmoothScroll = ('scrollBehavior' in document.body.style);
	  actions.forEach(function (_ref) {
	    var el = _ref.el,
	        top = _ref.top,
	        left = _ref.left;

	    if (el.scroll && canSmoothScroll) {
	      el.scroll({
	        top: top,
	        left: left,
	        behavior: behavior
	      });
	    } else {
	      el.scrollTop = top;
	      el.scrollLeft = left;
	    }
	  });
	}

	function getOptions(options) {
	  if (options === false) {
	    return {
	      block: 'end',
	      inline: 'nearest'
	    };
	  }

	  if (isOptionsObject(options)) {
	    return options;
	  }

	  return {
	    block: 'start',
	    inline: 'nearest'
	  };
	}

	function scrollIntoView(target, options) {
	  var targetIsDetached = !target.ownerDocument.documentElement.contains(target);

	  if (isOptionsObject(options) && typeof options.behavior === 'function') {
	    return options.behavior(targetIsDetached ? [] : compute(target, options));
	  }

	  if (targetIsDetached) {
	    return;
	  }

	  var computeOptions = getOptions(options);
	  return defaultBehavior(compute(target, computeOptions), computeOptions.behavior);
	}

	function toArray$2(candidate) {
	  if (candidate === undefined || candidate === false) return [];
	  return Array.isArray(candidate) ? candidate : [candidate];
	}
	function getFieldId(namePath, formName) {
	  if (!namePath.length) return undefined;
	  var mergedId = namePath.join('_');
	  return formName ? "".concat(formName, "_").concat(mergedId) : mergedId;
	}

	function toNamePathStr(name) {
	  var namePath = toArray$2(name);
	  return namePath.join('_');
	}

	function useForm$1(form) {
	  var _useRcForm = useForm(),
	      _useRcForm2 = slicedToArray(_useRcForm, 1),
	      rcForm = _useRcForm2[0];

	  var itemsRef = react.useRef({});
	  var wrapForm = react.useMemo(function () {
	    return form || _extends_1(_extends_1({}, rcForm), {
	      __INTERNAL__: {
	        itemRef: function itemRef(name) {
	          return function (node) {
	            var namePathStr = toNamePathStr(name);

	            if (node) {
	              itemsRef.current[namePathStr] = node;
	            } else {
	              delete itemsRef.current[namePathStr];
	            }
	          };
	        }
	      },
	      scrollToField: function scrollToField(name) {
	        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	        var namePath = toArray$2(name);
	        var fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);
	        var node = fieldId ? document.getElementById(fieldId) : null;

	        if (node) {
	          scrollIntoView(node, _extends_1({
	            scrollMode: 'if-needed',
	            block: 'nearest'
	          }, options));
	        }
	      },
	      getFieldInstance: function getFieldInstance(name) {
	        var namePathStr = toNamePathStr(name);
	        return itemsRef.current[namePathStr];
	      }
	    });
	  }, [form, rcForm]);
	  return [wrapForm];
	}

	var __rest$a = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};

	var InternalForm$1 = function InternalForm(props, ref) {
	  var _classNames;

	  var contextSize = react.useContext(SizeContext);

	  var _React$useContext = react.useContext(ConfigContext),
	      getPrefixCls = _React$useContext.getPrefixCls,
	      direction = _React$useContext.direction;

	  var name = props.name;

	  var customizePrefixCls = props.prefixCls,
	      _props$className = props.className,
	      className = _props$className === void 0 ? '' : _props$className,
	      _props$size = props.size,
	      size = _props$size === void 0 ? contextSize : _props$size,
	      form = props.form,
	      colon = props.colon,
	      labelAlign = props.labelAlign,
	      labelCol = props.labelCol,
	      wrapperCol = props.wrapperCol,
	      hideRequiredMark = props.hideRequiredMark,
	      _props$layout = props.layout,
	      layout = _props$layout === void 0 ? 'horizontal' : _props$layout,
	      scrollToFirstError = props.scrollToFirstError,
	      onFinishFailed = props.onFinishFailed,
	      restFormProps = __rest$a(props, ["prefixCls", "className", "size", "form", "colon", "labelAlign", "labelCol", "wrapperCol", "hideRequiredMark", "layout", "scrollToFirstError", "onFinishFailed"]);

	  var prefixCls = getPrefixCls('form', customizePrefixCls);
	  var formClassName = classnames(prefixCls, (_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-").concat(layout), true), defineProperty$3(_classNames, "".concat(prefixCls, "-hide-required-mark"), hideRequiredMark), defineProperty$3(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), defineProperty$3(_classNames, "".concat(prefixCls, "-").concat(size), size), _classNames), className);

	  var _useForm = useForm$1(form),
	      _useForm2 = slicedToArray(_useForm, 1),
	      wrapForm = _useForm2[0];

	  var __INTERNAL__ = wrapForm.__INTERNAL__;
	  __INTERNAL__.name = name;
	  var formContextValue = react.useMemo(function () {
	    return {
	      name: name,
	      labelAlign: labelAlign,
	      labelCol: labelCol,
	      wrapperCol: wrapperCol,
	      vertical: layout === 'vertical',
	      colon: colon,
	      itemRef: __INTERNAL__.itemRef
	    };
	  }, [name, labelAlign, labelCol, wrapperCol, layout, colon]);
	  react.useImperativeHandle(ref, function () {
	    return wrapForm;
	  });

	  var onInternalFinishFailed = function onInternalFinishFailed(errorInfo) {
	    if (onFinishFailed) {
	      onFinishFailed(errorInfo);
	    }

	    if (scrollToFirstError && errorInfo.errorFields.length) {
	      wrapForm.scrollToField(errorInfo.errorFields[0].name);
	    }
	  };

	  return /*#__PURE__*/react.createElement(SizeContextProvider, {
	    size: size
	  }, /*#__PURE__*/react.createElement(FormContext$1.Provider, {
	    value: formContextValue
	  }, /*#__PURE__*/react.createElement(RefForm, _extends_1({
	    id: name
	  }, restFormProps, {
	    onFinishFailed: onInternalFinishFailed,
	    form: wrapForm,
	    className: formClassName
	  }))));
	};

	var Form$1 = /*#__PURE__*/react.forwardRef(InternalForm$1);

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	var _listCacheClear = listCacheClear;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	var eq_1 = eq;

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq_1(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	var _assocIndexOf = assocIndexOf;

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	var _listCacheDelete = listCacheDelete;

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	var _listCacheGet = listCacheGet;

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return _assocIndexOf(this.__data__, key) > -1;
	}

	var _listCacheHas = listCacheHas;

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	var _listCacheSet = listCacheSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = _listCacheClear;
	ListCache.prototype['delete'] = _listCacheDelete;
	ListCache.prototype.get = _listCacheGet;
	ListCache.prototype.has = _listCacheHas;
	ListCache.prototype.set = _listCacheSet;

	var _ListCache = ListCache;

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new _ListCache;
	  this.size = 0;
	}

	var _stackClear = stackClear;

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	var _stackDelete = stackDelete;

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	var _stackGet = stackGet;

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	var _stackHas = stackHas;

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject_1(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = _baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	var isFunction_1 = isFunction;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = _root['__core-js_shared__'];

	var _coreJsData = coreJsData;

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	var _isMasked = isMasked;

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	var _toSource = toSource;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto$1 = Function.prototype,
	    objectProto$2 = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$1 = funcProto$1.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$4 = objectProto$2.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString$1.call(hasOwnProperty$4).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject_1(value) || _isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(_toSource(value));
	}

	var _baseIsNative = baseIsNative;

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue$1(object, key) {
	  return object == null ? undefined : object[key];
	}

	var _getValue = getValue$1;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = _getValue(object, key);
	  return _baseIsNative(value) ? value : undefined;
	}

	var _getNative = getNative;

	/* Built-in method references that are verified to be native. */
	var Map$1 = _getNative(_root, 'Map');

	var _Map = Map$1;

	/* Built-in method references that are verified to be native. */
	var nativeCreate = _getNative(Object, 'create');

	var _nativeCreate = nativeCreate;

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
	  this.size = 0;
	}

	var _hashClear = hashClear;

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _hashDelete = hashDelete;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto$3 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$5 = objectProto$3.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (_nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty$5.call(data, key) ? data[key] : undefined;
	}

	var _hashGet = hashGet;

	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$6 = objectProto$4.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$6.call(data, key);
	}

	var _hashHas = hashHas;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
	  return this;
	}

	var _hashSet = hashSet;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = _hashClear;
	Hash.prototype['delete'] = _hashDelete;
	Hash.prototype.get = _hashGet;
	Hash.prototype.has = _hashHas;
	Hash.prototype.set = _hashSet;

	var _Hash = Hash;

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new _Hash,
	    'map': new (_Map || _ListCache),
	    'string': new _Hash
	  };
	}

	var _mapCacheClear = mapCacheClear;

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	var _isKeyable = isKeyable;

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return _isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	var _getMapData = getMapData;

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = _getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _mapCacheDelete = mapCacheDelete;

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return _getMapData(this, key).get(key);
	}

	var _mapCacheGet = mapCacheGet;

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return _getMapData(this, key).has(key);
	}

	var _mapCacheHas = mapCacheHas;

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = _getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	var _mapCacheSet = mapCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = _mapCacheClear;
	MapCache.prototype['delete'] = _mapCacheDelete;
	MapCache.prototype.get = _mapCacheGet;
	MapCache.prototype.has = _mapCacheHas;
	MapCache.prototype.set = _mapCacheSet;

	var _MapCache = MapCache;

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof _ListCache) {
	    var pairs = data.__data__;
	    if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new _MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	var _stackSet = stackSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new _ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = _stackClear;
	Stack.prototype['delete'] = _stackDelete;
	Stack.prototype.get = _stackGet;
	Stack.prototype.has = _stackHas;
	Stack.prototype.set = _stackSet;

	var _Stack = Stack;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED$2);
	  return this;
	}

	var _setCacheAdd = setCacheAdd;

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	var _setCacheHas = setCacheHas;

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new _MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
	SetCache.prototype.has = _setCacheHas;

	var _SetCache = SetCache;

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	var _arraySome = arraySome;

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	var _cacheHas = cacheHas;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Check that cyclic values are equal.
	  var arrStacked = stack.get(array);
	  var othStacked = stack.get(other);
	  if (arrStacked && othStacked) {
	    return arrStacked == other && othStacked == array;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!_arraySome(other, function(othValue, othIndex) {
	            if (!_cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	var _equalArrays = equalArrays;

	/** Built-in value references. */
	var Uint8Array = _root.Uint8Array;

	var _Uint8Array = Uint8Array;

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	var _mapToArray = mapToArray;

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	var _setToArray = setToArray;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$1 = 1,
	    COMPARE_UNORDERED_FLAG$1 = 2;

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq_1(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = _mapToArray;

	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
	      convert || (convert = _setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG$1;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	var _equalByTag = equalByTag;

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	var _arrayPush = arrayPush;

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
	}

	var _baseGetAllKeys = baseGetAllKeys;

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	var _arrayFilter = arrayFilter;

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	var stubArray_1 = stubArray;

	/** Used for built-in method references. */
	var objectProto$5 = Object.prototype;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return _arrayFilter(nativeGetSymbols(object), function(symbol) {
	    return propertyIsEnumerable.call(object, symbol);
	  });
	};

	var _getSymbols = getSymbols;

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	var _baseTimes = baseTimes;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
	}

	var _baseIsArguments = baseIsArguments;

	/** Used for built-in method references. */
	var objectProto$6 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$7 = objectProto$6.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
	  return isObjectLike_1(value) && hasOwnProperty$7.call(value, 'callee') &&
	    !propertyIsEnumerable$1.call(value, 'callee');
	};

	var isArguments_1 = isArguments;

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	var stubFalse_1 = stubFalse;

	var isBuffer_1 = createCommonjsModule(function (module, exports) {
	/** Detect free variable `exports`. */
	var freeExports =  exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? _root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse_1;

	module.exports = isBuffer;
	});

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	var _isIndex = isIndex;

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER$1 = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
	}

	var isLength_1 = isLength;

	/** `Object#toString` result references. */
	var argsTag$1 = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag$1 = '[object Boolean]',
	    dateTag$1 = '[object Date]',
	    errorTag$1 = '[object Error]',
	    funcTag$1 = '[object Function]',
	    mapTag$1 = '[object Map]',
	    numberTag$1 = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag$1 = '[object RegExp]',
	    setTag$1 = '[object Set]',
	    stringTag$1 = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag$1 = '[object ArrayBuffer]',
	    dataViewTag$1 = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag$1] = typedArrayTags[boolTag$1] =
	typedArrayTags[dataViewTag$1] = typedArrayTags[dateTag$1] =
	typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] =
	typedArrayTags[mapTag$1] = typedArrayTags[numberTag$1] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag$1] =
	typedArrayTags[setTag$1] = typedArrayTags[stringTag$1] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike_1(value) &&
	    isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
	}

	var _baseIsTypedArray = baseIsTypedArray;

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	var _baseUnary = baseUnary;

	var _nodeUtil = createCommonjsModule(function (module, exports) {
	/** Detect free variable `exports`. */
	var freeExports =  exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && _freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    // Use `util.types` for Node.js 10+.
	    var types = freeModule && freeModule.require && freeModule.require('util').types;

	    if (types) {
	      return types;
	    }

	    // Legacy `process.binding('util')` for Node.js < 10.
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;
	});

	/* Node.js helper references. */
	var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

	var isTypedArray_1 = isTypedArray;

	/** Used for built-in method references. */
	var objectProto$7 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$8 = objectProto$7.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray_1(value),
	      isArg = !isArr && isArguments_1(value),
	      isBuff = !isArr && !isArg && isBuffer_1(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? _baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty$8.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           _isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _arrayLikeKeys = arrayLikeKeys;

	/** Used for built-in method references. */
	var objectProto$8 = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$8;

	  return value === proto;
	}

	var _isPrototype = isPrototype;

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	var _overArg = overArg;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = _overArg(Object.keys, Object);

	var _nativeKeys = nativeKeys;

	/** Used for built-in method references. */
	var objectProto$9 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$9 = objectProto$9.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!_isPrototype(object)) {
	    return _nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty$9.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _baseKeys = baseKeys;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength_1(value.length) && !isFunction_1(value);
	}

	var isArrayLike_1 = isArrayLike;

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys$2(object) {
	  return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
	}

	var keys_1 = keys$2;

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return _baseGetAllKeys(object, keys_1, _getSymbols);
	}

	var _getAllKeys = getAllKeys;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$2 = 1;

	/** Used for built-in method references. */
	var objectProto$a = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$a = objectProto$a.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
	      objProps = _getAllKeys(object),
	      objLength = objProps.length,
	      othProps = _getAllKeys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty$a.call(other, key))) {
	      return false;
	    }
	  }
	  // Check that cyclic values are equal.
	  var objStacked = stack.get(object);
	  var othStacked = stack.get(other);
	  if (objStacked && othStacked) {
	    return objStacked == other && othStacked == object;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	var _equalObjects = equalObjects;

	/* Built-in method references that are verified to be native. */
	var DataView = _getNative(_root, 'DataView');

	var _DataView = DataView;

	/* Built-in method references that are verified to be native. */
	var Promise$2 = _getNative(_root, 'Promise');

	var _Promise = Promise$2;

	/* Built-in method references that are verified to be native. */
	var Set$1 = _getNative(_root, 'Set');

	var _Set = Set$1;

	/* Built-in method references that are verified to be native. */
	var WeakMap$1 = _getNative(_root, 'WeakMap');

	var _WeakMap = WeakMap$1;

	/** `Object#toString` result references. */
	var mapTag$2 = '[object Map]',
	    objectTag$1 = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag$2 = '[object Set]',
	    weakMapTag$1 = '[object WeakMap]';

	var dataViewTag$2 = '[object DataView]';

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = _toSource(_DataView),
	    mapCtorString = _toSource(_Map),
	    promiseCtorString = _toSource(_Promise),
	    setCtorString = _toSource(_Set),
	    weakMapCtorString = _toSource(_WeakMap);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = _baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
	    (_Map && getTag(new _Map) != mapTag$2) ||
	    (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
	    (_Set && getTag(new _Set) != setTag$2) ||
	    (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
	  getTag = function(value) {
	    var result = _baseGetTag(value),
	        Ctor = result == objectTag$1 ? value.constructor : undefined,
	        ctorString = Ctor ? _toSource(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag$2;
	        case mapCtorString: return mapTag$2;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag$2;
	        case weakMapCtorString: return weakMapTag$1;
	      }
	    }
	    return result;
	  };
	}

	var _getTag = getTag;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$3 = 1;

	/** `Object#toString` result references. */
	var argsTag$2 = '[object Arguments]',
	    arrayTag$1 = '[object Array]',
	    objectTag$2 = '[object Object]';

	/** Used for built-in method references. */
	var objectProto$b = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$b = objectProto$b.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray_1(object),
	      othIsArr = isArray_1(other),
	      objTag = objIsArr ? arrayTag$1 : _getTag(object),
	      othTag = othIsArr ? arrayTag$1 : _getTag(other);

	  objTag = objTag == argsTag$2 ? objectTag$2 : objTag;
	  othTag = othTag == argsTag$2 ? objectTag$2 : othTag;

	  var objIsObj = objTag == objectTag$2,
	      othIsObj = othTag == objectTag$2,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer_1(object)) {
	    if (!isBuffer_1(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new _Stack);
	    return (objIsArr || isTypedArray_1(object))
	      ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
	    var objIsWrapped = objIsObj && hasOwnProperty$b.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty$b.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new _Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new _Stack);
	  return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	var _baseIsEqualDeep = baseIsEqualDeep;

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
	    return value !== value && other !== other;
	  }
	  return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}

	var _baseIsEqual = baseIsEqual;

	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent.
	 *
	 * **Note:** This method supports comparing arrays, array buffers, booleans,
	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
	 * by their own, not inherited, enumerable properties. Functions and DOM
	 * nodes are compared by strict equality, i.e. `===`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * object === other;
	 * // => false
	 */
	function isEqual(value, other) {
	  return _baseIsEqual(value, other);
	}

	var isEqual_1 = isEqual;

	var FormItemLabel = function FormItemLabel(_ref) {
	  var prefixCls = _ref.prefixCls,
	      label = _ref.label,
	      htmlFor = _ref.htmlFor,
	      labelCol = _ref.labelCol,
	      labelAlign = _ref.labelAlign,
	      colon = _ref.colon,
	      required = _ref.required;
	  if (!label) return null;
	  return /*#__PURE__*/react.createElement(FormContext$1.Consumer, {
	    key: "label"
	  }, function (_ref2) {
	    var _classNames;

	    var vertical = _ref2.vertical,
	        contextLabelAlign = _ref2.labelAlign,
	        contextLabelCol = _ref2.labelCol,
	        contextColon = _ref2.colon;
	    var mergedLabelCol = labelCol || contextLabelCol || {};
	    var mergedLabelAlign = labelAlign || contextLabelAlign;
	    var labelClsBasic = "".concat(prefixCls, "-item-label");
	    var labelColClassName = classnames(labelClsBasic, mergedLabelAlign === 'left' && "".concat(labelClsBasic, "-left"), mergedLabelCol.className);
	    var labelChildren = label; // Keep label is original where there should have no colon

	    var computedColon = colon === true || contextColon !== false && colon !== false;
	    var haveColon = computedColon && !vertical; // Remove duplicated user input colon

	    if (haveColon && typeof label === 'string' && label.trim() !== '') {
	      labelChildren = label.replace(/[:|ï¼]\s*$/, '');
	    }

	    var labelClassName = classnames((_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-item-required"), required), defineProperty$3(_classNames, "".concat(prefixCls, "-item-no-colon"), !computedColon), _classNames));
	    return /*#__PURE__*/react.createElement(Col, _extends_1({}, mergedLabelCol, {
	      className: labelColClassName
	    }), /*#__PURE__*/react.createElement("label", {
	      htmlFor: htmlFor,
	      className: labelClassName,
	      title: typeof label === 'string' ? label : ''
	    }, labelChildren));
	  });
	};

	/**
	 * Always debounce error to avoid [error -> null -> error] blink
	 */

	function useCacheErrors(errors, changeTrigger, directly) {
	  var cacheRef = react.useRef({
	    errors: errors,
	    visible: !!errors.length
	  });

	  var _React$useState = react.useState({}),
	      _React$useState2 = slicedToArray(_React$useState, 2),
	      forceUpdate = _React$useState2[1];

	  var update = function update() {
	    var prevVisible = cacheRef.current.visible;
	    var newVisible = !!errors.length;
	    var prevErrors = cacheRef.current.errors;
	    cacheRef.current.errors = errors;
	    cacheRef.current.visible = newVisible;

	    if (prevVisible !== newVisible) {
	      changeTrigger(newVisible);
	    } else if (prevErrors.length !== errors.length || prevErrors.some(function (prevErr, index) {
	      return prevErr !== errors[index];
	    })) {
	      forceUpdate({});
	    }
	  };

	  react.useEffect(function () {
	    if (!directly) {
	      var timeout = setTimeout(update, 10);
	      return function () {
	        return clearTimeout(timeout);
	      };
	    }
	  }, [errors]);

	  if (directly) {
	    update();
	  }

	  return [cacheRef.current.visible, cacheRef.current.errors];
	}

	var iconMap$1 = {
	  success: CheckCircleFilled$1,
	  warning: ExclamationCircleFilled$1,
	  error: CloseCircleFilled$1,
	  validating: LoadingOutlined$1
	};

	var FormItemInput = function FormItemInput(_ref) {
	  var prefixCls = _ref.prefixCls,
	      wrapperCol = _ref.wrapperCol,
	      children = _ref.children,
	      help = _ref.help,
	      errors = _ref.errors,
	      onDomErrorVisibleChange = _ref.onDomErrorVisibleChange,
	      hasFeedback = _ref.hasFeedback,
	      validateStatus = _ref.validateStatus,
	      extra = _ref.extra;

	  var _React$useState = react.useState({}),
	      _React$useState2 = slicedToArray(_React$useState, 2),
	      forceUpdate = _React$useState2[1];

	  var baseClassName = "".concat(prefixCls, "-item");
	  var formContext = react.useContext(FormContext$1);
	  var mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};
	  var className = classnames("".concat(baseClassName, "-control"), mergedWrapperCol.className);

	  var _useCacheErrors = useCacheErrors(errors, function (changedVisible) {
	    if (changedVisible) {
	      /**
	       * We trigger in sync to avoid dom shaking but this get warning in react 16.13.
	       * So use Promise to keep in micro async to handle this.
	       * https://github.com/ant-design/ant-design/issues/21698#issuecomment-593743485
	       */
	      Promise.resolve().then(function () {
	        onDomErrorVisibleChange(true);
	      });
	    }

	    forceUpdate({});
	  }, !!help),
	      _useCacheErrors2 = slicedToArray(_useCacheErrors, 2),
	      visible = _useCacheErrors2[0],
	      cacheErrors = _useCacheErrors2[1];

	  react.useEffect(function () {
	    return function () {
	      onDomErrorVisibleChange(false);
	    };
	  }, []);
	  var memoErrors = useMemo(function () {
	    return cacheErrors;
	  }, visible, function (_, nextVisible) {
	    return nextVisible;
	  }); // Should provides additional icon if `hasFeedback`

	  var IconNode = validateStatus && iconMap$1[validateStatus];
	  var icon = hasFeedback && IconNode ? /*#__PURE__*/react.createElement("span", {
	    className: "".concat(baseClassName, "-children-icon")
	  }, /*#__PURE__*/react.createElement(IconNode, null)) : null; // Pass to sub FormItem should not with col info

	  var subFormContext = _extends_1({}, formContext);

	  delete subFormContext.labelCol;
	  delete subFormContext.wrapperCol;
	  return /*#__PURE__*/react.createElement(FormContext$1.Provider, {
	    value: subFormContext
	  }, /*#__PURE__*/react.createElement(Col, _extends_1({}, mergedWrapperCol, {
	    className: className
	  }), /*#__PURE__*/react.createElement("div", {
	    className: "".concat(baseClassName, "-control-input")
	  }, /*#__PURE__*/react.createElement("div", {
	    className: "".concat(baseClassName, "-control-input-content")
	  }, children), icon), /*#__PURE__*/react.createElement(CSSMotion$1, {
	    motionDeadline: 500,
	    visible: visible,
	    motionName: "show-help",
	    onLeaveEnd: function onLeaveEnd() {
	      onDomErrorVisibleChange(false);
	    },
	    motionAppear: true,
	    removeOnLeave: true
	  }, function (_ref2) {
	    var motionClassName = _ref2.className;
	    return /*#__PURE__*/react.createElement("div", {
	      className: classnames("".concat(baseClassName, "-explain"), motionClassName),
	      key: "help"
	    }, memoErrors.map(function (error, index) {
	      return (
	        /*#__PURE__*/
	        // eslint-disable-next-line react/no-array-index-key
	        react.createElement("div", {
	          key: index
	        }, error)
	      );
	    }));
	  }), extra && /*#__PURE__*/react.createElement("div", {
	    className: "".concat(baseClassName, "-extra")
	  }, extra)));
	};

	function useFrameState(defaultValue) {
	  var _React$useState = react.useState(defaultValue),
	      _React$useState2 = slicedToArray(_React$useState, 2),
	      value = _React$useState2[0],
	      setValue = _React$useState2[1];

	  var frameRef = react.useRef(null);
	  var batchRef = react.useRef([]);
	  var destroyRef = react.useRef(false);
	  react.useEffect(function () {
	    return function () {
	      destroyRef.current = true;
	      raf_1.cancel(frameRef.current);
	    };
	  }, []);

	  function setFrameValue(updater) {
	    if (destroyRef.current) {
	      return;
	    }

	    if (frameRef.current === null) {
	      batchRef.current = [];
	      frameRef.current = raf_1(function () {
	        frameRef.current = null;
	        setValue(function (prevValue) {
	          var current = prevValue;
	          batchRef.current.forEach(function (func) {
	            current = func(current);
	          });
	          return current;
	        });
	      });
	    }

	    batchRef.current.push(updater);
	  }

	  return [value, setFrameValue];
	}

	function useItemRef() {
	  var _React$useContext = react.useContext(FormContext$1),
	      itemRef = _React$useContext.itemRef;

	  var cacheRef = react.useRef({});

	  function getRef(name, children) {
	    var childrenRef = children && _typeof_1(children) === 'object' && children.ref;
	    var nameStr = name.join('_');

	    if (cacheRef.current.name !== nameStr || cacheRef.current.originRef !== childrenRef) {
	      cacheRef.current.name = nameStr;
	      cacheRef.current.originRef = childrenRef;
	      cacheRef.current.ref = composeRef(itemRef(name), childrenRef);
	    }

	    return cacheRef.current.ref;
	  }

	  return getRef;
	}

	var __rest$b = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};
	var ValidateStatuses = tuple('success', 'warning', 'error', 'validating', '');
	var MemoInput = /*#__PURE__*/react.memo(function (_ref) {
	  var children = _ref.children;
	  return children;
	}, function (prev, next) {
	  return prev.value === next.value && prev.update === next.update;
	});

	function hasValidName(name) {
	  if (name === null) {
	    devWarning(false, 'Form.Item', '`null` is passed as `name` property');
	  }

	  return !(name === undefined || name === null);
	}

	function FormItem(props) {
	  var name = props.name,
	      fieldKey = props.fieldKey,
	      noStyle = props.noStyle,
	      dependencies = props.dependencies,
	      customizePrefixCls = props.prefixCls,
	      style = props.style,
	      className = props.className,
	      shouldUpdate = props.shouldUpdate,
	      hasFeedback = props.hasFeedback,
	      help = props.help,
	      rules = props.rules,
	      validateStatus = props.validateStatus,
	      children = props.children,
	      required = props.required,
	      label = props.label,
	      _props$trigger = props.trigger,
	      trigger = _props$trigger === void 0 ? 'onChange' : _props$trigger,
	      validateTrigger = props.validateTrigger,
	      hidden = props.hidden,
	      restProps = __rest$b(props, ["name", "fieldKey", "noStyle", "dependencies", "prefixCls", "style", "className", "shouldUpdate", "hasFeedback", "help", "rules", "validateStatus", "children", "required", "label", "trigger", "validateTrigger", "hidden"]);

	  var destroyRef = react.useRef(false);

	  var _React$useContext = react.useContext(ConfigContext),
	      getPrefixCls = _React$useContext.getPrefixCls;

	  var _React$useContext2 = react.useContext(FormContext$1),
	      formName = _React$useContext2.name;

	  var _React$useContext3 = react.useContext(FormItemContext),
	      updateItemErrors = _React$useContext3.updateItemErrors;

	  var _React$useState = react.useState(!!help),
	      _React$useState2 = slicedToArray(_React$useState, 2),
	      domErrorVisible = _React$useState2[0],
	      innerSetDomErrorVisible = _React$useState2[1];

	  var prevValidateStatusRef = react.useRef(validateStatus);

	  var _useFrameState = useFrameState({}),
	      _useFrameState2 = slicedToArray(_useFrameState, 2),
	      inlineErrors = _useFrameState2[0],
	      setInlineErrors = _useFrameState2[1];

	  var _React$useContext4 = react.useContext(Context),
	      contextValidateTrigger = _React$useContext4.validateTrigger;

	  var mergedValidateTrigger = validateTrigger !== undefined ? validateTrigger : contextValidateTrigger;

	  function setDomErrorVisible(visible) {
	    if (!destroyRef.current) {
	      innerSetDomErrorVisible(visible);
	    }
	  }

	  var hasName = hasValidName(name); // Cache Field NamePath

	  var nameRef = react.useRef([]); // Should clean up if Field removed

	  react.useEffect(function () {
	    return function () {
	      destroyRef.current = true;
	      updateItemErrors(nameRef.current.join('__SPLIT__'), []);
	    };
	  }, []);
	  var prefixCls = getPrefixCls('form', customizePrefixCls); // ======================== Errors ========================
	  // Collect noStyle Field error to the top FormItem

	  var updateChildItemErrors = noStyle ? updateItemErrors : function (subName, subErrors) {
	    if (!isEqual_1(inlineErrors[subName], subErrors)) {
	      setInlineErrors(function (prevInlineErrors) {
	        return _extends_1(_extends_1({}, prevInlineErrors), defineProperty$3({}, subName, subErrors));
	      });
	    }
	  }; // ===================== Children Ref =====================

	  var getItemRef = useItemRef();

	  function renderLayout(baseChildren, fieldId, meta, isRequired) {
	    var _itemClassName;

	    var _a;

	    if (noStyle) {
	      return baseChildren;
	    } // ======================== Errors ========================


	    var mergedErrors;

	    if (help !== undefined && help !== null) {
	      mergedErrors = toArray$2(help);
	    } else {
	      mergedErrors = meta ? meta.errors : [];
	      Object.keys(inlineErrors).forEach(function (subName) {
	        var subErrors = inlineErrors[subName] || [];

	        if (subErrors.length) {
	          mergedErrors = [].concat(toConsumableArray(mergedErrors), toConsumableArray(subErrors));
	        }
	      });
	    } // ======================== Status ========================


	    var mergedValidateStatus = '';

	    if (validateStatus !== undefined) {
	      mergedValidateStatus = validateStatus;
	    } else if (meta === null || meta === void 0 ? void 0 : meta.validating) {
	      mergedValidateStatus = 'validating';
	    } else if ((_a = meta === null || meta === void 0 ? void 0 : meta.errors) === null || _a === void 0 ? void 0 : _a.length) {
	      mergedValidateStatus = 'error';
	    } else if (meta === null || meta === void 0 ? void 0 : meta.touched) {
	      mergedValidateStatus = 'success';
	    }

	    if (domErrorVisible && help) {
	      prevValidateStatusRef.current = mergedValidateStatus;
	    }

	    var itemClassName = (_itemClassName = {}, defineProperty$3(_itemClassName, "".concat(prefixCls, "-item"), true), defineProperty$3(_itemClassName, "".concat(prefixCls, "-item-with-help"), domErrorVisible || help), defineProperty$3(_itemClassName, "".concat(className), !!className), defineProperty$3(_itemClassName, "".concat(prefixCls, "-item-has-feedback"), mergedValidateStatus && hasFeedback), defineProperty$3(_itemClassName, "".concat(prefixCls, "-item-has-success"), mergedValidateStatus === 'success'), defineProperty$3(_itemClassName, "".concat(prefixCls, "-item-has-warning"), mergedValidateStatus === 'warning'), defineProperty$3(_itemClassName, "".concat(prefixCls, "-item-has-error"), mergedValidateStatus === 'error'), defineProperty$3(_itemClassName, "".concat(prefixCls, "-item-has-error-leave"), !help && domErrorVisible && prevValidateStatusRef.current === 'error'), defineProperty$3(_itemClassName, "".concat(prefixCls, "-item-is-validating"), mergedValidateStatus === 'validating'), defineProperty$3(_itemClassName, "".concat(prefixCls, "-item-hidden"), hidden), _itemClassName); // ======================= Children =======================

	    return /*#__PURE__*/react.createElement(Row, _extends_1({
	      className: classnames(itemClassName),
	      style: style,
	      key: "row"
	    }, omit(restProps, ['colon', 'extra', 'getValueFromEvent', 'getValueProps', 'hasFeedback', 'help', 'htmlFor', 'id', 'initialValue', 'isListField', 'label', 'labelAlign', 'labelCol', 'normalize', 'preserve', 'required', 'validateFirst', 'validateStatus', 'valuePropName', 'wrapperCol'])), /*#__PURE__*/react.createElement(FormItemLabel, _extends_1({
	      htmlFor: fieldId,
	      required: isRequired
	    }, props, {
	      prefixCls: prefixCls
	    })), /*#__PURE__*/react.createElement(FormItemInput, _extends_1({}, props, meta, {
	      errors: mergedErrors,
	      prefixCls: prefixCls,
	      onDomErrorVisibleChange: setDomErrorVisible,
	      validateStatus: mergedValidateStatus
	    }), /*#__PURE__*/react.createElement(FormItemContext.Provider, {
	      value: {
	        updateItemErrors: updateChildItemErrors
	      }
	    }, baseChildren)));
	  }

	  var isRenderProps = typeof children === 'function'; // Record for real component render

	  var updateRef = react.useRef(0);
	  updateRef.current += 1;

	  if (!hasName && !isRenderProps && !dependencies) {
	    return renderLayout(children);
	  }

	  var variables = {};

	  if (typeof label === 'string') {
	    variables.label = label;
	  }

	  return /*#__PURE__*/react.createElement(WrapperField, _extends_1({}, props, {
	    messageVariables: variables,
	    trigger: trigger,
	    validateTrigger: mergedValidateTrigger,
	    onReset: function onReset() {
	      setDomErrorVisible(false);
	    }
	  }), function (control, meta, context) {
	    var errors = meta.errors;
	    var mergedName = toArray$2(name).length && meta ? meta.name : [];
	    var fieldId = getFieldId(mergedName, formName);

	    if (noStyle) {
	      nameRef.current = toConsumableArray(mergedName);

	      if (fieldKey) {
	        var fieldKeys = Array.isArray(fieldKey) ? fieldKey : [fieldKey];
	        nameRef.current = [].concat(toConsumableArray(mergedName.slice(0, -1)), toConsumableArray(fieldKeys));
	      }

	      updateItemErrors(nameRef.current.join('__SPLIT__'), errors);
	    }

	    var isRequired = required !== undefined ? required : !!(rules && rules.some(function (rule) {
	      if (rule && _typeof_1(rule) === 'object' && rule.required) {
	        return true;
	      }

	      if (typeof rule === 'function') {
	        var ruleEntity = rule(context);
	        return ruleEntity && ruleEntity.required;
	      }

	      return false;
	    })); // ======================= Children =======================

	    var mergedControl = _extends_1({}, control);

	    var childNode = null;

	    if (Array.isArray(children) && hasName) {
	      devWarning(false, 'Form.Item', '`children` is array of render props cannot have `name`.');
	      childNode = children;
	    } else if (isRenderProps && (!shouldUpdate || hasName)) {
	      devWarning(!!shouldUpdate, 'Form.Item', '`children` of render props only work with `shouldUpdate`.');
	      devWarning(!hasName, 'Form.Item', "Do not use `name` with `children` of render props since it's not a field.");
	    } else if (dependencies && !isRenderProps && !hasName) {
	      devWarning(false, 'Form.Item', 'Must set `name` or use render props when `dependencies` is set.');
	    } else if (isValidElement(children)) {
	      devWarning(children.props.defaultValue === undefined, 'Form.Item', '`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.');

	      var childProps = _extends_1(_extends_1({}, children.props), mergedControl);

	      if (!childProps.id) {
	        childProps.id = fieldId;
	      }

	      if (supportRef(children)) {
	        childProps.ref = getItemRef(mergedName, children);
	      } // We should keep user origin event handler


	      var triggers = new Set([].concat(toConsumableArray(toArray$2(trigger)), toConsumableArray(toArray$2(mergedValidateTrigger))));
	      triggers.forEach(function (eventName) {
	        childProps[eventName] = function () {
	          var _a2, _c2;

	          var _a, _b, _c;

	          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	          }

	          (_a = mergedControl[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [mergedControl].concat(args));
	          (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : (_c2 = _c).call.apply(_c2, [_b].concat(args));
	        };
	      });
	      childNode = /*#__PURE__*/react.createElement(MemoInput, {
	        value: mergedControl[props.valuePropName || 'value'],
	        update: updateRef.current
	      }, cloneElement(children, childProps));
	    } else if (isRenderProps && shouldUpdate && !hasName) {
	      childNode = children(context);
	    } else {
	      devWarning(!mergedName.length, 'Form.Item', '`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.');
	      childNode = children;
	    }

	    return renderLayout(childNode, fieldId, meta, isRequired);
	  });
	}

	var __rest$c = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};

	var FormList = function FormList(_a) {
	  var children = _a.children,
	      props = __rest$c(_a, ["children"]);

	  devWarning(!!props.name, 'Form.List', 'Miss `name` prop.');
	  return /*#__PURE__*/react.createElement(List, props, function (fields, operation) {
	    return children(fields.map(function (field) {
	      return _extends_1(_extends_1({}, field), {
	        fieldKey: field.key
	      });
	    }), operation);
	  });
	};

	var Form$2 = Form$1;
	Form$2.Item = FormItem;
	Form$2.List = FormList;
	Form$2.useForm = useForm$1;
	Form$2.Provider = FormProvider$1;

	Form$2.create = function () {
	  devWarning(false, 'Form', 'antd v4 removed `Form.create`. Please remove or use `@ant-design/compatible` instead.');
	};

	var _extends$8 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck$d(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$d(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$d(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var __rest$d = undefined && undefined.__rest || function (s, e) {
	    var t = {};
	    for (var p in s) {
	        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	    }if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	        if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
	    }return t;
	};

	var LazyRenderBox = function (_React$Component) {
	    _inherits$d(LazyRenderBox, _React$Component);

	    function LazyRenderBox() {
	        _classCallCheck$d(this, LazyRenderBox);

	        return _possibleConstructorReturn$d(this, _React$Component.apply(this, arguments));
	    }

	    LazyRenderBox.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	        if (nextProps.forceRender) {
	            return true;
	        }
	        return !!nextProps.hiddenClassName || !!nextProps.visible;
	    };

	    LazyRenderBox.prototype.render = function render() {
	        var _a = this.props,
	            className = _a.className,
	            hiddenClassName = _a.hiddenClassName,
	            visible = _a.visible,
	            forceRender = _a.forceRender,
	            restProps = __rest$d(_a, ["className", "hiddenClassName", "visible", "forceRender"]);
	        var useClassName = className;
	        if (!!hiddenClassName && !visible) {
	            useClassName += " " + hiddenClassName;
	        }
	        return react.createElement("div", _extends$8({}, restProps, { className: useClassName }));
	    };

	    return LazyRenderBox;
	}(react.Component);

	var _extends$9 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck$e(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$e(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$e(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	var uuid = 0;
	/* eslint react/no-is-mounted:0 */
	function getScroll$1(w, top) {
	    var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	    var method = 'scroll' + (top ? 'Top' : 'Left');
	    if (typeof ret !== 'number') {
	        var d = w.document;
	        ret = d.documentElement[method];
	        if (typeof ret !== 'number') {
	            ret = d.body[method];
	        }
	    }
	    return ret;
	}
	function setTransformOrigin(node, value) {
	    var style = node.style;
	    ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {
	        style[prefix + 'TransformOrigin'] = value;
	    });
	    style['transformOrigin'] = value;
	}
	function offset(el) {
	    var rect = el.getBoundingClientRect();
	    var pos = {
	        left: rect.left,
	        top: rect.top
	    };
	    var doc = el.ownerDocument;
	    var w = doc.defaultView || doc.parentWindow;
	    pos.left += getScroll$1(w);
	    pos.top += getScroll$1(w, true);
	    return pos;
	}

	var Dialog = function (_React$Component) {
	    _inherits$e(Dialog, _React$Component);

	    function Dialog(props) {
	        _classCallCheck$e(this, Dialog);

	        var _this = _possibleConstructorReturn$e(this, _React$Component.call(this, props));

	        _this.inTransition = false;
	        _this.onAnimateLeave = function () {
	            var _this$props = _this.props,
	                afterClose = _this$props.afterClose,
	                getOpenCount = _this$props.getOpenCount;
	            // need demo?
	            // https://github.com/react-component/dialog/pull/28

	            if (_this.wrap) {
	                _this.wrap.style.display = 'none';
	            }
	            _this.inTransition = false;
	            // å¦ææ²¡ææå¼çç¶æï¼åæ¸é¤ effect å overflow: hidden;
	            // https://github.com/ant-design/ant-design/issues/21539
	            if (!getOpenCount()) {
	                _this.switchScrollingEffect();
	            }
	            if (afterClose) {
	                afterClose();
	            }
	        };
	        _this.onDialogMouseDown = function () {
	            _this.dialogMouseDown = true;
	        };
	        _this.onMaskMouseUp = function () {
	            if (_this.dialogMouseDown) {
	                _this.timeoutId = setTimeout(function () {
	                    _this.dialogMouseDown = false;
	                }, 0);
	            }
	        };
	        _this.onMaskClick = function (e) {
	            // android trigger click on open (fastclick??)
	            if (Date.now() - _this.openTime < 300) {
	                return;
	            }
	            if (e.target === e.currentTarget && !_this.dialogMouseDown) {
	                _this.close(e);
	            }
	        };
	        _this.onKeyDown = function (e) {
	            var props = _this.props;
	            if (props.keyboard && e.keyCode === KeyCode.ESC) {
	                e.stopPropagation();
	                _this.close(e);
	                return;
	            }
	            // keep focus inside dialog
	            if (props.visible) {
	                if (e.keyCode === KeyCode.TAB) {
	                    var activeElement = document.activeElement;
	                    var sentinelStart = _this.sentinelStart;
	                    if (e.shiftKey) {
	                        if (activeElement === sentinelStart) {
	                            _this.sentinelEnd.focus();
	                        }
	                    } else if (activeElement === _this.sentinelEnd) {
	                        sentinelStart.focus();
	                    }
	                }
	            }
	        };
	        _this.getDialogElement = function () {
	            var props = _this.props;
	            var closable = props.closable;
	            var prefixCls = props.prefixCls;
	            var dest = {};
	            if (props.width !== undefined) {
	                dest.width = props.width;
	            }
	            if (props.height !== undefined) {
	                dest.height = props.height;
	            }
	            var footer = void 0;
	            if (props.footer) {
	                footer = react.createElement("div", { className: prefixCls + '-footer', ref: _this.saveRef('footer') }, props.footer);
	            }
	            var header = void 0;
	            if (props.title) {
	                header = react.createElement("div", { className: prefixCls + '-header', ref: _this.saveRef('header') }, react.createElement("div", { className: prefixCls + '-title', id: _this.titleId }, props.title));
	            }
	            var closer = void 0;
	            if (closable) {
	                closer = react.createElement("button", { type: "button", onClick: _this.close, "aria-label": "Close", className: prefixCls + '-close' }, props.closeIcon || react.createElement("span", { className: prefixCls + '-close-x' }));
	            }
	            var style = _extends$9({}, props.style, dest);
	            var sentinelStyle = { width: 0, height: 0, overflow: 'hidden', outline: 'none' };
	            var transitionName = _this.getTransitionName();
	            var dialogElement = react.createElement(LazyRenderBox, { key: "dialog-element", role: "document", ref: _this.saveRef('dialog'), style: style, className: prefixCls + ' ' + (props.className || ''), visible: props.visible, forceRender: props.forceRender, onMouseDown: _this.onDialogMouseDown }, react.createElement("div", { tabIndex: 0, ref: _this.saveRef('sentinelStart'), style: sentinelStyle, "aria-hidden": "true" }), react.createElement("div", { className: prefixCls + '-content' }, closer, header, react.createElement("div", _extends$9({ className: prefixCls + '-body', style: props.bodyStyle, ref: _this.saveRef('body') }, props.bodyProps), props.children), footer), react.createElement("div", { tabIndex: 0, ref: _this.saveRef('sentinelEnd'), style: sentinelStyle, "aria-hidden": "true" }));
	            return react.createElement(Animate$1, { key: "dialog", showProp: "visible", onLeave: _this.onAnimateLeave, transitionName: transitionName, component: "", transitionAppear: true }, props.visible || !props.destroyOnClose ? dialogElement : null);
	        };
	        _this.getZIndexStyle = function () {
	            var style = {};
	            var props = _this.props;
	            if (props.zIndex !== undefined) {
	                style.zIndex = props.zIndex;
	            }
	            return style;
	        };
	        _this.getWrapStyle = function () {
	            return _extends$9({}, _this.getZIndexStyle(), _this.props.wrapStyle);
	        };
	        _this.getMaskStyle = function () {
	            return _extends$9({}, _this.getZIndexStyle(), _this.props.maskStyle);
	        };
	        _this.getMaskElement = function () {
	            var props = _this.props;
	            var maskElement = void 0;
	            if (props.mask) {
	                var maskTransition = _this.getMaskTransitionName();
	                maskElement = react.createElement(LazyRenderBox, _extends$9({ style: _this.getMaskStyle(), key: "mask", className: props.prefixCls + '-mask', hiddenClassName: props.prefixCls + '-mask-hidden', visible: props.visible }, props.maskProps));
	                if (maskTransition) {
	                    maskElement = react.createElement(Animate$1, { key: "mask", showProp: "visible", transitionAppear: true, component: "", transitionName: maskTransition }, maskElement);
	                }
	            }
	            return maskElement;
	        };
	        _this.getMaskTransitionName = function () {
	            var props = _this.props;
	            var transitionName = props.maskTransitionName;
	            var animation = props.maskAnimation;
	            if (!transitionName && animation) {
	                transitionName = props.prefixCls + '-' + animation;
	            }
	            return transitionName;
	        };
	        _this.getTransitionName = function () {
	            var props = _this.props;
	            var transitionName = props.transitionName;
	            var animation = props.animation;
	            if (!transitionName && animation) {
	                transitionName = props.prefixCls + '-' + animation;
	            }
	            return transitionName;
	        };
	        _this.close = function (e) {
	            var onClose = _this.props.onClose;

	            if (onClose) {
	                onClose(e);
	            }
	        };
	        _this.saveRef = function (name) {
	            return function (node) {
	                _this[name] = node;
	            };
	        };
	        _this.titleId = 'rcDialogTitle' + uuid++;
	        _this.switchScrollingEffect = props.switchScrollingEffect || function () {};
	        return _this;
	    }

	    Dialog.prototype.componentDidMount = function componentDidMount() {
	        this.componentDidUpdate({});
	        // if forceRender is true, set element style display to be none;
	        if ((this.props.forceRender || this.props.getContainer === false && !this.props.visible) && this.wrap) {
	            this.wrap.style.display = 'none';
	        }
	    };

	    Dialog.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	        var _props = this.props,
	            visible = _props.visible,
	            mask = _props.mask,
	            focusTriggerAfterClose = _props.focusTriggerAfterClose;

	        var mousePosition = this.props.mousePosition;
	        if (visible) {
	            // first show
	            if (!prevProps.visible) {
	                this.openTime = Date.now();
	                this.switchScrollingEffect();
	                this.tryFocus();
	                var dialogNode = reactDom.findDOMNode(this.dialog);
	                if (mousePosition) {
	                    var elOffset = offset(dialogNode);
	                    setTransformOrigin(dialogNode, mousePosition.x - elOffset.left + 'px ' + (mousePosition.y - elOffset.top) + 'px');
	                } else {
	                    setTransformOrigin(dialogNode, '');
	                }
	            }
	        } else if (prevProps.visible) {
	            this.inTransition = true;
	            if (mask && this.lastOutSideFocusNode && focusTriggerAfterClose) {
	                try {
	                    this.lastOutSideFocusNode.focus();
	                } catch (e) {
	                    this.lastOutSideFocusNode = null;
	                }
	                this.lastOutSideFocusNode = null;
	            }
	        }
	    };

	    Dialog.prototype.componentWillUnmount = function componentWillUnmount() {
	        var _props2 = this.props,
	            visible = _props2.visible,
	            getOpenCount = _props2.getOpenCount;

	        if ((visible || this.inTransition) && !getOpenCount()) {
	            this.switchScrollingEffect();
	        }
	        clearTimeout(this.timeoutId);
	    };

	    Dialog.prototype.tryFocus = function tryFocus() {
	        if (!contains(this.wrap, document.activeElement)) {
	            this.lastOutSideFocusNode = document.activeElement;
	            this.sentinelStart.focus();
	        }
	    };

	    Dialog.prototype.render = function render() {
	        var props = this.props;
	        var prefixCls = props.prefixCls,
	            maskClosable = props.maskClosable;

	        var style = this.getWrapStyle();
	        // clear hide display
	        // and only set display after async anim, not here for hide
	        if (props.visible) {
	            style.display = null;
	        }
	        return react.createElement("div", { className: prefixCls + '-root' }, this.getMaskElement(), react.createElement("div", _extends$9({ tabIndex: -1, onKeyDown: this.onKeyDown, className: prefixCls + '-wrap ' + (props.wrapClassName || ''), ref: this.saveRef('wrap'), onClick: maskClosable ? this.onMaskClick : null, onMouseUp: maskClosable ? this.onMaskMouseUp : null, role: "dialog", "aria-labelledby": props.title ? this.titleId : null, style: style }, props.wrapProps), this.getDialogElement()));
	    };

	    return Dialog;
	}(react.Component);

	Dialog.defaultProps = {
	    className: '',
	    mask: true,
	    visible: false,
	    keyboard: true,
	    closable: true,
	    maskClosable: true,
	    destroyOnClose: false,
	    prefixCls: 'rc-dialog',
	    focusTriggerAfterClose: true
	};

	var _extends$a = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	// fix issue #10656
	/*
	* getContainer remarks
	* Custom container should not be return, because in the Portal component, it will remove the
	* return container element here, if the custom container is the only child of it's component,
	* like issue #10656, It will has a conflict with removeChild method in react-dom.
	* So here should add a child (div element) to custom container.
	* */
	var Dialog$1 = (function (props) {
	    var visible = props.visible,
	        getContainer = props.getContainer,
	        forceRender = props.forceRender;
	    // æ¸²æå¨å½å dom éï¼

	    if (getContainer === false) {
	        return react.createElement(Dialog, _extends$a({}, props, { getOpenCount: function getOpenCount() {
	                return 2;
	            } }));
	    }
	    return react.createElement(PortalWrapper, { visible: visible, forceRender: forceRender, getContainer: getContainer }, function (childProps) {
	        return react.createElement(Dialog, _extends$a({}, props, childProps));
	    });
	});

	function usePatchElement() {
	  var _React$useState = react.useState([]),
	      _React$useState2 = slicedToArray(_React$useState, 2),
	      elements = _React$useState2[0],
	      setElements = _React$useState2[1];

	  function patchElement(element) {
	    setElements(function (originElements) {
	      return [].concat(toConsumableArray(originElements), [element]);
	    });
	    return function () {
	      setElements(function (originElements) {
	        return originElements.filter(function (ele) {
	          return ele !== element;
	        });
	      });
	    };
	  }

	  return [elements, patchElement];
	}

	var ActionButton = function ActionButton(props) {
	  var clickedRef = react.useRef(false);
	  var ref = react.useRef();

	  var _React$useState = react.useState(false),
	      _React$useState2 = slicedToArray(_React$useState, 2),
	      loading = _React$useState2[0],
	      setLoading = _React$useState2[1];

	  react.useEffect(function () {
	    var timeoutId;

	    if (props.autoFocus) {
	      var $this = ref.current;
	      timeoutId = setTimeout(function () {
	        return $this.focus();
	      });
	    }

	    return function () {
	      if (timeoutId) {
	        clearTimeout(timeoutId);
	      }
	    };
	  }, []);

	  var handlePromiseOnOk = function handlePromiseOnOk(returnValueOfOnOk) {
	    var closeModal = props.closeModal;

	    if (!returnValueOfOnOk || !returnValueOfOnOk.then) {
	      return;
	    }

	    setLoading(true);
	    returnValueOfOnOk.then(function () {
	      // It's unnecessary to set loading=false, for the Modal will be unmounted after close.
	      // setState({ loading: false });
	      closeModal.apply(void 0, arguments);
	    }, function (e) {
	      // Emit error when catch promise reject
	      // eslint-disable-next-line no-console
	      console.error(e); // See: https://github.com/ant-design/ant-design/issues/6183

	      setLoading(false);
	      clickedRef.current = false;
	    });
	  };

	  var onClick = function onClick() {
	    var actionFn = props.actionFn,
	        closeModal = props.closeModal;

	    if (clickedRef.current) {
	      return;
	    }

	    clickedRef.current = true;

	    if (!actionFn) {
	      closeModal();
	      return;
	    }

	    var returnValueOfOnOk;

	    if (actionFn.length) {
	      returnValueOfOnOk = actionFn(closeModal); // https://github.com/ant-design/ant-design/issues/23358

	      clickedRef.current = false;
	    } else {
	      returnValueOfOnOk = actionFn();

	      if (!returnValueOfOnOk) {
	        closeModal();
	        return;
	      }
	    }

	    handlePromiseOnOk(returnValueOfOnOk);
	  };

	  var type = props.type,
	      children = props.children,
	      buttonProps = props.buttonProps;
	  return /*#__PURE__*/react.createElement(Button, _extends_1({}, convertLegacyProps(type), {
	    onClick: onClick,
	    loading: loading
	  }, buttonProps, {
	    ref: ref
	  }), children);
	};

	var ConfirmDialog = function ConfirmDialog(props) {
	  var icon = props.icon,
	      onCancel = props.onCancel,
	      onOk = props.onOk,
	      close = props.close,
	      zIndex = props.zIndex,
	      afterClose = props.afterClose,
	      visible = props.visible,
	      keyboard = props.keyboard,
	      centered = props.centered,
	      getContainer = props.getContainer,
	      maskStyle = props.maskStyle,
	      okText = props.okText,
	      okButtonProps = props.okButtonProps,
	      cancelText = props.cancelText,
	      cancelButtonProps = props.cancelButtonProps,
	      direction = props.direction;
	  devWarning(!(typeof icon === 'string' && icon.length > 2), 'Modal', "`icon` is using ReactNode instead of string naming in v4. Please check `".concat(icon, "` at https://ant.design/components/icon")); // æ¯æä¼ å¥{ icon: null }æ¥éè`Modal.confirm`é»è®¤çIcon

	  var okType = props.okType || 'primary';
	  var prefixCls = props.prefixCls || 'ant-modal';
	  var contentPrefixCls = "".concat(prefixCls, "-confirm"); // é»è®¤ä¸º trueï¼ä¿æåä¸å¼å®¹

	  var okCancel = 'okCancel' in props ? props.okCancel : true;
	  var width = props.width || 416;
	  var style = props.style || {};
	  var mask = props.mask === undefined ? true : props.mask; // é»è®¤ä¸º falseï¼ä¿ææ§çé»è®¤è¡ä¸º

	  var maskClosable = props.maskClosable === undefined ? false : props.maskClosable;
	  var autoFocusButton = props.autoFocusButton === null ? false : props.autoFocusButton || 'ok';
	  var transitionName = props.transitionName || 'zoom';
	  var maskTransitionName = props.maskTransitionName || 'fade';
	  var classString = classnames(contentPrefixCls, "".concat(contentPrefixCls, "-").concat(props.type), defineProperty$3({}, "".concat(contentPrefixCls, "-rtl"), direction === 'rtl'), props.className);
	  var cancelButton = okCancel && /*#__PURE__*/react.createElement(ActionButton, {
	    actionFn: onCancel,
	    closeModal: close,
	    autoFocus: autoFocusButton === 'cancel',
	    buttonProps: cancelButtonProps
	  }, cancelText);
	  return /*#__PURE__*/react.createElement(Modal, {
	    prefixCls: prefixCls,
	    className: classString,
	    wrapClassName: classnames(defineProperty$3({}, "".concat(contentPrefixCls, "-centered"), !!props.centered)),
	    onCancel: function onCancel() {
	      return close({
	        triggerCancel: true
	      });
	    },
	    visible: visible,
	    title: "",
	    transitionName: transitionName,
	    footer: "",
	    maskTransitionName: maskTransitionName,
	    mask: mask,
	    maskClosable: maskClosable,
	    maskStyle: maskStyle,
	    style: style,
	    width: width,
	    zIndex: zIndex,
	    afterClose: afterClose,
	    keyboard: keyboard,
	    centered: centered,
	    getContainer: getContainer
	  }, /*#__PURE__*/react.createElement("div", {
	    className: "".concat(contentPrefixCls, "-body-wrapper")
	  }, /*#__PURE__*/react.createElement("div", {
	    className: "".concat(contentPrefixCls, "-body")
	  }, icon, props.title === undefined ? null : /*#__PURE__*/react.createElement("span", {
	    className: "".concat(contentPrefixCls, "-title")
	  }, props.title), /*#__PURE__*/react.createElement("div", {
	    className: "".concat(contentPrefixCls, "-content")
	  }, props.content)), /*#__PURE__*/react.createElement("div", {
	    className: "".concat(contentPrefixCls, "-btns")
	  }, cancelButton, /*#__PURE__*/react.createElement(ActionButton, {
	    type: okType,
	    actionFn: onOk,
	    closeModal: close,
	    autoFocus: autoFocusButton === 'ok',
	    buttonProps: okButtonProps
	  }, okText))));
	};

	var HookModal = function HookModal(_ref, ref) {
	  var afterClose = _ref.afterClose,
	      config = _ref.config;

	  var _React$useState = react.useState(true),
	      _React$useState2 = slicedToArray(_React$useState, 2),
	      visible = _React$useState2[0],
	      setVisible = _React$useState2[1];

	  var _React$useState3 = react.useState(config),
	      _React$useState4 = slicedToArray(_React$useState3, 2),
	      innerConfig = _React$useState4[0],
	      setInnerConfig = _React$useState4[1];

	  var _React$useContext = react.useContext(ConfigContext),
	      direction = _React$useContext.direction;

	  function close() {
	    setVisible(false);
	  }

	  react.useImperativeHandle(ref, function () {
	    return {
	      destroy: close,
	      update: function update(newConfig) {
	        setInnerConfig(function (originConfig) {
	          return _extends_1(_extends_1({}, originConfig), newConfig);
	        });
	      }
	    };
	  });
	  return /*#__PURE__*/react.createElement(LocaleReceiver, {
	    componentName: "Modal",
	    defaultLocale: localeValues.Modal
	  }, function (modalLocale) {
	    return /*#__PURE__*/react.createElement(ConfirmDialog, _extends_1({}, innerConfig, {
	      close: close,
	      visible: visible,
	      afterClose: afterClose,
	      okText: innerConfig.okText || (innerConfig.okCancel ? modalLocale.okText : modalLocale.justOkText),
	      direction: direction,
	      cancelText: innerConfig.cancelText || modalLocale.cancelText
	    }));
	  });
	};

	var HookModal$1 = /*#__PURE__*/react.forwardRef(HookModal);

	var __rest$e = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};
	function confirm(config) {
	  var div = document.createElement('div');
	  document.body.appendChild(div); // eslint-disable-next-line no-use-before-define

	  var currentConfig = _extends_1(_extends_1({}, config), {
	    close: close,
	    visible: true
	  });

	  function destroy() {
	    var unmountResult = reactDom.unmountComponentAtNode(div);

	    if (unmountResult && div.parentNode) {
	      div.parentNode.removeChild(div);
	    }

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var triggerCancel = args.some(function (param) {
	      return param && param.triggerCancel;
	    });

	    if (config.onCancel && triggerCancel) {
	      config.onCancel.apply(config, args);
	    }

	    for (var i = 0; i < destroyFns.length; i++) {
	      var fn = destroyFns[i]; // eslint-disable-next-line no-use-before-define

	      if (fn === close) {
	        destroyFns.splice(i, 1);
	        break;
	      }
	    }
	  }

	  function render$1(_a) {
	    var okText = _a.okText,
	        cancelText = _a.cancelText,
	        props = __rest$e(_a, ["okText", "cancelText"]);
	    /**
	     * https://github.com/ant-design/ant-design/issues/23623
	     * Sync render blocks React event. Let's make this async.
	     */


	    setTimeout(function () {
	      var runtimeLocale = getConfirmLocale();
	      reactDom.render( /*#__PURE__*/react.createElement(ConfirmDialog, _extends_1({}, props, {
	        okText: okText || (props.okCancel ? runtimeLocale.okText : runtimeLocale.justOkText),
	        cancelText: cancelText || runtimeLocale.cancelText
	      })), div);
	    });
	  }

	  function close() {
	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    currentConfig = _extends_1(_extends_1({}, currentConfig), {
	      visible: false,
	      afterClose: destroy.bind.apply(destroy, [this].concat(args))
	    });
	    render$1(currentConfig);
	  }

	  function update(newConfig) {
	    currentConfig = _extends_1(_extends_1({}, currentConfig), newConfig);
	    render$1(currentConfig);
	  }

	  render$1(currentConfig);
	  destroyFns.push(close);
	  return {
	    destroy: close,
	    update: update
	  };
	}
	function withWarn(props) {
	  return _extends_1({
	    type: 'warning',
	    icon: /*#__PURE__*/react.createElement(ExclamationCircleOutlined$1, null),
	    okCancel: false
	  }, props);
	}
	function withInfo(props) {
	  return _extends_1({
	    type: 'info',
	    icon: /*#__PURE__*/react.createElement(InfoCircleOutlined$1, null),
	    okCancel: false
	  }, props);
	}
	function withSuccess(props) {
	  return _extends_1({
	    type: 'success',
	    icon: /*#__PURE__*/react.createElement(CheckCircleOutlined$1, null),
	    okCancel: false
	  }, props);
	}
	function withError(props) {
	  return _extends_1({
	    type: 'error',
	    icon: /*#__PURE__*/react.createElement(CloseCircleOutlined$1, null),
	    okCancel: false
	  }, props);
	}
	function withConfirm(props) {
	  return _extends_1({
	    type: 'confirm',
	    icon: /*#__PURE__*/react.createElement(ExclamationCircleOutlined$1, null),
	    okCancel: true
	  }, props);
	}

	var uuid$1 = 0;
	function useModal() {
	  var _usePatchElement = usePatchElement(),
	      _usePatchElement2 = slicedToArray(_usePatchElement, 2),
	      elements = _usePatchElement2[0],
	      patchElement = _usePatchElement2[1];

	  function getConfirmFunc(withFunc) {
	    return function hookConfirm(config) {
	      uuid$1 += 1;
	      var modalRef = /*#__PURE__*/react.createRef();
	      var closeFunc;
	      var modal = /*#__PURE__*/react.createElement(HookModal$1, {
	        key: "modal-".concat(uuid$1),
	        config: withFunc(config),
	        ref: modalRef,
	        afterClose: function afterClose() {
	          closeFunc();
	        }
	      });
	      closeFunc = patchElement(modal);
	      return {
	        destroy: function destroy() {
	          if (modalRef.current) {
	            modalRef.current.destroy();
	          }
	        },
	        update: function update(newConfig) {
	          if (modalRef.current) {
	            modalRef.current.update(newConfig);
	          }
	        }
	      };
	    };
	  }

	  return [{
	    info: getConfirmFunc(withInfo),
	    success: getConfirmFunc(withSuccess),
	    error: getConfirmFunc(withError),
	    warning: getConfirmFunc(withWarn),
	    confirm: getConfirmFunc(withConfirm)
	  }, /*#__PURE__*/react.createElement(react.Fragment, null, elements)];
	}

	var __rest$f = undefined && undefined.__rest || function (s, e) {
	  var t = {};

	  for (var p in s) {
	    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
	  }

	  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
	  }
	  return t;
	};
	var mousePosition;
	var destroyFns = []; // ref: https://github.com/ant-design/ant-design/issues/15795

	var getClickPosition = function getClickPosition(e) {
	  mousePosition = {
	    x: e.pageX,
	    y: e.pageY
	  }; // 100ms ååçè¿ç¹å»äºä»¶ï¼åä»ç¹å»ä½ç½®å¨ç»å±ç¤º
	  // å¦åç´æ¥ zoom å±ç¤º
	  // è¿æ ·å¯ä»¥å¼å®¹éç¹å»æ¹å¼å±å¼

	  setTimeout(function () {
	    mousePosition = null;
	  }, 100);
	}; // åªæç¹å»äºä»¶æ¯æä»é¼ æ ä½ç½®å¨ç»å±å¼


	if (typeof window !== 'undefined' && window.document && window.document.documentElement) {
	  addEventListenerWrap(document.documentElement, 'click', getClickPosition);
	}

	var Modal = function Modal(props) {
	  var _classNames;

	  var _React$useContext = react.useContext(ConfigContext),
	      getContextPopupContainer = _React$useContext.getPopupContainer,
	      getPrefixCls = _React$useContext.getPrefixCls,
	      direction = _React$useContext.direction;

	  var handleCancel = function handleCancel(e) {
	    var onCancel = props.onCancel;

	    if (onCancel) {
	      onCancel(e);
	    }
	  };

	  var handleOk = function handleOk(e) {
	    var onOk = props.onOk;

	    if (onOk) {
	      onOk(e);
	    }
	  };

	  var renderFooter = function renderFooter(locale) {
	    var okText = props.okText,
	        okType = props.okType,
	        cancelText = props.cancelText,
	        confirmLoading = props.confirmLoading;
	    return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Button, _extends_1({
	      onClick: handleCancel
	    }, props.cancelButtonProps), cancelText || locale.cancelText), /*#__PURE__*/react.createElement(Button, _extends_1({}, convertLegacyProps(okType), {
	      loading: confirmLoading,
	      onClick: handleOk
	    }, props.okButtonProps), okText || locale.okText));
	  };

	  var customizePrefixCls = props.prefixCls,
	      footer = props.footer,
	      visible = props.visible,
	      wrapClassName = props.wrapClassName,
	      centered = props.centered,
	      getContainer = props.getContainer,
	      closeIcon = props.closeIcon,
	      restProps = __rest$f(props, ["prefixCls", "footer", "visible", "wrapClassName", "centered", "getContainer", "closeIcon"]);

	  var prefixCls = getPrefixCls('modal', customizePrefixCls);
	  var defaultFooter = /*#__PURE__*/react.createElement(LocaleReceiver, {
	    componentName: "Modal",
	    defaultLocale: getConfirmLocale()
	  }, renderFooter);
	  var closeIconToRender = /*#__PURE__*/react.createElement("span", {
	    className: "".concat(prefixCls, "-close-x")
	  }, closeIcon || /*#__PURE__*/react.createElement(CloseOutlined$1, {
	    className: "".concat(prefixCls, "-close-icon")
	  }));
	  var wrapClassNameExtended = classnames(wrapClassName, (_classNames = {}, defineProperty$3(_classNames, "".concat(prefixCls, "-centered"), !!centered), defineProperty$3(_classNames, "".concat(prefixCls, "-wrap-rtl"), direction === 'rtl'), _classNames));
	  return /*#__PURE__*/react.createElement(Dialog$1, _extends_1({}, restProps, {
	    getContainer: getContainer === undefined ? getContextPopupContainer : getContainer,
	    prefixCls: prefixCls,
	    wrapClassName: wrapClassNameExtended,
	    footer: footer === undefined ? defaultFooter : footer,
	    visible: visible,
	    mousePosition: mousePosition,
	    onClose: handleCancel,
	    closeIcon: closeIconToRender
	  }));
	};

	Modal.useModal = useModal;
	Modal.defaultProps = {
	  width: 520,
	  transitionName: 'zoom',
	  maskTransitionName: 'fade',
	  confirmLoading: false,
	  visible: false,
	  okType: 'primary'
	};

	function modalWarn(props) {
	  return confirm(withWarn(props));
	}

	var Modal$1 = Modal;

	Modal$1.info = function infoFn(props) {
	  return confirm(withInfo(props));
	};

	Modal$1.success = function successFn(props) {
	  return confirm(withSuccess(props));
	};

	Modal$1.error = function errorFn(props) {
	  return confirm(withError(props));
	};

	Modal$1.warning = modalWarn;
	Modal$1.warn = modalWarn;

	Modal$1.confirm = function confirmFn(props) {
	  return confirm(withConfirm(props));
	};

	Modal$1.destroyAll = function destroyAllFn() {
	  while (destroyFns.length) {
	    var close = destroyFns.pop();

	    if (close) {
	      close();
	    }
	  }
	};

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	// Used for setting prototype methods that IE8 chokes on.
	var DELETE = 'delete';

	// Constants describing the size of trie nodes.
	var SHIFT = 5; // Resulted in best performance after ______?
	var SIZE$1 = 1 << SHIFT;
	var MASK = SIZE$1 - 1;

	// A consistent shared value representing "not set" which equals nothing other
	// than itself, and nothing that could be provided externally.
	var NOT_SET = {};

	// Boolean references, Rough equivalent of `bool &`.
	function MakeRef() {
	  return { value: false };
	}

	function SetRef(ref) {
	  if (ref) {
	    ref.value = true;
	  }
	}

	// A function which returns a value representing an "owner" for transient writes
	// to tries. The return value will only ever equal itself, and will not equal
	// the return of any subsequent call of this function.
	function OwnerID() {}

	function ensureSize(iter) {
	  if (iter.size === undefined) {
	    iter.size = iter.__iterate(returnTrue);
	  }
	  return iter.size;
	}

	function wrapIndex(iter, index) {
	  // This implements "is array index" which the ECMAString spec defines as:
	  //
	  //     A String property name P is an array index if and only if
	  //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
	  //     to 2^32â1.
	  //
	  // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
	  if (typeof index !== 'number') {
	    var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
	    if ('' + uint32Index !== index || uint32Index === 4294967295) {
	      return NaN;
	    }
	    index = uint32Index;
	  }
	  return index < 0 ? ensureSize(iter) + index : index;
	}

	function returnTrue() {
	  return true;
	}

	function wholeSlice(begin, end, size) {
	  return (
	    ((begin === 0 && !isNeg(begin)) ||
	      (size !== undefined && begin <= -size)) &&
	    (end === undefined || (size !== undefined && end >= size))
	  );
	}

	function resolveBegin(begin, size) {
	  return resolveIndex(begin, size, 0);
	}

	function resolveEnd(end, size) {
	  return resolveIndex(end, size, size);
	}

	function resolveIndex(index, size, defaultIndex) {
	  // Sanitize indices using this shorthand for ToInt32(argument)
	  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	  return index === undefined
	    ? defaultIndex
	    : isNeg(index)
	      ? size === Infinity
	        ? size
	        : Math.max(0, size + index) | 0
	      : size === undefined || size === index
	        ? index
	        : Math.min(size, index) | 0;
	}

	function isNeg(value) {
	  // Account for -0 which is negative, but not less than 0.
	  return value < 0 || (value === 0 && 1 / value === -Infinity);
	}

	// Note: value is unchanged to not break immutable-devtools.
	var IS_COLLECTION_SYMBOL = '@@__IMMUTABLE_ITERABLE__@@';

	function isCollection(maybeCollection) {
	  return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);
	}

	var IS_KEYED_SYMBOL = '@@__IMMUTABLE_KEYED__@@';

	function isKeyed(maybeKeyed) {
	  return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);
	}

	var IS_INDEXED_SYMBOL = '@@__IMMUTABLE_INDEXED__@@';

	function isIndexed(maybeIndexed) {
	  return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);
	}

	function isAssociative(maybeAssociative) {
	  return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
	}

	var Collection$1 = function Collection(value) {
	  return isCollection(value) ? value : Seq(value);
	};

	var KeyedCollection = /*@__PURE__*/(function (Collection) {
	  function KeyedCollection(value) {
	    return isKeyed(value) ? value : KeyedSeq(value);
	  }

	  if ( Collection ) KeyedCollection.__proto__ = Collection;
	  KeyedCollection.prototype = Object.create( Collection && Collection.prototype );
	  KeyedCollection.prototype.constructor = KeyedCollection;

	  return KeyedCollection;
	}(Collection$1));

	var IndexedCollection = /*@__PURE__*/(function (Collection) {
	  function IndexedCollection(value) {
	    return isIndexed(value) ? value : IndexedSeq(value);
	  }

	  if ( Collection ) IndexedCollection.__proto__ = Collection;
	  IndexedCollection.prototype = Object.create( Collection && Collection.prototype );
	  IndexedCollection.prototype.constructor = IndexedCollection;

	  return IndexedCollection;
	}(Collection$1));

	var SetCollection = /*@__PURE__*/(function (Collection) {
	  function SetCollection(value) {
	    return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);
	  }

	  if ( Collection ) SetCollection.__proto__ = Collection;
	  SetCollection.prototype = Object.create( Collection && Collection.prototype );
	  SetCollection.prototype.constructor = SetCollection;

	  return SetCollection;
	}(Collection$1));

	Collection$1.Keyed = KeyedCollection;
	Collection$1.Indexed = IndexedCollection;
	Collection$1.Set = SetCollection;

	var IS_SEQ_SYMBOL = '@@__IMMUTABLE_SEQ__@@';

	function isSeq(maybeSeq) {
	  return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);
	}

	var IS_RECORD_SYMBOL = '@@__IMMUTABLE_RECORD__@@';

	function isRecord(maybeRecord) {
	  return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);
	}

	function isImmutable(maybeImmutable) {
	  return isCollection(maybeImmutable) || isRecord(maybeImmutable);
	}

	var IS_ORDERED_SYMBOL = '@@__IMMUTABLE_ORDERED__@@';

	function isOrdered(maybeOrdered) {
	  return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);
	}

	var ITERATE_KEYS = 0;
	var ITERATE_VALUES = 1;
	var ITERATE_ENTRIES = 2;

	var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';

	var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;

	var Iterator = function Iterator(next) {
	  this.next = next;
	};

	Iterator.prototype.toString = function toString () {
	  return '[Iterator]';
	};

	Iterator.KEYS = ITERATE_KEYS;
	Iterator.VALUES = ITERATE_VALUES;
	Iterator.ENTRIES = ITERATE_ENTRIES;

	Iterator.prototype.inspect = Iterator.prototype.toSource = function() {
	  return this.toString();
	};
	Iterator.prototype[ITERATOR_SYMBOL] = function() {
	  return this;
	};

	function iteratorValue(type, k, v, iteratorResult) {
	  var value = type === 0 ? k : type === 1 ? v : [k, v];
	  iteratorResult
	    ? (iteratorResult.value = value)
	    : (iteratorResult = {
	        value: value,
	        done: false,
	      });
	  return iteratorResult;
	}

	function iteratorDone() {
	  return { value: undefined, done: true };
	}

	function hasIterator(maybeIterable) {
	  return !!getIteratorFn(maybeIterable);
	}

	function isIterator(maybeIterator) {
	  return maybeIterator && typeof maybeIterator.next === 'function';
	}

	function getIterator(iterable) {
	  var iteratorFn = getIteratorFn(iterable);
	  return iteratorFn && iteratorFn.call(iterable);
	}

	function getIteratorFn(iterable) {
	  var iteratorFn =
	    iterable &&
	    ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
	      iterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	var hasOwnProperty$c = Object.prototype.hasOwnProperty;

	function isArrayLike$1(value) {
	  if (Array.isArray(value) || typeof value === 'string') {
	    return true;
	  }

	  return (
	    value &&
	    typeof value === 'object' &&
	    Number.isInteger(value.length) &&
	    value.length >= 0 &&
	    (value.length === 0
	      ? // Only {length: 0} is considered Array-like.
	        Object.keys(value).length === 1
	      : // An object is only Array-like if it has a property where the last value
	        // in the array-like may be found (which could be undefined).
	        value.hasOwnProperty(value.length - 1))
	  );
	}

	var Seq = /*@__PURE__*/(function (Collection$$1) {
	  function Seq(value) {
	    return value === null || value === undefined
	      ? emptySequence()
	      : isImmutable(value)
	        ? value.toSeq()
	        : seqFromValue(value);
	  }

	  if ( Collection$$1 ) Seq.__proto__ = Collection$$1;
	  Seq.prototype = Object.create( Collection$$1 && Collection$$1.prototype );
	  Seq.prototype.constructor = Seq;

	  Seq.prototype.toSeq = function toSeq () {
	    return this;
	  };

	  Seq.prototype.toString = function toString () {
	    return this.__toString('Seq {', '}');
	  };

	  Seq.prototype.cacheResult = function cacheResult () {
	    if (!this._cache && this.__iterateUncached) {
	      this._cache = this.entrySeq().toArray();
	      this.size = this._cache.length;
	    }
	    return this;
	  };

	  // abstract __iterateUncached(fn, reverse)

	  Seq.prototype.__iterate = function __iterate (fn, reverse) {
	    var cache = this._cache;
	    if (cache) {
	      var size = cache.length;
	      var i = 0;
	      while (i !== size) {
	        var entry = cache[reverse ? size - ++i : i++];
	        if (fn(entry[1], entry[0], this) === false) {
	          break;
	        }
	      }
	      return i;
	    }
	    return this.__iterateUncached(fn, reverse);
	  };

	  // abstract __iteratorUncached(type, reverse)

	  Seq.prototype.__iterator = function __iterator (type, reverse) {
	    var cache = this._cache;
	    if (cache) {
	      var size = cache.length;
	      var i = 0;
	      return new Iterator(function () {
	        if (i === size) {
	          return iteratorDone();
	        }
	        var entry = cache[reverse ? size - ++i : i++];
	        return iteratorValue(type, entry[0], entry[1]);
	      });
	    }
	    return this.__iteratorUncached(type, reverse);
	  };

	  return Seq;
	}(Collection$1));

	var KeyedSeq = /*@__PURE__*/(function (Seq) {
	  function KeyedSeq(value) {
	    return value === null || value === undefined
	      ? emptySequence().toKeyedSeq()
	      : isCollection(value)
	        ? isKeyed(value)
	          ? value.toSeq()
	          : value.fromEntrySeq()
	        : isRecord(value)
	          ? value.toSeq()
	          : keyedSeqFromValue(value);
	  }

	  if ( Seq ) KeyedSeq.__proto__ = Seq;
	  KeyedSeq.prototype = Object.create( Seq && Seq.prototype );
	  KeyedSeq.prototype.constructor = KeyedSeq;

	  KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq () {
	    return this;
	  };

	  return KeyedSeq;
	}(Seq));

	var IndexedSeq = /*@__PURE__*/(function (Seq) {
	  function IndexedSeq(value) {
	    return value === null || value === undefined
	      ? emptySequence()
	      : isCollection(value)
	        ? isKeyed(value)
	          ? value.entrySeq()
	          : value.toIndexedSeq()
	        : isRecord(value)
	          ? value.toSeq().entrySeq()
	          : indexedSeqFromValue(value);
	  }

	  if ( Seq ) IndexedSeq.__proto__ = Seq;
	  IndexedSeq.prototype = Object.create( Seq && Seq.prototype );
	  IndexedSeq.prototype.constructor = IndexedSeq;

	  IndexedSeq.of = function of (/*...values*/) {
	    return IndexedSeq(arguments);
	  };

	  IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq () {
	    return this;
	  };

	  IndexedSeq.prototype.toString = function toString () {
	    return this.__toString('Seq [', ']');
	  };

	  return IndexedSeq;
	}(Seq));

	var SetSeq = /*@__PURE__*/(function (Seq) {
	  function SetSeq(value) {
	    return (isCollection(value) && !isAssociative(value)
	      ? value
	      : IndexedSeq(value)
	    ).toSetSeq();
	  }

	  if ( Seq ) SetSeq.__proto__ = Seq;
	  SetSeq.prototype = Object.create( Seq && Seq.prototype );
	  SetSeq.prototype.constructor = SetSeq;

	  SetSeq.of = function of (/*...values*/) {
	    return SetSeq(arguments);
	  };

	  SetSeq.prototype.toSetSeq = function toSetSeq () {
	    return this;
	  };

	  return SetSeq;
	}(Seq));

	Seq.isSeq = isSeq;
	Seq.Keyed = KeyedSeq;
	Seq.Set = SetSeq;
	Seq.Indexed = IndexedSeq;

	Seq.prototype[IS_SEQ_SYMBOL] = true;

	// #pragma Root Sequences

	var ArraySeq = /*@__PURE__*/(function (IndexedSeq) {
	  function ArraySeq(array) {
	    this._array = array;
	    this.size = array.length;
	  }

	  if ( IndexedSeq ) ArraySeq.__proto__ = IndexedSeq;
	  ArraySeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );
	  ArraySeq.prototype.constructor = ArraySeq;

	  ArraySeq.prototype.get = function get (index, notSetValue) {
	    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
	  };

	  ArraySeq.prototype.__iterate = function __iterate (fn, reverse) {
	    var array = this._array;
	    var size = array.length;
	    var i = 0;
	    while (i !== size) {
	      var ii = reverse ? size - ++i : i++;
	      if (fn(array[ii], ii, this) === false) {
	        break;
	      }
	    }
	    return i;
	  };

	  ArraySeq.prototype.__iterator = function __iterator (type, reverse) {
	    var array = this._array;
	    var size = array.length;
	    var i = 0;
	    return new Iterator(function () {
	      if (i === size) {
	        return iteratorDone();
	      }
	      var ii = reverse ? size - ++i : i++;
	      return iteratorValue(type, ii, array[ii]);
	    });
	  };

	  return ArraySeq;
	}(IndexedSeq));

	var ObjectSeq = /*@__PURE__*/(function (KeyedSeq) {
	  function ObjectSeq(object) {
	    var keys = Object.keys(object);
	    this._object = object;
	    this._keys = keys;
	    this.size = keys.length;
	  }

	  if ( KeyedSeq ) ObjectSeq.__proto__ = KeyedSeq;
	  ObjectSeq.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );
	  ObjectSeq.prototype.constructor = ObjectSeq;

	  ObjectSeq.prototype.get = function get (key, notSetValue) {
	    if (notSetValue !== undefined && !this.has(key)) {
	      return notSetValue;
	    }
	    return this._object[key];
	  };

	  ObjectSeq.prototype.has = function has (key) {
	    return hasOwnProperty$c.call(this._object, key);
	  };

	  ObjectSeq.prototype.__iterate = function __iterate (fn, reverse) {
	    var object = this._object;
	    var keys = this._keys;
	    var size = keys.length;
	    var i = 0;
	    while (i !== size) {
	      var key = keys[reverse ? size - ++i : i++];
	      if (fn(object[key], key, this) === false) {
	        break;
	      }
	    }
	    return i;
	  };

	  ObjectSeq.prototype.__iterator = function __iterator (type, reverse) {
	    var object = this._object;
	    var keys = this._keys;
	    var size = keys.length;
	    var i = 0;
	    return new Iterator(function () {
	      if (i === size) {
	        return iteratorDone();
	      }
	      var key = keys[reverse ? size - ++i : i++];
	      return iteratorValue(type, key, object[key]);
	    });
	  };

	  return ObjectSeq;
	}(KeyedSeq));
	ObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;

	var CollectionSeq = /*@__PURE__*/(function (IndexedSeq) {
	  function CollectionSeq(collection) {
	    this._collection = collection;
	    this.size = collection.length || collection.size;
	  }

	  if ( IndexedSeq ) CollectionSeq.__proto__ = IndexedSeq;
	  CollectionSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );
	  CollectionSeq.prototype.constructor = CollectionSeq;

	  CollectionSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {
	    if (reverse) {
	      return this.cacheResult().__iterate(fn, reverse);
	    }
	    var collection = this._collection;
	    var iterator = getIterator(collection);
	    var iterations = 0;
	    if (isIterator(iterator)) {
	      var step;
	      while (!(step = iterator.next()).done) {
	        if (fn(step.value, iterations++, this) === false) {
	          break;
	        }
	      }
	    }
	    return iterations;
	  };

	  CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {
	    if (reverse) {
	      return this.cacheResult().__iterator(type, reverse);
	    }
	    var collection = this._collection;
	    var iterator = getIterator(collection);
	    if (!isIterator(iterator)) {
	      return new Iterator(iteratorDone);
	    }
	    var iterations = 0;
	    return new Iterator(function () {
	      var step = iterator.next();
	      return step.done ? step : iteratorValue(type, iterations++, step.value);
	    });
	  };

	  return CollectionSeq;
	}(IndexedSeq));

	// # pragma Helper functions

	var EMPTY_SEQ;

	function emptySequence() {
	  return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
	}

	function keyedSeqFromValue(value) {
	  var seq = Array.isArray(value)
	    ? new ArraySeq(value)
	    : hasIterator(value)
	      ? new CollectionSeq(value)
	      : undefined;
	  if (seq) {
	    return seq.fromEntrySeq();
	  }
	  if (typeof value === 'object') {
	    return new ObjectSeq(value);
	  }
	  throw new TypeError(
	    'Expected Array or collection object of [k, v] entries, or keyed object: ' +
	      value
	  );
	}

	function indexedSeqFromValue(value) {
	  var seq = maybeIndexedSeqFromValue(value);
	  if (seq) {
	    return seq;
	  }
	  throw new TypeError(
	    'Expected Array or collection object of values: ' + value
	  );
	}

	function seqFromValue(value) {
	  var seq = maybeIndexedSeqFromValue(value);
	  if (seq) {
	    return seq;
	  }
	  if (typeof value === 'object') {
	    return new ObjectSeq(value);
	  }
	  throw new TypeError(
	    'Expected Array or collection object of values, or keyed object: ' + value
	  );
	}

	function maybeIndexedSeqFromValue(value) {
	  return isArrayLike$1(value)
	    ? new ArraySeq(value)
	    : hasIterator(value)
	      ? new CollectionSeq(value)
	      : undefined;
	}

	var IS_MAP_SYMBOL = '@@__IMMUTABLE_MAP__@@';

	function isMap(maybeMap) {
	  return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);
	}

	function isOrderedMap(maybeOrderedMap) {
	  return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
	}

	function isValueObject(maybeValue) {
	  return Boolean(
	    maybeValue &&
	      typeof maybeValue.equals === 'function' &&
	      typeof maybeValue.hashCode === 'function'
	  );
	}

	/**
	 * An extension of the "same-value" algorithm as [described for use by ES6 Map
	 * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
	 *
	 * NaN is considered the same as NaN, however -0 and 0 are considered the same
	 * value, which is different from the algorithm described by
	 * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
	 *
	 * This is extended further to allow Objects to describe the values they
	 * represent, by way of `valueOf` or `equals` (and `hashCode`).
	 *
	 * Note: because of this extension, the key equality of Immutable.Map and the
	 * value equality of Immutable.Set will differ from ES6 Map and Set.
	 *
	 * ### Defining custom values
	 *
	 * The easiest way to describe the value an object represents is by implementing
	 * `valueOf`. For example, `Date` represents a value by returning a unix
	 * timestamp for `valueOf`:
	 *
	 *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
	 *     var date2 = new Date(1234567890000);
	 *     date1.valueOf(); // 1234567890000
	 *     assert( date1 !== date2 );
	 *     assert( Immutable.is( date1, date2 ) );
	 *
	 * Note: overriding `valueOf` may have other implications if you use this object
	 * where JavaScript expects a primitive, such as implicit string coercion.
	 *
	 * For more complex types, especially collections, implementing `valueOf` may
	 * not be performant. An alternative is to implement `equals` and `hashCode`.
	 *
	 * `equals` takes another object, presumably of similar type, and returns true
	 * if it is equal. Equality is symmetrical, so the same result should be
	 * returned if this and the argument are flipped.
	 *
	 *     assert( a.equals(b) === b.equals(a) );
	 *
	 * `hashCode` returns a 32bit integer number representing the object which will
	 * be used to determine how to store the value object in a Map or Set. You must
	 * provide both or neither methods, one must not exist without the other.
	 *
	 * Also, an important relationship between these methods must be upheld: if two
	 * values are equal, they *must* return the same hashCode. If the values are not
	 * equal, they might have the same hashCode; this is called a hash collision,
	 * and while undesirable for performance reasons, it is acceptable.
	 *
	 *     if (a.equals(b)) {
	 *       assert( a.hashCode() === b.hashCode() );
	 *     }
	 *
	 * All Immutable collections are Value Objects: they implement `equals()`
	 * and `hashCode()`.
	 */
	function is$3(valueA, valueB) {
	  if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	    return true;
	  }
	  if (!valueA || !valueB) {
	    return false;
	  }
	  if (
	    typeof valueA.valueOf === 'function' &&
	    typeof valueB.valueOf === 'function'
	  ) {
	    valueA = valueA.valueOf();
	    valueB = valueB.valueOf();
	    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	      return true;
	    }
	    if (!valueA || !valueB) {
	      return false;
	    }
	  }
	  return !!(
	    isValueObject(valueA) &&
	    isValueObject(valueB) &&
	    valueA.equals(valueB)
	  );
	}

	var imul =
	  typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2
	    ? Math.imul
	    : function imul(a, b) {
	        a |= 0; // int
	        b |= 0; // int
	        var c = a & 0xffff;
	        var d = b & 0xffff;
	        // Shift by 0 fixes the sign on the high part.
	        return (c * d + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0)) | 0; // int
	      };

	// v8 has an optimization for storing 31-bit signed numbers.
	// Values which have either 00 or 11 as the high order bits qualify.
	// This function drops the highest order bit in a signed number, maintaining
	// the sign bit.
	function smi(i32) {
	  return ((i32 >>> 1) & 0x40000000) | (i32 & 0xbfffffff);
	}

	var defaultValueOf = Object.prototype.valueOf;

	function hash(o) {
	  switch (typeof o) {
	    case 'boolean':
	      // The hash values for built-in constants are a 1 value for each 5-byte
	      // shift region expect for the first, which encodes the value. This
	      // reduces the odds of a hash collision for these common values.
	      return o ? 0x42108421 : 0x42108420;
	    case 'number':
	      return hashNumber(o);
	    case 'string':
	      return o.length > STRING_HASH_CACHE_MIN_STRLEN
	        ? cachedHashString(o)
	        : hashString(o);
	    case 'object':
	    case 'function':
	      if (o === null) {
	        return 0x42108422;
	      }
	      if (typeof o.hashCode === 'function') {
	        // Drop any high bits from accidentally long hash codes.
	        return smi(o.hashCode(o));
	      }
	      if (o.valueOf !== defaultValueOf && typeof o.valueOf === 'function') {
	        o = o.valueOf(o);
	      }
	      return hashJSObj(o);
	    case 'undefined':
	      return 0x42108423;
	    default:
	      if (typeof o.toString === 'function') {
	        return hashString(o.toString());
	      }
	      throw new Error('Value type ' + typeof o + ' cannot be hashed.');
	  }
	}

	// Compress arbitrarily large numbers into smi hashes.
	function hashNumber(n) {
	  if (n !== n || n === Infinity) {
	    return 0;
	  }
	  var hash = n | 0;
	  if (hash !== n) {
	    hash ^= n * 0xffffffff;
	  }
	  while (n > 0xffffffff) {
	    n /= 0xffffffff;
	    hash ^= n;
	  }
	  return smi(hash);
	}

	function cachedHashString(string) {
	  var hashed = stringHashCache[string];
	  if (hashed === undefined) {
	    hashed = hashString(string);
	    if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
	      STRING_HASH_CACHE_SIZE = 0;
	      stringHashCache = {};
	    }
	    STRING_HASH_CACHE_SIZE++;
	    stringHashCache[string] = hashed;
	  }
	  return hashed;
	}

	// http://jsperf.com/hashing-strings
	function hashString(string) {
	  // This is the hash from JVM
	  // The hash code for a string is computed as
	  // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	  // where s[i] is the ith character of the string and n is the length of
	  // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
	  // (exclusive) by dropping high bits.
	  var hashed = 0;
	  for (var ii = 0; ii < string.length; ii++) {
	    hashed = (31 * hashed + string.charCodeAt(ii)) | 0;
	  }
	  return smi(hashed);
	}

	function hashJSObj(obj) {
	  var hashed;
	  if (usingWeakMap) {
	    hashed = weakMap.get(obj);
	    if (hashed !== undefined) {
	      return hashed;
	    }
	  }

	  hashed = obj[UID_HASH_KEY];
	  if (hashed !== undefined) {
	    return hashed;
	  }

	  if (!canDefineProperty) {
	    hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
	    if (hashed !== undefined) {
	      return hashed;
	    }

	    hashed = getIENodeHash(obj);
	    if (hashed !== undefined) {
	      return hashed;
	    }
	  }

	  hashed = ++objHashUID;
	  if (objHashUID & 0x40000000) {
	    objHashUID = 0;
	  }

	  if (usingWeakMap) {
	    weakMap.set(obj, hashed);
	  } else if (isExtensible !== undefined && isExtensible(obj) === false) {
	    throw new Error('Non-extensible objects are not allowed as keys.');
	  } else if (canDefineProperty) {
	    Object.defineProperty(obj, UID_HASH_KEY, {
	      enumerable: false,
	      configurable: false,
	      writable: false,
	      value: hashed,
	    });
	  } else if (
	    obj.propertyIsEnumerable !== undefined &&
	    obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable
	  ) {
	    // Since we can't define a non-enumerable property on the object
	    // we'll hijack one of the less-used non-enumerable properties to
	    // save our hash on it. Since this is a function it will not show up in
	    // `JSON.stringify` which is what we want.
	    obj.propertyIsEnumerable = function() {
	      return this.constructor.prototype.propertyIsEnumerable.apply(
	        this,
	        arguments
	      );
	    };
	    obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;
	  } else if (obj.nodeType !== undefined) {
	    // At this point we couldn't get the IE `uniqueID` to use as a hash
	    // and we couldn't use a non-enumerable property to exploit the
	    // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
	    // itself.
	    obj[UID_HASH_KEY] = hashed;
	  } else {
	    throw new Error('Unable to set a non-enumerable property on object.');
	  }

	  return hashed;
	}

	// Get references to ES5 object methods.
	var isExtensible = Object.isExtensible;

	// True if Object.defineProperty works as expected. IE8 fails this test.
	var canDefineProperty = (function() {
	  try {
	    Object.defineProperty({}, '@', {});
	    return true;
	  } catch (e) {
	    return false;
	  }
	})();

	// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
	// and avoid memory leaks from the IE cloneNode bug.
	function getIENodeHash(node) {
	  if (node && node.nodeType > 0) {
	    switch (node.nodeType) {
	      case 1: // Element
	        return node.uniqueID;
	      case 9: // Document
	        return node.documentElement && node.documentElement.uniqueID;
	    }
	  }
	}

	// If possible, use a WeakMap.
	var usingWeakMap = typeof WeakMap === 'function';
	var weakMap;
	if (usingWeakMap) {
	  weakMap = new WeakMap();
	}

	var objHashUID = 0;

	var UID_HASH_KEY = '__immutablehash__';
	if (typeof Symbol === 'function') {
	  UID_HASH_KEY = Symbol(UID_HASH_KEY);
	}

	var STRING_HASH_CACHE_MIN_STRLEN = 16;
	var STRING_HASH_CACHE_MAX_SIZE = 255;
	var STRING_HASH_CACHE_SIZE = 0;
	var stringHashCache = {};

	var ToKeyedSequence = /*@__PURE__*/(function (KeyedSeq$$1) {
	  function ToKeyedSequence(indexed, useKeys) {
	    this._iter = indexed;
	    this._useKeys = useKeys;
	    this.size = indexed.size;
	  }

	  if ( KeyedSeq$$1 ) ToKeyedSequence.__proto__ = KeyedSeq$$1;
	  ToKeyedSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );
	  ToKeyedSequence.prototype.constructor = ToKeyedSequence;

	  ToKeyedSequence.prototype.get = function get (key, notSetValue) {
	    return this._iter.get(key, notSetValue);
	  };

	  ToKeyedSequence.prototype.has = function has (key) {
	    return this._iter.has(key);
	  };

	  ToKeyedSequence.prototype.valueSeq = function valueSeq () {
	    return this._iter.valueSeq();
	  };

	  ToKeyedSequence.prototype.reverse = function reverse () {
	    var this$1 = this;

	    var reversedSequence = reverseFactory(this, true);
	    if (!this._useKeys) {
	      reversedSequence.valueSeq = function () { return this$1._iter.toSeq().reverse(); };
	    }
	    return reversedSequence;
	  };

	  ToKeyedSequence.prototype.map = function map (mapper, context) {
	    var this$1 = this;

	    var mappedSequence = mapFactory(this, mapper, context);
	    if (!this._useKeys) {
	      mappedSequence.valueSeq = function () { return this$1._iter.toSeq().map(mapper, context); };
	    }
	    return mappedSequence;
	  };

	  ToKeyedSequence.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    return this._iter.__iterate(function (v, k) { return fn(v, k, this$1); }, reverse);
	  };

	  ToKeyedSequence.prototype.__iterator = function __iterator (type, reverse) {
	    return this._iter.__iterator(type, reverse);
	  };

	  return ToKeyedSequence;
	}(KeyedSeq));
	ToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;

	var ToIndexedSequence = /*@__PURE__*/(function (IndexedSeq$$1) {
	  function ToIndexedSequence(iter) {
	    this._iter = iter;
	    this.size = iter.size;
	  }

	  if ( IndexedSeq$$1 ) ToIndexedSequence.__proto__ = IndexedSeq$$1;
	  ToIndexedSequence.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );
	  ToIndexedSequence.prototype.constructor = ToIndexedSequence;

	  ToIndexedSequence.prototype.includes = function includes (value) {
	    return this._iter.includes(value);
	  };

	  ToIndexedSequence.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    var i = 0;
	    reverse && ensureSize(this);
	    return this._iter.__iterate(
	      function (v) { return fn(v, reverse ? this$1.size - ++i : i++, this$1); },
	      reverse
	    );
	  };

	  ToIndexedSequence.prototype.__iterator = function __iterator (type, reverse) {
	    var this$1 = this;

	    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	    var i = 0;
	    reverse && ensureSize(this);
	    return new Iterator(function () {
	      var step = iterator.next();
	      return step.done
	        ? step
	        : iteratorValue(
	            type,
	            reverse ? this$1.size - ++i : i++,
	            step.value,
	            step
	          );
	    });
	  };

	  return ToIndexedSequence;
	}(IndexedSeq));

	var ToSetSequence = /*@__PURE__*/(function (SetSeq$$1) {
	  function ToSetSequence(iter) {
	    this._iter = iter;
	    this.size = iter.size;
	  }

	  if ( SetSeq$$1 ) ToSetSequence.__proto__ = SetSeq$$1;
	  ToSetSequence.prototype = Object.create( SetSeq$$1 && SetSeq$$1.prototype );
	  ToSetSequence.prototype.constructor = ToSetSequence;

	  ToSetSequence.prototype.has = function has (key) {
	    return this._iter.includes(key);
	  };

	  ToSetSequence.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    return this._iter.__iterate(function (v) { return fn(v, v, this$1); }, reverse);
	  };

	  ToSetSequence.prototype.__iterator = function __iterator (type, reverse) {
	    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	    return new Iterator(function () {
	      var step = iterator.next();
	      return step.done
	        ? step
	        : iteratorValue(type, step.value, step.value, step);
	    });
	  };

	  return ToSetSequence;
	}(SetSeq));

	var FromEntriesSequence = /*@__PURE__*/(function (KeyedSeq$$1) {
	  function FromEntriesSequence(entries) {
	    this._iter = entries;
	    this.size = entries.size;
	  }

	  if ( KeyedSeq$$1 ) FromEntriesSequence.__proto__ = KeyedSeq$$1;
	  FromEntriesSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );
	  FromEntriesSequence.prototype.constructor = FromEntriesSequence;

	  FromEntriesSequence.prototype.entrySeq = function entrySeq () {
	    return this._iter.toSeq();
	  };

	  FromEntriesSequence.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    return this._iter.__iterate(function (entry) {
	      // Check if entry exists first so array access doesn't throw for holes
	      // in the parent iteration.
	      if (entry) {
	        validateEntry(entry);
	        var indexedCollection = isCollection(entry);
	        return fn(
	          indexedCollection ? entry.get(1) : entry[1],
	          indexedCollection ? entry.get(0) : entry[0],
	          this$1
	        );
	      }
	    }, reverse);
	  };

	  FromEntriesSequence.prototype.__iterator = function __iterator (type, reverse) {
	    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	    return new Iterator(function () {
	      while (true) {
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        // Check if entry exists first so array access doesn't throw for holes
	        // in the parent iteration.
	        if (entry) {
	          validateEntry(entry);
	          var indexedCollection = isCollection(entry);
	          return iteratorValue(
	            type,
	            indexedCollection ? entry.get(0) : entry[0],
	            indexedCollection ? entry.get(1) : entry[1],
	            step
	          );
	        }
	      }
	    });
	  };

	  return FromEntriesSequence;
	}(KeyedSeq));

	ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;

	function flipFactory(collection) {
	  var flipSequence = makeSequence(collection);
	  flipSequence._iter = collection;
	  flipSequence.size = collection.size;
	  flipSequence.flip = function () { return collection; };
	  flipSequence.reverse = function() {
	    var reversedSequence = collection.reverse.apply(this); // super.reverse()
	    reversedSequence.flip = function () { return collection.reverse(); };
	    return reversedSequence;
	  };
	  flipSequence.has = function (key) { return collection.includes(key); };
	  flipSequence.includes = function (key) { return collection.has(key); };
	  flipSequence.cacheResult = cacheResultThrough;
	  flipSequence.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    return collection.__iterate(function (v, k) { return fn(k, v, this$1) !== false; }, reverse);
	  };
	  flipSequence.__iteratorUncached = function(type, reverse) {
	    if (type === ITERATE_ENTRIES) {
	      var iterator = collection.__iterator(type, reverse);
	      return new Iterator(function () {
	        var step = iterator.next();
	        if (!step.done) {
	          var k = step.value[0];
	          step.value[0] = step.value[1];
	          step.value[1] = k;
	        }
	        return step;
	      });
	    }
	    return collection.__iterator(
	      type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
	      reverse
	    );
	  };
	  return flipSequence;
	}

	function mapFactory(collection, mapper, context) {
	  var mappedSequence = makeSequence(collection);
	  mappedSequence.size = collection.size;
	  mappedSequence.has = function (key) { return collection.has(key); };
	  mappedSequence.get = function (key, notSetValue) {
	    var v = collection.get(key, NOT_SET);
	    return v === NOT_SET
	      ? notSetValue
	      : mapper.call(context, v, key, collection);
	  };
	  mappedSequence.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    return collection.__iterate(
	      function (v, k, c) { return fn(mapper.call(context, v, k, c), k, this$1) !== false; },
	      reverse
	    );
	  };
	  mappedSequence.__iteratorUncached = function(type, reverse) {
	    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
	    return new Iterator(function () {
	      var step = iterator.next();
	      if (step.done) {
	        return step;
	      }
	      var entry = step.value;
	      var key = entry[0];
	      return iteratorValue(
	        type,
	        key,
	        mapper.call(context, entry[1], key, collection),
	        step
	      );
	    });
	  };
	  return mappedSequence;
	}

	function reverseFactory(collection, useKeys) {
	  var this$1 = this;

	  var reversedSequence = makeSequence(collection);
	  reversedSequence._iter = collection;
	  reversedSequence.size = collection.size;
	  reversedSequence.reverse = function () { return collection; };
	  if (collection.flip) {
	    reversedSequence.flip = function() {
	      var flipSequence = flipFactory(collection);
	      flipSequence.reverse = function () { return collection.flip(); };
	      return flipSequence;
	    };
	  }
	  reversedSequence.get = function (key, notSetValue) { return collection.get(useKeys ? key : -1 - key, notSetValue); };
	  reversedSequence.has = function (key) { return collection.has(useKeys ? key : -1 - key); };
	  reversedSequence.includes = function (value) { return collection.includes(value); };
	  reversedSequence.cacheResult = cacheResultThrough;
	  reversedSequence.__iterate = function(fn, reverse) {
	    var this$1 = this;

	    var i = 0;
	    reverse && ensureSize(collection);
	    return collection.__iterate(
	      function (v, k) { return fn(v, useKeys ? k : reverse ? this$1.size - ++i : i++, this$1); },
	      !reverse
	    );
	  };
	  reversedSequence.__iterator = function (type, reverse) {
	    var i = 0;
	    reverse && ensureSize(collection);
	    var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);
	    return new Iterator(function () {
	      var step = iterator.next();
	      if (step.done) {
	        return step;
	      }
	      var entry = step.value;
	      return iteratorValue(
	        type,
	        useKeys ? entry[0] : reverse ? this$1.size - ++i : i++,
	        entry[1],
	        step
	      );
	    });
	  };
	  return reversedSequence;
	}

	function filterFactory(collection, predicate, context, useKeys) {
	  var filterSequence = makeSequence(collection);
	  if (useKeys) {
	    filterSequence.has = function (key) {
	      var v = collection.get(key, NOT_SET);
	      return v !== NOT_SET && !!predicate.call(context, v, key, collection);
	    };
	    filterSequence.get = function (key, notSetValue) {
	      var v = collection.get(key, NOT_SET);
	      return v !== NOT_SET && predicate.call(context, v, key, collection)
	        ? v
	        : notSetValue;
	    };
	  }
	  filterSequence.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    var iterations = 0;
	    collection.__iterate(function (v, k, c) {
	      if (predicate.call(context, v, k, c)) {
	        iterations++;
	        return fn(v, useKeys ? k : iterations - 1, this$1);
	      }
	    }, reverse);
	    return iterations;
	  };
	  filterSequence.__iteratorUncached = function(type, reverse) {
	    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
	    var iterations = 0;
	    return new Iterator(function () {
	      while (true) {
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var key = entry[0];
	        var value = entry[1];
	        if (predicate.call(context, value, key, collection)) {
	          return iteratorValue(type, useKeys ? key : iterations++, value, step);
	        }
	      }
	    });
	  };
	  return filterSequence;
	}

	function countByFactory(collection, grouper, context) {
	  var groups = Map$2().asMutable();
	  collection.__iterate(function (v, k) {
	    groups.update(grouper.call(context, v, k, collection), 0, function (a) { return a + 1; });
	  });
	  return groups.asImmutable();
	}

	function groupByFactory(collection, grouper, context) {
	  var isKeyedIter = isKeyed(collection);
	  var groups = (isOrdered(collection) ? OrderedMap() : Map$2()).asMutable();
	  collection.__iterate(function (v, k) {
	    groups.update(
	      grouper.call(context, v, k, collection),
	      function (a) { return ((a = a || []), a.push(isKeyedIter ? [k, v] : v), a); }
	    );
	  });
	  var coerce = collectionClass(collection);
	  return groups.map(function (arr) { return reify(collection, coerce(arr)); }).asImmutable();
	}

	function sliceFactory(collection, begin, end, useKeys) {
	  var originalSize = collection.size;

	  if (wholeSlice(begin, end, originalSize)) {
	    return collection;
	  }

	  var resolvedBegin = resolveBegin(begin, originalSize);
	  var resolvedEnd = resolveEnd(end, originalSize);

	  // begin or end will be NaN if they were provided as negative numbers and
	  // this collection's size is unknown. In that case, cache first so there is
	  // a known size and these do not resolve to NaN.
	  if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
	    return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);
	  }

	  // Note: resolvedEnd is undefined when the original sequence's length is
	  // unknown and this slice did not supply an end and should contain all
	  // elements after resolvedBegin.
	  // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
	  var resolvedSize = resolvedEnd - resolvedBegin;
	  var sliceSize;
	  if (resolvedSize === resolvedSize) {
	    sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
	  }

	  var sliceSeq = makeSequence(collection);

	  // If collection.size is undefined, the size of the realized sliceSeq is
	  // unknown at this point unless the number of items to slice is 0
	  sliceSeq.size =
	    sliceSize === 0 ? sliceSize : (collection.size && sliceSize) || undefined;

	  if (!useKeys && isSeq(collection) && sliceSize >= 0) {
	    sliceSeq.get = function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      return index >= 0 && index < sliceSize
	        ? collection.get(index + resolvedBegin, notSetValue)
	        : notSetValue;
	    };
	  }

	  sliceSeq.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    if (sliceSize === 0) {
	      return 0;
	    }
	    if (reverse) {
	      return this.cacheResult().__iterate(fn, reverse);
	    }
	    var skipped = 0;
	    var isSkipping = true;
	    var iterations = 0;
	    collection.__iterate(function (v, k) {
	      if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
	        iterations++;
	        return (
	          fn(v, useKeys ? k : iterations - 1, this$1) !== false &&
	          iterations !== sliceSize
	        );
	      }
	    });
	    return iterations;
	  };

	  sliceSeq.__iteratorUncached = function(type, reverse) {
	    if (sliceSize !== 0 && reverse) {
	      return this.cacheResult().__iterator(type, reverse);
	    }
	    // Don't bother instantiating parent iterator if taking 0.
	    if (sliceSize === 0) {
	      return new Iterator(iteratorDone);
	    }
	    var iterator = collection.__iterator(type, reverse);
	    var skipped = 0;
	    var iterations = 0;
	    return new Iterator(function () {
	      while (skipped++ < resolvedBegin) {
	        iterator.next();
	      }
	      if (++iterations > sliceSize) {
	        return iteratorDone();
	      }
	      var step = iterator.next();
	      if (useKeys || type === ITERATE_VALUES || step.done) {
	        return step;
	      }
	      if (type === ITERATE_KEYS) {
	        return iteratorValue(type, iterations - 1, undefined, step);
	      }
	      return iteratorValue(type, iterations - 1, step.value[1], step);
	    });
	  };

	  return sliceSeq;
	}

	function takeWhileFactory(collection, predicate, context) {
	  var takeSequence = makeSequence(collection);
	  takeSequence.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    if (reverse) {
	      return this.cacheResult().__iterate(fn, reverse);
	    }
	    var iterations = 0;
	    collection.__iterate(
	      function (v, k, c) { return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1); }
	    );
	    return iterations;
	  };
	  takeSequence.__iteratorUncached = function(type, reverse) {
	    var this$1 = this;

	    if (reverse) {
	      return this.cacheResult().__iterator(type, reverse);
	    }
	    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
	    var iterating = true;
	    return new Iterator(function () {
	      if (!iterating) {
	        return iteratorDone();
	      }
	      var step = iterator.next();
	      if (step.done) {
	        return step;
	      }
	      var entry = step.value;
	      var k = entry[0];
	      var v = entry[1];
	      if (!predicate.call(context, v, k, this$1)) {
	        iterating = false;
	        return iteratorDone();
	      }
	      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
	    });
	  };
	  return takeSequence;
	}

	function skipWhileFactory(collection, predicate, context, useKeys) {
	  var skipSequence = makeSequence(collection);
	  skipSequence.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    if (reverse) {
	      return this.cacheResult().__iterate(fn, reverse);
	    }
	    var isSkipping = true;
	    var iterations = 0;
	    collection.__iterate(function (v, k, c) {
	      if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
	        iterations++;
	        return fn(v, useKeys ? k : iterations - 1, this$1);
	      }
	    });
	    return iterations;
	  };
	  skipSequence.__iteratorUncached = function(type, reverse) {
	    var this$1 = this;

	    if (reverse) {
	      return this.cacheResult().__iterator(type, reverse);
	    }
	    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
	    var skipping = true;
	    var iterations = 0;
	    return new Iterator(function () {
	      var step;
	      var k;
	      var v;
	      do {
	        step = iterator.next();
	        if (step.done) {
	          if (useKeys || type === ITERATE_VALUES) {
	            return step;
	          }
	          if (type === ITERATE_KEYS) {
	            return iteratorValue(type, iterations++, undefined, step);
	          }
	          return iteratorValue(type, iterations++, step.value[1], step);
	        }
	        var entry = step.value;
	        k = entry[0];
	        v = entry[1];
	        skipping && (skipping = predicate.call(context, v, k, this$1));
	      } while (skipping);
	      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
	    });
	  };
	  return skipSequence;
	}

	function concatFactory(collection, values) {
	  var isKeyedCollection = isKeyed(collection);
	  var iters = [collection]
	    .concat(values)
	    .map(function (v) {
	      if (!isCollection(v)) {
	        v = isKeyedCollection
	          ? keyedSeqFromValue(v)
	          : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
	      } else if (isKeyedCollection) {
	        v = KeyedCollection(v);
	      }
	      return v;
	    })
	    .filter(function (v) { return v.size !== 0; });

	  if (iters.length === 0) {
	    return collection;
	  }

	  if (iters.length === 1) {
	    var singleton = iters[0];
	    if (
	      singleton === collection ||
	      (isKeyedCollection && isKeyed(singleton)) ||
	      (isIndexed(collection) && isIndexed(singleton))
	    ) {
	      return singleton;
	    }
	  }

	  var concatSeq = new ArraySeq(iters);
	  if (isKeyedCollection) {
	    concatSeq = concatSeq.toKeyedSeq();
	  } else if (!isIndexed(collection)) {
	    concatSeq = concatSeq.toSetSeq();
	  }
	  concatSeq = concatSeq.flatten(true);
	  concatSeq.size = iters.reduce(function (sum, seq) {
	    if (sum !== undefined) {
	      var size = seq.size;
	      if (size !== undefined) {
	        return sum + size;
	      }
	    }
	  }, 0);
	  return concatSeq;
	}

	function flattenFactory(collection, depth, useKeys) {
	  var flatSequence = makeSequence(collection);
	  flatSequence.__iterateUncached = function(fn, reverse) {
	    if (reverse) {
	      return this.cacheResult().__iterate(fn, reverse);
	    }
	    var iterations = 0;
	    var stopped = false;
	    function flatDeep(iter, currentDepth) {
	      iter.__iterate(function (v, k) {
	        if ((!depth || currentDepth < depth) && isCollection(v)) {
	          flatDeep(v, currentDepth + 1);
	        } else {
	          iterations++;
	          if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {
	            stopped = true;
	          }
	        }
	        return !stopped;
	      }, reverse);
	    }
	    flatDeep(collection, 0);
	    return iterations;
	  };
	  flatSequence.__iteratorUncached = function(type, reverse) {
	    if (reverse) {
	      return this.cacheResult().__iterator(type, reverse);
	    }
	    var iterator = collection.__iterator(type, reverse);
	    var stack = [];
	    var iterations = 0;
	    return new Iterator(function () {
	      while (iterator) {
	        var step = iterator.next();
	        if (step.done !== false) {
	          iterator = stack.pop();
	          continue;
	        }
	        var v = step.value;
	        if (type === ITERATE_ENTRIES) {
	          v = v[1];
	        }
	        if ((!depth || stack.length < depth) && isCollection(v)) {
	          stack.push(iterator);
	          iterator = v.__iterator(type, reverse);
	        } else {
	          return useKeys ? step : iteratorValue(type, iterations++, v, step);
	        }
	      }
	      return iteratorDone();
	    });
	  };
	  return flatSequence;
	}

	function flatMapFactory(collection, mapper, context) {
	  var coerce = collectionClass(collection);
	  return collection
	    .toSeq()
	    .map(function (v, k) { return coerce(mapper.call(context, v, k, collection)); })
	    .flatten(true);
	}

	function interposeFactory(collection, separator) {
	  var interposedSequence = makeSequence(collection);
	  interposedSequence.size = collection.size && collection.size * 2 - 1;
	  interposedSequence.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    var iterations = 0;
	    collection.__iterate(
	      function (v) { return (!iterations || fn(separator, iterations++, this$1) !== false) &&
	        fn(v, iterations++, this$1) !== false; },
	      reverse
	    );
	    return iterations;
	  };
	  interposedSequence.__iteratorUncached = function(type, reverse) {
	    var iterator = collection.__iterator(ITERATE_VALUES, reverse);
	    var iterations = 0;
	    var step;
	    return new Iterator(function () {
	      if (!step || iterations % 2) {
	        step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	      }
	      return iterations % 2
	        ? iteratorValue(type, iterations++, separator)
	        : iteratorValue(type, iterations++, step.value, step);
	    });
	  };
	  return interposedSequence;
	}

	function sortFactory(collection, comparator, mapper) {
	  if (!comparator) {
	    comparator = defaultComparator;
	  }
	  var isKeyedCollection = isKeyed(collection);
	  var index = 0;
	  var entries = collection
	    .toSeq()
	    .map(function (v, k) { return [k, v, index++, mapper ? mapper(v, k, collection) : v]; })
	    .valueSeq()
	    .toArray();
	  entries.sort(function (a, b) { return comparator(a[3], b[3]) || a[2] - b[2]; }).forEach(
	    isKeyedCollection
	      ? function (v, i) {
	          entries[i].length = 2;
	        }
	      : function (v, i) {
	          entries[i] = v[1];
	        }
	  );
	  return isKeyedCollection
	    ? KeyedSeq(entries)
	    : isIndexed(collection)
	      ? IndexedSeq(entries)
	      : SetSeq(entries);
	}

	function maxFactory(collection, comparator, mapper) {
	  if (!comparator) {
	    comparator = defaultComparator;
	  }
	  if (mapper) {
	    var entry = collection
	      .toSeq()
	      .map(function (v, k) { return [v, mapper(v, k, collection)]; })
	      .reduce(function (a, b) { return (maxCompare(comparator, a[1], b[1]) ? b : a); });
	    return entry && entry[0];
	  }
	  return collection.reduce(function (a, b) { return (maxCompare(comparator, a, b) ? b : a); });
	}

	function maxCompare(comparator, a, b) {
	  var comp = comparator(b, a);
	  // b is considered the new max if the comparator declares them equal, but
	  // they are not equal and b is in fact a nullish value.
	  return (
	    (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) ||
	    comp > 0
	  );
	}

	function zipWithFactory(keyIter, zipper, iters, zipAll) {
	  var zipSequence = makeSequence(keyIter);
	  var sizes = new ArraySeq(iters).map(function (i) { return i.size; });
	  zipSequence.size = zipAll ? sizes.max() : sizes.min();
	  // Note: this a generic base implementation of __iterate in terms of
	  // __iterator which may be more generically useful in the future.
	  zipSequence.__iterate = function(fn, reverse) {
	    /* generic:
	    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
	    var step;
	    var iterations = 0;
	    while (!(step = iterator.next()).done) {
	      iterations++;
	      if (fn(step.value[1], step.value[0], this) === false) {
	        break;
	      }
	    }
	    return iterations;
	    */
	    // indexed:
	    var iterator = this.__iterator(ITERATE_VALUES, reverse);
	    var step;
	    var iterations = 0;
	    while (!(step = iterator.next()).done) {
	      if (fn(step.value, iterations++, this) === false) {
	        break;
	      }
	    }
	    return iterations;
	  };
	  zipSequence.__iteratorUncached = function(type, reverse) {
	    var iterators = iters.map(
	      function (i) { return ((i = Collection$1(i)), getIterator(reverse ? i.reverse() : i)); }
	    );
	    var iterations = 0;
	    var isDone = false;
	    return new Iterator(function () {
	      var steps;
	      if (!isDone) {
	        steps = iterators.map(function (i) { return i.next(); });
	        isDone = zipAll ? steps.every(function (s) { return s.done; }) : steps.some(function (s) { return s.done; });
	      }
	      if (isDone) {
	        return iteratorDone();
	      }
	      return iteratorValue(
	        type,
	        iterations++,
	        zipper.apply(null, steps.map(function (s) { return s.value; }))
	      );
	    });
	  };
	  return zipSequence;
	}

	// #pragma Helper Functions

	function reify(iter, seq) {
	  return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);
	}

	function validateEntry(entry) {
	  if (entry !== Object(entry)) {
	    throw new TypeError('Expected [K, V] tuple: ' + entry);
	  }
	}

	function collectionClass(collection) {
	  return isKeyed(collection)
	    ? KeyedCollection
	    : isIndexed(collection)
	      ? IndexedCollection
	      : SetCollection;
	}

	function makeSequence(collection) {
	  return Object.create(
	    (isKeyed(collection)
	      ? KeyedSeq
	      : isIndexed(collection)
	        ? IndexedSeq
	        : SetSeq
	    ).prototype
	  );
	}

	function cacheResultThrough() {
	  if (this._iter.cacheResult) {
	    this._iter.cacheResult();
	    this.size = this._iter.size;
	    return this;
	  }
	  return Seq.prototype.cacheResult.call(this);
	}

	function defaultComparator(a, b) {
	  if (a === undefined && b === undefined) {
	    return 0;
	  }

	  if (a === undefined) {
	    return 1;
	  }

	  if (b === undefined) {
	    return -1;
	  }

	  return a > b ? 1 : a < b ? -1 : 0;
	}

	// http://jsperf.com/copy-array-inline
	function arrCopy(arr, offset) {
	  offset = offset || 0;
	  var len = Math.max(0, arr.length - offset);
	  var newArr = new Array(len);
	  for (var ii = 0; ii < len; ii++) {
	    newArr[ii] = arr[ii + offset];
	  }
	  return newArr;
	}

	function invariant$2(condition, error) {
	  if (!condition) { throw new Error(error); }
	}

	function assertNotInfinite(size) {
	  invariant$2(
	    size !== Infinity,
	    'Cannot perform this action with an infinite size.'
	  );
	}

	function coerceKeyPath(keyPath) {
	  if (isArrayLike$1(keyPath) && typeof keyPath !== 'string') {
	    return keyPath;
	  }
	  if (isOrdered(keyPath)) {
	    return keyPath.toArray();
	  }
	  throw new TypeError(
	    'Invalid keyPath: expected Ordered Collection or Array: ' + keyPath
	  );
	}

	function isPlainObj(value) {
	  return (
	    value &&
	    (typeof value.constructor !== 'function' ||
	      value.constructor.name === 'Object')
	  );
	}

	/**
	 * Returns true if the value is a potentially-persistent data structure, either
	 * provided by Immutable.js or a plain Array or Object.
	 */
	function isDataStructure(value) {
	  return (
	    typeof value === 'object' &&
	    (isImmutable(value) || Array.isArray(value) || isPlainObj(value))
	  );
	}

	/**
	 * Converts a value to a string, adding quotes if a string was provided.
	 */
	function quoteString(value) {
	  try {
	    return typeof value === 'string' ? JSON.stringify(value) : String(value);
	  } catch (_ignoreError) {
	    return JSON.stringify(value);
	  }
	}

	function has$2(collection, key) {
	  return isImmutable(collection)
	    ? collection.has(key)
	    : isDataStructure(collection) && hasOwnProperty$c.call(collection, key);
	}

	function get$3(collection, key, notSetValue) {
	  return isImmutable(collection)
	    ? collection.get(key, notSetValue)
	    : !has$2(collection, key)
	      ? notSetValue
	      : typeof collection.get === 'function'
	        ? collection.get(key)
	        : collection[key];
	}

	function shallowCopy(from) {
	  if (Array.isArray(from)) {
	    return arrCopy(from);
	  }
	  var to = {};
	  for (var key in from) {
	    if (hasOwnProperty$c.call(from, key)) {
	      to[key] = from[key];
	    }
	  }
	  return to;
	}

	function remove(collection, key) {
	  if (!isDataStructure(collection)) {
	    throw new TypeError(
	      'Cannot update non-data-structure value: ' + collection
	    );
	  }
	  if (isImmutable(collection)) {
	    if (!collection.remove) {
	      throw new TypeError(
	        'Cannot update immutable value without .remove() method: ' + collection
	      );
	    }
	    return collection.remove(key);
	  }
	  if (!hasOwnProperty$c.call(collection, key)) {
	    return collection;
	  }
	  var collectionCopy = shallowCopy(collection);
	  if (Array.isArray(collectionCopy)) {
	    collectionCopy.splice(key, 1);
	  } else {
	    delete collectionCopy[key];
	  }
	  return collectionCopy;
	}

	function set$3(collection, key, value) {
	  if (!isDataStructure(collection)) {
	    throw new TypeError(
	      'Cannot update non-data-structure value: ' + collection
	    );
	  }
	  if (isImmutable(collection)) {
	    if (!collection.set) {
	      throw new TypeError(
	        'Cannot update immutable value without .set() method: ' + collection
	      );
	    }
	    return collection.set(key, value);
	  }
	  if (hasOwnProperty$c.call(collection, key) && value === collection[key]) {
	    return collection;
	  }
	  var collectionCopy = shallowCopy(collection);
	  collectionCopy[key] = value;
	  return collectionCopy;
	}

	function updateIn(collection, keyPath, notSetValue, updater) {
	  if (!updater) {
	    updater = notSetValue;
	    notSetValue = undefined;
	  }
	  var updatedValue = updateInDeeply(
	    isImmutable(collection),
	    collection,
	    coerceKeyPath(keyPath),
	    0,
	    notSetValue,
	    updater
	  );
	  return updatedValue === NOT_SET ? notSetValue : updatedValue;
	}

	function updateInDeeply(
	  inImmutable,
	  existing,
	  keyPath,
	  i,
	  notSetValue,
	  updater
	) {
	  var wasNotSet = existing === NOT_SET;
	  if (i === keyPath.length) {
	    var existingValue = wasNotSet ? notSetValue : existing;
	    var newValue = updater(existingValue);
	    return newValue === existingValue ? existing : newValue;
	  }
	  if (!wasNotSet && !isDataStructure(existing)) {
	    throw new TypeError(
	      'Cannot update within non-data-structure value in path [' +
	        keyPath.slice(0, i).map(quoteString) +
	        ']: ' +
	        existing
	    );
	  }
	  var key = keyPath[i];
	  var nextExisting = wasNotSet ? NOT_SET : get$3(existing, key, NOT_SET);
	  var nextUpdated = updateInDeeply(
	    nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),
	    nextExisting,
	    keyPath,
	    i + 1,
	    notSetValue,
	    updater
	  );
	  return nextUpdated === nextExisting
	    ? existing
	    : nextUpdated === NOT_SET
	      ? remove(existing, key)
	      : set$3(
	          wasNotSet ? (inImmutable ? emptyMap() : {}) : existing,
	          key,
	          nextUpdated
	        );
	}

	function setIn(collection, keyPath, value) {
	  return updateIn(collection, keyPath, NOT_SET, function () { return value; });
	}

	function setIn$1(keyPath, v) {
	  return setIn(this, keyPath, v);
	}

	function removeIn(collection, keyPath) {
	  return updateIn(collection, keyPath, function () { return NOT_SET; });
	}

	function deleteIn(keyPath) {
	  return removeIn(this, keyPath);
	}

	function update(collection, key, notSetValue, updater) {
	  return updateIn(collection, [key], notSetValue, updater);
	}

	function update$1(key, notSetValue, updater) {
	  return arguments.length === 1
	    ? key(this)
	    : update(this, key, notSetValue, updater);
	}

	function updateIn$1(keyPath, notSetValue, updater) {
	  return updateIn(this, keyPath, notSetValue, updater);
	}

	function merge() {
	  var iters = [], len = arguments.length;
	  while ( len-- ) iters[ len ] = arguments[ len ];

	  return mergeIntoKeyedWith(this, iters);
	}

	function mergeWith(merger) {
	  var iters = [], len = arguments.length - 1;
	  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];

	  if (typeof merger !== 'function') {
	    throw new TypeError('Invalid merger function: ' + merger);
	  }
	  return mergeIntoKeyedWith(this, iters, merger);
	}

	function mergeIntoKeyedWith(collection, collections, merger) {
	  var iters = [];
	  for (var ii = 0; ii < collections.length; ii++) {
	    var collection$1 = KeyedCollection(collections[ii]);
	    if (collection$1.size !== 0) {
	      iters.push(collection$1);
	    }
	  }
	  if (iters.length === 0) {
	    return collection;
	  }
	  if (
	    collection.toSeq().size === 0 &&
	    !collection.__ownerID &&
	    iters.length === 1
	  ) {
	    return collection.constructor(iters[0]);
	  }
	  return collection.withMutations(function (collection) {
	    var mergeIntoCollection = merger
	      ? function (value, key) {
	          update(
	            collection,
	            key,
	            NOT_SET,
	            function (oldVal) { return (oldVal === NOT_SET ? value : merger(oldVal, value, key)); }
	          );
	        }
	      : function (value, key) {
	          collection.set(key, value);
	        };
	    for (var ii = 0; ii < iters.length; ii++) {
	      iters[ii].forEach(mergeIntoCollection);
	    }
	  });
	}

	function merge$1(collection) {
	  var sources = [], len = arguments.length - 1;
	  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];

	  return mergeWithSources(collection, sources);
	}

	function mergeWith$1(merger, collection) {
	  var sources = [], len = arguments.length - 2;
	  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];

	  return mergeWithSources(collection, sources, merger);
	}

	function mergeDeep(collection) {
	  var sources = [], len = arguments.length - 1;
	  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];

	  return mergeDeepWithSources(collection, sources);
	}

	function mergeDeepWith(merger, collection) {
	  var sources = [], len = arguments.length - 2;
	  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];

	  return mergeDeepWithSources(collection, sources, merger);
	}

	function mergeDeepWithSources(collection, sources, merger) {
	  return mergeWithSources(collection, sources, deepMergerWith(merger));
	}

	function mergeWithSources(collection, sources, merger) {
	  if (!isDataStructure(collection)) {
	    throw new TypeError(
	      'Cannot merge into non-data-structure value: ' + collection
	    );
	  }
	  if (isImmutable(collection)) {
	    return typeof merger === 'function' && collection.mergeWith
	      ? collection.mergeWith.apply(collection, [ merger ].concat( sources ))
	      : collection.merge
	        ? collection.merge.apply(collection, sources)
	        : collection.concat.apply(collection, sources);
	  }
	  var isArray = Array.isArray(collection);
	  var merged = collection;
	  var Collection$$1 = isArray ? IndexedCollection : KeyedCollection;
	  var mergeItem = isArray
	    ? function (value) {
	        // Copy on write
	        if (merged === collection) {
	          merged = shallowCopy(merged);
	        }
	        merged.push(value);
	      }
	    : function (value, key) {
	        var hasVal = hasOwnProperty$c.call(merged, key);
	        var nextVal =
	          hasVal && merger ? merger(merged[key], value, key) : value;
	        if (!hasVal || nextVal !== merged[key]) {
	          // Copy on write
	          if (merged === collection) {
	            merged = shallowCopy(merged);
	          }
	          merged[key] = nextVal;
	        }
	      };
	  for (var i = 0; i < sources.length; i++) {
	    Collection$$1(sources[i]).forEach(mergeItem);
	  }
	  return merged;
	}

	function deepMergerWith(merger) {
	  function deepMerger(oldValue, newValue, key) {
	    return isDataStructure(oldValue) && isDataStructure(newValue)
	      ? mergeWithSources(oldValue, [newValue], deepMerger)
	      : merger
	        ? merger(oldValue, newValue, key)
	        : newValue;
	  }
	  return deepMerger;
	}

	function mergeDeep$1() {
	  var iters = [], len = arguments.length;
	  while ( len-- ) iters[ len ] = arguments[ len ];

	  return mergeDeepWithSources(this, iters);
	}

	function mergeDeepWith$1(merger) {
	  var iters = [], len = arguments.length - 1;
	  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];

	  return mergeDeepWithSources(this, iters, merger);
	}

	function mergeIn(keyPath) {
	  var iters = [], len = arguments.length - 1;
	  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];

	  return updateIn(this, keyPath, emptyMap(), function (m) { return mergeWithSources(m, iters); });
	}

	function mergeDeepIn(keyPath) {
	  var iters = [], len = arguments.length - 1;
	  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];

	  return updateIn(this, keyPath, emptyMap(), function (m) { return mergeDeepWithSources(m, iters); }
	  );
	}

	function withMutations(fn) {
	  var mutable = this.asMutable();
	  fn(mutable);
	  return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
	}

	function asMutable() {
	  return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
	}

	function asImmutable() {
	  return this.__ensureOwner();
	}

	function wasAltered() {
	  return this.__altered;
	}

	var Map$2 = /*@__PURE__*/(function (KeyedCollection$$1) {
	  function Map(value) {
	    return value === null || value === undefined
	      ? emptyMap()
	      : isMap(value) && !isOrdered(value)
	        ? value
	        : emptyMap().withMutations(function (map) {
	            var iter = KeyedCollection$$1(value);
	            assertNotInfinite(iter.size);
	            iter.forEach(function (v, k) { return map.set(k, v); });
	          });
	  }

	  if ( KeyedCollection$$1 ) Map.__proto__ = KeyedCollection$$1;
	  Map.prototype = Object.create( KeyedCollection$$1 && KeyedCollection$$1.prototype );
	  Map.prototype.constructor = Map;

	  Map.of = function of () {
	    var keyValues = [], len = arguments.length;
	    while ( len-- ) keyValues[ len ] = arguments[ len ];

	    return emptyMap().withMutations(function (map) {
	      for (var i = 0; i < keyValues.length; i += 2) {
	        if (i + 1 >= keyValues.length) {
	          throw new Error('Missing value for key: ' + keyValues[i]);
	        }
	        map.set(keyValues[i], keyValues[i + 1]);
	      }
	    });
	  };

	  Map.prototype.toString = function toString () {
	    return this.__toString('Map {', '}');
	  };

	  // @pragma Access

	  Map.prototype.get = function get (k, notSetValue) {
	    return this._root
	      ? this._root.get(0, undefined, k, notSetValue)
	      : notSetValue;
	  };

	  // @pragma Modification

	  Map.prototype.set = function set (k, v) {
	    return updateMap(this, k, v);
	  };

	  Map.prototype.remove = function remove (k) {
	    return updateMap(this, k, NOT_SET);
	  };

	  Map.prototype.deleteAll = function deleteAll (keys) {
	    var collection = Collection$1(keys);

	    if (collection.size === 0) {
	      return this;
	    }

	    return this.withMutations(function (map) {
	      collection.forEach(function (key) { return map.remove(key); });
	    });
	  };

	  Map.prototype.clear = function clear () {
	    if (this.size === 0) {
	      return this;
	    }
	    if (this.__ownerID) {
	      this.size = 0;
	      this._root = null;
	      this.__hash = undefined;
	      this.__altered = true;
	      return this;
	    }
	    return emptyMap();
	  };

	  // @pragma Composition

	  Map.prototype.sort = function sort (comparator) {
	    // Late binding
	    return OrderedMap(sortFactory(this, comparator));
	  };

	  Map.prototype.sortBy = function sortBy (mapper, comparator) {
	    // Late binding
	    return OrderedMap(sortFactory(this, comparator, mapper));
	  };

	  Map.prototype.map = function map (mapper, context) {
	    return this.withMutations(function (map) {
	      map.forEach(function (value, key) {
	        map.set(key, mapper.call(context, value, key, map));
	      });
	    });
	  };

	  // @pragma Mutability

	  Map.prototype.__iterator = function __iterator (type, reverse) {
	    return new MapIterator(this, type, reverse);
	  };

	  Map.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    var iterations = 0;
	    this._root &&
	      this._root.iterate(function (entry) {
	        iterations++;
	        return fn(entry[1], entry[0], this$1);
	      }, reverse);
	    return iterations;
	  };

	  Map.prototype.__ensureOwner = function __ensureOwner (ownerID) {
	    if (ownerID === this.__ownerID) {
	      return this;
	    }
	    if (!ownerID) {
	      if (this.size === 0) {
	        return emptyMap();
	      }
	      this.__ownerID = ownerID;
	      this.__altered = false;
	      return this;
	    }
	    return makeMap(this.size, this._root, ownerID, this.__hash);
	  };

	  return Map;
	}(KeyedCollection));

	Map$2.isMap = isMap;

	var MapPrototype = Map$2.prototype;
	MapPrototype[IS_MAP_SYMBOL] = true;
	MapPrototype[DELETE] = MapPrototype.remove;
	MapPrototype.removeAll = MapPrototype.deleteAll;
	MapPrototype.setIn = setIn$1;
	MapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;
	MapPrototype.update = update$1;
	MapPrototype.updateIn = updateIn$1;
	MapPrototype.merge = MapPrototype.concat = merge;
	MapPrototype.mergeWith = mergeWith;
	MapPrototype.mergeDeep = mergeDeep$1;
	MapPrototype.mergeDeepWith = mergeDeepWith$1;
	MapPrototype.mergeIn = mergeIn;
	MapPrototype.mergeDeepIn = mergeDeepIn;
	MapPrototype.withMutations = withMutations;
	MapPrototype.wasAltered = wasAltered;
	MapPrototype.asImmutable = asImmutable;
	MapPrototype['@@transducer/init'] = MapPrototype.asMutable = asMutable;
	MapPrototype['@@transducer/step'] = function(result, arr) {
	  return result.set(arr[0], arr[1]);
	};
	MapPrototype['@@transducer/result'] = function(obj) {
	  return obj.asImmutable();
	};

	// #pragma Trie Nodes

	var ArrayMapNode = function ArrayMapNode(ownerID, entries) {
	  this.ownerID = ownerID;
	  this.entries = entries;
	};

	ArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
	  var entries = this.entries;
	  for (var ii = 0, len = entries.length; ii < len; ii++) {
	    if (is$3(key, entries[ii][0])) {
	      return entries[ii][1];
	    }
	  }
	  return notSetValue;
	};

	ArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	  var removed = value === NOT_SET;

	  var entries = this.entries;
	  var idx = 0;
	  var len = entries.length;
	  for (; idx < len; idx++) {
	    if (is$3(key, entries[idx][0])) {
	      break;
	    }
	  }
	  var exists = idx < len;

	  if (exists ? entries[idx][1] === value : removed) {
	    return this;
	  }

	  SetRef(didAlter);
	  (removed || !exists) && SetRef(didChangeSize);

	  if (removed && entries.length === 1) {
	    return; // undefined
	  }

	  if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
	    return createNodes(ownerID, entries, key, value);
	  }

	  var isEditable = ownerID && ownerID === this.ownerID;
	  var newEntries = isEditable ? entries : arrCopy(entries);

	  if (exists) {
	    if (removed) {
	      idx === len - 1
	        ? newEntries.pop()
	        : (newEntries[idx] = newEntries.pop());
	    } else {
	      newEntries[idx] = [key, value];
	    }
	  } else {
	    newEntries.push([key, value]);
	  }

	  if (isEditable) {
	    this.entries = newEntries;
	    return this;
	  }

	  return new ArrayMapNode(ownerID, newEntries);
	};

	var BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {
	  this.ownerID = ownerID;
	  this.bitmap = bitmap;
	  this.nodes = nodes;
	};

	BitmapIndexedNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
	  if (keyHash === undefined) {
	    keyHash = hash(key);
	  }
	  var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
	  var bitmap = this.bitmap;
	  return (bitmap & bit) === 0
	    ? notSetValue
	    : this.nodes[popCount(bitmap & (bit - 1))].get(
	        shift + SHIFT,
	        keyHash,
	        key,
	        notSetValue
	      );
	};

	BitmapIndexedNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	  if (keyHash === undefined) {
	    keyHash = hash(key);
	  }
	  var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	  var bit = 1 << keyHashFrag;
	  var bitmap = this.bitmap;
	  var exists = (bitmap & bit) !== 0;

	  if (!exists && value === NOT_SET) {
	    return this;
	  }

	  var idx = popCount(bitmap & (bit - 1));
	  var nodes = this.nodes;
	  var node = exists ? nodes[idx] : undefined;
	  var newNode = updateNode(
	    node,
	    ownerID,
	    shift + SHIFT,
	    keyHash,
	    key,
	    value,
	    didChangeSize,
	    didAlter
	  );

	  if (newNode === node) {
	    return this;
	  }

	  if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
	    return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
	  }

	  if (
	    exists &&
	    !newNode &&
	    nodes.length === 2 &&
	    isLeafNode(nodes[idx ^ 1])
	  ) {
	    return nodes[idx ^ 1];
	  }

	  if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
	    return newNode;
	  }

	  var isEditable = ownerID && ownerID === this.ownerID;
	  var newBitmap = exists ? (newNode ? bitmap : bitmap ^ bit) : bitmap | bit;
	  var newNodes = exists
	    ? newNode
	      ? setAt(nodes, idx, newNode, isEditable)
	      : spliceOut(nodes, idx, isEditable)
	    : spliceIn(nodes, idx, newNode, isEditable);

	  if (isEditable) {
	    this.bitmap = newBitmap;
	    this.nodes = newNodes;
	    return this;
	  }

	  return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
	};

	var HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {
	  this.ownerID = ownerID;
	  this.count = count;
	  this.nodes = nodes;
	};

	HashArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
	  if (keyHash === undefined) {
	    keyHash = hash(key);
	  }
	  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	  var node = this.nodes[idx];
	  return node
	    ? node.get(shift + SHIFT, keyHash, key, notSetValue)
	    : notSetValue;
	};

	HashArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	  if (keyHash === undefined) {
	    keyHash = hash(key);
	  }
	  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	  var removed = value === NOT_SET;
	  var nodes = this.nodes;
	  var node = nodes[idx];

	  if (removed && !node) {
	    return this;
	  }

	  var newNode = updateNode(
	    node,
	    ownerID,
	    shift + SHIFT,
	    keyHash,
	    key,
	    value,
	    didChangeSize,
	    didAlter
	  );
	  if (newNode === node) {
	    return this;
	  }

	  var newCount = this.count;
	  if (!node) {
	    newCount++;
	  } else if (!newNode) {
	    newCount--;
	    if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
	      return packNodes(ownerID, nodes, newCount, idx);
	    }
	  }

	  var isEditable = ownerID && ownerID === this.ownerID;
	  var newNodes = setAt(nodes, idx, newNode, isEditable);

	  if (isEditable) {
	    this.count = newCount;
	    this.nodes = newNodes;
	    return this;
	  }

	  return new HashArrayMapNode(ownerID, newCount, newNodes);
	};

	var HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {
	  this.ownerID = ownerID;
	  this.keyHash = keyHash;
	  this.entries = entries;
	};

	HashCollisionNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
	  var entries = this.entries;
	  for (var ii = 0, len = entries.length; ii < len; ii++) {
	    if (is$3(key, entries[ii][0])) {
	      return entries[ii][1];
	    }
	  }
	  return notSetValue;
	};

	HashCollisionNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	  if (keyHash === undefined) {
	    keyHash = hash(key);
	  }

	  var removed = value === NOT_SET;

	  if (keyHash !== this.keyHash) {
	    if (removed) {
	      return this;
	    }
	    SetRef(didAlter);
	    SetRef(didChangeSize);
	    return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
	  }

	  var entries = this.entries;
	  var idx = 0;
	  var len = entries.length;
	  for (; idx < len; idx++) {
	    if (is$3(key, entries[idx][0])) {
	      break;
	    }
	  }
	  var exists = idx < len;

	  if (exists ? entries[idx][1] === value : removed) {
	    return this;
	  }

	  SetRef(didAlter);
	  (removed || !exists) && SetRef(didChangeSize);

	  if (removed && len === 2) {
	    return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
	  }

	  var isEditable = ownerID && ownerID === this.ownerID;
	  var newEntries = isEditable ? entries : arrCopy(entries);

	  if (exists) {
	    if (removed) {
	      idx === len - 1
	        ? newEntries.pop()
	        : (newEntries[idx] = newEntries.pop());
	    } else {
	      newEntries[idx] = [key, value];
	    }
	  } else {
	    newEntries.push([key, value]);
	  }

	  if (isEditable) {
	    this.entries = newEntries;
	    return this;
	  }

	  return new HashCollisionNode(ownerID, this.keyHash, newEntries);
	};

	var ValueNode = function ValueNode(ownerID, keyHash, entry) {
	  this.ownerID = ownerID;
	  this.keyHash = keyHash;
	  this.entry = entry;
	};

	ValueNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
	  return is$3(key, this.entry[0]) ? this.entry[1] : notSetValue;
	};

	ValueNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	  var removed = value === NOT_SET;
	  var keyMatch = is$3(key, this.entry[0]);
	  if (keyMatch ? value === this.entry[1] : removed) {
	    return this;
	  }

	  SetRef(didAlter);

	  if (removed) {
	    SetRef(didChangeSize);
	    return; // undefined
	  }

	  if (keyMatch) {
	    if (ownerID && ownerID === this.ownerID) {
	      this.entry[1] = value;
	      return this;
	    }
	    return new ValueNode(ownerID, this.keyHash, [key, value]);
	  }

	  SetRef(didChangeSize);
	  return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
	};

	// #pragma Iterators

	ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(
	  fn,
	  reverse
	) {
	  var entries = this.entries;
	  for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
	    if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
	      return false;
	    }
	  }
	};

	BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(
	  fn,
	  reverse
	) {
	  var nodes = this.nodes;
	  for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
	    var node = nodes[reverse ? maxIndex - ii : ii];
	    if (node && node.iterate(fn, reverse) === false) {
	      return false;
	    }
	  }
	};

	// eslint-disable-next-line no-unused-vars
	ValueNode.prototype.iterate = function(fn, reverse) {
	  return fn(this.entry);
	};

	var MapIterator = /*@__PURE__*/(function (Iterator$$1) {
	  function MapIterator(map, type, reverse) {
	    this._type = type;
	    this._reverse = reverse;
	    this._stack = map._root && mapIteratorFrame(map._root);
	  }

	  if ( Iterator$$1 ) MapIterator.__proto__ = Iterator$$1;
	  MapIterator.prototype = Object.create( Iterator$$1 && Iterator$$1.prototype );
	  MapIterator.prototype.constructor = MapIterator;

	  MapIterator.prototype.next = function next () {
	    var type = this._type;
	    var stack = this._stack;
	    while (stack) {
	      var node = stack.node;
	      var index = stack.index++;
	      var maxIndex = (void 0);
	      if (node.entry) {
	        if (index === 0) {
	          return mapIteratorValue(type, node.entry);
	        }
	      } else if (node.entries) {
	        maxIndex = node.entries.length - 1;
	        if (index <= maxIndex) {
	          return mapIteratorValue(
	            type,
	            node.entries[this._reverse ? maxIndex - index : index]
	          );
	        }
	      } else {
	        maxIndex = node.nodes.length - 1;
	        if (index <= maxIndex) {
	          var subNode = node.nodes[this._reverse ? maxIndex - index : index];
	          if (subNode) {
	            if (subNode.entry) {
	              return mapIteratorValue(type, subNode.entry);
	            }
	            stack = this._stack = mapIteratorFrame(subNode, stack);
	          }
	          continue;
	        }
	      }
	      stack = this._stack = this._stack.__prev;
	    }
	    return iteratorDone();
	  };

	  return MapIterator;
	}(Iterator));

	function mapIteratorValue(type, entry) {
	  return iteratorValue(type, entry[0], entry[1]);
	}

	function mapIteratorFrame(node, prev) {
	  return {
	    node: node,
	    index: 0,
	    __prev: prev,
	  };
	}

	function makeMap(size, root, ownerID, hash$$1) {
	  var map = Object.create(MapPrototype);
	  map.size = size;
	  map._root = root;
	  map.__ownerID = ownerID;
	  map.__hash = hash$$1;
	  map.__altered = false;
	  return map;
	}

	var EMPTY_MAP;
	function emptyMap() {
	  return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
	}

	function updateMap(map, k, v) {
	  var newRoot;
	  var newSize;
	  if (!map._root) {
	    if (v === NOT_SET) {
	      return map;
	    }
	    newSize = 1;
	    newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
	  } else {
	    var didChangeSize = MakeRef();
	    var didAlter = MakeRef();
	    newRoot = updateNode(
	      map._root,
	      map.__ownerID,
	      0,
	      undefined,
	      k,
	      v,
	      didChangeSize,
	      didAlter
	    );
	    if (!didAlter.value) {
	      return map;
	    }
	    newSize = map.size + (didChangeSize.value ? (v === NOT_SET ? -1 : 1) : 0);
	  }
	  if (map.__ownerID) {
	    map.size = newSize;
	    map._root = newRoot;
	    map.__hash = undefined;
	    map.__altered = true;
	    return map;
	  }
	  return newRoot ? makeMap(newSize, newRoot) : emptyMap();
	}

	function updateNode(
	  node,
	  ownerID,
	  shift,
	  keyHash,
	  key,
	  value,
	  didChangeSize,
	  didAlter
	) {
	  if (!node) {
	    if (value === NOT_SET) {
	      return node;
	    }
	    SetRef(didAlter);
	    SetRef(didChangeSize);
	    return new ValueNode(ownerID, keyHash, [key, value]);
	  }
	  return node.update(
	    ownerID,
	    shift,
	    keyHash,
	    key,
	    value,
	    didChangeSize,
	    didAlter
	  );
	}

	function isLeafNode(node) {
	  return (
	    node.constructor === ValueNode || node.constructor === HashCollisionNode
	  );
	}

	function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
	  if (node.keyHash === keyHash) {
	    return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
	  }

	  var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
	  var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

	  var newNode;
	  var nodes =
	    idx1 === idx2
	      ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]
	      : ((newNode = new ValueNode(ownerID, keyHash, entry)),
	        idx1 < idx2 ? [node, newNode] : [newNode, node]);

	  return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
	}

	function createNodes(ownerID, entries, key, value) {
	  if (!ownerID) {
	    ownerID = new OwnerID();
	  }
	  var node = new ValueNode(ownerID, hash(key), [key, value]);
	  for (var ii = 0; ii < entries.length; ii++) {
	    var entry = entries[ii];
	    node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
	  }
	  return node;
	}

	function packNodes(ownerID, nodes, count, excluding) {
	  var bitmap = 0;
	  var packedII = 0;
	  var packedNodes = new Array(count);
	  for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
	    var node = nodes[ii];
	    if (node !== undefined && ii !== excluding) {
	      bitmap |= bit;
	      packedNodes[packedII++] = node;
	    }
	  }
	  return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
	}

	function expandNodes(ownerID, nodes, bitmap, including, node) {
	  var count = 0;
	  var expandedNodes = new Array(SIZE$1);
	  for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
	    expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
	  }
	  expandedNodes[including] = node;
	  return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
	}

	function popCount(x) {
	  x -= (x >> 1) & 0x55555555;
	  x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
	  x = (x + (x >> 4)) & 0x0f0f0f0f;
	  x += x >> 8;
	  x += x >> 16;
	  return x & 0x7f;
	}

	function setAt(array, idx, val, canEdit) {
	  var newArray = canEdit ? array : arrCopy(array);
	  newArray[idx] = val;
	  return newArray;
	}

	function spliceIn(array, idx, val, canEdit) {
	  var newLen = array.length + 1;
	  if (canEdit && idx + 1 === newLen) {
	    array[idx] = val;
	    return array;
	  }
	  var newArray = new Array(newLen);
	  var after = 0;
	  for (var ii = 0; ii < newLen; ii++) {
	    if (ii === idx) {
	      newArray[ii] = val;
	      after = -1;
	    } else {
	      newArray[ii] = array[ii + after];
	    }
	  }
	  return newArray;
	}

	function spliceOut(array, idx, canEdit) {
	  var newLen = array.length - 1;
	  if (canEdit && idx === newLen) {
	    array.pop();
	    return array;
	  }
	  var newArray = new Array(newLen);
	  var after = 0;
	  for (var ii = 0; ii < newLen; ii++) {
	    if (ii === idx) {
	      after = 1;
	    }
	    newArray[ii] = array[ii + after];
	  }
	  return newArray;
	}

	var MAX_ARRAY_MAP_SIZE = SIZE$1 / 4;
	var MAX_BITMAP_INDEXED_SIZE = SIZE$1 / 2;
	var MIN_HASH_ARRAY_MAP_SIZE = SIZE$1 / 4;

	var IS_LIST_SYMBOL = '@@__IMMUTABLE_LIST__@@';

	function isList(maybeList) {
	  return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);
	}

	var List$1 = /*@__PURE__*/(function (IndexedCollection$$1) {
	  function List(value) {
	    var empty = emptyList();
	    if (value === null || value === undefined) {
	      return empty;
	    }
	    if (isList(value)) {
	      return value;
	    }
	    var iter = IndexedCollection$$1(value);
	    var size = iter.size;
	    if (size === 0) {
	      return empty;
	    }
	    assertNotInfinite(size);
	    if (size > 0 && size < SIZE$1) {
	      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
	    }
	    return empty.withMutations(function (list) {
	      list.setSize(size);
	      iter.forEach(function (v, i) { return list.set(i, v); });
	    });
	  }

	  if ( IndexedCollection$$1 ) List.__proto__ = IndexedCollection$$1;
	  List.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );
	  List.prototype.constructor = List;

	  List.of = function of (/*...values*/) {
	    return this(arguments);
	  };

	  List.prototype.toString = function toString () {
	    return this.__toString('List [', ']');
	  };

	  // @pragma Access

	  List.prototype.get = function get (index, notSetValue) {
	    index = wrapIndex(this, index);
	    if (index >= 0 && index < this.size) {
	      index += this._origin;
	      var node = listNodeFor(this, index);
	      return node && node.array[index & MASK];
	    }
	    return notSetValue;
	  };

	  // @pragma Modification

	  List.prototype.set = function set (index, value) {
	    return updateList(this, index, value);
	  };

	  List.prototype.remove = function remove (index) {
	    return !this.has(index)
	      ? this
	      : index === 0
	        ? this.shift()
	        : index === this.size - 1
	          ? this.pop()
	          : this.splice(index, 1);
	  };

	  List.prototype.insert = function insert (index, value) {
	    return this.splice(index, 0, value);
	  };

	  List.prototype.clear = function clear () {
	    if (this.size === 0) {
	      return this;
	    }
	    if (this.__ownerID) {
	      this.size = this._origin = this._capacity = 0;
	      this._level = SHIFT;
	      this._root = this._tail = null;
	      this.__hash = undefined;
	      this.__altered = true;
	      return this;
	    }
	    return emptyList();
	  };

	  List.prototype.push = function push (/*...values*/) {
	    var values = arguments;
	    var oldSize = this.size;
	    return this.withMutations(function (list) {
	      setListBounds(list, 0, oldSize + values.length);
	      for (var ii = 0; ii < values.length; ii++) {
	        list.set(oldSize + ii, values[ii]);
	      }
	    });
	  };

	  List.prototype.pop = function pop () {
	    return setListBounds(this, 0, -1);
	  };

	  List.prototype.unshift = function unshift (/*...values*/) {
	    var values = arguments;
	    return this.withMutations(function (list) {
	      setListBounds(list, -values.length);
	      for (var ii = 0; ii < values.length; ii++) {
	        list.set(ii, values[ii]);
	      }
	    });
	  };

	  List.prototype.shift = function shift () {
	    return setListBounds(this, 1);
	  };

	  // @pragma Composition

	  List.prototype.concat = function concat (/*...collections*/) {
	    var arguments$1 = arguments;

	    var seqs = [];
	    for (var i = 0; i < arguments.length; i++) {
	      var argument = arguments$1[i];
	      var seq = IndexedCollection$$1(
	        typeof argument !== 'string' && hasIterator(argument)
	          ? argument
	          : [argument]
	      );
	      if (seq.size !== 0) {
	        seqs.push(seq);
	      }
	    }
	    if (seqs.length === 0) {
	      return this;
	    }
	    if (this.size === 0 && !this.__ownerID && seqs.length === 1) {
	      return this.constructor(seqs[0]);
	    }
	    return this.withMutations(function (list) {
	      seqs.forEach(function (seq) { return seq.forEach(function (value) { return list.push(value); }); });
	    });
	  };

	  List.prototype.setSize = function setSize (size) {
	    return setListBounds(this, 0, size);
	  };

	  List.prototype.map = function map (mapper, context) {
	    var this$1 = this;

	    return this.withMutations(function (list) {
	      for (var i = 0; i < this$1.size; i++) {
	        list.set(i, mapper.call(context, list.get(i), i, list));
	      }
	    });
	  };

	  // @pragma Iteration

	  List.prototype.slice = function slice (begin, end) {
	    var size = this.size;
	    if (wholeSlice(begin, end, size)) {
	      return this;
	    }
	    return setListBounds(
	      this,
	      resolveBegin(begin, size),
	      resolveEnd(end, size)
	    );
	  };

	  List.prototype.__iterator = function __iterator (type, reverse) {
	    var index = reverse ? this.size : 0;
	    var values = iterateList(this, reverse);
	    return new Iterator(function () {
	      var value = values();
	      return value === DONE
	        ? iteratorDone()
	        : iteratorValue(type, reverse ? --index : index++, value);
	    });
	  };

	  List.prototype.__iterate = function __iterate (fn, reverse) {
	    var index = reverse ? this.size : 0;
	    var values = iterateList(this, reverse);
	    var value;
	    while ((value = values()) !== DONE) {
	      if (fn(value, reverse ? --index : index++, this) === false) {
	        break;
	      }
	    }
	    return index;
	  };

	  List.prototype.__ensureOwner = function __ensureOwner (ownerID) {
	    if (ownerID === this.__ownerID) {
	      return this;
	    }
	    if (!ownerID) {
	      if (this.size === 0) {
	        return emptyList();
	      }
	      this.__ownerID = ownerID;
	      this.__altered = false;
	      return this;
	    }
	    return makeList(
	      this._origin,
	      this._capacity,
	      this._level,
	      this._root,
	      this._tail,
	      ownerID,
	      this.__hash
	    );
	  };

	  return List;
	}(IndexedCollection));

	List$1.isList = isList;

	var ListPrototype = List$1.prototype;
	ListPrototype[IS_LIST_SYMBOL] = true;
	ListPrototype[DELETE] = ListPrototype.remove;
	ListPrototype.merge = ListPrototype.concat;
	ListPrototype.setIn = setIn$1;
	ListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;
	ListPrototype.update = update$1;
	ListPrototype.updateIn = updateIn$1;
	ListPrototype.mergeIn = mergeIn;
	ListPrototype.mergeDeepIn = mergeDeepIn;
	ListPrototype.withMutations = withMutations;
	ListPrototype.wasAltered = wasAltered;
	ListPrototype.asImmutable = asImmutable;
	ListPrototype['@@transducer/init'] = ListPrototype.asMutable = asMutable;
	ListPrototype['@@transducer/step'] = function(result, arr) {
	  return result.push(arr);
	};
	ListPrototype['@@transducer/result'] = function(obj) {
	  return obj.asImmutable();
	};

	var VNode = function VNode(array, ownerID) {
	  this.array = array;
	  this.ownerID = ownerID;
	};

	// TODO: seems like these methods are very similar

	VNode.prototype.removeBefore = function removeBefore (ownerID, level, index) {
	  if (index === level ? 1 << level : this.array.length === 0) {
	    return this;
	  }
	  var originIndex = (index >>> level) & MASK;
	  if (originIndex >= this.array.length) {
	    return new VNode([], ownerID);
	  }
	  var removingFirst = originIndex === 0;
	  var newChild;
	  if (level > 0) {
	    var oldChild = this.array[originIndex];
	    newChild =
	      oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
	    if (newChild === oldChild && removingFirst) {
	      return this;
	    }
	  }
	  if (removingFirst && !newChild) {
	    return this;
	  }
	  var editable = editableVNode(this, ownerID);
	  if (!removingFirst) {
	    for (var ii = 0; ii < originIndex; ii++) {
	      editable.array[ii] = undefined;
	    }
	  }
	  if (newChild) {
	    editable.array[originIndex] = newChild;
	  }
	  return editable;
	};

	VNode.prototype.removeAfter = function removeAfter (ownerID, level, index) {
	  if (index === (level ? 1 << level : 0) || this.array.length === 0) {
	    return this;
	  }
	  var sizeIndex = ((index - 1) >>> level) & MASK;
	  if (sizeIndex >= this.array.length) {
	    return this;
	  }

	  var newChild;
	  if (level > 0) {
	    var oldChild = this.array[sizeIndex];
	    newChild =
	      oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
	    if (newChild === oldChild && sizeIndex === this.array.length - 1) {
	      return this;
	    }
	  }

	  var editable = editableVNode(this, ownerID);
	  editable.array.splice(sizeIndex + 1);
	  if (newChild) {
	    editable.array[sizeIndex] = newChild;
	  }
	  return editable;
	};

	var DONE = {};

	function iterateList(list, reverse) {
	  var left = list._origin;
	  var right = list._capacity;
	  var tailPos = getTailOffset(right);
	  var tail = list._tail;

	  return iterateNodeOrLeaf(list._root, list._level, 0);

	  function iterateNodeOrLeaf(node, level, offset) {
	    return level === 0
	      ? iterateLeaf(node, offset)
	      : iterateNode(node, level, offset);
	  }

	  function iterateLeaf(node, offset) {
	    var array = offset === tailPos ? tail && tail.array : node && node.array;
	    var from = offset > left ? 0 : left - offset;
	    var to = right - offset;
	    if (to > SIZE$1) {
	      to = SIZE$1;
	    }
	    return function () {
	      if (from === to) {
	        return DONE;
	      }
	      var idx = reverse ? --to : from++;
	      return array && array[idx];
	    };
	  }

	  function iterateNode(node, level, offset) {
	    var values;
	    var array = node && node.array;
	    var from = offset > left ? 0 : (left - offset) >> level;
	    var to = ((right - offset) >> level) + 1;
	    if (to > SIZE$1) {
	      to = SIZE$1;
	    }
	    return function () {
	      while (true) {
	        if (values) {
	          var value = values();
	          if (value !== DONE) {
	            return value;
	          }
	          values = null;
	        }
	        if (from === to) {
	          return DONE;
	        }
	        var idx = reverse ? --to : from++;
	        values = iterateNodeOrLeaf(
	          array && array[idx],
	          level - SHIFT,
	          offset + (idx << level)
	        );
	      }
	    };
	  }
	}

	function makeList(origin, capacity, level, root, tail, ownerID, hash) {
	  var list = Object.create(ListPrototype);
	  list.size = capacity - origin;
	  list._origin = origin;
	  list._capacity = capacity;
	  list._level = level;
	  list._root = root;
	  list._tail = tail;
	  list.__ownerID = ownerID;
	  list.__hash = hash;
	  list.__altered = false;
	  return list;
	}

	var EMPTY_LIST;
	function emptyList() {
	  return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
	}

	function updateList(list, index, value) {
	  index = wrapIndex(list, index);

	  if (index !== index) {
	    return list;
	  }

	  if (index >= list.size || index < 0) {
	    return list.withMutations(function (list) {
	      index < 0
	        ? setListBounds(list, index).set(0, value)
	        : setListBounds(list, 0, index + 1).set(index, value);
	    });
	  }

	  index += list._origin;

	  var newTail = list._tail;
	  var newRoot = list._root;
	  var didAlter = MakeRef();
	  if (index >= getTailOffset(list._capacity)) {
	    newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
	  } else {
	    newRoot = updateVNode(
	      newRoot,
	      list.__ownerID,
	      list._level,
	      index,
	      value,
	      didAlter
	    );
	  }

	  if (!didAlter.value) {
	    return list;
	  }

	  if (list.__ownerID) {
	    list._root = newRoot;
	    list._tail = newTail;
	    list.__hash = undefined;
	    list.__altered = true;
	    return list;
	  }
	  return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
	}

	function updateVNode(node, ownerID, level, index, value, didAlter) {
	  var idx = (index >>> level) & MASK;
	  var nodeHas = node && idx < node.array.length;
	  if (!nodeHas && value === undefined) {
	    return node;
	  }

	  var newNode;

	  if (level > 0) {
	    var lowerNode = node && node.array[idx];
	    var newLowerNode = updateVNode(
	      lowerNode,
	      ownerID,
	      level - SHIFT,
	      index,
	      value,
	      didAlter
	    );
	    if (newLowerNode === lowerNode) {
	      return node;
	    }
	    newNode = editableVNode(node, ownerID);
	    newNode.array[idx] = newLowerNode;
	    return newNode;
	  }

	  if (nodeHas && node.array[idx] === value) {
	    return node;
	  }

	  if (didAlter) {
	    SetRef(didAlter);
	  }

	  newNode = editableVNode(node, ownerID);
	  if (value === undefined && idx === newNode.array.length - 1) {
	    newNode.array.pop();
	  } else {
	    newNode.array[idx] = value;
	  }
	  return newNode;
	}

	function editableVNode(node, ownerID) {
	  if (ownerID && node && ownerID === node.ownerID) {
	    return node;
	  }
	  return new VNode(node ? node.array.slice() : [], ownerID);
	}

	function listNodeFor(list, rawIndex) {
	  if (rawIndex >= getTailOffset(list._capacity)) {
	    return list._tail;
	  }
	  if (rawIndex < 1 << (list._level + SHIFT)) {
	    var node = list._root;
	    var level = list._level;
	    while (node && level > 0) {
	      node = node.array[(rawIndex >>> level) & MASK];
	      level -= SHIFT;
	    }
	    return node;
	  }
	}

	function setListBounds(list, begin, end) {
	  // Sanitize begin & end using this shorthand for ToInt32(argument)
	  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	  if (begin !== undefined) {
	    begin |= 0;
	  }
	  if (end !== undefined) {
	    end |= 0;
	  }
	  var owner = list.__ownerID || new OwnerID();
	  var oldOrigin = list._origin;
	  var oldCapacity = list._capacity;
	  var newOrigin = oldOrigin + begin;
	  var newCapacity =
	    end === undefined
	      ? oldCapacity
	      : end < 0
	        ? oldCapacity + end
	        : oldOrigin + end;
	  if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
	    return list;
	  }

	  // If it's going to end after it starts, it's empty.
	  if (newOrigin >= newCapacity) {
	    return list.clear();
	  }

	  var newLevel = list._level;
	  var newRoot = list._root;

	  // New origin might need creating a higher root.
	  var offsetShift = 0;
	  while (newOrigin + offsetShift < 0) {
	    newRoot = new VNode(
	      newRoot && newRoot.array.length ? [undefined, newRoot] : [],
	      owner
	    );
	    newLevel += SHIFT;
	    offsetShift += 1 << newLevel;
	  }
	  if (offsetShift) {
	    newOrigin += offsetShift;
	    oldOrigin += offsetShift;
	    newCapacity += offsetShift;
	    oldCapacity += offsetShift;
	  }

	  var oldTailOffset = getTailOffset(oldCapacity);
	  var newTailOffset = getTailOffset(newCapacity);

	  // New size might need creating a higher root.
	  while (newTailOffset >= 1 << (newLevel + SHIFT)) {
	    newRoot = new VNode(
	      newRoot && newRoot.array.length ? [newRoot] : [],
	      owner
	    );
	    newLevel += SHIFT;
	  }

	  // Locate or create the new tail.
	  var oldTail = list._tail;
	  var newTail =
	    newTailOffset < oldTailOffset
	      ? listNodeFor(list, newCapacity - 1)
	      : newTailOffset > oldTailOffset
	        ? new VNode([], owner)
	        : oldTail;

	  // Merge Tail into tree.
	  if (
	    oldTail &&
	    newTailOffset > oldTailOffset &&
	    newOrigin < oldCapacity &&
	    oldTail.array.length
	  ) {
	    newRoot = editableVNode(newRoot, owner);
	    var node = newRoot;
	    for (var level = newLevel; level > SHIFT; level -= SHIFT) {
	      var idx = (oldTailOffset >>> level) & MASK;
	      node = node.array[idx] = editableVNode(node.array[idx], owner);
	    }
	    node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
	  }

	  // If the size has been reduced, there's a chance the tail needs to be trimmed.
	  if (newCapacity < oldCapacity) {
	    newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
	  }

	  // If the new origin is within the tail, then we do not need a root.
	  if (newOrigin >= newTailOffset) {
	    newOrigin -= newTailOffset;
	    newCapacity -= newTailOffset;
	    newLevel = SHIFT;
	    newRoot = null;
	    newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

	    // Otherwise, if the root has been trimmed, garbage collect.
	  } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
	    offsetShift = 0;

	    // Identify the new top root node of the subtree of the old root.
	    while (newRoot) {
	      var beginIndex = (newOrigin >>> newLevel) & MASK;
	      if ((beginIndex !== newTailOffset >>> newLevel) & MASK) {
	        break;
	      }
	      if (beginIndex) {
	        offsetShift += (1 << newLevel) * beginIndex;
	      }
	      newLevel -= SHIFT;
	      newRoot = newRoot.array[beginIndex];
	    }

	    // Trim the new sides of the new root.
	    if (newRoot && newOrigin > oldOrigin) {
	      newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
	    }
	    if (newRoot && newTailOffset < oldTailOffset) {
	      newRoot = newRoot.removeAfter(
	        owner,
	        newLevel,
	        newTailOffset - offsetShift
	      );
	    }
	    if (offsetShift) {
	      newOrigin -= offsetShift;
	      newCapacity -= offsetShift;
	    }
	  }

	  if (list.__ownerID) {
	    list.size = newCapacity - newOrigin;
	    list._origin = newOrigin;
	    list._capacity = newCapacity;
	    list._level = newLevel;
	    list._root = newRoot;
	    list._tail = newTail;
	    list.__hash = undefined;
	    list.__altered = true;
	    return list;
	  }
	  return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
	}

	function getTailOffset(size) {
	  return size < SIZE$1 ? 0 : ((size - 1) >>> SHIFT) << SHIFT;
	}

	var OrderedMap = /*@__PURE__*/(function (Map$$1) {
	  function OrderedMap(value) {
	    return value === null || value === undefined
	      ? emptyOrderedMap()
	      : isOrderedMap(value)
	        ? value
	        : emptyOrderedMap().withMutations(function (map) {
	            var iter = KeyedCollection(value);
	            assertNotInfinite(iter.size);
	            iter.forEach(function (v, k) { return map.set(k, v); });
	          });
	  }

	  if ( Map$$1 ) OrderedMap.__proto__ = Map$$1;
	  OrderedMap.prototype = Object.create( Map$$1 && Map$$1.prototype );
	  OrderedMap.prototype.constructor = OrderedMap;

	  OrderedMap.of = function of (/*...values*/) {
	    return this(arguments);
	  };

	  OrderedMap.prototype.toString = function toString () {
	    return this.__toString('OrderedMap {', '}');
	  };

	  // @pragma Access

	  OrderedMap.prototype.get = function get (k, notSetValue) {
	    var index = this._map.get(k);
	    return index !== undefined ? this._list.get(index)[1] : notSetValue;
	  };

	  // @pragma Modification

	  OrderedMap.prototype.clear = function clear () {
	    if (this.size === 0) {
	      return this;
	    }
	    if (this.__ownerID) {
	      this.size = 0;
	      this._map.clear();
	      this._list.clear();
	      return this;
	    }
	    return emptyOrderedMap();
	  };

	  OrderedMap.prototype.set = function set (k, v) {
	    return updateOrderedMap(this, k, v);
	  };

	  OrderedMap.prototype.remove = function remove (k) {
	    return updateOrderedMap(this, k, NOT_SET);
	  };

	  OrderedMap.prototype.wasAltered = function wasAltered () {
	    return this._map.wasAltered() || this._list.wasAltered();
	  };

	  OrderedMap.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    return this._list.__iterate(
	      function (entry) { return entry && fn(entry[1], entry[0], this$1); },
	      reverse
	    );
	  };

	  OrderedMap.prototype.__iterator = function __iterator (type, reverse) {
	    return this._list.fromEntrySeq().__iterator(type, reverse);
	  };

	  OrderedMap.prototype.__ensureOwner = function __ensureOwner (ownerID) {
	    if (ownerID === this.__ownerID) {
	      return this;
	    }
	    var newMap = this._map.__ensureOwner(ownerID);
	    var newList = this._list.__ensureOwner(ownerID);
	    if (!ownerID) {
	      if (this.size === 0) {
	        return emptyOrderedMap();
	      }
	      this.__ownerID = ownerID;
	      this._map = newMap;
	      this._list = newList;
	      return this;
	    }
	    return makeOrderedMap(newMap, newList, ownerID, this.__hash);
	  };

	  return OrderedMap;
	}(Map$2));

	OrderedMap.isOrderedMap = isOrderedMap;

	OrderedMap.prototype[IS_ORDERED_SYMBOL] = true;
	OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;

	function makeOrderedMap(map, list, ownerID, hash) {
	  var omap = Object.create(OrderedMap.prototype);
	  omap.size = map ? map.size : 0;
	  omap._map = map;
	  omap._list = list;
	  omap.__ownerID = ownerID;
	  omap.__hash = hash;
	  return omap;
	}

	var EMPTY_ORDERED_MAP;
	function emptyOrderedMap() {
	  return (
	    EMPTY_ORDERED_MAP ||
	    (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()))
	  );
	}

	function updateOrderedMap(omap, k, v) {
	  var map = omap._map;
	  var list = omap._list;
	  var i = map.get(k);
	  var has = i !== undefined;
	  var newMap;
	  var newList;
	  if (v === NOT_SET) {
	    // removed
	    if (!has) {
	      return omap;
	    }
	    if (list.size >= SIZE$1 && list.size >= map.size * 2) {
	      newList = list.filter(function (entry, idx) { return entry !== undefined && i !== idx; });
	      newMap = newList
	        .toKeyedSeq()
	        .map(function (entry) { return entry[0]; })
	        .flip()
	        .toMap();
	      if (omap.__ownerID) {
	        newMap.__ownerID = newList.__ownerID = omap.__ownerID;
	      }
	    } else {
	      newMap = map.remove(k);
	      newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
	    }
	  } else if (has) {
	    if (v === list.get(i)[1]) {
	      return omap;
	    }
	    newMap = map;
	    newList = list.set(i, [k, v]);
	  } else {
	    newMap = map.set(k, list.size);
	    newList = list.set(list.size, [k, v]);
	  }
	  if (omap.__ownerID) {
	    omap.size = newMap.size;
	    omap._map = newMap;
	    omap._list = newList;
	    omap.__hash = undefined;
	    return omap;
	  }
	  return makeOrderedMap(newMap, newList);
	}

	var IS_STACK_SYMBOL = '@@__IMMUTABLE_STACK__@@';

	function isStack(maybeStack) {
	  return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);
	}

	var Stack$1 = /*@__PURE__*/(function (IndexedCollection$$1) {
	  function Stack(value) {
	    return value === null || value === undefined
	      ? emptyStack()
	      : isStack(value)
	        ? value
	        : emptyStack().pushAll(value);
	  }

	  if ( IndexedCollection$$1 ) Stack.__proto__ = IndexedCollection$$1;
	  Stack.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );
	  Stack.prototype.constructor = Stack;

	  Stack.of = function of (/*...values*/) {
	    return this(arguments);
	  };

	  Stack.prototype.toString = function toString () {
	    return this.__toString('Stack [', ']');
	  };

	  // @pragma Access

	  Stack.prototype.get = function get (index, notSetValue) {
	    var head = this._head;
	    index = wrapIndex(this, index);
	    while (head && index--) {
	      head = head.next;
	    }
	    return head ? head.value : notSetValue;
	  };

	  Stack.prototype.peek = function peek () {
	    return this._head && this._head.value;
	  };

	  // @pragma Modification

	  Stack.prototype.push = function push (/*...values*/) {
	    var arguments$1 = arguments;

	    if (arguments.length === 0) {
	      return this;
	    }
	    var newSize = this.size + arguments.length;
	    var head = this._head;
	    for (var ii = arguments.length - 1; ii >= 0; ii--) {
	      head = {
	        value: arguments$1[ii],
	        next: head,
	      };
	    }
	    if (this.__ownerID) {
	      this.size = newSize;
	      this._head = head;
	      this.__hash = undefined;
	      this.__altered = true;
	      return this;
	    }
	    return makeStack(newSize, head);
	  };

	  Stack.prototype.pushAll = function pushAll (iter) {
	    iter = IndexedCollection$$1(iter);
	    if (iter.size === 0) {
	      return this;
	    }
	    if (this.size === 0 && isStack(iter)) {
	      return iter;
	    }
	    assertNotInfinite(iter.size);
	    var newSize = this.size;
	    var head = this._head;
	    iter.__iterate(function (value) {
	      newSize++;
	      head = {
	        value: value,
	        next: head,
	      };
	    }, /* reverse */ true);
	    if (this.__ownerID) {
	      this.size = newSize;
	      this._head = head;
	      this.__hash = undefined;
	      this.__altered = true;
	      return this;
	    }
	    return makeStack(newSize, head);
	  };

	  Stack.prototype.pop = function pop () {
	    return this.slice(1);
	  };

	  Stack.prototype.clear = function clear () {
	    if (this.size === 0) {
	      return this;
	    }
	    if (this.__ownerID) {
	      this.size = 0;
	      this._head = undefined;
	      this.__hash = undefined;
	      this.__altered = true;
	      return this;
	    }
	    return emptyStack();
	  };

	  Stack.prototype.slice = function slice (begin, end) {
	    if (wholeSlice(begin, end, this.size)) {
	      return this;
	    }
	    var resolvedBegin = resolveBegin(begin, this.size);
	    var resolvedEnd = resolveEnd(end, this.size);
	    if (resolvedEnd !== this.size) {
	      // super.slice(begin, end);
	      return IndexedCollection$$1.prototype.slice.call(this, begin, end);
	    }
	    var newSize = this.size - resolvedBegin;
	    var head = this._head;
	    while (resolvedBegin--) {
	      head = head.next;
	    }
	    if (this.__ownerID) {
	      this.size = newSize;
	      this._head = head;
	      this.__hash = undefined;
	      this.__altered = true;
	      return this;
	    }
	    return makeStack(newSize, head);
	  };

	  // @pragma Mutability

	  Stack.prototype.__ensureOwner = function __ensureOwner (ownerID) {
	    if (ownerID === this.__ownerID) {
	      return this;
	    }
	    if (!ownerID) {
	      if (this.size === 0) {
	        return emptyStack();
	      }
	      this.__ownerID = ownerID;
	      this.__altered = false;
	      return this;
	    }
	    return makeStack(this.size, this._head, ownerID, this.__hash);
	  };

	  // @pragma Iteration

	  Stack.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    if (reverse) {
	      return new ArraySeq(this.toArray()).__iterate(
	        function (v, k) { return fn(v, k, this$1); },
	        reverse
	      );
	    }
	    var iterations = 0;
	    var node = this._head;
	    while (node) {
	      if (fn(node.value, iterations++, this) === false) {
	        break;
	      }
	      node = node.next;
	    }
	    return iterations;
	  };

	  Stack.prototype.__iterator = function __iterator (type, reverse) {
	    if (reverse) {
	      return new ArraySeq(this.toArray()).__iterator(type, reverse);
	    }
	    var iterations = 0;
	    var node = this._head;
	    return new Iterator(function () {
	      if (node) {
	        var value = node.value;
	        node = node.next;
	        return iteratorValue(type, iterations++, value);
	      }
	      return iteratorDone();
	    });
	  };

	  return Stack;
	}(IndexedCollection));

	Stack$1.isStack = isStack;

	var StackPrototype = Stack$1.prototype;
	StackPrototype[IS_STACK_SYMBOL] = true;
	StackPrototype.shift = StackPrototype.pop;
	StackPrototype.unshift = StackPrototype.push;
	StackPrototype.unshiftAll = StackPrototype.pushAll;
	StackPrototype.withMutations = withMutations;
	StackPrototype.wasAltered = wasAltered;
	StackPrototype.asImmutable = asImmutable;
	StackPrototype['@@transducer/init'] = StackPrototype.asMutable = asMutable;
	StackPrototype['@@transducer/step'] = function(result, arr) {
	  return result.unshift(arr);
	};
	StackPrototype['@@transducer/result'] = function(obj) {
	  return obj.asImmutable();
	};

	function makeStack(size, head, ownerID, hash) {
	  var map = Object.create(StackPrototype);
	  map.size = size;
	  map._head = head;
	  map.__ownerID = ownerID;
	  map.__hash = hash;
	  map.__altered = false;
	  return map;
	}

	var EMPTY_STACK;
	function emptyStack() {
	  return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
	}

	var IS_SET_SYMBOL = '@@__IMMUTABLE_SET__@@';

	function isSet(maybeSet) {
	  return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);
	}

	function isOrderedSet(maybeOrderedSet) {
	  return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
	}

	function deepEqual(a, b) {
	  if (a === b) {
	    return true;
	  }

	  if (
	    !isCollection(b) ||
	    (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||
	    (a.__hash !== undefined &&
	      b.__hash !== undefined &&
	      a.__hash !== b.__hash) ||
	    isKeyed(a) !== isKeyed(b) ||
	    isIndexed(a) !== isIndexed(b) ||
	    isOrdered(a) !== isOrdered(b)
	  ) {
	    return false;
	  }

	  if (a.size === 0 && b.size === 0) {
	    return true;
	  }

	  var notAssociative = !isAssociative(a);

	  if (isOrdered(a)) {
	    var entries = a.entries();
	    return (
	      b.every(function (v, k) {
	        var entry = entries.next().value;
	        return entry && is$3(entry[1], v) && (notAssociative || is$3(entry[0], k));
	      }) && entries.next().done
	    );
	  }

	  var flipped = false;

	  if (a.size === undefined) {
	    if (b.size === undefined) {
	      if (typeof a.cacheResult === 'function') {
	        a.cacheResult();
	      }
	    } else {
	      flipped = true;
	      var _ = a;
	      a = b;
	      b = _;
	    }
	  }

	  var allEqual = true;
	  var bSize = b.__iterate(function (v, k) {
	    if (
	      notAssociative
	        ? !a.has(v)
	        : flipped
	          ? !is$3(v, a.get(k, NOT_SET))
	          : !is$3(a.get(k, NOT_SET), v)
	    ) {
	      allEqual = false;
	      return false;
	    }
	  });

	  return allEqual && a.size === bSize;
	}

	/**
	 * Contributes additional methods to a constructor
	 */
	function mixin(ctor, methods) {
	  var keyCopier = function (key) {
	    ctor.prototype[key] = methods[key];
	  };
	  Object.keys(methods).forEach(keyCopier);
	  Object.getOwnPropertySymbols &&
	    Object.getOwnPropertySymbols(methods).forEach(keyCopier);
	  return ctor;
	}

	function toJS(value) {
	  if (!value || typeof value !== 'object') {
	    return value;
	  }
	  if (!isCollection(value)) {
	    if (!isDataStructure(value)) {
	      return value;
	    }
	    value = Seq(value);
	  }
	  if (isKeyed(value)) {
	    var result$1 = {};
	    value.__iterate(function (v, k) {
	      result$1[k] = toJS(v);
	    });
	    return result$1;
	  }
	  var result = [];
	  value.__iterate(function (v) {
	    result.push(toJS(v));
	  });
	  return result;
	}

	var Set$2 = /*@__PURE__*/(function (SetCollection$$1) {
	  function Set(value) {
	    return value === null || value === undefined
	      ? emptySet()
	      : isSet(value) && !isOrdered(value)
	        ? value
	        : emptySet().withMutations(function (set) {
	            var iter = SetCollection$$1(value);
	            assertNotInfinite(iter.size);
	            iter.forEach(function (v) { return set.add(v); });
	          });
	  }

	  if ( SetCollection$$1 ) Set.__proto__ = SetCollection$$1;
	  Set.prototype = Object.create( SetCollection$$1 && SetCollection$$1.prototype );
	  Set.prototype.constructor = Set;

	  Set.of = function of (/*...values*/) {
	    return this(arguments);
	  };

	  Set.fromKeys = function fromKeys (value) {
	    return this(KeyedCollection(value).keySeq());
	  };

	  Set.intersect = function intersect (sets) {
	    sets = Collection$1(sets).toArray();
	    return sets.length
	      ? SetPrototype.intersect.apply(Set(sets.pop()), sets)
	      : emptySet();
	  };

	  Set.union = function union (sets) {
	    sets = Collection$1(sets).toArray();
	    return sets.length
	      ? SetPrototype.union.apply(Set(sets.pop()), sets)
	      : emptySet();
	  };

	  Set.prototype.toString = function toString () {
	    return this.__toString('Set {', '}');
	  };

	  // @pragma Access

	  Set.prototype.has = function has (value) {
	    return this._map.has(value);
	  };

	  // @pragma Modification

	  Set.prototype.add = function add (value) {
	    return updateSet(this, this._map.set(value, value));
	  };

	  Set.prototype.remove = function remove (value) {
	    return updateSet(this, this._map.remove(value));
	  };

	  Set.prototype.clear = function clear () {
	    return updateSet(this, this._map.clear());
	  };

	  // @pragma Composition

	  Set.prototype.map = function map (mapper, context) {
	    var this$1 = this;

	    var removes = [];
	    var adds = [];
	    this.forEach(function (value) {
	      var mapped = mapper.call(context, value, value, this$1);
	      if (mapped !== value) {
	        removes.push(value);
	        adds.push(mapped);
	      }
	    });
	    return this.withMutations(function (set) {
	      removes.forEach(function (value) { return set.remove(value); });
	      adds.forEach(function (value) { return set.add(value); });
	    });
	  };

	  Set.prototype.union = function union () {
	    var iters = [], len = arguments.length;
	    while ( len-- ) iters[ len ] = arguments[ len ];

	    iters = iters.filter(function (x) { return x.size !== 0; });
	    if (iters.length === 0) {
	      return this;
	    }
	    if (this.size === 0 && !this.__ownerID && iters.length === 1) {
	      return this.constructor(iters[0]);
	    }
	    return this.withMutations(function (set) {
	      for (var ii = 0; ii < iters.length; ii++) {
	        SetCollection$$1(iters[ii]).forEach(function (value) { return set.add(value); });
	      }
	    });
	  };

	  Set.prototype.intersect = function intersect () {
	    var iters = [], len = arguments.length;
	    while ( len-- ) iters[ len ] = arguments[ len ];

	    if (iters.length === 0) {
	      return this;
	    }
	    iters = iters.map(function (iter) { return SetCollection$$1(iter); });
	    var toRemove = [];
	    this.forEach(function (value) {
	      if (!iters.every(function (iter) { return iter.includes(value); })) {
	        toRemove.push(value);
	      }
	    });
	    return this.withMutations(function (set) {
	      toRemove.forEach(function (value) {
	        set.remove(value);
	      });
	    });
	  };

	  Set.prototype.subtract = function subtract () {
	    var iters = [], len = arguments.length;
	    while ( len-- ) iters[ len ] = arguments[ len ];

	    if (iters.length === 0) {
	      return this;
	    }
	    iters = iters.map(function (iter) { return SetCollection$$1(iter); });
	    var toRemove = [];
	    this.forEach(function (value) {
	      if (iters.some(function (iter) { return iter.includes(value); })) {
	        toRemove.push(value);
	      }
	    });
	    return this.withMutations(function (set) {
	      toRemove.forEach(function (value) {
	        set.remove(value);
	      });
	    });
	  };

	  Set.prototype.sort = function sort (comparator) {
	    // Late binding
	    return OrderedSet(sortFactory(this, comparator));
	  };

	  Set.prototype.sortBy = function sortBy (mapper, comparator) {
	    // Late binding
	    return OrderedSet(sortFactory(this, comparator, mapper));
	  };

	  Set.prototype.wasAltered = function wasAltered () {
	    return this._map.wasAltered();
	  };

	  Set.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    return this._map.__iterate(function (k) { return fn(k, k, this$1); }, reverse);
	  };

	  Set.prototype.__iterator = function __iterator (type, reverse) {
	    return this._map.__iterator(type, reverse);
	  };

	  Set.prototype.__ensureOwner = function __ensureOwner (ownerID) {
	    if (ownerID === this.__ownerID) {
	      return this;
	    }
	    var newMap = this._map.__ensureOwner(ownerID);
	    if (!ownerID) {
	      if (this.size === 0) {
	        return this.__empty();
	      }
	      this.__ownerID = ownerID;
	      this._map = newMap;
	      return this;
	    }
	    return this.__make(newMap, ownerID);
	  };

	  return Set;
	}(SetCollection));

	Set$2.isSet = isSet;

	var SetPrototype = Set$2.prototype;
	SetPrototype[IS_SET_SYMBOL] = true;
	SetPrototype[DELETE] = SetPrototype.remove;
	SetPrototype.merge = SetPrototype.concat = SetPrototype.union;
	SetPrototype.withMutations = withMutations;
	SetPrototype.asImmutable = asImmutable;
	SetPrototype['@@transducer/init'] = SetPrototype.asMutable = asMutable;
	SetPrototype['@@transducer/step'] = function(result, arr) {
	  return result.add(arr);
	};
	SetPrototype['@@transducer/result'] = function(obj) {
	  return obj.asImmutable();
	};

	SetPrototype.__empty = emptySet;
	SetPrototype.__make = makeSet;

	function updateSet(set, newMap) {
	  if (set.__ownerID) {
	    set.size = newMap.size;
	    set._map = newMap;
	    return set;
	  }
	  return newMap === set._map
	    ? set
	    : newMap.size === 0
	      ? set.__empty()
	      : set.__make(newMap);
	}

	function makeSet(map, ownerID) {
	  var set = Object.create(SetPrototype);
	  set.size = map ? map.size : 0;
	  set._map = map;
	  set.__ownerID = ownerID;
	  return set;
	}

	var EMPTY_SET;
	function emptySet() {
	  return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
	}

	/**
	 * Returns a lazy seq of nums from start (inclusive) to end
	 * (exclusive), by step, where start defaults to 0, step to 1, and end to
	 * infinity. When start is equal to end, returns empty list.
	 */
	var Range = /*@__PURE__*/(function (IndexedSeq$$1) {
	  function Range(start, end, step) {
	    if (!(this instanceof Range)) {
	      return new Range(start, end, step);
	    }
	    invariant$2(step !== 0, 'Cannot step a Range by 0');
	    start = start || 0;
	    if (end === undefined) {
	      end = Infinity;
	    }
	    step = step === undefined ? 1 : Math.abs(step);
	    if (end < start) {
	      step = -step;
	    }
	    this._start = start;
	    this._end = end;
	    this._step = step;
	    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
	    if (this.size === 0) {
	      if (EMPTY_RANGE) {
	        return EMPTY_RANGE;
	      }
	      EMPTY_RANGE = this;
	    }
	  }

	  if ( IndexedSeq$$1 ) Range.__proto__ = IndexedSeq$$1;
	  Range.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );
	  Range.prototype.constructor = Range;

	  Range.prototype.toString = function toString () {
	    if (this.size === 0) {
	      return 'Range []';
	    }
	    return (
	      'Range [ ' +
	      this._start +
	      '...' +
	      this._end +
	      (this._step !== 1 ? ' by ' + this._step : '') +
	      ' ]'
	    );
	  };

	  Range.prototype.get = function get (index, notSetValue) {
	    return this.has(index)
	      ? this._start + wrapIndex(this, index) * this._step
	      : notSetValue;
	  };

	  Range.prototype.includes = function includes (searchValue) {
	    var possibleIndex = (searchValue - this._start) / this._step;
	    return (
	      possibleIndex >= 0 &&
	      possibleIndex < this.size &&
	      possibleIndex === Math.floor(possibleIndex)
	    );
	  };

	  Range.prototype.slice = function slice (begin, end) {
	    if (wholeSlice(begin, end, this.size)) {
	      return this;
	    }
	    begin = resolveBegin(begin, this.size);
	    end = resolveEnd(end, this.size);
	    if (end <= begin) {
	      return new Range(0, 0);
	    }
	    return new Range(
	      this.get(begin, this._end),
	      this.get(end, this._end),
	      this._step
	    );
	  };

	  Range.prototype.indexOf = function indexOf (searchValue) {
	    var offsetValue = searchValue - this._start;
	    if (offsetValue % this._step === 0) {
	      var index = offsetValue / this._step;
	      if (index >= 0 && index < this.size) {
	        return index;
	      }
	    }
	    return -1;
	  };

	  Range.prototype.lastIndexOf = function lastIndexOf (searchValue) {
	    return this.indexOf(searchValue);
	  };

	  Range.prototype.__iterate = function __iterate (fn, reverse) {
	    var size = this.size;
	    var step = this._step;
	    var value = reverse ? this._start + (size - 1) * step : this._start;
	    var i = 0;
	    while (i !== size) {
	      if (fn(value, reverse ? size - ++i : i++, this) === false) {
	        break;
	      }
	      value += reverse ? -step : step;
	    }
	    return i;
	  };

	  Range.prototype.__iterator = function __iterator (type, reverse) {
	    var size = this.size;
	    var step = this._step;
	    var value = reverse ? this._start + (size - 1) * step : this._start;
	    var i = 0;
	    return new Iterator(function () {
	      if (i === size) {
	        return iteratorDone();
	      }
	      var v = value;
	      value += reverse ? -step : step;
	      return iteratorValue(type, reverse ? size - ++i : i++, v);
	    });
	  };

	  Range.prototype.equals = function equals (other) {
	    return other instanceof Range
	      ? this._start === other._start &&
	          this._end === other._end &&
	          this._step === other._step
	      : deepEqual(this, other);
	  };

	  return Range;
	}(IndexedSeq));

	var EMPTY_RANGE;

	function getIn(collection, searchKeyPath, notSetValue) {
	  var keyPath = coerceKeyPath(searchKeyPath);
	  var i = 0;
	  while (i !== keyPath.length) {
	    collection = get$3(collection, keyPath[i++], NOT_SET);
	    if (collection === NOT_SET) {
	      return notSetValue;
	    }
	  }
	  return collection;
	}

	function getIn$1(searchKeyPath, notSetValue) {
	  return getIn(this, searchKeyPath, notSetValue);
	}

	function hasIn(collection, keyPath) {
	  return getIn(collection, keyPath, NOT_SET) !== NOT_SET;
	}

	function hasIn$1(searchKeyPath) {
	  return hasIn(this, searchKeyPath);
	}

	function toObject$1() {
	  assertNotInfinite(this.size);
	  var object = {};
	  this.__iterate(function (v, k) {
	    object[k] = v;
	  });
	  return object;
	}

	// Note: all of these methods are deprecated.
	Collection$1.isIterable = isCollection;
	Collection$1.isKeyed = isKeyed;
	Collection$1.isIndexed = isIndexed;
	Collection$1.isAssociative = isAssociative;
	Collection$1.isOrdered = isOrdered;

	Collection$1.Iterator = Iterator;

	mixin(Collection$1, {
	  // ### Conversion to other types

	  toArray: function toArray() {
	    assertNotInfinite(this.size);
	    var array = new Array(this.size || 0);
	    var useTuples = isKeyed(this);
	    var i = 0;
	    this.__iterate(function (v, k) {
	      // Keyed collections produce an array of tuples.
	      array[i++] = useTuples ? [k, v] : v;
	    });
	    return array;
	  },

	  toIndexedSeq: function toIndexedSeq() {
	    return new ToIndexedSequence(this);
	  },

	  toJS: function toJS$1() {
	    return toJS(this);
	  },

	  toKeyedSeq: function toKeyedSeq() {
	    return new ToKeyedSequence(this, true);
	  },

	  toMap: function toMap() {
	    // Use Late Binding here to solve the circular dependency.
	    return Map$2(this.toKeyedSeq());
	  },

	  toObject: toObject$1,

	  toOrderedMap: function toOrderedMap() {
	    // Use Late Binding here to solve the circular dependency.
	    return OrderedMap(this.toKeyedSeq());
	  },

	  toOrderedSet: function toOrderedSet() {
	    // Use Late Binding here to solve the circular dependency.
	    return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
	  },

	  toSet: function toSet() {
	    // Use Late Binding here to solve the circular dependency.
	    return Set$2(isKeyed(this) ? this.valueSeq() : this);
	  },

	  toSetSeq: function toSetSeq() {
	    return new ToSetSequence(this);
	  },

	  toSeq: function toSeq() {
	    return isIndexed(this)
	      ? this.toIndexedSeq()
	      : isKeyed(this)
	        ? this.toKeyedSeq()
	        : this.toSetSeq();
	  },

	  toStack: function toStack() {
	    // Use Late Binding here to solve the circular dependency.
	    return Stack$1(isKeyed(this) ? this.valueSeq() : this);
	  },

	  toList: function toList() {
	    // Use Late Binding here to solve the circular dependency.
	    return List$1(isKeyed(this) ? this.valueSeq() : this);
	  },

	  // ### Common JavaScript methods and properties

	  toString: function toString() {
	    return '[Collection]';
	  },

	  __toString: function __toString(head, tail) {
	    if (this.size === 0) {
	      return head + tail;
	    }
	    return (
	      head +
	      ' ' +
	      this.toSeq()
	        .map(this.__toStringMapper)
	        .join(', ') +
	      ' ' +
	      tail
	    );
	  },

	  // ### ES6 Collection methods (ES6 Array and Map)

	  concat: function concat() {
	    var values = [], len = arguments.length;
	    while ( len-- ) values[ len ] = arguments[ len ];

	    return reify(this, concatFactory(this, values));
	  },

	  includes: function includes(searchValue) {
	    return this.some(function (value) { return is$3(value, searchValue); });
	  },

	  entries: function entries() {
	    return this.__iterator(ITERATE_ENTRIES);
	  },

	  every: function every(predicate, context) {
	    assertNotInfinite(this.size);
	    var returnValue = true;
	    this.__iterate(function (v, k, c) {
	      if (!predicate.call(context, v, k, c)) {
	        returnValue = false;
	        return false;
	      }
	    });
	    return returnValue;
	  },

	  filter: function filter(predicate, context) {
	    return reify(this, filterFactory(this, predicate, context, true));
	  },

	  find: function find(predicate, context, notSetValue) {
	    var entry = this.findEntry(predicate, context);
	    return entry ? entry[1] : notSetValue;
	  },

	  forEach: function forEach(sideEffect, context) {
	    assertNotInfinite(this.size);
	    return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
	  },

	  join: function join(separator) {
	    assertNotInfinite(this.size);
	    separator = separator !== undefined ? '' + separator : ',';
	    var joined = '';
	    var isFirst = true;
	    this.__iterate(function (v) {
	      isFirst ? (isFirst = false) : (joined += separator);
	      joined += v !== null && v !== undefined ? v.toString() : '';
	    });
	    return joined;
	  },

	  keys: function keys() {
	    return this.__iterator(ITERATE_KEYS);
	  },

	  map: function map(mapper, context) {
	    return reify(this, mapFactory(this, mapper, context));
	  },

	  reduce: function reduce$1(reducer, initialReduction, context) {
	    return reduce(
	      this,
	      reducer,
	      initialReduction,
	      context,
	      arguments.length < 2,
	      false
	    );
	  },

	  reduceRight: function reduceRight(reducer, initialReduction, context) {
	    return reduce(
	      this,
	      reducer,
	      initialReduction,
	      context,
	      arguments.length < 2,
	      true
	    );
	  },

	  reverse: function reverse() {
	    return reify(this, reverseFactory(this, true));
	  },

	  slice: function slice(begin, end) {
	    return reify(this, sliceFactory(this, begin, end, true));
	  },

	  some: function some(predicate, context) {
	    return !this.every(not(predicate), context);
	  },

	  sort: function sort(comparator) {
	    return reify(this, sortFactory(this, comparator));
	  },

	  values: function values() {
	    return this.__iterator(ITERATE_VALUES);
	  },

	  // ### More sequential methods

	  butLast: function butLast() {
	    return this.slice(0, -1);
	  },

	  isEmpty: function isEmpty() {
	    return this.size !== undefined ? this.size === 0 : !this.some(function () { return true; });
	  },

	  count: function count(predicate, context) {
	    return ensureSize(
	      predicate ? this.toSeq().filter(predicate, context) : this
	    );
	  },

	  countBy: function countBy(grouper, context) {
	    return countByFactory(this, grouper, context);
	  },

	  equals: function equals(other) {
	    return deepEqual(this, other);
	  },

	  entrySeq: function entrySeq() {
	    var collection = this;
	    if (collection._cache) {
	      // We cache as an entries array, so we can just return the cache!
	      return new ArraySeq(collection._cache);
	    }
	    var entriesSequence = collection
	      .toSeq()
	      .map(entryMapper)
	      .toIndexedSeq();
	    entriesSequence.fromEntrySeq = function () { return collection.toSeq(); };
	    return entriesSequence;
	  },

	  filterNot: function filterNot(predicate, context) {
	    return this.filter(not(predicate), context);
	  },

	  findEntry: function findEntry(predicate, context, notSetValue) {
	    var found = notSetValue;
	    this.__iterate(function (v, k, c) {
	      if (predicate.call(context, v, k, c)) {
	        found = [k, v];
	        return false;
	      }
	    });
	    return found;
	  },

	  findKey: function findKey(predicate, context) {
	    var entry = this.findEntry(predicate, context);
	    return entry && entry[0];
	  },

	  findLast: function findLast(predicate, context, notSetValue) {
	    return this.toKeyedSeq()
	      .reverse()
	      .find(predicate, context, notSetValue);
	  },

	  findLastEntry: function findLastEntry(predicate, context, notSetValue) {
	    return this.toKeyedSeq()
	      .reverse()
	      .findEntry(predicate, context, notSetValue);
	  },

	  findLastKey: function findLastKey(predicate, context) {
	    return this.toKeyedSeq()
	      .reverse()
	      .findKey(predicate, context);
	  },

	  first: function first(notSetValue) {
	    return this.find(returnTrue, null, notSetValue);
	  },

	  flatMap: function flatMap(mapper, context) {
	    return reify(this, flatMapFactory(this, mapper, context));
	  },

	  flatten: function flatten(depth) {
	    return reify(this, flattenFactory(this, depth, true));
	  },

	  fromEntrySeq: function fromEntrySeq() {
	    return new FromEntriesSequence(this);
	  },

	  get: function get(searchKey, notSetValue) {
	    return this.find(function (_, key) { return is$3(key, searchKey); }, undefined, notSetValue);
	  },

	  getIn: getIn$1,

	  groupBy: function groupBy(grouper, context) {
	    return groupByFactory(this, grouper, context);
	  },

	  has: function has(searchKey) {
	    return this.get(searchKey, NOT_SET) !== NOT_SET;
	  },

	  hasIn: hasIn$1,

	  isSubset: function isSubset(iter) {
	    iter = typeof iter.includes === 'function' ? iter : Collection$1(iter);
	    return this.every(function (value) { return iter.includes(value); });
	  },

	  isSuperset: function isSuperset(iter) {
	    iter = typeof iter.isSubset === 'function' ? iter : Collection$1(iter);
	    return iter.isSubset(this);
	  },

	  keyOf: function keyOf(searchValue) {
	    return this.findKey(function (value) { return is$3(value, searchValue); });
	  },

	  keySeq: function keySeq() {
	    return this.toSeq()
	      .map(keyMapper)
	      .toIndexedSeq();
	  },

	  last: function last(notSetValue) {
	    return this.toSeq()
	      .reverse()
	      .first(notSetValue);
	  },

	  lastKeyOf: function lastKeyOf(searchValue) {
	    return this.toKeyedSeq()
	      .reverse()
	      .keyOf(searchValue);
	  },

	  max: function max(comparator) {
	    return maxFactory(this, comparator);
	  },

	  maxBy: function maxBy(mapper, comparator) {
	    return maxFactory(this, comparator, mapper);
	  },

	  min: function min(comparator) {
	    return maxFactory(
	      this,
	      comparator ? neg(comparator) : defaultNegComparator
	    );
	  },

	  minBy: function minBy(mapper, comparator) {
	    return maxFactory(
	      this,
	      comparator ? neg(comparator) : defaultNegComparator,
	      mapper
	    );
	  },

	  rest: function rest() {
	    return this.slice(1);
	  },

	  skip: function skip(amount) {
	    return amount === 0 ? this : this.slice(Math.max(0, amount));
	  },

	  skipLast: function skipLast(amount) {
	    return amount === 0 ? this : this.slice(0, -Math.max(0, amount));
	  },

	  skipWhile: function skipWhile(predicate, context) {
	    return reify(this, skipWhileFactory(this, predicate, context, true));
	  },

	  skipUntil: function skipUntil(predicate, context) {
	    return this.skipWhile(not(predicate), context);
	  },

	  sortBy: function sortBy(mapper, comparator) {
	    return reify(this, sortFactory(this, comparator, mapper));
	  },

	  take: function take(amount) {
	    return this.slice(0, Math.max(0, amount));
	  },

	  takeLast: function takeLast(amount) {
	    return this.slice(-Math.max(0, amount));
	  },

	  takeWhile: function takeWhile(predicate, context) {
	    return reify(this, takeWhileFactory(this, predicate, context));
	  },

	  takeUntil: function takeUntil(predicate, context) {
	    return this.takeWhile(not(predicate), context);
	  },

	  update: function update(fn) {
	    return fn(this);
	  },

	  valueSeq: function valueSeq() {
	    return this.toIndexedSeq();
	  },

	  // ### Hashable Object

	  hashCode: function hashCode() {
	    return this.__hash || (this.__hash = hashCollection(this));
	  },

	  // ### Internal

	  // abstract __iterate(fn, reverse)

	  // abstract __iterator(type, reverse)
	});

	var CollectionPrototype = Collection$1.prototype;
	CollectionPrototype[IS_COLLECTION_SYMBOL] = true;
	CollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;
	CollectionPrototype.toJSON = CollectionPrototype.toArray;
	CollectionPrototype.__toStringMapper = quoteString;
	CollectionPrototype.inspect = CollectionPrototype.toSource = function() {
	  return this.toString();
	};
	CollectionPrototype.chain = CollectionPrototype.flatMap;
	CollectionPrototype.contains = CollectionPrototype.includes;

	mixin(KeyedCollection, {
	  // ### More sequential methods

	  flip: function flip() {
	    return reify(this, flipFactory(this));
	  },

	  mapEntries: function mapEntries(mapper, context) {
	    var this$1 = this;

	    var iterations = 0;
	    return reify(
	      this,
	      this.toSeq()
	        .map(function (v, k) { return mapper.call(context, [k, v], iterations++, this$1); })
	        .fromEntrySeq()
	    );
	  },

	  mapKeys: function mapKeys(mapper, context) {
	    var this$1 = this;

	    return reify(
	      this,
	      this.toSeq()
	        .flip()
	        .map(function (k, v) { return mapper.call(context, k, v, this$1); })
	        .flip()
	    );
	  },
	});

	var KeyedCollectionPrototype = KeyedCollection.prototype;
	KeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;
	KeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;
	KeyedCollectionPrototype.toJSON = toObject$1;
	KeyedCollectionPrototype.__toStringMapper = function (v, k) { return quoteString(k) + ': ' + quoteString(v); };

	mixin(IndexedCollection, {
	  // ### Conversion to other types

	  toKeyedSeq: function toKeyedSeq() {
	    return new ToKeyedSequence(this, false);
	  },

	  // ### ES6 Collection methods (ES6 Array and Map)

	  filter: function filter(predicate, context) {
	    return reify(this, filterFactory(this, predicate, context, false));
	  },

	  findIndex: function findIndex(predicate, context) {
	    var entry = this.findEntry(predicate, context);
	    return entry ? entry[0] : -1;
	  },

	  indexOf: function indexOf(searchValue) {
	    var key = this.keyOf(searchValue);
	    return key === undefined ? -1 : key;
	  },

	  lastIndexOf: function lastIndexOf(searchValue) {
	    var key = this.lastKeyOf(searchValue);
	    return key === undefined ? -1 : key;
	  },

	  reverse: function reverse() {
	    return reify(this, reverseFactory(this, false));
	  },

	  slice: function slice(begin, end) {
	    return reify(this, sliceFactory(this, begin, end, false));
	  },

	  splice: function splice(index, removeNum /*, ...values*/) {
	    var numArgs = arguments.length;
	    removeNum = Math.max(removeNum || 0, 0);
	    if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
	      return this;
	    }
	    // If index is negative, it should resolve relative to the size of the
	    // collection. However size may be expensive to compute if not cached, so
	    // only call count() if the number is in fact negative.
	    index = resolveBegin(index, index < 0 ? this.count() : this.size);
	    var spliced = this.slice(0, index);
	    return reify(
	      this,
	      numArgs === 1
	        ? spliced
	        : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
	    );
	  },

	  // ### More collection methods

	  findLastIndex: function findLastIndex(predicate, context) {
	    var entry = this.findLastEntry(predicate, context);
	    return entry ? entry[0] : -1;
	  },

	  first: function first(notSetValue) {
	    return this.get(0, notSetValue);
	  },

	  flatten: function flatten(depth) {
	    return reify(this, flattenFactory(this, depth, false));
	  },

	  get: function get(index, notSetValue) {
	    index = wrapIndex(this, index);
	    return index < 0 ||
	      (this.size === Infinity || (this.size !== undefined && index > this.size))
	      ? notSetValue
	      : this.find(function (_, key) { return key === index; }, undefined, notSetValue);
	  },

	  has: function has(index) {
	    index = wrapIndex(this, index);
	    return (
	      index >= 0 &&
	      (this.size !== undefined
	        ? this.size === Infinity || index < this.size
	        : this.indexOf(index) !== -1)
	    );
	  },

	  interpose: function interpose(separator) {
	    return reify(this, interposeFactory(this, separator));
	  },

	  interleave: function interleave(/*...collections*/) {
	    var collections = [this].concat(arrCopy(arguments));
	    var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);
	    var interleaved = zipped.flatten(true);
	    if (zipped.size) {
	      interleaved.size = zipped.size * collections.length;
	    }
	    return reify(this, interleaved);
	  },

	  keySeq: function keySeq() {
	    return Range(0, this.size);
	  },

	  last: function last(notSetValue) {
	    return this.get(-1, notSetValue);
	  },

	  skipWhile: function skipWhile(predicate, context) {
	    return reify(this, skipWhileFactory(this, predicate, context, false));
	  },

	  zip: function zip(/*, ...collections */) {
	    var collections = [this].concat(arrCopy(arguments));
	    return reify(this, zipWithFactory(this, defaultZipper, collections));
	  },

	  zipAll: function zipAll(/*, ...collections */) {
	    var collections = [this].concat(arrCopy(arguments));
	    return reify(this, zipWithFactory(this, defaultZipper, collections, true));
	  },

	  zipWith: function zipWith(zipper /*, ...collections */) {
	    var collections = arrCopy(arguments);
	    collections[0] = this;
	    return reify(this, zipWithFactory(this, zipper, collections));
	  },
	});

	var IndexedCollectionPrototype = IndexedCollection.prototype;
	IndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;
	IndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;

	mixin(SetCollection, {
	  // ### ES6 Collection methods (ES6 Array and Map)

	  get: function get(value, notSetValue) {
	    return this.has(value) ? value : notSetValue;
	  },

	  includes: function includes(value) {
	    return this.has(value);
	  },

	  // ### More sequential methods

	  keySeq: function keySeq() {
	    return this.valueSeq();
	  },
	});

	SetCollection.prototype.has = CollectionPrototype.includes;
	SetCollection.prototype.contains = SetCollection.prototype.includes;

	// Mixin subclasses

	mixin(KeyedSeq, KeyedCollection.prototype);
	mixin(IndexedSeq, IndexedCollection.prototype);
	mixin(SetSeq, SetCollection.prototype);

	// #pragma Helper functions

	function reduce(collection, reducer, reduction, context, useFirst, reverse) {
	  assertNotInfinite(collection.size);
	  collection.__iterate(function (v, k, c) {
	    if (useFirst) {
	      useFirst = false;
	      reduction = v;
	    } else {
	      reduction = reducer.call(context, reduction, v, k, c);
	    }
	  }, reverse);
	  return reduction;
	}

	function keyMapper(v, k) {
	  return k;
	}

	function entryMapper(v, k) {
	  return [k, v];
	}

	function not(predicate) {
	  return function() {
	    return !predicate.apply(this, arguments);
	  };
	}

	function neg(predicate) {
	  return function() {
	    return -predicate.apply(this, arguments);
	  };
	}

	function defaultZipper() {
	  return arrCopy(arguments);
	}

	function defaultNegComparator(a, b) {
	  return a < b ? 1 : a > b ? -1 : 0;
	}

	function hashCollection(collection) {
	  if (collection.size === Infinity) {
	    return 0;
	  }
	  var ordered = isOrdered(collection);
	  var keyed = isKeyed(collection);
	  var h = ordered ? 1 : 0;
	  var size = collection.__iterate(
	    keyed
	      ? ordered
	        ? function (v, k) {
	            h = (31 * h + hashMerge(hash(v), hash(k))) | 0;
	          }
	        : function (v, k) {
	            h = (h + hashMerge(hash(v), hash(k))) | 0;
	          }
	      : ordered
	        ? function (v) {
	            h = (31 * h + hash(v)) | 0;
	          }
	        : function (v) {
	            h = (h + hash(v)) | 0;
	          }
	  );
	  return murmurHashOfSize(size, h);
	}

	function murmurHashOfSize(size, h) {
	  h = imul(h, 0xcc9e2d51);
	  h = imul((h << 15) | (h >>> -15), 0x1b873593);
	  h = imul((h << 13) | (h >>> -13), 5);
	  h = ((h + 0xe6546b64) | 0) ^ size;
	  h = imul(h ^ (h >>> 16), 0x85ebca6b);
	  h = imul(h ^ (h >>> 13), 0xc2b2ae35);
	  h = smi(h ^ (h >>> 16));
	  return h;
	}

	function hashMerge(a, b) {
	  return (a ^ (b + 0x9e3779b9 + (a << 6) + (a >> 2))) | 0; // int
	}

	var OrderedSet = /*@__PURE__*/(function (Set$$1) {
	  function OrderedSet(value) {
	    return value === null || value === undefined
	      ? emptyOrderedSet()
	      : isOrderedSet(value)
	        ? value
	        : emptyOrderedSet().withMutations(function (set) {
	            var iter = SetCollection(value);
	            assertNotInfinite(iter.size);
	            iter.forEach(function (v) { return set.add(v); });
	          });
	  }

	  if ( Set$$1 ) OrderedSet.__proto__ = Set$$1;
	  OrderedSet.prototype = Object.create( Set$$1 && Set$$1.prototype );
	  OrderedSet.prototype.constructor = OrderedSet;

	  OrderedSet.of = function of (/*...values*/) {
	    return this(arguments);
	  };

	  OrderedSet.fromKeys = function fromKeys (value) {
	    return this(KeyedCollection(value).keySeq());
	  };

	  OrderedSet.prototype.toString = function toString () {
	    return this.__toString('OrderedSet {', '}');
	  };

	  return OrderedSet;
	}(Set$2));

	OrderedSet.isOrderedSet = isOrderedSet;

	var OrderedSetPrototype = OrderedSet.prototype;
	OrderedSetPrototype[IS_ORDERED_SYMBOL] = true;
	OrderedSetPrototype.zip = IndexedCollectionPrototype.zip;
	OrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;

	OrderedSetPrototype.__empty = emptyOrderedSet;
	OrderedSetPrototype.__make = makeOrderedSet;

	function makeOrderedSet(map, ownerID) {
	  var set = Object.create(OrderedSetPrototype);
	  set.size = map ? map.size : 0;
	  set._map = map;
	  set.__ownerID = ownerID;
	  return set;
	}

	var EMPTY_ORDERED_SET;
	function emptyOrderedSet() {
	  return (
	    EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()))
	  );
	}

	var Record = function Record(defaultValues, name) {
	  var hasInitialized;

	  var RecordType = function Record(values) {
	    var this$1 = this;

	    if (values instanceof RecordType) {
	      return values;
	    }
	    if (!(this instanceof RecordType)) {
	      return new RecordType(values);
	    }
	    if (!hasInitialized) {
	      hasInitialized = true;
	      var keys = Object.keys(defaultValues);
	      var indices = (RecordTypePrototype._indices = {});
	      // Deprecated: left to attempt not to break any external code which
	      // relies on a ._name property existing on record instances.
	      // Use Record.getDescriptiveName() instead
	      RecordTypePrototype._name = name;
	      RecordTypePrototype._keys = keys;
	      RecordTypePrototype._defaultValues = defaultValues;
	      for (var i = 0; i < keys.length; i++) {
	        var propName = keys[i];
	        indices[propName] = i;
	        if (RecordTypePrototype[propName]) {
	          /* eslint-disable no-console */
	          typeof console === 'object' &&
	            console.warn &&
	            console.warn(
	              'Cannot define ' +
	                recordName(this) +
	                ' with property "' +
	                propName +
	                '" since that property name is part of the Record API.'
	            );
	          /* eslint-enable no-console */
	        } else {
	          setProp(RecordTypePrototype, propName);
	        }
	      }
	    }
	    this.__ownerID = undefined;
	    this._values = List$1().withMutations(function (l) {
	      l.setSize(this$1._keys.length);
	      KeyedCollection(values).forEach(function (v, k) {
	        l.set(this$1._indices[k], v === this$1._defaultValues[k] ? undefined : v);
	      });
	    });
	  };

	  var RecordTypePrototype = (RecordType.prototype = Object.create(
	    RecordPrototype
	  ));
	  RecordTypePrototype.constructor = RecordType;

	  if (name) {
	    RecordType.displayName = name;
	  }

	  return RecordType;
	};

	Record.prototype.toString = function toString () {
	  var str = recordName(this) + ' { ';
	  var keys = this._keys;
	  var k;
	  for (var i = 0, l = keys.length; i !== l; i++) {
	    k = keys[i];
	    str += (i ? ', ' : '') + k + ': ' + quoteString(this.get(k));
	  }
	  return str + ' }';
	};

	Record.prototype.equals = function equals (other) {
	  return (
	    this === other ||
	    (other &&
	      this._keys === other._keys &&
	      recordSeq(this).equals(recordSeq(other)))
	  );
	};

	Record.prototype.hashCode = function hashCode () {
	  return recordSeq(this).hashCode();
	};

	// @pragma Access

	Record.prototype.has = function has (k) {
	  return this._indices.hasOwnProperty(k);
	};

	Record.prototype.get = function get (k, notSetValue) {
	  if (!this.has(k)) {
	    return notSetValue;
	  }
	  var index = this._indices[k];
	  var value = this._values.get(index);
	  return value === undefined ? this._defaultValues[k] : value;
	};

	// @pragma Modification

	Record.prototype.set = function set (k, v) {
	  if (this.has(k)) {
	    var newValues = this._values.set(
	      this._indices[k],
	      v === this._defaultValues[k] ? undefined : v
	    );
	    if (newValues !== this._values && !this.__ownerID) {
	      return makeRecord(this, newValues);
	    }
	  }
	  return this;
	};

	Record.prototype.remove = function remove (k) {
	  return this.set(k);
	};

	Record.prototype.clear = function clear () {
	  var newValues = this._values.clear().setSize(this._keys.length);
	  return this.__ownerID ? this : makeRecord(this, newValues);
	};

	Record.prototype.wasAltered = function wasAltered () {
	  return this._values.wasAltered();
	};

	Record.prototype.toSeq = function toSeq () {
	  return recordSeq(this);
	};

	Record.prototype.toJS = function toJS$1 () {
	  return toJS(this);
	};

	Record.prototype.entries = function entries () {
	  return this.__iterator(ITERATE_ENTRIES);
	};

	Record.prototype.__iterator = function __iterator (type, reverse) {
	  return recordSeq(this).__iterator(type, reverse);
	};

	Record.prototype.__iterate = function __iterate (fn, reverse) {
	  return recordSeq(this).__iterate(fn, reverse);
	};

	Record.prototype.__ensureOwner = function __ensureOwner (ownerID) {
	  if (ownerID === this.__ownerID) {
	    return this;
	  }
	  var newValues = this._values.__ensureOwner(ownerID);
	  if (!ownerID) {
	    this.__ownerID = ownerID;
	    this._values = newValues;
	    return this;
	  }
	  return makeRecord(this, newValues, ownerID);
	};

	Record.isRecord = isRecord;
	Record.getDescriptiveName = recordName;
	var RecordPrototype = Record.prototype;
	RecordPrototype[IS_RECORD_SYMBOL] = true;
	RecordPrototype[DELETE] = RecordPrototype.remove;
	RecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;
	RecordPrototype.getIn = getIn$1;
	RecordPrototype.hasIn = CollectionPrototype.hasIn;
	RecordPrototype.merge = merge;
	RecordPrototype.mergeWith = mergeWith;
	RecordPrototype.mergeIn = mergeIn;
	RecordPrototype.mergeDeep = mergeDeep$1;
	RecordPrototype.mergeDeepWith = mergeDeepWith$1;
	RecordPrototype.mergeDeepIn = mergeDeepIn;
	RecordPrototype.setIn = setIn$1;
	RecordPrototype.update = update$1;
	RecordPrototype.updateIn = updateIn$1;
	RecordPrototype.withMutations = withMutations;
	RecordPrototype.asMutable = asMutable;
	RecordPrototype.asImmutable = asImmutable;
	RecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;
	RecordPrototype.toJSON = RecordPrototype.toObject =
	  CollectionPrototype.toObject;
	RecordPrototype.inspect = RecordPrototype.toSource = function() {
	  return this.toString();
	};

	function makeRecord(likeRecord, values, ownerID) {
	  var record = Object.create(Object.getPrototypeOf(likeRecord));
	  record._values = values;
	  record.__ownerID = ownerID;
	  return record;
	}

	function recordName(record) {
	  return record.constructor.displayName || record.constructor.name || 'Record';
	}

	function recordSeq(record) {
	  return keyedSeqFromValue(record._keys.map(function (k) { return [k, record.get(k)]; }));
	}

	function setProp(prototype, name) {
	  try {
	    Object.defineProperty(prototype, name, {
	      get: function() {
	        return this.get(name);
	      },
	      set: function(value) {
	        invariant$2(this.__ownerID, 'Cannot set on an immutable record.');
	        this.set(name, value);
	      },
	    });
	  } catch (error) {
	    // Object.defineProperty failed. Probably IE8.
	  }
	}

	/**
	 * Returns a lazy Seq of `value` repeated `times` times. When `times` is
	 * undefined, returns an infinite sequence of `value`.
	 */
	var Repeat = /*@__PURE__*/(function (IndexedSeq$$1) {
	  function Repeat(value, times) {
	    if (!(this instanceof Repeat)) {
	      return new Repeat(value, times);
	    }
	    this._value = value;
	    this.size = times === undefined ? Infinity : Math.max(0, times);
	    if (this.size === 0) {
	      if (EMPTY_REPEAT) {
	        return EMPTY_REPEAT;
	      }
	      EMPTY_REPEAT = this;
	    }
	  }

	  if ( IndexedSeq$$1 ) Repeat.__proto__ = IndexedSeq$$1;
	  Repeat.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );
	  Repeat.prototype.constructor = Repeat;

	  Repeat.prototype.toString = function toString () {
	    if (this.size === 0) {
	      return 'Repeat []';
	    }
	    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
	  };

	  Repeat.prototype.get = function get (index, notSetValue) {
	    return this.has(index) ? this._value : notSetValue;
	  };

	  Repeat.prototype.includes = function includes (searchValue) {
	    return is$3(this._value, searchValue);
	  };

	  Repeat.prototype.slice = function slice (begin, end) {
	    var size = this.size;
	    return wholeSlice(begin, end, size)
	      ? this
	      : new Repeat(
	          this._value,
	          resolveEnd(end, size) - resolveBegin(begin, size)
	        );
	  };

	  Repeat.prototype.reverse = function reverse () {
	    return this;
	  };

	  Repeat.prototype.indexOf = function indexOf (searchValue) {
	    if (is$3(this._value, searchValue)) {
	      return 0;
	    }
	    return -1;
	  };

	  Repeat.prototype.lastIndexOf = function lastIndexOf (searchValue) {
	    if (is$3(this._value, searchValue)) {
	      return this.size;
	    }
	    return -1;
	  };

	  Repeat.prototype.__iterate = function __iterate (fn, reverse) {
	    var size = this.size;
	    var i = 0;
	    while (i !== size) {
	      if (fn(this._value, reverse ? size - ++i : i++, this) === false) {
	        break;
	      }
	    }
	    return i;
	  };

	  Repeat.prototype.__iterator = function __iterator (type, reverse) {
	    var this$1 = this;

	    var size = this.size;
	    var i = 0;
	    return new Iterator(
	      function () { return i === size
	          ? iteratorDone()
	          : iteratorValue(type, reverse ? size - ++i : i++, this$1._value); }
	    );
	  };

	  Repeat.prototype.equals = function equals (other) {
	    return other instanceof Repeat
	      ? is$3(this._value, other._value)
	      : deepEqual(other);
	  };

	  return Repeat;
	}(IndexedSeq));

	var EMPTY_REPEAT;

	function fromJS(value, converter) {
	  return fromJSWith(
	    [],
	    converter || defaultConverter,
	    value,
	    '',
	    converter && converter.length > 2 ? [] : undefined,
	    { '': value }
	  );
	}

	function fromJSWith(stack, converter, value, key, keyPath, parentValue) {
	  var toSeq = Array.isArray(value)
	    ? IndexedSeq
	    : isPlainObj(value)
	      ? KeyedSeq
	      : null;
	  if (toSeq) {
	    if (~stack.indexOf(value)) {
	      throw new TypeError('Cannot convert circular structure to Immutable');
	    }
	    stack.push(value);
	    keyPath && key !== '' && keyPath.push(key);
	    var converted = converter.call(
	      parentValue,
	      key,
	      toSeq(value).map(function (v, k) { return fromJSWith(stack, converter, v, k, keyPath, value); }
	      ),
	      keyPath && keyPath.slice()
	    );
	    stack.pop();
	    keyPath && keyPath.pop();
	    return converted;
	  }
	  return value;
	}

	function defaultConverter(k, v) {
	  return isKeyed(v) ? v.toMap() : v.toList();
	}

	var version$1 = "4.0.0-rc.11";

	var Immutable = {
	  version: version$1,

	  Collection: Collection$1,
	  // Note: Iterable is deprecated
	  Iterable: Collection$1,

	  Seq: Seq,
	  Map: Map$2,
	  OrderedMap: OrderedMap,
	  List: List$1,
	  Stack: Stack$1,
	  Set: Set$2,
	  OrderedSet: OrderedSet,

	  Record: Record,
	  Range: Range,
	  Repeat: Repeat,

	  is: is$3,
	  fromJS: fromJS,
	  hash: hash,

	  isImmutable: isImmutable,
	  isCollection: isCollection,
	  isKeyed: isKeyed,
	  isIndexed: isIndexed,
	  isAssociative: isAssociative,
	  isOrdered: isOrdered,
	  isValueObject: isValueObject,
	  isSeq: isSeq,
	  isList: isList,
	  isMap: isMap,
	  isOrderedMap: isOrderedMap,
	  isStack: isStack,
	  isSet: isSet,
	  isOrderedSet: isOrderedSet,
	  isRecord: isRecord,

	  get: get$3,
	  getIn: getIn,
	  has: has$2,
	  hasIn: hasIn,
	  merge: merge$1,
	  mergeDeep: mergeDeep,
	  mergeWith: mergeWith$1,
	  mergeDeepWith: mergeDeepWith,
	  remove: remove,
	  removeIn: removeIn,
	  set: set$3,
	  setIn: setIn,
	  update: update,
	  updateIn: updateIn,
	};

	// Note: Iterable is deprecated
	var Iterable = Collection$1;

	var immutable_es = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': Immutable,
		version: version$1,
		Collection: Collection$1,
		Iterable: Iterable,
		Seq: Seq,
		Map: Map$2,
		OrderedMap: OrderedMap,
		List: List$1,
		Stack: Stack$1,
		Set: Set$2,
		OrderedSet: OrderedSet,
		Record: Record,
		Range: Range,
		Repeat: Repeat,
		is: is$3,
		fromJS: fromJS,
		hash: hash,
		isImmutable: isImmutable,
		isCollection: isCollection,
		isKeyed: isKeyed,
		isIndexed: isIndexed,
		isAssociative: isAssociative,
		isOrdered: isOrdered,
		isValueObject: isValueObject,
		get: get$3,
		getIn: getIn,
		has: has$2,
		hasIn: hasIn,
		merge: merge$1,
		mergeDeep: mergeDeep,
		mergeWith: mergeWith$1,
		mergeDeepWith: mergeDeepWith,
		remove: remove,
		removeIn: removeIn,
		set: set$3,
		setIn: setIn,
		update: update,
		updateIn: updateIn
	});

	function warning$6(valid, message) {
	  warningOnce(valid, "[@ant-design/icons] ".concat(message));
	}
	function isIconDefinition(target) {
	  return _typeof(target) === 'object' && typeof target.name === 'string' && typeof target.theme === 'string' && (_typeof(target.icon) === 'object' || typeof target.icon === 'function');
	}
	function normalizeAttrs() {
	  var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  return Object.keys(attrs).reduce(function (acc, key) {
	    var val = attrs[key];

	    switch (key) {
	      case 'class':
	        acc.className = val;
	        delete acc.class;
	        break;

	      default:
	        acc[key] = val;
	    }

	    return acc;
	  }, {});
	}
	function generate(node, key, rootProps) {
	  if (!rootProps) {
	    return react.createElement(node.tag, _objectSpread2$2({
	      key: key
	    }, normalizeAttrs(node.attrs)), (node.children || []).map(function (child, index) {
	      return generate(child, "".concat(key, "-").concat(node.tag, "-").concat(index));
	    }));
	  }

	  return react.createElement(node.tag, _objectSpread2$2(_objectSpread2$2({
	    key: key
	  }, normalizeAttrs(node.attrs)), rootProps), (node.children || []).map(function (child, index) {
	    return generate(child, "".concat(key, "-").concat(node.tag, "-").concat(index));
	  }));
	}
	function getSecondaryColor(primaryColor) {
	  // choose the second color
	  return lib$2.generate(primaryColor)[0];
	}
	function normalizeTwoToneColors(twoToneColor) {
	  if (!twoToneColor) {
	    return [];
	  }

	  return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];
	} // These props make sure that the SVG behaviours like general text.
	// Reference: https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4

	var svgBaseProps = {
	  width: '1em',
	  height: '1em',
	  fill: 'currentColor',
	  'aria-hidden': 'true',
	  focusable: 'false'
	};
	var iconStyles = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
	var cssInjectedFlag = false;
	var useInsertStyles = function useInsertStyles() {
	  var styleStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : iconStyles;
	  react.useEffect(function () {
	    if (!cssInjectedFlag) {
	      insertCss_2(styleStr, {
	        prepend: true
	      });
	      cssInjectedFlag = true;
	    }
	  }, []);
	};

	var twoToneColorPalette = {
	  primaryColor: '#333',
	  secondaryColor: '#E6E6E6',
	  calculated: false
	};

	function setTwoToneColors(_ref) {
	  var primaryColor = _ref.primaryColor,
	      secondaryColor = _ref.secondaryColor;
	  twoToneColorPalette.primaryColor = primaryColor;
	  twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
	  twoToneColorPalette.calculated = !!secondaryColor;
	}

	function getTwoToneColors() {
	  return _objectSpread2$2({}, twoToneColorPalette);
	}

	var IconBase = function IconBase(props) {
	  var icon = props.icon,
	      className = props.className,
	      onClick = props.onClick,
	      style = props.style,
	      primaryColor = props.primaryColor,
	      secondaryColor = props.secondaryColor,
	      restProps = _objectWithoutProperties$1(props, ["icon", "className", "onClick", "style", "primaryColor", "secondaryColor"]);

	  var colors = twoToneColorPalette;

	  if (primaryColor) {
	    colors = {
	      primaryColor: primaryColor,
	      secondaryColor: secondaryColor || getSecondaryColor(primaryColor)
	    };
	  }

	  useInsertStyles();
	  warning$6(isIconDefinition(icon), "icon should be icon definiton, but got ".concat(icon));

	  if (!isIconDefinition(icon)) {
	    return null;
	  }

	  var target = icon;

	  if (target && typeof target.icon === 'function') {
	    target = _objectSpread2$2(_objectSpread2$2({}, target), {}, {
	      icon: target.icon(colors.primaryColor, colors.secondaryColor)
	    });
	  }

	  return generate(target.icon, "svg-".concat(target.name), _objectSpread2$2({
	    className: className,
	    onClick: onClick,
	    style: style,
	    'data-icon': target.name,
	    width: '1em',
	    height: '1em',
	    fill: 'currentColor',
	    'aria-hidden': 'true'
	  }, restProps));
	};

	IconBase.displayName = 'IconReact';
	IconBase.getTwoToneColors = getTwoToneColors;
	IconBase.setTwoToneColors = setTwoToneColors;

	function setTwoToneColor(twoToneColor) {
	  var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor),
	      _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2),
	      primaryColor = _normalizeTwoToneColo2[0],
	      secondaryColor = _normalizeTwoToneColo2[1];

	  return IconBase.setTwoToneColors({
	    primaryColor: primaryColor,
	    secondaryColor: secondaryColor
	  });
	}
	function getTwoToneColor() {
	  var colors = IconBase.getTwoToneColors();

	  if (!colors.calculated) {
	    return colors.primaryColor;
	  }

	  return [colors.primaryColor, colors.secondaryColor];
	}

	// should move it to antd main repo?

	setTwoToneColor('#1890ff');
	var Icon = react.forwardRef(function (props, ref) {
	  var className = props.className,
	      icon = props.icon,
	      spin = props.spin,
	      rotate = props.rotate,
	      tabIndex = props.tabIndex,
	      onClick = props.onClick,
	      twoToneColor = props.twoToneColor,
	      restProps = _objectWithoutProperties$1(props, ["className", "icon", "spin", "rotate", "tabIndex", "onClick", "twoToneColor"]);

	  var classString = classnames('anticon', _defineProperty$2({}, "anticon-".concat(icon.name), Boolean(icon.name)), className);
	  var svgClassString = classnames({
	    'anticon-spin': !!spin || icon.name === 'loading'
	  });
	  var iconTabIndex = tabIndex;

	  if (iconTabIndex === undefined && onClick) {
	    iconTabIndex = -1;
	  }

	  var svgStyle = rotate ? {
	    msTransform: "rotate(".concat(rotate, "deg)"),
	    transform: "rotate(".concat(rotate, "deg)")
	  } : undefined;

	  var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor),
	      _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2),
	      primaryColor = _normalizeTwoToneColo2[0],
	      secondaryColor = _normalizeTwoToneColo2[1];

	  return react.createElement("span", Object.assign({
	    role: "img",
	    "aria-label": icon.name
	  }, restProps, {
	    ref: ref,
	    tabIndex: iconTabIndex,
	    onClick: onClick,
	    className: classString
	  }), react.createElement(IconBase, {
	    className: svgClassString,
	    icon: icon,
	    primaryColor: primaryColor,
	    secondaryColor: secondaryColor,
	    style: svgStyle
	  }));
	});
	Icon.displayName = 'AntdIcon';
	Icon.getTwoToneColor = getTwoToneColor;
	Icon.setTwoToneColor = setTwoToneColor;

	// This icon file is generated automatically.
	var CaretLeftOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M689 165.1L308.2 493.5c-10.9 9.4-10.9 27.5 0 37L689 858.9c14.2 12.2 35 1.2 35-18.5V183.6c0-19.7-20.8-30.7-35-18.5z" } }] }, "name": "caret-left", "theme": "outlined" };

	// GENERATE BY ./scripts/generate.ts

	var CaretLeftOutlined$1 = function CaretLeftOutlined$1(props, ref) {
	  return react.createElement(Icon, Object.assign({}, props, {
	    ref: ref,
	    icon: CaretLeftOutlined
	  }));
	};

	CaretLeftOutlined$1.displayName = 'CaretLeftOutlined';
	var CaretLeftOutlined$2 = react.forwardRef(CaretLeftOutlined$1);

	// This icon file is generated automatically.
	var CaretRightOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M715.8 493.5L335 165.1c-14.2-12.2-35-1.2-35 18.5v656.8c0 19.7 20.8 30.7 35 18.5l380.8-328.4c10.9-9.4 10.9-27.6 0-37z" } }] }, "name": "caret-right", "theme": "outlined" };

	// GENERATE BY ./scripts/generate.ts

	var CaretRightOutlined$1 = function CaretRightOutlined$1(props, ref) {
	  return react.createElement(Icon, Object.assign({}, props, {
	    ref: ref,
	    icon: CaretRightOutlined
	  }));
	};

	CaretRightOutlined$1.displayName = 'CaretRightOutlined';
	var CaretRightOutlined$2 = react.forwardRef(CaretRightOutlined$1);

	// This icon file is generated automatically.
	var LockOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM332 240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224H332V240zm460 600H232V536h560v304zM484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 10-56 0z" } }] }, "name": "lock", "theme": "outlined" };

	// GENERATE BY ./scripts/generate.ts

	var LockOutlined$1 = function LockOutlined$1(props, ref) {
	  return react.createElement(Icon, Object.assign({}, props, {
	    ref: ref,
	    icon: LockOutlined
	  }));
	};

	LockOutlined$1.displayName = 'LockOutlined';
	var LockOutlined$2 = react.forwardRef(LockOutlined$1);

	// This icon file is generated automatically.
	var UserOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M858.5 763.6a374 374 0 00-80.6-119.5 375.63 375.63 0 00-119.5-80.6c-.4-.2-.8-.3-1.2-.5C719.5 518 760 444.7 760 362c0-137-111-248-248-248S264 225 264 362c0 82.7 40.5 156 102.8 201.1-.4.2-.8.3-1.2.5-44.8 18.9-85 46-119.5 80.6a375.63 375.63 0 00-80.6 119.5A371.7 371.7 0 00136 901.8a8 8 0 008 8.2h60c4.4 0 7.9-3.5 8-7.8 2-77.2 33-149.5 87.8-204.3 56.7-56.7 132-87.9 212.2-87.9s155.5 31.2 212.2 87.9C779 752.7 810 825 812 902.2c.1 4.4 3.6 7.8 8 7.8h60a8 8 0 008-8.2c-1-47.8-10.9-94.3-29.5-138.2zM512 534c-45.9 0-89.1-17.9-121.6-50.4S340 407.9 340 362c0-45.9 17.9-89.1 50.4-121.6S466.1 190 512 190s89.1 17.9 121.6 50.4S684 316.1 684 362c0 45.9-17.9 89.1-50.4 121.6S557.9 534 512 534z" } }] }, "name": "user", "theme": "outlined" };

	// GENERATE BY ./scripts/generate.ts

	var UserOutlined$1 = function UserOutlined$1(props, ref) {
	  return react.createElement(Icon, Object.assign({}, props, {
	    ref: ref,
	    icon: UserOutlined
	  }));
	};

	UserOutlined$1.displayName = 'UserOutlined';
	var UserOutlined$2 = react.forwardRef(UserOutlined$1);

	var Icon$1 = react.forwardRef(function (props, ref) {
	  var className = props.className,
	      Component = props.component,
	      viewBox = props.viewBox,
	      spin = props.spin,
	      rotate = props.rotate,
	      tabIndex = props.tabIndex,
	      onClick = props.onClick,
	      children = props.children,
	      restProps = _objectWithoutProperties$1(props, ["className", "component", "viewBox", "spin", "rotate", "tabIndex", "onClick", "children"]);

	  warning$6(Boolean(Component || children), 'Should have `component` prop or `children`.');
	  useInsertStyles();
	  var classString = classnames('anticon', className);
	  var svgClassString = classnames({
	    'anticon-spin': !!spin
	  });
	  var svgStyle = rotate ? {
	    msTransform: "rotate(".concat(rotate, "deg)"),
	    transform: "rotate(".concat(rotate, "deg)")
	  } : undefined;

	  var innerSvgProps = _objectSpread2$2(_objectSpread2$2({}, svgBaseProps), {}, {
	    className: svgClassString,
	    style: svgStyle,
	    viewBox: viewBox
	  });

	  if (!viewBox) {
	    delete innerSvgProps.viewBox;
	  } // component > children


	  var renderInnerNode = function renderInnerNode() {
	    if (Component) {
	      return react.createElement(Component, Object.assign({}, innerSvgProps), children);
	    }

	    if (children) {
	      warning$6(Boolean(viewBox) || react.Children.count(children) === 1 && react.isValidElement(children) && react.Children.only(children).type === 'use', 'Make sure that you provide correct `viewBox`' + ' prop (default `0 0 1024 1024`) to the icon.');
	      return react.createElement("svg", Object.assign({}, innerSvgProps, {
	        viewBox: viewBox
	      }), children);
	    }

	    return null;
	  };

	  var iconTabIndex = tabIndex;

	  if (iconTabIndex === undefined && onClick) {
	    iconTabIndex = -1;
	  }

	  return react.createElement("span", Object.assign({
	    role: "img"
	  }, restProps, {
	    ref: ref,
	    tabIndex: iconTabIndex,
	    onClick: onClick,
	    className: classString
	  }), renderInnerNode());
	});
	Icon$1.displayName = 'AntdIcon';

	var customCache = new Set();

	function isValidCustomScriptUrl(scriptUrl) {
	  return Boolean(typeof scriptUrl === 'string' && scriptUrl.length && !customCache.has(scriptUrl));
	}

	function createScriptUrlElements(scriptUrls) {
	  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var currentScriptUrl = scriptUrls[index];

	  if (isValidCustomScriptUrl(currentScriptUrl)) {
	    var script = document.createElement('script');
	    script.setAttribute('src', currentScriptUrl);
	    script.setAttribute('data-namespace', currentScriptUrl);

	    if (scriptUrls.length > index + 1) {
	      script.onload = function () {
	        createScriptUrlElements(scriptUrls, index + 1);
	      };

	      script.onerror = function () {
	        createScriptUrlElements(scriptUrls, index + 1);
	      };
	    }

	    customCache.add(currentScriptUrl);
	    document.body.appendChild(script);
	  }
	}

	function create$1() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var scriptUrl = options.scriptUrl,
	      _options$extraCommonP = options.extraCommonProps,
	      extraCommonProps = _options$extraCommonP === void 0 ? {} : _options$extraCommonP;
	  /**
	   * DOM API required.
	   * Make sure in browser environment.
	   * The Custom Icon will create a <script/>
	   * that loads SVG symbols and insert the SVG Element into the document body.
	   */

	  if (scriptUrl && typeof document !== 'undefined' && typeof window !== 'undefined' && typeof document.createElement === 'function') {
	    if (Array.isArray(scriptUrl)) {
	      // å ä¸ºiconfontèµæºä¼æsvgæå¥beforeï¼æä»¥åå è½½ç¸åtypeä¼è¦çåå è½½ï¼ä¸ºäºæ°ç»è¦çé¡ºåºï¼ååæå¥
	      createScriptUrlElements(scriptUrl.reverse());
	    } else {
	      createScriptUrlElements([scriptUrl]);
	    }
	  }

	  var Iconfont = react.forwardRef(function (props, ref) {
	    var type = props.type,
	        children = props.children,
	        restProps = _objectWithoutProperties$1(props, ["type", "children"]); // children > type


	    var content = null;

	    if (props.type) {
	      content = react.createElement("use", {
	        xlinkHref: "#".concat(type)
	      });
	    }

	    if (children) {
	      content = children;
	    }

	    return react.createElement(Icon$1, Object.assign({}, extraCommonProps, restProps, {
	      ref: ref
	    }), content);
	  });
	  Iconfont.displayName = 'Iconfont';
	  return Iconfont;
	}

	function createThunkMiddleware(extraArgument) {
	  return function (_ref) {
	    var dispatch = _ref.dispatch,
	        getState = _ref.getState;
	    return function (next) {
	      return function (action) {
	        if (typeof action === 'function') {
	          return action(dispatch, getState, extraArgument);
	        }

	        return next(action);
	      };
	    };
	  };
	}

	var thunk = createThunkMiddleware();
	thunk.withExtraArgument = createThunkMiddleware;

	var KEY_PREFIX = 'persist:';
	var FLUSH = 'persist/FLUSH';
	var REHYDRATE = 'persist/REHYDRATE';
	var PAUSE = 'persist/PAUSE';
	var PERSIST = 'persist/PERSIST';
	var PURGE = 'persist/PURGE';
	var REGISTER = 'persist/REGISTER';
	var DEFAULT_VERSION = -1;

	function _typeof$8(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$8 = function _typeof(obj) { return typeof obj; }; } else { _typeof$8 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$8(obj); }

	function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$h(source, true).forEach(function (key) { _defineProperty$9(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$h(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$9(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	/*
	  autoMergeLevel1: 
	    - merges 1 level of substate
	    - skips substate if already modified
	*/
	function autoMergeLevel1(inboundState, originalState, reducedState, _ref) {
	  var debug = _ref.debug;

	  var newState = _objectSpread$d({}, reducedState); // only rehydrate if inboundState exists and is an object


	  if (inboundState && _typeof$8(inboundState) === 'object') {
	    Object.keys(inboundState).forEach(function (key) {
	      // ignore _persist data
	      if (key === '_persist') return; // if reducer modifies substate, skip auto rehydration

	      if (originalState[key] !== reducedState[key]) {
	        if ( debug) console.log('redux-persist/stateReconciler: sub state for key `%s` modified, skipping.', key);
	        return;
	      } // otherwise hard set the new value


	      newState[key] = inboundState[key];
	    });
	  }

	  if ( debug && inboundState && _typeof$8(inboundState) === 'object') console.log("redux-persist/stateReconciler: rehydrated keys '".concat(Object.keys(inboundState).join(', '), "'"));
	  return newState;
	}

	// @TODO remove once flow < 0.63 support is no longer required.
	function createPersistoid(config) {
	  // defaults
	  var blacklist = config.blacklist || null;
	  var whitelist = config.whitelist || null;
	  var transforms = config.transforms || [];
	  var throttle = config.throttle || 0;
	  var storageKey = "".concat(config.keyPrefix !== undefined ? config.keyPrefix : KEY_PREFIX).concat(config.key);
	  var storage = config.storage;
	  var serialize;

	  if (config.serialize === false) {
	    serialize = function serialize(x) {
	      return x;
	    };
	  } else if (typeof config.serialize === 'function') {
	    serialize = config.serialize;
	  } else {
	    serialize = defaultSerialize;
	  }

	  var writeFailHandler = config.writeFailHandler || null; // initialize stateful values

	  var lastState = {};
	  var stagedState = {};
	  var keysToProcess = [];
	  var timeIterator = null;
	  var writePromise = null;

	  var update = function update(state) {
	    // add any changed keys to the queue
	    Object.keys(state).forEach(function (key) {
	      if (!passWhitelistBlacklist(key)) return; // is keyspace ignored? noop

	      if (lastState[key] === state[key]) return; // value unchanged? noop

	      if (keysToProcess.indexOf(key) !== -1) return; // is key already queued? noop

	      keysToProcess.push(key); // add key to queue
	    }); //if any key is missing in the new state which was present in the lastState,
	    //add it for processing too

	    Object.keys(lastState).forEach(function (key) {
	      if (state[key] === undefined && passWhitelistBlacklist(key) && keysToProcess.indexOf(key) === -1 && lastState[key] !== undefined) {
	        keysToProcess.push(key);
	      }
	    }); // start the time iterator if not running (read: throttle)

	    if (timeIterator === null) {
	      timeIterator = setInterval(processNextKey, throttle);
	    }

	    lastState = state;
	  };

	  function processNextKey() {
	    if (keysToProcess.length === 0) {
	      if (timeIterator) clearInterval(timeIterator);
	      timeIterator = null;
	      return;
	    }

	    var key = keysToProcess.shift();
	    var endState = transforms.reduce(function (subState, transformer) {
	      return transformer.in(subState, key, lastState);
	    }, lastState[key]);

	    if (endState !== undefined) {
	      try {
	        stagedState[key] = serialize(endState);
	      } catch (err) {
	        console.error('redux-persist/createPersistoid: error serializing state', err);
	      }
	    } else {
	      //if the endState is undefined, no need to persist the existing serialized content
	      delete stagedState[key];
	    }

	    if (keysToProcess.length === 0) {
	      writeStagedState();
	    }
	  }

	  function writeStagedState() {
	    // cleanup any removed keys just before write.
	    Object.keys(stagedState).forEach(function (key) {
	      if (lastState[key] === undefined) {
	        delete stagedState[key];
	      }
	    });
	    writePromise = storage.setItem(storageKey, serialize(stagedState)).catch(onWriteFail);
	  }

	  function passWhitelistBlacklist(key) {
	    if (whitelist && whitelist.indexOf(key) === -1 && key !== '_persist') return false;
	    if (blacklist && blacklist.indexOf(key) !== -1) return false;
	    return true;
	  }

	  function onWriteFail(err) {
	    // @TODO add fail handlers (typically storage full)
	    if (writeFailHandler) writeFailHandler(err);

	    if (err && "development" !== 'production') {
	      console.error('Error storing data', err);
	    }
	  }

	  var flush = function flush() {
	    while (keysToProcess.length !== 0) {
	      processNextKey();
	    }

	    return writePromise || Promise.resolve();
	  }; // return `persistoid`


	  return {
	    update: update,
	    flush: flush
	  };
	} // @NOTE in the future this may be exposed via config

	function defaultSerialize(data) {
	  return JSON.stringify(data);
	}

	function getStoredState(config) {
	  var transforms = config.transforms || [];
	  var storageKey = "".concat(config.keyPrefix !== undefined ? config.keyPrefix : KEY_PREFIX).concat(config.key);
	  var storage = config.storage;
	  var debug = config.debug;
	  var deserialize;

	  if (config.deserialize === false) {
	    deserialize = function deserialize(x) {
	      return x;
	    };
	  } else if (typeof config.deserialize === 'function') {
	    deserialize = config.deserialize;
	  } else {
	    deserialize = defaultDeserialize;
	  }

	  return storage.getItem(storageKey).then(function (serialized) {
	    if (!serialized) return undefined;else {
	      try {
	        var state = {};
	        var rawState = deserialize(serialized);
	        Object.keys(rawState).forEach(function (key) {
	          state[key] = transforms.reduceRight(function (subState, transformer) {
	            return transformer.out(subState, key, rawState);
	          }, deserialize(rawState[key]));
	        });
	        return state;
	      } catch (err) {
	        if ( debug) console.log("redux-persist/getStoredState: Error restoring data ".concat(serialized), err);
	        throw err;
	      }
	    }
	  });
	}

	function defaultDeserialize(serial) {
	  return JSON.parse(serial);
	}

	function purgeStoredState(config) {
	  var storage = config.storage;
	  var storageKey = "".concat(config.keyPrefix !== undefined ? config.keyPrefix : KEY_PREFIX).concat(config.key);
	  return storage.removeItem(storageKey, warnIfRemoveError);
	}

	function warnIfRemoveError(err) {
	  if (err && "development" !== 'production') {
	    console.error('redux-persist/purgeStoredState: Error purging data stored state', err);
	  }
	}

	function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$i(source, true).forEach(function (key) { _defineProperty$a(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$i(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$a(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties$4(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$3(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

	function _objectWithoutPropertiesLoose$3(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
	var DEFAULT_TIMEOUT = 5000;
	/*
	  @TODO add validation / handling for:
	  - persisting a reducer which has nested _persist
	  - handling actions that fire before reydrate is called
	*/

	function persistReducer(config, baseReducer) {
	  {
	    if (!config) throw new Error('config is required for persistReducer');
	    if (!config.key) throw new Error('key is required in persistor config');
	    if (!config.storage) throw new Error("redux-persist: config.storage is required. Try using one of the provided storage engines `import storage from 'redux-persist/lib/storage'`");
	  }

	  var version = config.version !== undefined ? config.version : DEFAULT_VERSION;
	  var debug = config.debug || false;
	  var stateReconciler = config.stateReconciler === undefined ? autoMergeLevel1 : config.stateReconciler;
	  var getStoredState$1 = config.getStoredState || getStoredState;
	  var timeout = config.timeout !== undefined ? config.timeout : DEFAULT_TIMEOUT;
	  var _persistoid = null;
	  var _purge = false;
	  var _paused = true;

	  var conditionalUpdate = function conditionalUpdate(state) {
	    // update the persistoid only if we are rehydrated and not paused
	    state._persist.rehydrated && _persistoid && !_paused && _persistoid.update(state);
	    return state;
	  };

	  return function (state, action) {
	    var _ref = state || {},
	        _persist = _ref._persist,
	        rest = _objectWithoutProperties$4(_ref, ["_persist"]); // $FlowIgnore need to update State type


	    var restState = rest;

	    if (action.type === PERSIST) {
	      var _sealed = false;

	      var _rehydrate = function _rehydrate(payload, err) {
	        // dev warning if we are already sealed
	        if ( _sealed) console.error("redux-persist: rehydrate for \"".concat(config.key, "\" called after timeout."), payload, err); // only rehydrate if we are not already sealed

	        if (!_sealed) {
	          action.rehydrate(config.key, payload, err);
	          _sealed = true;
	        }
	      };

	      timeout && setTimeout(function () {
	        !_sealed && _rehydrate(undefined, new Error("redux-persist: persist timed out for persist key \"".concat(config.key, "\"")));
	      }, timeout); // @NOTE PERSIST resumes if paused.

	      _paused = false; // @NOTE only ever create persistoid once, ensure we call it at least once, even if _persist has already been set

	      if (!_persistoid) _persistoid = createPersistoid(config); // @NOTE PERSIST can be called multiple times, noop after the first

	      if (_persist) {
	        // We still need to call the base reducer because there might be nested
	        // uses of persistReducer which need to be aware of the PERSIST action
	        return _objectSpread$e({}, baseReducer(restState, action), {
	          _persist: _persist
	        });
	      }

	      if (typeof action.rehydrate !== 'function' || typeof action.register !== 'function') throw new Error('redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.');
	      action.register(config.key);
	      getStoredState$1(config).then(function (restoredState) {
	        var migrate = config.migrate || function (s, v) {
	          return Promise.resolve(s);
	        };

	        migrate(restoredState, version).then(function (migratedState) {
	          _rehydrate(migratedState);
	        }, function (migrateErr) {
	          if ( migrateErr) console.error('redux-persist: migration error', migrateErr);

	          _rehydrate(undefined, migrateErr);
	        });
	      }, function (err) {
	        _rehydrate(undefined, err);
	      });
	      return _objectSpread$e({}, baseReducer(restState, action), {
	        _persist: {
	          version: version,
	          rehydrated: false
	        }
	      });
	    } else if (action.type === PURGE) {
	      _purge = true;
	      action.result(purgeStoredState(config));
	      return _objectSpread$e({}, baseReducer(restState, action), {
	        _persist: _persist
	      });
	    } else if (action.type === FLUSH) {
	      action.result(_persistoid && _persistoid.flush());
	      return _objectSpread$e({}, baseReducer(restState, action), {
	        _persist: _persist
	      });
	    } else if (action.type === PAUSE) {
	      _paused = true;
	    } else if (action.type === REHYDRATE) {
	      // noop on restState if purging
	      if (_purge) return _objectSpread$e({}, restState, {
	        _persist: _objectSpread$e({}, _persist, {
	          rehydrated: true
	        }) // @NOTE if key does not match, will continue to default else below

	      });

	      if (action.key === config.key) {
	        var reducedState = baseReducer(restState, action);
	        var inboundState = action.payload; // only reconcile state if stateReconciler and inboundState are both defined

	        var reconciledRest = stateReconciler !== false && inboundState !== undefined ? stateReconciler(inboundState, state, reducedState, config) : reducedState;

	        var _newState = _objectSpread$e({}, reconciledRest, {
	          _persist: _objectSpread$e({}, _persist, {
	            rehydrated: true
	          })
	        });

	        return conditionalUpdate(_newState);
	      }
	    } // if we have not already handled PERSIST, straight passthrough


	    if (!_persist) return baseReducer(state, action); // run base reducer:
	    // is state modified ? return original : return updated

	    var newState = baseReducer(restState, action);
	    if (newState === restState) return state;
	    return conditionalUpdate(_objectSpread$e({}, newState, {
	      _persist: _persist
	    }));
	  };
	}

	function _typeof$9(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$9 = function _typeof(obj) { return typeof obj; }; } else { _typeof$9 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$9(obj); }

	function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$j(source, true).forEach(function (key) { _defineProperty$b(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$j(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$b(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	/*
	  autoMergeLevel2: 
	    - merges 2 level of substate
	    - skips substate if already modified
	    - this is essentially redux-perist v4 behavior
	*/
	function autoMergeLevel2(inboundState, originalState, reducedState, _ref) {
	  var debug = _ref.debug;

	  var newState = _objectSpread$f({}, reducedState); // only rehydrate if inboundState exists and is an object


	  if (inboundState && _typeof$9(inboundState) === 'object') {
	    Object.keys(inboundState).forEach(function (key) {
	      // ignore _persist data
	      if (key === '_persist') return; // if reducer modifies substate, skip auto rehydration

	      if (originalState[key] !== reducedState[key]) {
	        if ( debug) console.log('redux-persist/stateReconciler: sub state for key `%s` modified, skipping.', key);
	        return;
	      }

	      if (isPlainEnoughObject(reducedState[key])) {
	        // if object is plain enough shallow merge the new values (hence "Level2")
	        newState[key] = _objectSpread$f({}, newState[key], {}, inboundState[key]);
	        return;
	      } // otherwise hard set


	      newState[key] = inboundState[key];
	    });
	  }

	  if ( debug && inboundState && _typeof$9(inboundState) === 'object') console.log("redux-persist/stateReconciler: rehydrated keys '".concat(Object.keys(inboundState).join(', '), "'"));
	  return newState;
	}

	function isPlainEnoughObject(o) {
	  return o !== null && !Array.isArray(o) && _typeof$9(o) === 'object';
	}

	// combineReducers + persistReducer with stateReconciler defaulted to autoMergeLevel2
	function persistCombineReducers(config, reducers) {
	  config.stateReconciler = config.stateReconciler === undefined ? autoMergeLevel2 : config.stateReconciler;
	  return persistReducer(config, combineReducers(reducers));
	}

	function _toConsumableArray$3(arr) { return _arrayWithoutHoles$3(arr) || _iterableToArray$3(arr) || _nonIterableSpread$3(); }

	function _nonIterableSpread$3() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

	function _iterableToArray$3(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

	function _arrayWithoutHoles$3(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

	function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$k(source, true).forEach(function (key) { _defineProperty$c(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$k(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$c(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	var initialState = {
	  registry: [],
	  bootstrapped: false
	};

	var persistorReducer = function persistorReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments.length > 1 ? arguments[1] : undefined;

	  switch (action.type) {
	    case REGISTER:
	      return _objectSpread$g({}, state, {
	        registry: [].concat(_toConsumableArray$3(state.registry), [action.key])
	      });

	    case REHYDRATE:
	      var firstIndex = state.registry.indexOf(action.key);

	      var registry = _toConsumableArray$3(state.registry);

	      registry.splice(firstIndex, 1);
	      return _objectSpread$g({}, state, {
	        registry: registry,
	        bootstrapped: registry.length === 0
	      });

	    default:
	      return state;
	  }
	};

	function persistStore(store, options, cb) {
	  // help catch incorrect usage of passing PersistConfig in as PersistorOptions
	  {
	    var optionsToTest = options || {};
	    var bannedKeys = ['blacklist', 'whitelist', 'transforms', 'storage', 'keyPrefix', 'migrate'];
	    bannedKeys.forEach(function (k) {
	      if (!!optionsToTest[k]) console.error("redux-persist: invalid option passed to persistStore: \"".concat(k, "\". You may be incorrectly passing persistConfig into persistStore, whereas it should be passed into persistReducer."));
	    });
	  }

	  var boostrappedCb = cb || false;

	  var _pStore = createStore(persistorReducer, initialState, options && options.enhancer ? options.enhancer : undefined);

	  var register = function register(key) {
	    _pStore.dispatch({
	      type: REGISTER,
	      key: key
	    });
	  };

	  var rehydrate = function rehydrate(key, payload, err) {
	    var rehydrateAction = {
	      type: REHYDRATE,
	      payload: payload,
	      err: err,
	      key: key // dispatch to `store` to rehydrate and `persistor` to track result

	    };
	    store.dispatch(rehydrateAction);

	    _pStore.dispatch(rehydrateAction);

	    if (boostrappedCb && persistor.getState().bootstrapped) {
	      boostrappedCb();
	      boostrappedCb = false;
	    }
	  };

	  var persistor = _objectSpread$g({}, _pStore, {
	    purge: function purge() {
	      var results = [];
	      store.dispatch({
	        type: PURGE,
	        result: function result(purgeResult) {
	          results.push(purgeResult);
	        }
	      });
	      return Promise.all(results);
	    },
	    flush: function flush() {
	      var results = [];
	      store.dispatch({
	        type: FLUSH,
	        result: function result(flushResult) {
	          results.push(flushResult);
	        }
	      });
	      return Promise.all(results);
	    },
	    pause: function pause() {
	      store.dispatch({
	        type: PAUSE
	      });
	    },
	    persist: function persist() {
	      store.dispatch({
	        type: PERSIST,
	        register: register,
	        rehydrate: rehydrate
	      });
	    }
	  });

	  if (!(options && options.manualPersist)) {
	    persistor.persist();
	  }

	  return persistor;
	}

	function createMigrate(migrations, config) {
	  var _ref = config || {},
	      debug = _ref.debug;

	  return function (state, currentVersion) {
	    if (!state) {
	      if ( debug) console.log('redux-persist: no inbound state, skipping migration');
	      return Promise.resolve(undefined);
	    }

	    var inboundVersion = state._persist && state._persist.version !== undefined ? state._persist.version : DEFAULT_VERSION;

	    if (inboundVersion === currentVersion) {
	      if ( debug) console.log('redux-persist: versions match, noop migration');
	      return Promise.resolve(state);
	    }

	    if (inboundVersion > currentVersion) {
	      console.error('redux-persist: downgrading version is not supported');
	      return Promise.resolve(state);
	    }

	    var migrationKeys = Object.keys(migrations).map(function (ver) {
	      return parseInt(ver);
	    }).filter(function (key) {
	      return currentVersion >= key && key > inboundVersion;
	    }).sort(function (a, b) {
	      return a - b;
	    });
	    if ( debug) console.log('redux-persist: migrationKeys', migrationKeys);

	    try {
	      var migratedState = migrationKeys.reduce(function (state, versionKey) {
	        if ("development" !== 'production' && debug) console.log('redux-persist: running migration for versionKey', versionKey);
	        return migrations[versionKey](state);
	      }, state);
	      return Promise.resolve(migratedState);
	    } catch (err) {
	      return Promise.reject(err);
	    }
	  };
	}

	function createTransform( // @NOTE inbound: transform state coming from redux on its way to being serialized and stored
	inbound, // @NOTE outbound: transform state coming from storage, on its way to be rehydrated into redux
	outbound) {
	  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  var whitelist = config.whitelist || null;
	  var blacklist = config.blacklist || null;

	  function whitelistBlacklistCheck(key) {
	    if (whitelist && whitelist.indexOf(key) === -1) return true;
	    if (blacklist && blacklist.indexOf(key) !== -1) return true;
	    return false;
	  }

	  return {
	    in: function _in(state, key, fullState) {
	      return !whitelistBlacklistCheck(key) && inbound ? inbound(state, key, fullState) : state;
	    },
	    out: function out(state, key, fullState) {
	      return !whitelistBlacklistCheck(key) && outbound ? outbound(state, key, fullState) : state;
	    }
	  };
	}

	var es = /*#__PURE__*/Object.freeze({
		__proto__: null,
		persistReducer: persistReducer,
		persistCombineReducers: persistCombineReducers,
		persistStore: persistStore,
		createMigrate: createMigrate,
		createTransform: createTransform,
		getStoredState: getStoredState,
		createPersistoid: createPersistoid,
		purgeStoredState: purgeStoredState,
		KEY_PREFIX: KEY_PREFIX,
		FLUSH: FLUSH,
		REHYDRATE: REHYDRATE,
		PAUSE: PAUSE,
		PERSIST: PERSIST,
		PURGE: PURGE,
		REGISTER: REGISTER,
		DEFAULT_VERSION: DEFAULT_VERSION
	});

	var pathGetter_1 = pathGetter;

	function pathGetter(obj, path) {
	  if (path !== '$') {
	    var paths = getPaths(path);
	    for (var i = 0; i < paths.length; i++) {
	      path = paths[i].toString().replace(/\\"/g, '"');
	      if (typeof obj[path] === 'undefined' && i !== paths.length - 1) continue;
	      obj = obj[path];
	    }
	  }
	  return obj;
	}

	function getPaths(pathString) {
	  var regex = /(?:\.(\w+))|(?:\[(\d+)\])|(?:\["((?:[^\\"]|\\.)*)"\])/g;
	  var matches = [];
	  var match;
	  while (match = regex.exec(pathString)) {
	    matches.push( match[1] || match[2] || match[3] );
	  }
	  return matches;
	}

	var getRegexFlags = function getRegexFlags(regex) {
	  var flags = '';
	  if (regex.ignoreCase) flags += 'i';
	  if (regex.global) flags += 'g';
	  if (regex.multiline) flags += 'm';
	  return flags;
	};

	var stringifyFunction = function stringifyFunction(fn, customToString) {
	  if (typeof customToString === 'function') {
	    return customToString(fn);
	  }
	  var str = fn.toString();
	  var match = str.match(/^[^{]*{|^[^=]*=>/);
	  var start = match ? match[0] : '<function> ';
	  var end = str[str.length - 1] === '}' ? '}' : '';
	  return start.replace(/\r\n|\n/g, ' ').replace(/\s+/g, ' ') + ' /* ... */ ' + end;
	};

	var restore = function restore(obj, root) {
	  var type = obj[0];
	  var rest = obj.slice(1);
	  switch(type) {
	    case '$':
	      return pathGetter_1(root, obj);
	    case 'r':
	      var comma = rest.indexOf(',');
	      var flags = rest.slice(0, comma);
	      var source = rest.slice(comma + 1);
	      return RegExp(source, flags);
	    case 'd':
	      return new Date(+rest);
	    case 'f':
	      var fn = function() { throw new Error("can't run jsan parsed function") };
	      fn.toString = function() { return rest; };
	      return fn;
	    case 'u':
	      return undefined;
	    case 'e':
	      var error = new Error(rest);
	      error.stack = 'Stack is unavailable for jsan parsed errors';
	      return error;
	    case 's':
	      return Symbol(rest);
	    case 'g':
	      return Symbol.for(rest);
	    case 'm':
	      return new Map(lib$3.parse(rest));
	    case 'l':
	      return new Set(lib$3.parse(rest));
	    case 'n':
	      return NaN;
	    case 'i':
	      return Infinity;
	    case 'y':
	      return -Infinity;
	    default:
	      console.warn('unknown type', obj);
	      return obj;
	  }
	};

	var utils$2 = {
		getRegexFlags: getRegexFlags,
		stringifyFunction: stringifyFunction,
		restore: restore
	};

	var WMap = typeof WeakMap !== 'undefined'?
	  WeakMap:
	  function() {
	    var keys = [];
	    var values = [];
	    return {
	      set: function(key, value) {
	        keys.push(key);
	        values.push(value);
	      },
	      get: function(key) {
	        for (var i = 0; i < keys.length; i++) {
	          if (keys[i] === key) {
	            return values[i];
	          }
	        }
	      }
	    }
	  };

	// Based on https://github.com/douglascrockford/JSON-js/blob/master/cycle.js

	var decycle = function decycle(object, options, replacer) {

	  var map = new WMap();

	  var noCircularOption = !Object.prototype.hasOwnProperty.call(options, 'circular');
	  var withRefs = options.refs !== false;

	  return (function derez(_value, path, key) {

	    // The derez recurses through the object, producing the deep copy.

	    var i,        // The loop counter
	      name,       // Property name
	      nu;         // The new object or array

	    // typeof null === 'object', so go on if this value is really an object but not
	    // one of the weird builtin objects.

	    var value = typeof replacer === 'function' ? replacer(key || '', _value) : _value;

	    if (options.date && value instanceof Date) {
	      return {$jsan: 'd' + value.getTime()};
	    }
	    if (options.regex && value instanceof RegExp) {
	      return {$jsan: 'r' + utils$2.getRegexFlags(value) + ',' + value.source};
	    }
	    if (options['function'] && typeof value === 'function') {
	      return {$jsan: 'f' + utils$2.stringifyFunction(value, options['function'])}
	    }
	    if (options['nan'] && typeof value === 'number' && isNaN(value)) {
	      return {$jsan: 'n'}
	    }
	    if (options['infinity']) {
	      if (Number.POSITIVE_INFINITY === value) return {$jsan: 'i'}
	      if (Number.NEGATIVE_INFINITY === value) return {$jsan: 'y'}
	    }
	    if (options['undefined'] && value === undefined) {
	      return {$jsan: 'u'}
	    }
	    if (options['error'] && value instanceof Error) {
	      return {$jsan: 'e' + value.message}
	    }
	    if (options['symbol'] && typeof value === 'symbol') {
	      var symbolKey = Symbol.keyFor(value);
	      if (symbolKey !== undefined) {
	        return {$jsan: 'g' + symbolKey}
	      }

	      // 'Symbol(foo)'.slice(7, -1) === 'foo'
	      return {$jsan: 's' + value.toString().slice(7, -1)}
	    }

	    if (options['map'] && typeof Map === 'function' && value instanceof Map && typeof Array.from === 'function') {
	      return {$jsan: 'm' + JSON.stringify(decycle(Array.from(value), options, replacer))}
	    }

	    if (options['set'] && typeof Set === 'function' && value instanceof Set && typeof Array.from === 'function') {
	      return {$jsan: 'l' + JSON.stringify(decycle(Array.from(value), options, replacer))}
	    }

	    if (value && typeof value.toJSON === 'function') {
	      try {
	        value = value.toJSON(key);
	      } catch (error) {
	        var keyString = (key || '$');
	        return "toJSON failed for '" + (map.get(value) || keyString) + "'";
	      }
	    }

	    if (typeof value === 'object' && value !== null &&
	      !(value instanceof Boolean) &&
	      !(value instanceof Date)    &&
	      !(value instanceof Number)  &&
	      !(value instanceof RegExp)  &&
	      !(value instanceof String)  &&
	      !(typeof value === 'symbol')  &&
	      !(value instanceof Error)) {

	        // If the value is an object or array, look to see if we have already
	        // encountered it. If so, return a $ref/path object.

	      if (typeof value === 'object') {
	        var foundPath = map.get(value);
	        if (foundPath) {
	          if (noCircularOption && withRefs) {
	            return {$jsan: foundPath};
	          }
	          if (path.indexOf(foundPath) === 0) {
	            if (!noCircularOption) {
	              return typeof options.circular === 'function'?
	              options.circular(value, path, foundPath):
	              options.circular;
	            }
	            return {$jsan: foundPath};
	          }
	          if (withRefs) return {$jsan: foundPath};
	        }
	        map.set(value, path);
	      }


	      // If it is an array, replicate the array.

	      if (Object.prototype.toString.apply(value) === '[object Array]') {
	          nu = [];
	          for (i = 0; i < value.length; i += 1) {
	              nu[i] = derez(value[i], path + '[' + i + ']', i);
	          }
	      } else {

	        // If it is an object, replicate the object.

	        nu = {};
	        for (name in value) {
	          if (Object.prototype.hasOwnProperty.call(value, name)) {
	            var nextPath = /^\w+$/.test(name) ?
	              '.' + name :
	              '[' + JSON.stringify(name) + ']';
	            nu[name] = name === '$jsan' ? [derez(value[name], path + nextPath)] : derez(value[name], path + nextPath, name);
	          }
	        }
	      }
	      return nu;
	    }
	    return value;
	  }(object, '$'));
	};


	var retrocycle = function retrocycle($) {


	  return (function rez(value) {

	    // The rez function walks recursively through the object looking for $jsan
	    // properties. When it finds one that has a value that is a path, then it
	    // replaces the $jsan object with a reference to the value that is found by
	    // the path.

	    var i, item, name;

	    if (value && typeof value === 'object') {
	      if (Object.prototype.toString.apply(value) === '[object Array]') {
	        for (i = 0; i < value.length; i += 1) {
	          item = value[i];
	          if (item && typeof item === 'object') {
	            if (item.$jsan) {
	              value[i] = utils$2.restore(item.$jsan, $);
	            } else {
	              rez(item);
	            }
	          }
	        }
	      } else {
	        for (name in value) {
	          // base case passed raw object
	          if(typeof value[name] === 'string' && name === '$jsan'){
	            return utils$2.restore(value.$jsan, $);
	          }
	          else {
	            if (name === '$jsan') {
	              value[name] = value[name][0];
	            }
	            if (typeof value[name] === 'object') {
	              item = value[name];
	              if (item && typeof item === 'object') {
	                if (item.$jsan) {
	                  value[name] = utils$2.restore(item.$jsan, $);
	                } else {
	                  rez(item);
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	    return value;
	  }($));
	};

	var cycle = {
		decycle: decycle,
		retrocycle: retrocycle
	};

	var stringify = function stringify(value, replacer, space, _options) {

	  if (arguments.length < 4) {
	    try {
	      if (arguments.length === 1) {
	        return JSON.stringify(value);
	      } else {
	        return JSON.stringify.apply(JSON, arguments);
	      }
	    } catch (e) {}
	  }

	  var options = _options || false;
	  if (typeof options === 'boolean') {
	    options = {
	      'date': options,
	      'function': options,
	      'regex': options,
	      'undefined': options,
	      'error': options,
	      'symbol': options,
	      'map': options,
	      'set': options,
	      'nan': options,
	      'infinity': options
	    };
	  }

	  var decycled = cycle.decycle(value, options, replacer);
	  if (arguments.length === 1) {
	    return JSON.stringify(decycled);
	  } else {
	    // decycle already handles when replacer is a function.
	    return JSON.stringify(decycled, Array.isArray(replacer) ? replacer : null, space);
	  }
	};

	var parse$1 = function parse(text, reviver) {
	  var needsRetrocycle = /"\$jsan"/.test(text);
	  var parsed;
	  if (arguments.length === 1) {
	    parsed = JSON.parse(text);
	  } else {
	    parsed = JSON.parse(text, reviver);
	  }
	  if (needsRetrocycle) {
	    parsed = cycle.retrocycle(parsed);
	  }
	  return parsed;
	};

	var lib$3 = {
		stringify: stringify,
		parse: parse$1
	};

	var jsan = lib$3;

	function mark(data, type, transformMethod) {
	  return {
	    data: transformMethod ? data[transformMethod]() : data,
	    __serializedType__: type,
	  };
	}

	function extract(data, type) {
	  return {
	    data: Object.assign({}, data),
	    __serializedType__: type,
	  };
	}

	function refer(data, type, isArray, refs) {
	  var r = mark(data, type, isArray);
	  if (!refs) return r;
	  for (var i = 0; i < refs.length; i++) {
	    var ref = refs[i];
	    if (typeof ref === 'function' && data instanceof ref) {
	      r.__serializedRef__ = i;
	      return r;
	    }
	  }
	  return r;
	}

	var helpers = {
	  mark: mark,
	  extract: extract,
	  refer: refer,
	};

	// jsan stringify options

	var options = {
	  refs: false, // references can't be resolved on the original Immutable structure
	  date: true,
	  function: true,
	  regex: true,
	  undefined: true,
	  error: true,
	  symbol: true,
	  map: true,
	  set: true,
	  nan: true,
	  infinity: true,
	};

	var mark$1 = helpers.mark;
	var extract$1 = helpers.extract;
	var refer$1 = helpers.refer;


	var serialize = function serialize(
	  Immutable,
	  refs,
	  customReplacer,
	  customReviver
	) {
	  function replacer(key, value) {
	    if (value instanceof Immutable.Record)
	      return refer$1(value, 'ImmutableRecord', 'toObject', refs);
	    if (value instanceof Immutable.Range)
	      return extract$1(value, 'ImmutableRange');
	    if (value instanceof Immutable.Repeat)
	      return extract$1(value, 'ImmutableRepeat');
	    if (Immutable.OrderedMap.isOrderedMap(value))
	      return mark$1(value, 'ImmutableOrderedMap', 'toObject');
	    if (Immutable.Map.isMap(value))
	      return mark$1(value, 'ImmutableMap', 'toObject');
	    if (Immutable.List.isList(value))
	      return mark$1(value, 'ImmutableList', 'toArray');
	    if (Immutable.OrderedSet.isOrderedSet(value))
	      return mark$1(value, 'ImmutableOrderedSet', 'toArray');
	    if (Immutable.Set.isSet(value))
	      return mark$1(value, 'ImmutableSet', 'toArray');
	    if (Immutable.Seq.isSeq(value))
	      return mark$1(value, 'ImmutableSeq', 'toArray');
	    if (Immutable.Stack.isStack(value))
	      return mark$1(value, 'ImmutableStack', 'toArray');
	    return value;
	  }

	  function reviver(key, value) {
	    if (
	      typeof value === 'object' &&
	      value !== null &&
	      '__serializedType__' in value
	    ) {
	      var data = value.data;
	      switch (value.__serializedType__) {
	        case 'ImmutableMap':
	          return Immutable.Map(data);
	        case 'ImmutableOrderedMap':
	          return Immutable.OrderedMap(data);
	        case 'ImmutableList':
	          return Immutable.List(data);
	        case 'ImmutableRange':
	          return Immutable.Range(data._start, data._end, data._step);
	        case 'ImmutableRepeat':
	          return Immutable.Repeat(data._value, data.size);
	        case 'ImmutableSet':
	          return Immutable.Set(data);
	        case 'ImmutableOrderedSet':
	          return Immutable.OrderedSet(data);
	        case 'ImmutableSeq':
	          return Immutable.Seq(data);
	        case 'ImmutableStack':
	          return Immutable.Stack(data);
	        case 'ImmutableRecord':
	          return refs && refs[value.__serializedRef__]
	            ? new refs[value.__serializedRef__](data)
	            : Immutable.Map(data);
	        default:
	          return data;
	      }
	    }
	    return value;
	  }

	  return {
	    replacer: customReplacer
	      ? function (key, value) {
	          return customReplacer(key, value, replacer);
	        }
	      : replacer,
	    reviver: customReviver
	      ? function (key, value) {
	          return customReviver(key, value, reviver);
	        }
	      : reviver,
	    options: options,
	  };
	};

	var immutable = function (Immutable, refs, customReplacer, customReviver) {
	  return {
	    stringify: function (data) {
	      return jsan.stringify(
	        data,
	        serialize(Immutable, refs, customReplacer, customReviver).replacer,
	        null,
	        options
	      );
	    },
	    parse: function (data) {
	      return jsan.parse(
	        data,
	        serialize(Immutable, refs, customReplacer, customReviver).reviver
	      );
	    },
	    serialize: serialize,
	  };
	};

	var remotedevSerialize = {
	  immutable: immutable,
	};

	var reduxPersistTransformImmutable = function (config) {
	  config = config || {};

	  var serializer =  remotedevSerialize.immutable(immutable_es, config.records);

	  return es.createTransform(serializer.stringify, serializer.parse, config)
	};

	var reduxLogger = createCommonjsModule(function (module, exports) {
	!function(e,t){t(exports);}(commonjsGlobal,function(e){function t(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}});}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0});}function n(e,t,r){n.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:r,enumerable:!0});}function o(e,t){o.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0});}function i(e,t){i.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0});}function a(e,t,r){a.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:r,enumerable:!0});}function f(e,t,r){var n=e.slice((r||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,n),e}function u(e){var t="undefined"==typeof e?"undefined":N(e);return "object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function l(e,t,r,c,s,d,p){s=s||[],p=p||[];var g=s.slice(0);if("undefined"!=typeof d){if(c){if("function"==typeof c&&c(g,d))return;if("object"===("undefined"==typeof c?"undefined":N(c))){if(c.prefilter&&c.prefilter(g,d))return;if(c.normalize){var h=c.normalize(g,d,e,t);h&&(e=h[0],t=h[1]);}}}g.push(d);}"regexp"===u(e)&&"regexp"===u(t)&&(e=e.toString(),t=t.toString());var y="undefined"==typeof e?"undefined":N(e),v="undefined"==typeof t?"undefined":N(t),b="undefined"!==y||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),m="undefined"!==v||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!b&&m)r(new o(g,t));else if(!m&&b)r(new i(g,e));else if(u(e)!==u(t))r(new n(g,e,t));else if("date"===u(e)&&e-t!==0)r(new n(g,e,t));else if("object"===y&&null!==e&&null!==t)if(p.filter(function(t){return t.lhs===e}).length)e!==t&&r(new n(g,e,t));else {if(p.push({lhs:e,rhs:t}),Array.isArray(e)){var w;e.length;for(w=0;w<e.length;w++)w>=t.length?r(new a(g,w,new i(void 0,e[w]))):l(e[w],t[w],r,c,g,w,p);for(;w<t.length;)r(new a(g,w,new o(void 0,t[w++])));}else {var x=Object.keys(e),S=Object.keys(t);x.forEach(function(n,o){var i=S.indexOf(n);i>=0?(l(e[n],t[n],r,c,g,n,p),S=f(S,i)):l(e[n],void 0,r,c,g,n,p);}),S.forEach(function(e){l(void 0,t[e],r,c,g,e,p);});}p.length=p.length-1;}else e!==t&&("number"===y&&isNaN(e)&&isNaN(t)||r(new n(g,e,t)));}function c(e,t,r,n){return n=n||[],l(e,t,function(e){e&&n.push(e);},r),n.length?n:void 0}function s(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case"A":s(o[r.path[n]],r.index,r.item);break;case"D":delete o[r.path[n]];break;case"E":case"N":o[r.path[n]]=r.rhs;}}else switch(r.kind){case"A":s(e[t],r.index,r.item);break;case"D":e=f(e,t);break;case"E":case"N":e[t]=r.rhs;}return e}function d(e,t,r){if(e&&t&&r&&r.kind){for(var n=e,o=-1,i=r.path?r.path.length-1:0;++o<i;)"undefined"==typeof n[r.path[o]]&&(n[r.path[o]]="number"==typeof r.path[o]?[]:{}),n=n[r.path[o]];switch(r.kind){case"A":s(r.path?n[r.path[o]]:n,r.index,r.item);break;case"D":delete n[r.path[o]];break;case"E":case"N":n[r.path[o]]=r.rhs;}}}function p(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case"A":p(o[r.path[n]],r.index,r.item);break;case"D":o[r.path[n]]=r.lhs;break;case"E":o[r.path[n]]=r.lhs;break;case"N":delete o[r.path[n]];}}else switch(r.kind){case"A":p(e[t],r.index,r.item);break;case"D":e[t]=r.lhs;break;case"E":e[t]=r.lhs;break;case"N":e=f(e,t);}return e}function g(e,t,r){if(e&&t&&r&&r.kind){var n,o,i=e;for(o=r.path.length-1,n=0;n<o;n++)"undefined"==typeof i[r.path[n]]&&(i[r.path[n]]={}),i=i[r.path[n]];switch(r.kind){case"A":p(i[r.path[n]],r.index,r.item);break;case"D":i[r.path[n]]=r.lhs;break;case"E":i[r.path[n]]=r.lhs;break;case"N":delete i[r.path[n]];}}}function h(e,t,r){if(e&&t){var n=function(n){r&&!r(e,t,n)||d(e,t,n);};l(e,t,n);}}function y(e){return "color: "+F[e].color+"; font-weight: bold"}function v(e){var t=e.kind,r=e.path,n=e.lhs,o=e.rhs,i=e.index,a=e.item;switch(t){case"E":return [r.join("."),n,"â",o];case"N":return [r.join("."),o];case"D":return [r.join(".")];case"A":return [r.join(".")+"["+i+"]",a];default:return []}}function b(e,t,r,n){var o=c(e,t);try{n?r.groupCollapsed("diff"):r.group("diff");}catch(e){r.log("diff");}o?o.forEach(function(e){var t=e.kind,n=v(e);r.log.apply(r,["%c "+F[t].text,y(t)].concat(P(n)));}):r.log("ââ no diff ââ");try{r.groupEnd();}catch(e){r.log("ââ diff end ââ ");}}function m(e,t,r,n){switch("undefined"==typeof e?"undefined":N(e)){case"object":return "function"==typeof e[n]?e[n].apply(e,P(r)):e[n];case"function":return e(t);default:return e}}function w(e){var t=e.timestamp,r=e.duration;return function(e,n,o){var i=["action"];return i.push("%c"+String(e.type)),t&&i.push("%c@ "+n),r&&i.push("%c(in "+o.toFixed(2)+" ms)"),i.join(" ")}}function x(e,t){var r=t.logger,n=t.actionTransformer,o=t.titleFormatter,i=void 0===o?w(t):o,a=t.collapsed,f=t.colors,u=t.level,l=t.diff,c="undefined"==typeof t.titleFormatter;e.forEach(function(o,s){var d=o.started,p=o.startedTime,g=o.action,h=o.prevState,y=o.error,v=o.took,w=o.nextState,x=e[s+1];x&&(w=x.prevState,v=x.started-d);var S=n(g),k="function"==typeof a?a(function(){return w},g,o):a,j=D(p),E=f.title?"color: "+f.title(S)+";":"",A=["color: gray; font-weight: lighter;"];A.push(E),t.timestamp&&A.push("color: gray; font-weight: lighter;"),t.duration&&A.push("color: gray; font-weight: lighter;");var O=i(S,j,v);try{k?f.title&&c?r.groupCollapsed.apply(r,["%c "+O].concat(A)):r.groupCollapsed(O):f.title&&c?r.group.apply(r,["%c "+O].concat(A)):r.group(O);}catch(e){r.log(O);}var N=m(u,S,[h],"prevState"),P=m(u,S,[S],"action"),C=m(u,S,[y,h],"error"),F=m(u,S,[w],"nextState");if(N)if(f.prevState){var L="color: "+f.prevState(h)+"; font-weight: bold";r[N]("%c prev state",L,h);}else r[N]("prev state",h);if(P)if(f.action){var T="color: "+f.action(S)+"; font-weight: bold";r[P]("%c action    ",T,S);}else r[P]("action    ",S);if(y&&C)if(f.error){var M="color: "+f.error(y,h)+"; font-weight: bold;";r[C]("%c error     ",M,y);}else r[C]("error     ",y);if(F)if(f.nextState){var _="color: "+f.nextState(w)+"; font-weight: bold";r[F]("%c next state",_,w);}else r[F]("next state",w);l&&b(h,w,r,k);try{r.groupEnd();}catch(e){r.log("ââ log end ââ");}});}function S(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},L,e),r=t.logger,n=t.stateTransformer,o=t.errorTransformer,i=t.predicate,a=t.logErrors,f=t.diffPredicate;if("undefined"==typeof r)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var u=[];return function(e){var r=e.getState;return function(e){return function(l){if("function"==typeof i&&!i(r,l))return e(l);var c={};u.push(c),c.started=O.now(),c.startedTime=new Date,c.prevState=n(r()),c.action=l;var s=void 0;if(a)try{s=e(l);}catch(e){c.error=o(e);}else s=e(l);c.took=O.now()-c.started,c.nextState=n(r());var d=t.diff&&"function"==typeof f?f(r,l):t.diff;if(x(u,Object.assign({},t,{diff:d})),u.length=0,c.error)throw c.error;return s}}}}var k,j,E=function(e,t){return new Array(t+1).join(e)},A=function(e,t){return E("0",t-e.toString().length)+e},D=function(e){return A(e.getHours(),2)+":"+A(e.getMinutes(),2)+":"+A(e.getSeconds(),2)+"."+A(e.getMilliseconds(),3)},O="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)},C=[];k="object"===("undefined"==typeof commonjsGlobal?"undefined":N(commonjsGlobal))&&commonjsGlobal?commonjsGlobal:"undefined"!=typeof window?window:{},j=k.DeepDiff,j&&C.push(function(){"undefined"!=typeof j&&k.DeepDiff===c&&(k.DeepDiff=j,j=void 0);}),t(n,r),t(o,r),t(i,r),t(a,r),Object.defineProperties(c,{diff:{value:c,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:h,enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:g,enumerable:!0},isConflict:{value:function(){return "undefined"!=typeof j},enumerable:!0},noConflict:{value:function(){return C&&(C.forEach(function(e){e();}),C=null),c},enumerable:!0}});var F={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},L={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return "inherit"},prevState:function(){return "#9E9E9E"},action:function(){return "#03A9F4"},nextState:function(){return "#4CAF50"},error:function(){return "#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,r=e.getState;return "function"==typeof t||"function"==typeof r?S()({dispatch:t,getState:r}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};e.defaults=L,e.createLogger=S,e.logger=T,e.default=T,Object.defineProperty(e,"__esModule",{value:!0});});
	});

	exports.Button = Button;
	exports.CaretLeftOutlined = CaretLeftOutlined$2;
	exports.CaretRightOutlined = CaretRightOutlined$2;
	exports.Col = Col;
	exports.Divider = Divider$1;
	exports.Empty = Empty$2;
	exports.Form = Form$2;
	exports.HashRouter = HashRouter;
	exports.Input = Input;
	exports.LockOutlined = LockOutlined$2;
	exports.Map = Map$2;
	exports.Menu = Menu$1;
	exports.Modal = Modal$1;
	exports.Provider = Provider;
	exports.Redirect = Redirect;
	exports.Route = Route;
	exports.Row = Row;
	exports.Switch = Switch;
	exports.UserOutlined = UserOutlined$2;
	exports._toConsumableArray = _toConsumableArray;
	exports._typeof = _typeof;
	exports.api = api;
	exports.applyMiddleware = applyMiddleware;
	exports.browser = browser$1;
	exports.checkPropTypes_1 = checkPropTypes_1;
	exports.combineReducers = combineReducers;
	exports.commonjsGlobal = commonjsGlobal;
	exports.compose = compose;
	exports.connect = connect;
	exports.create = create$1;
	exports.createCommonjsModule = createCommonjsModule;
	exports.createStore = createStore;
	exports.fromJS = fromJS;
	exports.getDefaultExportFromCjs = getDefaultExportFromCjs;
	exports.global = global$2;
	exports.immutable_es = immutable_es;
	exports.lib = lib$1;
	exports.nextTick = nextTick;
	exports.objectAssign = objectAssign;
	exports.persistReducer = persistReducer;
	exports.persistStore = persistStore;
	exports.react = react;
	exports.reactDom = reactDom;
	exports.reduxLogger = reduxLogger;
	exports.reduxPersistTransformImmutable = reduxPersistTransformImmutable;
	exports.regenerator = regenerator;
	exports.thunk = thunk;
	exports.withRouter = withRouter;

});
